
freertos_2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007548  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000108  08007718  08007718  00017718  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007820  08007820  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  08007820  08007820  00017820  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007828  08007828  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007828  08007828  00017828  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800782c  0800782c  0001782c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08007830  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004e98  20000074  080078a4  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20004f0c  080078a4  00024f0c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001f5b7  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00003bb1  00000000  00000000  0003f65b  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000018c0  00000000  00000000  00043210  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001738  00000000  00000000  00044ad0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00005167  00000000  00000000  00046208  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000148ce  00000000  00000000  0004b36f  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000fd07b  00000000  00000000  0005fc3d  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0015ccb8  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006f44  00000000  00000000  0015cd34  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000074 	.word	0x20000074
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08007700 	.word	0x08007700

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000078 	.word	0x20000078
 800020c:	08007700 	.word	0x08007700

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295
 80002c4:	f000 b972 	b.w	80005ac <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9e08      	ldr	r6, [sp, #32]
 80002e6:	4604      	mov	r4, r0
 80002e8:	4688      	mov	r8, r1
 80002ea:	2b00      	cmp	r3, #0
 80002ec:	d14b      	bne.n	8000386 <__udivmoddi4+0xa6>
 80002ee:	428a      	cmp	r2, r1
 80002f0:	4615      	mov	r5, r2
 80002f2:	d967      	bls.n	80003c4 <__udivmoddi4+0xe4>
 80002f4:	fab2 f282 	clz	r2, r2
 80002f8:	b14a      	cbz	r2, 800030e <__udivmoddi4+0x2e>
 80002fa:	f1c2 0720 	rsb	r7, r2, #32
 80002fe:	fa01 f302 	lsl.w	r3, r1, r2
 8000302:	fa20 f707 	lsr.w	r7, r0, r7
 8000306:	4095      	lsls	r5, r2
 8000308:	ea47 0803 	orr.w	r8, r7, r3
 800030c:	4094      	lsls	r4, r2
 800030e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000312:	0c23      	lsrs	r3, r4, #16
 8000314:	fbb8 f7fe 	udiv	r7, r8, lr
 8000318:	fa1f fc85 	uxth.w	ip, r5
 800031c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000320:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000324:	fb07 f10c 	mul.w	r1, r7, ip
 8000328:	4299      	cmp	r1, r3
 800032a:	d909      	bls.n	8000340 <__udivmoddi4+0x60>
 800032c:	18eb      	adds	r3, r5, r3
 800032e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000332:	f080 811b 	bcs.w	800056c <__udivmoddi4+0x28c>
 8000336:	4299      	cmp	r1, r3
 8000338:	f240 8118 	bls.w	800056c <__udivmoddi4+0x28c>
 800033c:	3f02      	subs	r7, #2
 800033e:	442b      	add	r3, r5
 8000340:	1a5b      	subs	r3, r3, r1
 8000342:	b2a4      	uxth	r4, r4
 8000344:	fbb3 f0fe 	udiv	r0, r3, lr
 8000348:	fb0e 3310 	mls	r3, lr, r0, r3
 800034c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000350:	fb00 fc0c 	mul.w	ip, r0, ip
 8000354:	45a4      	cmp	ip, r4
 8000356:	d909      	bls.n	800036c <__udivmoddi4+0x8c>
 8000358:	192c      	adds	r4, r5, r4
 800035a:	f100 33ff 	add.w	r3, r0, #4294967295
 800035e:	f080 8107 	bcs.w	8000570 <__udivmoddi4+0x290>
 8000362:	45a4      	cmp	ip, r4
 8000364:	f240 8104 	bls.w	8000570 <__udivmoddi4+0x290>
 8000368:	3802      	subs	r0, #2
 800036a:	442c      	add	r4, r5
 800036c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000370:	eba4 040c 	sub.w	r4, r4, ip
 8000374:	2700      	movs	r7, #0
 8000376:	b11e      	cbz	r6, 8000380 <__udivmoddi4+0xa0>
 8000378:	40d4      	lsrs	r4, r2
 800037a:	2300      	movs	r3, #0
 800037c:	e9c6 4300 	strd	r4, r3, [r6]
 8000380:	4639      	mov	r1, r7
 8000382:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000386:	428b      	cmp	r3, r1
 8000388:	d909      	bls.n	800039e <__udivmoddi4+0xbe>
 800038a:	2e00      	cmp	r6, #0
 800038c:	f000 80eb 	beq.w	8000566 <__udivmoddi4+0x286>
 8000390:	2700      	movs	r7, #0
 8000392:	e9c6 0100 	strd	r0, r1, [r6]
 8000396:	4638      	mov	r0, r7
 8000398:	4639      	mov	r1, r7
 800039a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800039e:	fab3 f783 	clz	r7, r3
 80003a2:	2f00      	cmp	r7, #0
 80003a4:	d147      	bne.n	8000436 <__udivmoddi4+0x156>
 80003a6:	428b      	cmp	r3, r1
 80003a8:	d302      	bcc.n	80003b0 <__udivmoddi4+0xd0>
 80003aa:	4282      	cmp	r2, r0
 80003ac:	f200 80fa 	bhi.w	80005a4 <__udivmoddi4+0x2c4>
 80003b0:	1a84      	subs	r4, r0, r2
 80003b2:	eb61 0303 	sbc.w	r3, r1, r3
 80003b6:	2001      	movs	r0, #1
 80003b8:	4698      	mov	r8, r3
 80003ba:	2e00      	cmp	r6, #0
 80003bc:	d0e0      	beq.n	8000380 <__udivmoddi4+0xa0>
 80003be:	e9c6 4800 	strd	r4, r8, [r6]
 80003c2:	e7dd      	b.n	8000380 <__udivmoddi4+0xa0>
 80003c4:	b902      	cbnz	r2, 80003c8 <__udivmoddi4+0xe8>
 80003c6:	deff      	udf	#255	; 0xff
 80003c8:	fab2 f282 	clz	r2, r2
 80003cc:	2a00      	cmp	r2, #0
 80003ce:	f040 808f 	bne.w	80004f0 <__udivmoddi4+0x210>
 80003d2:	1b49      	subs	r1, r1, r5
 80003d4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80003d8:	fa1f f885 	uxth.w	r8, r5
 80003dc:	2701      	movs	r7, #1
 80003de:	fbb1 fcfe 	udiv	ip, r1, lr
 80003e2:	0c23      	lsrs	r3, r4, #16
 80003e4:	fb0e 111c 	mls	r1, lr, ip, r1
 80003e8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003ec:	fb08 f10c 	mul.w	r1, r8, ip
 80003f0:	4299      	cmp	r1, r3
 80003f2:	d907      	bls.n	8000404 <__udivmoddi4+0x124>
 80003f4:	18eb      	adds	r3, r5, r3
 80003f6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003fa:	d202      	bcs.n	8000402 <__udivmoddi4+0x122>
 80003fc:	4299      	cmp	r1, r3
 80003fe:	f200 80cd 	bhi.w	800059c <__udivmoddi4+0x2bc>
 8000402:	4684      	mov	ip, r0
 8000404:	1a59      	subs	r1, r3, r1
 8000406:	b2a3      	uxth	r3, r4
 8000408:	fbb1 f0fe 	udiv	r0, r1, lr
 800040c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000410:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000414:	fb08 f800 	mul.w	r8, r8, r0
 8000418:	45a0      	cmp	r8, r4
 800041a:	d907      	bls.n	800042c <__udivmoddi4+0x14c>
 800041c:	192c      	adds	r4, r5, r4
 800041e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000422:	d202      	bcs.n	800042a <__udivmoddi4+0x14a>
 8000424:	45a0      	cmp	r8, r4
 8000426:	f200 80b6 	bhi.w	8000596 <__udivmoddi4+0x2b6>
 800042a:	4618      	mov	r0, r3
 800042c:	eba4 0408 	sub.w	r4, r4, r8
 8000430:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000434:	e79f      	b.n	8000376 <__udivmoddi4+0x96>
 8000436:	f1c7 0c20 	rsb	ip, r7, #32
 800043a:	40bb      	lsls	r3, r7
 800043c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000440:	ea4e 0e03 	orr.w	lr, lr, r3
 8000444:	fa01 f407 	lsl.w	r4, r1, r7
 8000448:	fa20 f50c 	lsr.w	r5, r0, ip
 800044c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000450:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000454:	4325      	orrs	r5, r4
 8000456:	fbb3 f9f8 	udiv	r9, r3, r8
 800045a:	0c2c      	lsrs	r4, r5, #16
 800045c:	fb08 3319 	mls	r3, r8, r9, r3
 8000460:	fa1f fa8e 	uxth.w	sl, lr
 8000464:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000468:	fb09 f40a 	mul.w	r4, r9, sl
 800046c:	429c      	cmp	r4, r3
 800046e:	fa02 f207 	lsl.w	r2, r2, r7
 8000472:	fa00 f107 	lsl.w	r1, r0, r7
 8000476:	d90b      	bls.n	8000490 <__udivmoddi4+0x1b0>
 8000478:	eb1e 0303 	adds.w	r3, lr, r3
 800047c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000480:	f080 8087 	bcs.w	8000592 <__udivmoddi4+0x2b2>
 8000484:	429c      	cmp	r4, r3
 8000486:	f240 8084 	bls.w	8000592 <__udivmoddi4+0x2b2>
 800048a:	f1a9 0902 	sub.w	r9, r9, #2
 800048e:	4473      	add	r3, lr
 8000490:	1b1b      	subs	r3, r3, r4
 8000492:	b2ad      	uxth	r5, r5
 8000494:	fbb3 f0f8 	udiv	r0, r3, r8
 8000498:	fb08 3310 	mls	r3, r8, r0, r3
 800049c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80004a0:	fb00 fa0a 	mul.w	sl, r0, sl
 80004a4:	45a2      	cmp	sl, r4
 80004a6:	d908      	bls.n	80004ba <__udivmoddi4+0x1da>
 80004a8:	eb1e 0404 	adds.w	r4, lr, r4
 80004ac:	f100 33ff 	add.w	r3, r0, #4294967295
 80004b0:	d26b      	bcs.n	800058a <__udivmoddi4+0x2aa>
 80004b2:	45a2      	cmp	sl, r4
 80004b4:	d969      	bls.n	800058a <__udivmoddi4+0x2aa>
 80004b6:	3802      	subs	r0, #2
 80004b8:	4474      	add	r4, lr
 80004ba:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004be:	fba0 8902 	umull	r8, r9, r0, r2
 80004c2:	eba4 040a 	sub.w	r4, r4, sl
 80004c6:	454c      	cmp	r4, r9
 80004c8:	46c2      	mov	sl, r8
 80004ca:	464b      	mov	r3, r9
 80004cc:	d354      	bcc.n	8000578 <__udivmoddi4+0x298>
 80004ce:	d051      	beq.n	8000574 <__udivmoddi4+0x294>
 80004d0:	2e00      	cmp	r6, #0
 80004d2:	d069      	beq.n	80005a8 <__udivmoddi4+0x2c8>
 80004d4:	ebb1 050a 	subs.w	r5, r1, sl
 80004d8:	eb64 0403 	sbc.w	r4, r4, r3
 80004dc:	fa04 fc0c 	lsl.w	ip, r4, ip
 80004e0:	40fd      	lsrs	r5, r7
 80004e2:	40fc      	lsrs	r4, r7
 80004e4:	ea4c 0505 	orr.w	r5, ip, r5
 80004e8:	e9c6 5400 	strd	r5, r4, [r6]
 80004ec:	2700      	movs	r7, #0
 80004ee:	e747      	b.n	8000380 <__udivmoddi4+0xa0>
 80004f0:	f1c2 0320 	rsb	r3, r2, #32
 80004f4:	fa20 f703 	lsr.w	r7, r0, r3
 80004f8:	4095      	lsls	r5, r2
 80004fa:	fa01 f002 	lsl.w	r0, r1, r2
 80004fe:	fa21 f303 	lsr.w	r3, r1, r3
 8000502:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000506:	4338      	orrs	r0, r7
 8000508:	0c01      	lsrs	r1, r0, #16
 800050a:	fbb3 f7fe 	udiv	r7, r3, lr
 800050e:	fa1f f885 	uxth.w	r8, r5
 8000512:	fb0e 3317 	mls	r3, lr, r7, r3
 8000516:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800051a:	fb07 f308 	mul.w	r3, r7, r8
 800051e:	428b      	cmp	r3, r1
 8000520:	fa04 f402 	lsl.w	r4, r4, r2
 8000524:	d907      	bls.n	8000536 <__udivmoddi4+0x256>
 8000526:	1869      	adds	r1, r5, r1
 8000528:	f107 3cff 	add.w	ip, r7, #4294967295
 800052c:	d22f      	bcs.n	800058e <__udivmoddi4+0x2ae>
 800052e:	428b      	cmp	r3, r1
 8000530:	d92d      	bls.n	800058e <__udivmoddi4+0x2ae>
 8000532:	3f02      	subs	r7, #2
 8000534:	4429      	add	r1, r5
 8000536:	1acb      	subs	r3, r1, r3
 8000538:	b281      	uxth	r1, r0
 800053a:	fbb3 f0fe 	udiv	r0, r3, lr
 800053e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000542:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000546:	fb00 f308 	mul.w	r3, r0, r8
 800054a:	428b      	cmp	r3, r1
 800054c:	d907      	bls.n	800055e <__udivmoddi4+0x27e>
 800054e:	1869      	adds	r1, r5, r1
 8000550:	f100 3cff 	add.w	ip, r0, #4294967295
 8000554:	d217      	bcs.n	8000586 <__udivmoddi4+0x2a6>
 8000556:	428b      	cmp	r3, r1
 8000558:	d915      	bls.n	8000586 <__udivmoddi4+0x2a6>
 800055a:	3802      	subs	r0, #2
 800055c:	4429      	add	r1, r5
 800055e:	1ac9      	subs	r1, r1, r3
 8000560:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000564:	e73b      	b.n	80003de <__udivmoddi4+0xfe>
 8000566:	4637      	mov	r7, r6
 8000568:	4630      	mov	r0, r6
 800056a:	e709      	b.n	8000380 <__udivmoddi4+0xa0>
 800056c:	4607      	mov	r7, r0
 800056e:	e6e7      	b.n	8000340 <__udivmoddi4+0x60>
 8000570:	4618      	mov	r0, r3
 8000572:	e6fb      	b.n	800036c <__udivmoddi4+0x8c>
 8000574:	4541      	cmp	r1, r8
 8000576:	d2ab      	bcs.n	80004d0 <__udivmoddi4+0x1f0>
 8000578:	ebb8 0a02 	subs.w	sl, r8, r2
 800057c:	eb69 020e 	sbc.w	r2, r9, lr
 8000580:	3801      	subs	r0, #1
 8000582:	4613      	mov	r3, r2
 8000584:	e7a4      	b.n	80004d0 <__udivmoddi4+0x1f0>
 8000586:	4660      	mov	r0, ip
 8000588:	e7e9      	b.n	800055e <__udivmoddi4+0x27e>
 800058a:	4618      	mov	r0, r3
 800058c:	e795      	b.n	80004ba <__udivmoddi4+0x1da>
 800058e:	4667      	mov	r7, ip
 8000590:	e7d1      	b.n	8000536 <__udivmoddi4+0x256>
 8000592:	4681      	mov	r9, r0
 8000594:	e77c      	b.n	8000490 <__udivmoddi4+0x1b0>
 8000596:	3802      	subs	r0, #2
 8000598:	442c      	add	r4, r5
 800059a:	e747      	b.n	800042c <__udivmoddi4+0x14c>
 800059c:	f1ac 0c02 	sub.w	ip, ip, #2
 80005a0:	442b      	add	r3, r5
 80005a2:	e72f      	b.n	8000404 <__udivmoddi4+0x124>
 80005a4:	4638      	mov	r0, r7
 80005a6:	e708      	b.n	80003ba <__udivmoddi4+0xda>
 80005a8:	4637      	mov	r7, r6
 80005aa:	e6e9      	b.n	8000380 <__udivmoddi4+0xa0>

080005ac <__aeabi_idiv0>:
 80005ac:	4770      	bx	lr
 80005ae:	bf00      	nop

080005b0 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 80005b0:	b480      	push	{r7}
 80005b2:	b083      	sub	sp, #12
 80005b4:	af00      	add	r7, sp, #0
 80005b6:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80005b8:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80005bc:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 80005c0:	f003 0301 	and.w	r3, r3, #1
 80005c4:	2b00      	cmp	r3, #0
 80005c6:	d013      	beq.n	80005f0 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 80005c8:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80005cc:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 80005d0:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80005d4:	2b00      	cmp	r3, #0
 80005d6:	d00b      	beq.n	80005f0 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 80005d8:	e000      	b.n	80005dc <ITM_SendChar+0x2c>
    {
      __NOP();
 80005da:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 80005dc:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80005e0:	681b      	ldr	r3, [r3, #0]
 80005e2:	2b00      	cmp	r3, #0
 80005e4:	d0f9      	beq.n	80005da <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 80005e6:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80005ea:	687a      	ldr	r2, [r7, #4]
 80005ec:	b2d2      	uxtb	r2, r2
 80005ee:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 80005f0:	687b      	ldr	r3, [r7, #4]
}
 80005f2:	4618      	mov	r0, r3
 80005f4:	370c      	adds	r7, #12
 80005f6:	46bd      	mov	sp, r7
 80005f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005fc:	4770      	bx	lr
	...

08000600 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000600:	b580      	push	{r7, lr}
 8000602:	b082      	sub	sp, #8
 8000604:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000606:	f000 fc58 	bl	8000eba <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800060a:	f000 f827 	bl	800065c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800060e:	f000 f919 	bl	8000844 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8000612:	f000 f8b9 	bl	8000788 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8000616:	f000 f8e7 	bl	80007e8 <MX_USB_OTG_FS_PCD_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 800061a:	f003 fb49 	bl	8003cb0 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 800061e:	4a0a      	ldr	r2, [pc, #40]	; (8000648 <main+0x48>)
 8000620:	2100      	movs	r1, #0
 8000622:	480a      	ldr	r0, [pc, #40]	; (800064c <main+0x4c>)
 8000624:	f003 fbae 	bl	8003d84 <osThreadNew>
 8000628:	4602      	mov	r2, r0
 800062a:	4b09      	ldr	r3, [pc, #36]	; (8000650 <main+0x50>)
 800062c:	601a      	str	r2, [r3, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  xTaskCreate( vTaskFunction, ( signed char * )"Task1", configMINIMAL_STACK_SIZE, NULL, 1, NULL);
 800062e:	2300      	movs	r3, #0
 8000630:	9301      	str	r3, [sp, #4]
 8000632:	2301      	movs	r3, #1
 8000634:	9300      	str	r3, [sp, #0]
 8000636:	2300      	movs	r3, #0
 8000638:	2280      	movs	r2, #128	; 0x80
 800063a:	4906      	ldr	r1, [pc, #24]	; (8000654 <main+0x54>)
 800063c:	4806      	ldr	r0, [pc, #24]	; (8000658 <main+0x58>)
 800063e:	f004 fab3 	bl	8004ba8 <xTaskCreate>
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000642:	f003 fb69 	bl	8003d18 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000646:	e7fe      	b.n	8000646 <main+0x46>
 8000648:	0800774c 	.word	0x0800774c
 800064c:	08000a79 	.word	0x08000a79
 8000650:	200049a4 	.word	0x200049a4
 8000654:	08007724 	.word	0x08007724
 8000658:	08000a49 	.word	0x08000a49

0800065c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800065c:	b580      	push	{r7, lr}
 800065e:	b0b4      	sub	sp, #208	; 0xd0
 8000660:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000662:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8000666:	2230      	movs	r2, #48	; 0x30
 8000668:	2100      	movs	r1, #0
 800066a:	4618      	mov	r0, r3
 800066c:	f006 f95b 	bl	8006926 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000670:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8000674:	2200      	movs	r2, #0
 8000676:	601a      	str	r2, [r3, #0]
 8000678:	605a      	str	r2, [r3, #4]
 800067a:	609a      	str	r2, [r3, #8]
 800067c:	60da      	str	r2, [r3, #12]
 800067e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000680:	f107 0308 	add.w	r3, r7, #8
 8000684:	2284      	movs	r2, #132	; 0x84
 8000686:	2100      	movs	r1, #0
 8000688:	4618      	mov	r0, r3
 800068a:	f006 f94c 	bl	8006926 <memset>

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 800068e:	f001 f851 	bl	8001734 <HAL_PWR_EnableBkUpAccess>
  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000692:	4b3a      	ldr	r3, [pc, #232]	; (800077c <SystemClock_Config+0x120>)
 8000694:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000696:	4a39      	ldr	r2, [pc, #228]	; (800077c <SystemClock_Config+0x120>)
 8000698:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800069c:	6413      	str	r3, [r2, #64]	; 0x40
 800069e:	4b37      	ldr	r3, [pc, #220]	; (800077c <SystemClock_Config+0x120>)
 80006a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80006a6:	607b      	str	r3, [r7, #4]
 80006a8:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80006aa:	4b35      	ldr	r3, [pc, #212]	; (8000780 <SystemClock_Config+0x124>)
 80006ac:	681b      	ldr	r3, [r3, #0]
 80006ae:	4a34      	ldr	r2, [pc, #208]	; (8000780 <SystemClock_Config+0x124>)
 80006b0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80006b4:	6013      	str	r3, [r2, #0]
 80006b6:	4b32      	ldr	r3, [pc, #200]	; (8000780 <SystemClock_Config+0x124>)
 80006b8:	681b      	ldr	r3, [r3, #0]
 80006ba:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80006be:	603b      	str	r3, [r7, #0]
 80006c0:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80006c2:	2301      	movs	r3, #1
 80006c4:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80006c8:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80006cc:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006d0:	2302      	movs	r3, #2
 80006d2:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80006d6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80006da:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.PLL.PLLM = 4;
 80006de:	2304      	movs	r3, #4
 80006e0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
  RCC_OscInitStruct.PLL.PLLN = 216;
 80006e4:	23d8      	movs	r3, #216	; 0xd8
 80006e6:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80006ea:	2302      	movs	r3, #2
 80006ec:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLQ = 9;
 80006f0:	2309      	movs	r3, #9
 80006f2:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006f6:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80006fa:	4618      	mov	r0, r3
 80006fc:	f001 f87a 	bl	80017f4 <HAL_RCC_OscConfig>
 8000700:	4603      	mov	r3, r0
 8000702:	2b00      	cmp	r3, #0
 8000704:	d001      	beq.n	800070a <SystemClock_Config+0xae>
  {
    Error_Handler();
 8000706:	f000 f9d1 	bl	8000aac <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 800070a:	f001 f823 	bl	8001754 <HAL_PWREx_EnableOverDrive>
 800070e:	4603      	mov	r3, r0
 8000710:	2b00      	cmp	r3, #0
 8000712:	d001      	beq.n	8000718 <SystemClock_Config+0xbc>
  {
    Error_Handler();
 8000714:	f000 f9ca 	bl	8000aac <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000718:	230f      	movs	r3, #15
 800071a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800071e:	2302      	movs	r3, #2
 8000720:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000724:	2300      	movs	r3, #0
 8000726:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800072a:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800072e:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000732:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000736:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 800073a:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 800073e:	2107      	movs	r1, #7
 8000740:	4618      	mov	r0, r3
 8000742:	f001 fafb 	bl	8001d3c <HAL_RCC_ClockConfig>
 8000746:	4603      	mov	r3, r0
 8000748:	2b00      	cmp	r3, #0
 800074a:	d001      	beq.n	8000750 <SystemClock_Config+0xf4>
  {
    Error_Handler();
 800074c:	f000 f9ae 	bl	8000aac <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3|RCC_PERIPHCLK_CLK48;
 8000750:	4b0c      	ldr	r3, [pc, #48]	; (8000784 <SystemClock_Config+0x128>)
 8000752:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8000754:	2300      	movs	r3, #0
 8000756:	657b      	str	r3, [r7, #84]	; 0x54
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 8000758:	2300      	movs	r3, #0
 800075a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800075e:	f107 0308 	add.w	r3, r7, #8
 8000762:	4618      	mov	r0, r3
 8000764:	f001 fd14 	bl	8002190 <HAL_RCCEx_PeriphCLKConfig>
 8000768:	4603      	mov	r3, r0
 800076a:	2b00      	cmp	r3, #0
 800076c:	d001      	beq.n	8000772 <SystemClock_Config+0x116>
  {
    Error_Handler();
 800076e:	f000 f99d 	bl	8000aac <Error_Handler>
  }
}
 8000772:	bf00      	nop
 8000774:	37d0      	adds	r7, #208	; 0xd0
 8000776:	46bd      	mov	sp, r7
 8000778:	bd80      	pop	{r7, pc}
 800077a:	bf00      	nop
 800077c:	40023800 	.word	0x40023800
 8000780:	40007000 	.word	0x40007000
 8000784:	00200100 	.word	0x00200100

08000788 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000788:	b580      	push	{r7, lr}
 800078a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 800078c:	4b14      	ldr	r3, [pc, #80]	; (80007e0 <MX_USART3_UART_Init+0x58>)
 800078e:	4a15      	ldr	r2, [pc, #84]	; (80007e4 <MX_USART3_UART_Init+0x5c>)
 8000790:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000792:	4b13      	ldr	r3, [pc, #76]	; (80007e0 <MX_USART3_UART_Init+0x58>)
 8000794:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000798:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800079a:	4b11      	ldr	r3, [pc, #68]	; (80007e0 <MX_USART3_UART_Init+0x58>)
 800079c:	2200      	movs	r2, #0
 800079e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80007a0:	4b0f      	ldr	r3, [pc, #60]	; (80007e0 <MX_USART3_UART_Init+0x58>)
 80007a2:	2200      	movs	r2, #0
 80007a4:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80007a6:	4b0e      	ldr	r3, [pc, #56]	; (80007e0 <MX_USART3_UART_Init+0x58>)
 80007a8:	2200      	movs	r2, #0
 80007aa:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80007ac:	4b0c      	ldr	r3, [pc, #48]	; (80007e0 <MX_USART3_UART_Init+0x58>)
 80007ae:	220c      	movs	r2, #12
 80007b0:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007b2:	4b0b      	ldr	r3, [pc, #44]	; (80007e0 <MX_USART3_UART_Init+0x58>)
 80007b4:	2200      	movs	r2, #0
 80007b6:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80007b8:	4b09      	ldr	r3, [pc, #36]	; (80007e0 <MX_USART3_UART_Init+0x58>)
 80007ba:	2200      	movs	r2, #0
 80007bc:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80007be:	4b08      	ldr	r3, [pc, #32]	; (80007e0 <MX_USART3_UART_Init+0x58>)
 80007c0:	2200      	movs	r2, #0
 80007c2:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80007c4:	4b06      	ldr	r3, [pc, #24]	; (80007e0 <MX_USART3_UART_Init+0x58>)
 80007c6:	2200      	movs	r2, #0
 80007c8:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80007ca:	4805      	ldr	r0, [pc, #20]	; (80007e0 <MX_USART3_UART_Init+0x58>)
 80007cc:	f002 fbb0 	bl	8002f30 <HAL_UART_Init>
 80007d0:	4603      	mov	r3, r0
 80007d2:	2b00      	cmp	r3, #0
 80007d4:	d001      	beq.n	80007da <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 80007d6:	f000 f969 	bl	8000aac <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80007da:	bf00      	nop
 80007dc:	bd80      	pop	{r7, pc}
 80007de:	bf00      	nop
 80007e0:	200049a8 	.word	0x200049a8
 80007e4:	40004800 	.word	0x40004800

080007e8 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 80007e8:	b580      	push	{r7, lr}
 80007ea:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80007ec:	4b14      	ldr	r3, [pc, #80]	; (8000840 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80007ee:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80007f2:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 80007f4:	4b12      	ldr	r3, [pc, #72]	; (8000840 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80007f6:	2206      	movs	r2, #6
 80007f8:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80007fa:	4b11      	ldr	r3, [pc, #68]	; (8000840 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80007fc:	2202      	movs	r2, #2
 80007fe:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8000800:	4b0f      	ldr	r3, [pc, #60]	; (8000840 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000802:	2200      	movs	r2, #0
 8000804:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000806:	4b0e      	ldr	r3, [pc, #56]	; (8000840 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000808:	2202      	movs	r2, #2
 800080a:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 800080c:	4b0c      	ldr	r3, [pc, #48]	; (8000840 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800080e:	2201      	movs	r2, #1
 8000810:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8000812:	4b0b      	ldr	r3, [pc, #44]	; (8000840 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000814:	2200      	movs	r2, #0
 8000816:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000818:	4b09      	ldr	r3, [pc, #36]	; (8000840 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800081a:	2200      	movs	r2, #0
 800081c:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 800081e:	4b08      	ldr	r3, [pc, #32]	; (8000840 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000820:	2201      	movs	r2, #1
 8000822:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000824:	4b06      	ldr	r3, [pc, #24]	; (8000840 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000826:	2200      	movs	r2, #0
 8000828:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800082a:	4805      	ldr	r0, [pc, #20]	; (8000840 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800082c:	f000 fe39 	bl	80014a2 <HAL_PCD_Init>
 8000830:	4603      	mov	r3, r0
 8000832:	2b00      	cmp	r3, #0
 8000834:	d001      	beq.n	800083a <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8000836:	f000 f939 	bl	8000aac <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 800083a:	bf00      	nop
 800083c:	bd80      	pop	{r7, pc}
 800083e:	bf00      	nop
 8000840:	20004a2c 	.word	0x20004a2c

08000844 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000844:	b580      	push	{r7, lr}
 8000846:	b08c      	sub	sp, #48	; 0x30
 8000848:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800084a:	f107 031c 	add.w	r3, r7, #28
 800084e:	2200      	movs	r2, #0
 8000850:	601a      	str	r2, [r3, #0]
 8000852:	605a      	str	r2, [r3, #4]
 8000854:	609a      	str	r2, [r3, #8]
 8000856:	60da      	str	r2, [r3, #12]
 8000858:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800085a:	4b67      	ldr	r3, [pc, #412]	; (80009f8 <MX_GPIO_Init+0x1b4>)
 800085c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800085e:	4a66      	ldr	r2, [pc, #408]	; (80009f8 <MX_GPIO_Init+0x1b4>)
 8000860:	f043 0304 	orr.w	r3, r3, #4
 8000864:	6313      	str	r3, [r2, #48]	; 0x30
 8000866:	4b64      	ldr	r3, [pc, #400]	; (80009f8 <MX_GPIO_Init+0x1b4>)
 8000868:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800086a:	f003 0304 	and.w	r3, r3, #4
 800086e:	61bb      	str	r3, [r7, #24]
 8000870:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000872:	4b61      	ldr	r3, [pc, #388]	; (80009f8 <MX_GPIO_Init+0x1b4>)
 8000874:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000876:	4a60      	ldr	r2, [pc, #384]	; (80009f8 <MX_GPIO_Init+0x1b4>)
 8000878:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800087c:	6313      	str	r3, [r2, #48]	; 0x30
 800087e:	4b5e      	ldr	r3, [pc, #376]	; (80009f8 <MX_GPIO_Init+0x1b4>)
 8000880:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000882:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000886:	617b      	str	r3, [r7, #20]
 8000888:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800088a:	4b5b      	ldr	r3, [pc, #364]	; (80009f8 <MX_GPIO_Init+0x1b4>)
 800088c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800088e:	4a5a      	ldr	r2, [pc, #360]	; (80009f8 <MX_GPIO_Init+0x1b4>)
 8000890:	f043 0301 	orr.w	r3, r3, #1
 8000894:	6313      	str	r3, [r2, #48]	; 0x30
 8000896:	4b58      	ldr	r3, [pc, #352]	; (80009f8 <MX_GPIO_Init+0x1b4>)
 8000898:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800089a:	f003 0301 	and.w	r3, r3, #1
 800089e:	613b      	str	r3, [r7, #16]
 80008a0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80008a2:	4b55      	ldr	r3, [pc, #340]	; (80009f8 <MX_GPIO_Init+0x1b4>)
 80008a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008a6:	4a54      	ldr	r2, [pc, #336]	; (80009f8 <MX_GPIO_Init+0x1b4>)
 80008a8:	f043 0302 	orr.w	r3, r3, #2
 80008ac:	6313      	str	r3, [r2, #48]	; 0x30
 80008ae:	4b52      	ldr	r3, [pc, #328]	; (80009f8 <MX_GPIO_Init+0x1b4>)
 80008b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008b2:	f003 0302 	and.w	r3, r3, #2
 80008b6:	60fb      	str	r3, [r7, #12]
 80008b8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80008ba:	4b4f      	ldr	r3, [pc, #316]	; (80009f8 <MX_GPIO_Init+0x1b4>)
 80008bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008be:	4a4e      	ldr	r2, [pc, #312]	; (80009f8 <MX_GPIO_Init+0x1b4>)
 80008c0:	f043 0308 	orr.w	r3, r3, #8
 80008c4:	6313      	str	r3, [r2, #48]	; 0x30
 80008c6:	4b4c      	ldr	r3, [pc, #304]	; (80009f8 <MX_GPIO_Init+0x1b4>)
 80008c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ca:	f003 0308 	and.w	r3, r3, #8
 80008ce:	60bb      	str	r3, [r7, #8]
 80008d0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80008d2:	4b49      	ldr	r3, [pc, #292]	; (80009f8 <MX_GPIO_Init+0x1b4>)
 80008d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008d6:	4a48      	ldr	r2, [pc, #288]	; (80009f8 <MX_GPIO_Init+0x1b4>)
 80008d8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80008dc:	6313      	str	r3, [r2, #48]	; 0x30
 80008de:	4b46      	ldr	r3, [pc, #280]	; (80009f8 <MX_GPIO_Init+0x1b4>)
 80008e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80008e6:	607b      	str	r3, [r7, #4]
 80008e8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 80008ea:	2200      	movs	r2, #0
 80008ec:	f244 0181 	movw	r1, #16513	; 0x4081
 80008f0:	4842      	ldr	r0, [pc, #264]	; (80009fc <MX_GPIO_Init+0x1b8>)
 80008f2:	f000 fdbd 	bl	8001470 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 80008f6:	2200      	movs	r2, #0
 80008f8:	2140      	movs	r1, #64	; 0x40
 80008fa:	4841      	ldr	r0, [pc, #260]	; (8000a00 <MX_GPIO_Init+0x1bc>)
 80008fc:	f000 fdb8 	bl	8001470 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000900:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000904:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000906:	4b3f      	ldr	r3, [pc, #252]	; (8000a04 <MX_GPIO_Init+0x1c0>)
 8000908:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800090a:	2300      	movs	r3, #0
 800090c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 800090e:	f107 031c 	add.w	r3, r7, #28
 8000912:	4619      	mov	r1, r3
 8000914:	483c      	ldr	r0, [pc, #240]	; (8000a08 <MX_GPIO_Init+0x1c4>)
 8000916:	f000 fc01 	bl	800111c <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_MDC_Pin RMII_RXD0_Pin RMII_RXD1_Pin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 800091a:	2332      	movs	r3, #50	; 0x32
 800091c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800091e:	2302      	movs	r3, #2
 8000920:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000922:	2300      	movs	r3, #0
 8000924:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000926:	2303      	movs	r3, #3
 8000928:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800092a:	230b      	movs	r3, #11
 800092c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800092e:	f107 031c 	add.w	r3, r7, #28
 8000932:	4619      	mov	r1, r3
 8000934:	4834      	ldr	r0, [pc, #208]	; (8000a08 <MX_GPIO_Init+0x1c4>)
 8000936:	f000 fbf1 	bl	800111c <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_REF_CLK_Pin RMII_MDIO_Pin RMII_CRS_DV_Pin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 800093a:	2386      	movs	r3, #134	; 0x86
 800093c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800093e:	2302      	movs	r3, #2
 8000940:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000942:	2300      	movs	r3, #0
 8000944:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000946:	2303      	movs	r3, #3
 8000948:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800094a:	230b      	movs	r3, #11
 800094c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800094e:	f107 031c 	add.w	r3, r7, #28
 8000952:	4619      	mov	r1, r3
 8000954:	482d      	ldr	r0, [pc, #180]	; (8000a0c <MX_GPIO_Init+0x1c8>)
 8000956:	f000 fbe1 	bl	800111c <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 800095a:	f244 0381 	movw	r3, #16513	; 0x4081
 800095e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000960:	2301      	movs	r3, #1
 8000962:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000964:	2300      	movs	r3, #0
 8000966:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000968:	2300      	movs	r3, #0
 800096a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800096c:	f107 031c 	add.w	r3, r7, #28
 8000970:	4619      	mov	r1, r3
 8000972:	4822      	ldr	r0, [pc, #136]	; (80009fc <MX_GPIO_Init+0x1b8>)
 8000974:	f000 fbd2 	bl	800111c <HAL_GPIO_Init>

  /*Configure GPIO pin : RMII_TXD1_Pin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8000978:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800097c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800097e:	2302      	movs	r3, #2
 8000980:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000982:	2300      	movs	r3, #0
 8000984:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000986:	2303      	movs	r3, #3
 8000988:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800098a:	230b      	movs	r3, #11
 800098c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 800098e:	f107 031c 	add.w	r3, r7, #28
 8000992:	4619      	mov	r1, r3
 8000994:	4819      	ldr	r0, [pc, #100]	; (80009fc <MX_GPIO_Init+0x1b8>)
 8000996:	f000 fbc1 	bl	800111c <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 800099a:	2340      	movs	r3, #64	; 0x40
 800099c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800099e:	2301      	movs	r3, #1
 80009a0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009a2:	2300      	movs	r3, #0
 80009a4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009a6:	2300      	movs	r3, #0
 80009a8:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80009aa:	f107 031c 	add.w	r3, r7, #28
 80009ae:	4619      	mov	r1, r3
 80009b0:	4813      	ldr	r0, [pc, #76]	; (8000a00 <MX_GPIO_Init+0x1bc>)
 80009b2:	f000 fbb3 	bl	800111c <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 80009b6:	2380      	movs	r3, #128	; 0x80
 80009b8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009ba:	2300      	movs	r3, #0
 80009bc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009be:	2300      	movs	r3, #0
 80009c0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80009c2:	f107 031c 	add.w	r3, r7, #28
 80009c6:	4619      	mov	r1, r3
 80009c8:	480d      	ldr	r0, [pc, #52]	; (8000a00 <MX_GPIO_Init+0x1bc>)
 80009ca:	f000 fba7 	bl	800111c <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_TX_EN_Pin RMII_TXD0_Pin */
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 80009ce:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 80009d2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009d4:	2302      	movs	r3, #2
 80009d6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009d8:	2300      	movs	r3, #0
 80009da:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009dc:	2303      	movs	r3, #3
 80009de:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80009e0:	230b      	movs	r3, #11
 80009e2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80009e4:	f107 031c 	add.w	r3, r7, #28
 80009e8:	4619      	mov	r1, r3
 80009ea:	4805      	ldr	r0, [pc, #20]	; (8000a00 <MX_GPIO_Init+0x1bc>)
 80009ec:	f000 fb96 	bl	800111c <HAL_GPIO_Init>

}
 80009f0:	bf00      	nop
 80009f2:	3730      	adds	r7, #48	; 0x30
 80009f4:	46bd      	mov	sp, r7
 80009f6:	bd80      	pop	{r7, pc}
 80009f8:	40023800 	.word	0x40023800
 80009fc:	40020400 	.word	0x40020400
 8000a00:	40021800 	.word	0x40021800
 8000a04:	10110000 	.word	0x10110000
 8000a08:	40020800 	.word	0x40020800
 8000a0c:	40020000 	.word	0x40020000

08000a10 <_write>:

/* USER CODE BEGIN 4 */
int _write(int file, char *ptr, int len)
{
 8000a10:	b580      	push	{r7, lr}
 8000a12:	b086      	sub	sp, #24
 8000a14:	af00      	add	r7, sp, #0
 8000a16:	60f8      	str	r0, [r7, #12]
 8000a18:	60b9      	str	r1, [r7, #8]
 8000a1a:	607a      	str	r2, [r7, #4]
	int DataIdx;
	for(DataIdx=0;DataIdx<len;DataIdx++)
 8000a1c:	2300      	movs	r3, #0
 8000a1e:	617b      	str	r3, [r7, #20]
 8000a20:	e009      	b.n	8000a36 <_write+0x26>
	{
		ITM_SendChar(*ptr++);
 8000a22:	68bb      	ldr	r3, [r7, #8]
 8000a24:	1c5a      	adds	r2, r3, #1
 8000a26:	60ba      	str	r2, [r7, #8]
 8000a28:	781b      	ldrb	r3, [r3, #0]
 8000a2a:	4618      	mov	r0, r3
 8000a2c:	f7ff fdc0 	bl	80005b0 <ITM_SendChar>
	for(DataIdx=0;DataIdx<len;DataIdx++)
 8000a30:	697b      	ldr	r3, [r7, #20]
 8000a32:	3301      	adds	r3, #1
 8000a34:	617b      	str	r3, [r7, #20]
 8000a36:	697a      	ldr	r2, [r7, #20]
 8000a38:	687b      	ldr	r3, [r7, #4]
 8000a3a:	429a      	cmp	r2, r3
 8000a3c:	dbf1      	blt.n	8000a22 <_write+0x12>
	}
	return len;
 8000a3e:	687b      	ldr	r3, [r7, #4]
}
 8000a40:	4618      	mov	r0, r3
 8000a42:	3718      	adds	r7, #24
 8000a44:	46bd      	mov	sp, r7
 8000a46:	bd80      	pop	{r7, pc}

08000a48 <vTaskFunction>:


void vTaskFunction( void *pvParameters )
{
 8000a48:	b580      	push	{r7, lr}
 8000a4a:	b084      	sub	sp, #16
 8000a4c:	af00      	add	r7, sp, #0
 8000a4e:	6078      	str	r0, [r7, #4]
	в момент выхода задачи из блокированного состояния */
	portTickType xLastWakeTime;
	/* Переменная xLastWakeTime нуждается в инициализации текущим значением счетчика квантов.
	Это единственный случай, когда ее значение задается явно.
	В дальнейшем ее значение будет автоматически модифицироваться API-функцией vTaskDelayUntil(). */
	xLastWakeTime = xTaskGetTickCount();
 8000a50:	f004 fbba 	bl	80051c8 <xTaskGetTickCount>
 8000a54:	4603      	mov	r3, r0
 8000a56:	60fb      	str	r3, [r7, #12]
	/* Бесконечный цикл */
	for( ;; ){
		printf("%ld \n",xLastWakeTime);
 8000a58:	68fb      	ldr	r3, [r7, #12]
 8000a5a:	4619      	mov	r1, r3
 8000a5c:	4805      	ldr	r0, [pc, #20]	; (8000a74 <vTaskFunction+0x2c>)
 8000a5e:	f005 ff6b 	bl	8006938 <iprintf>
		vTaskDelayUntil( &xLastWakeTime, ( 5000 / portTICK_RATE_MS ) );
 8000a62:	f107 030c 	add.w	r3, r7, #12
 8000a66:	f241 3188 	movw	r1, #5000	; 0x1388
 8000a6a:	4618      	mov	r0, r3
 8000a6c:	f004 f9e2 	bl	8004e34 <vTaskDelayUntil>
	for( ;; ){
 8000a70:	e7f2      	b.n	8000a58 <vTaskFunction+0x10>
 8000a72:	bf00      	nop
 8000a74:	0800772c 	.word	0x0800772c

08000a78 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000a78:	b580      	push	{r7, lr}
 8000a7a:	b082      	sub	sp, #8
 8000a7c:	af00      	add	r7, sp, #0
 8000a7e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000a80:	2001      	movs	r0, #1
 8000a82:	f003 fa25 	bl	8003ed0 <osDelay>
 8000a86:	e7fb      	b.n	8000a80 <StartDefaultTask+0x8>

08000a88 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000a88:	b580      	push	{r7, lr}
 8000a8a:	b082      	sub	sp, #8
 8000a8c:	af00      	add	r7, sp, #0
 8000a8e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8000a90:	687b      	ldr	r3, [r7, #4]
 8000a92:	681b      	ldr	r3, [r3, #0]
 8000a94:	4a04      	ldr	r2, [pc, #16]	; (8000aa8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000a96:	4293      	cmp	r3, r2
 8000a98:	d101      	bne.n	8000a9e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000a9a:	f000 fa1b 	bl	8000ed4 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000a9e:	bf00      	nop
 8000aa0:	3708      	adds	r7, #8
 8000aa2:	46bd      	mov	sp, r7
 8000aa4:	bd80      	pop	{r7, pc}
 8000aa6:	bf00      	nop
 8000aa8:	40010000 	.word	0x40010000

08000aac <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000aac:	b480      	push	{r7}
 8000aae:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ab0:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ab2:	e7fe      	b.n	8000ab2 <Error_Handler+0x6>

08000ab4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ab4:	b580      	push	{r7, lr}
 8000ab6:	b082      	sub	sp, #8
 8000ab8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000aba:	4b11      	ldr	r3, [pc, #68]	; (8000b00 <HAL_MspInit+0x4c>)
 8000abc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000abe:	4a10      	ldr	r2, [pc, #64]	; (8000b00 <HAL_MspInit+0x4c>)
 8000ac0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ac4:	6413      	str	r3, [r2, #64]	; 0x40
 8000ac6:	4b0e      	ldr	r3, [pc, #56]	; (8000b00 <HAL_MspInit+0x4c>)
 8000ac8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000aca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ace:	607b      	str	r3, [r7, #4]
 8000ad0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ad2:	4b0b      	ldr	r3, [pc, #44]	; (8000b00 <HAL_MspInit+0x4c>)
 8000ad4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ad6:	4a0a      	ldr	r2, [pc, #40]	; (8000b00 <HAL_MspInit+0x4c>)
 8000ad8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000adc:	6453      	str	r3, [r2, #68]	; 0x44
 8000ade:	4b08      	ldr	r3, [pc, #32]	; (8000b00 <HAL_MspInit+0x4c>)
 8000ae0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ae2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000ae6:	603b      	str	r3, [r7, #0]
 8000ae8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000aea:	2200      	movs	r2, #0
 8000aec:	210f      	movs	r1, #15
 8000aee:	f06f 0001 	mvn.w	r0, #1
 8000af2:	f000 fae9 	bl	80010c8 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000af6:	bf00      	nop
 8000af8:	3708      	adds	r7, #8
 8000afa:	46bd      	mov	sp, r7
 8000afc:	bd80      	pop	{r7, pc}
 8000afe:	bf00      	nop
 8000b00:	40023800 	.word	0x40023800

08000b04 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000b04:	b580      	push	{r7, lr}
 8000b06:	b08a      	sub	sp, #40	; 0x28
 8000b08:	af00      	add	r7, sp, #0
 8000b0a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b0c:	f107 0314 	add.w	r3, r7, #20
 8000b10:	2200      	movs	r2, #0
 8000b12:	601a      	str	r2, [r3, #0]
 8000b14:	605a      	str	r2, [r3, #4]
 8000b16:	609a      	str	r2, [r3, #8]
 8000b18:	60da      	str	r2, [r3, #12]
 8000b1a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8000b1c:	687b      	ldr	r3, [r7, #4]
 8000b1e:	681b      	ldr	r3, [r3, #0]
 8000b20:	4a17      	ldr	r2, [pc, #92]	; (8000b80 <HAL_UART_MspInit+0x7c>)
 8000b22:	4293      	cmp	r3, r2
 8000b24:	d128      	bne.n	8000b78 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000b26:	4b17      	ldr	r3, [pc, #92]	; (8000b84 <HAL_UART_MspInit+0x80>)
 8000b28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b2a:	4a16      	ldr	r2, [pc, #88]	; (8000b84 <HAL_UART_MspInit+0x80>)
 8000b2c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000b30:	6413      	str	r3, [r2, #64]	; 0x40
 8000b32:	4b14      	ldr	r3, [pc, #80]	; (8000b84 <HAL_UART_MspInit+0x80>)
 8000b34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b36:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000b3a:	613b      	str	r3, [r7, #16]
 8000b3c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000b3e:	4b11      	ldr	r3, [pc, #68]	; (8000b84 <HAL_UART_MspInit+0x80>)
 8000b40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b42:	4a10      	ldr	r2, [pc, #64]	; (8000b84 <HAL_UART_MspInit+0x80>)
 8000b44:	f043 0308 	orr.w	r3, r3, #8
 8000b48:	6313      	str	r3, [r2, #48]	; 0x30
 8000b4a:	4b0e      	ldr	r3, [pc, #56]	; (8000b84 <HAL_UART_MspInit+0x80>)
 8000b4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b4e:	f003 0308 	and.w	r3, r3, #8
 8000b52:	60fb      	str	r3, [r7, #12]
 8000b54:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8000b56:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000b5a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b5c:	2302      	movs	r3, #2
 8000b5e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b60:	2300      	movs	r3, #0
 8000b62:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b64:	2303      	movs	r3, #3
 8000b66:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000b68:	2307      	movs	r3, #7
 8000b6a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000b6c:	f107 0314 	add.w	r3, r7, #20
 8000b70:	4619      	mov	r1, r3
 8000b72:	4805      	ldr	r0, [pc, #20]	; (8000b88 <HAL_UART_MspInit+0x84>)
 8000b74:	f000 fad2 	bl	800111c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000b78:	bf00      	nop
 8000b7a:	3728      	adds	r7, #40	; 0x28
 8000b7c:	46bd      	mov	sp, r7
 8000b7e:	bd80      	pop	{r7, pc}
 8000b80:	40004800 	.word	0x40004800
 8000b84:	40023800 	.word	0x40023800
 8000b88:	40020c00 	.word	0x40020c00

08000b8c <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8000b8c:	b580      	push	{r7, lr}
 8000b8e:	b08a      	sub	sp, #40	; 0x28
 8000b90:	af00      	add	r7, sp, #0
 8000b92:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b94:	f107 0314 	add.w	r3, r7, #20
 8000b98:	2200      	movs	r2, #0
 8000b9a:	601a      	str	r2, [r3, #0]
 8000b9c:	605a      	str	r2, [r3, #4]
 8000b9e:	609a      	str	r2, [r3, #8]
 8000ba0:	60da      	str	r2, [r3, #12]
 8000ba2:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB_OTG_FS)
 8000ba4:	687b      	ldr	r3, [r7, #4]
 8000ba6:	681b      	ldr	r3, [r3, #0]
 8000ba8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000bac:	d141      	bne.n	8000c32 <HAL_PCD_MspInit+0xa6>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bae:	4b23      	ldr	r3, [pc, #140]	; (8000c3c <HAL_PCD_MspInit+0xb0>)
 8000bb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bb2:	4a22      	ldr	r2, [pc, #136]	; (8000c3c <HAL_PCD_MspInit+0xb0>)
 8000bb4:	f043 0301 	orr.w	r3, r3, #1
 8000bb8:	6313      	str	r3, [r2, #48]	; 0x30
 8000bba:	4b20      	ldr	r3, [pc, #128]	; (8000c3c <HAL_PCD_MspInit+0xb0>)
 8000bbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bbe:	f003 0301 	and.w	r3, r3, #1
 8000bc2:	613b      	str	r3, [r7, #16]
 8000bc4:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8000bc6:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8000bca:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bcc:	2302      	movs	r3, #2
 8000bce:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bd0:	2300      	movs	r3, #0
 8000bd2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bd4:	2303      	movs	r3, #3
 8000bd6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000bd8:	230a      	movs	r3, #10
 8000bda:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bdc:	f107 0314 	add.w	r3, r7, #20
 8000be0:	4619      	mov	r1, r3
 8000be2:	4817      	ldr	r0, [pc, #92]	; (8000c40 <HAL_PCD_MspInit+0xb4>)
 8000be4:	f000 fa9a 	bl	800111c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8000be8:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000bec:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000bee:	2300      	movs	r3, #0
 8000bf0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bf2:	2300      	movs	r3, #0
 8000bf4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000bf6:	f107 0314 	add.w	r3, r7, #20
 8000bfa:	4619      	mov	r1, r3
 8000bfc:	4810      	ldr	r0, [pc, #64]	; (8000c40 <HAL_PCD_MspInit+0xb4>)
 8000bfe:	f000 fa8d 	bl	800111c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8000c02:	4b0e      	ldr	r3, [pc, #56]	; (8000c3c <HAL_PCD_MspInit+0xb0>)
 8000c04:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000c06:	4a0d      	ldr	r2, [pc, #52]	; (8000c3c <HAL_PCD_MspInit+0xb0>)
 8000c08:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000c0c:	6353      	str	r3, [r2, #52]	; 0x34
 8000c0e:	4b0b      	ldr	r3, [pc, #44]	; (8000c3c <HAL_PCD_MspInit+0xb0>)
 8000c10:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000c12:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000c16:	60fb      	str	r3, [r7, #12]
 8000c18:	68fb      	ldr	r3, [r7, #12]
 8000c1a:	4b08      	ldr	r3, [pc, #32]	; (8000c3c <HAL_PCD_MspInit+0xb0>)
 8000c1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c1e:	4a07      	ldr	r2, [pc, #28]	; (8000c3c <HAL_PCD_MspInit+0xb0>)
 8000c20:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000c24:	6453      	str	r3, [r2, #68]	; 0x44
 8000c26:	4b05      	ldr	r3, [pc, #20]	; (8000c3c <HAL_PCD_MspInit+0xb0>)
 8000c28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c2a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000c2e:	60bb      	str	r3, [r7, #8]
 8000c30:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8000c32:	bf00      	nop
 8000c34:	3728      	adds	r7, #40	; 0x28
 8000c36:	46bd      	mov	sp, r7
 8000c38:	bd80      	pop	{r7, pc}
 8000c3a:	bf00      	nop
 8000c3c:	40023800 	.word	0x40023800
 8000c40:	40020000 	.word	0x40020000

08000c44 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c44:	b580      	push	{r7, lr}
 8000c46:	b08c      	sub	sp, #48	; 0x30
 8000c48:	af00      	add	r7, sp, #0
 8000c4a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000c4c:	2300      	movs	r3, #0
 8000c4e:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000c50:	2300      	movs	r3, #0
 8000c52:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority ,0);
 8000c54:	2200      	movs	r2, #0
 8000c56:	6879      	ldr	r1, [r7, #4]
 8000c58:	2019      	movs	r0, #25
 8000c5a:	f000 fa35 	bl	80010c8 <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8000c5e:	2019      	movs	r0, #25
 8000c60:	f000 fa4e 	bl	8001100 <HAL_NVIC_EnableIRQ>
  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8000c64:	4b1f      	ldr	r3, [pc, #124]	; (8000ce4 <HAL_InitTick+0xa0>)
 8000c66:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c68:	4a1e      	ldr	r2, [pc, #120]	; (8000ce4 <HAL_InitTick+0xa0>)
 8000c6a:	f043 0301 	orr.w	r3, r3, #1
 8000c6e:	6453      	str	r3, [r2, #68]	; 0x44
 8000c70:	4b1c      	ldr	r3, [pc, #112]	; (8000ce4 <HAL_InitTick+0xa0>)
 8000c72:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c74:	f003 0301 	and.w	r3, r3, #1
 8000c78:	60fb      	str	r3, [r7, #12]
 8000c7a:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000c7c:	f107 0210 	add.w	r2, r7, #16
 8000c80:	f107 0314 	add.w	r3, r7, #20
 8000c84:	4611      	mov	r1, r2
 8000c86:	4618      	mov	r0, r3
 8000c88:	f001 fa50 	bl	800212c <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 8000c8c:	f001 fa3a 	bl	8002104 <HAL_RCC_GetPCLK2Freq>
 8000c90:	4603      	mov	r3, r0
 8000c92:	005b      	lsls	r3, r3, #1
 8000c94:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000c96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000c98:	4a13      	ldr	r2, [pc, #76]	; (8000ce8 <HAL_InitTick+0xa4>)
 8000c9a:	fba2 2303 	umull	r2, r3, r2, r3
 8000c9e:	0c9b      	lsrs	r3, r3, #18
 8000ca0:	3b01      	subs	r3, #1
 8000ca2:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8000ca4:	4b11      	ldr	r3, [pc, #68]	; (8000cec <HAL_InitTick+0xa8>)
 8000ca6:	4a12      	ldr	r2, [pc, #72]	; (8000cf0 <HAL_InitTick+0xac>)
 8000ca8:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8000caa:	4b10      	ldr	r3, [pc, #64]	; (8000cec <HAL_InitTick+0xa8>)
 8000cac:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000cb0:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8000cb2:	4a0e      	ldr	r2, [pc, #56]	; (8000cec <HAL_InitTick+0xa8>)
 8000cb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000cb6:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8000cb8:	4b0c      	ldr	r3, [pc, #48]	; (8000cec <HAL_InitTick+0xa8>)
 8000cba:	2200      	movs	r2, #0
 8000cbc:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000cbe:	4b0b      	ldr	r3, [pc, #44]	; (8000cec <HAL_InitTick+0xa8>)
 8000cc0:	2200      	movs	r2, #0
 8000cc2:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8000cc4:	4809      	ldr	r0, [pc, #36]	; (8000cec <HAL_InitTick+0xa8>)
 8000cc6:	f001 fe53 	bl	8002970 <HAL_TIM_Base_Init>
 8000cca:	4603      	mov	r3, r0
 8000ccc:	2b00      	cmp	r3, #0
 8000cce:	d104      	bne.n	8000cda <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 8000cd0:	4806      	ldr	r0, [pc, #24]	; (8000cec <HAL_InitTick+0xa8>)
 8000cd2:	f001 feaf 	bl	8002a34 <HAL_TIM_Base_Start_IT>
 8000cd6:	4603      	mov	r3, r0
 8000cd8:	e000      	b.n	8000cdc <HAL_InitTick+0x98>
  }

  /* Return function status */
  return HAL_ERROR;
 8000cda:	2301      	movs	r3, #1
}
 8000cdc:	4618      	mov	r0, r3
 8000cde:	3730      	adds	r7, #48	; 0x30
 8000ce0:	46bd      	mov	sp, r7
 8000ce2:	bd80      	pop	{r7, pc}
 8000ce4:	40023800 	.word	0x40023800
 8000ce8:	431bde83 	.word	0x431bde83
 8000cec:	20004e78 	.word	0x20004e78
 8000cf0:	40010000 	.word	0x40010000

08000cf4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000cf4:	b480      	push	{r7}
 8000cf6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000cf8:	e7fe      	b.n	8000cf8 <NMI_Handler+0x4>

08000cfa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000cfa:	b480      	push	{r7}
 8000cfc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000cfe:	e7fe      	b.n	8000cfe <HardFault_Handler+0x4>

08000d00 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d00:	b480      	push	{r7}
 8000d02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d04:	e7fe      	b.n	8000d04 <MemManage_Handler+0x4>

08000d06 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d06:	b480      	push	{r7}
 8000d08:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d0a:	e7fe      	b.n	8000d0a <BusFault_Handler+0x4>

08000d0c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d0c:	b480      	push	{r7}
 8000d0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d10:	e7fe      	b.n	8000d10 <UsageFault_Handler+0x4>

08000d12 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d12:	b480      	push	{r7}
 8000d14:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d16:	bf00      	nop
 8000d18:	46bd      	mov	sp, r7
 8000d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d1e:	4770      	bx	lr

08000d20 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8000d20:	b580      	push	{r7, lr}
 8000d22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000d24:	4802      	ldr	r0, [pc, #8]	; (8000d30 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8000d26:	f001 fefd 	bl	8002b24 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8000d2a:	bf00      	nop
 8000d2c:	bd80      	pop	{r7, pc}
 8000d2e:	bf00      	nop
 8000d30:	20004e78 	.word	0x20004e78

08000d34 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000d34:	b580      	push	{r7, lr}
 8000d36:	b086      	sub	sp, #24
 8000d38:	af00      	add	r7, sp, #0
 8000d3a:	60f8      	str	r0, [r7, #12]
 8000d3c:	60b9      	str	r1, [r7, #8]
 8000d3e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d40:	2300      	movs	r3, #0
 8000d42:	617b      	str	r3, [r7, #20]
 8000d44:	e00a      	b.n	8000d5c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000d46:	f3af 8000 	nop.w
 8000d4a:	4601      	mov	r1, r0
 8000d4c:	68bb      	ldr	r3, [r7, #8]
 8000d4e:	1c5a      	adds	r2, r3, #1
 8000d50:	60ba      	str	r2, [r7, #8]
 8000d52:	b2ca      	uxtb	r2, r1
 8000d54:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d56:	697b      	ldr	r3, [r7, #20]
 8000d58:	3301      	adds	r3, #1
 8000d5a:	617b      	str	r3, [r7, #20]
 8000d5c:	697a      	ldr	r2, [r7, #20]
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	429a      	cmp	r2, r3
 8000d62:	dbf0      	blt.n	8000d46 <_read+0x12>
	}

return len;
 8000d64:	687b      	ldr	r3, [r7, #4]
}
 8000d66:	4618      	mov	r0, r3
 8000d68:	3718      	adds	r7, #24
 8000d6a:	46bd      	mov	sp, r7
 8000d6c:	bd80      	pop	{r7, pc}

08000d6e <_close>:
	}
	return len;
}

int _close(int file)
{
 8000d6e:	b480      	push	{r7}
 8000d70:	b083      	sub	sp, #12
 8000d72:	af00      	add	r7, sp, #0
 8000d74:	6078      	str	r0, [r7, #4]
	return -1;
 8000d76:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000d7a:	4618      	mov	r0, r3
 8000d7c:	370c      	adds	r7, #12
 8000d7e:	46bd      	mov	sp, r7
 8000d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d84:	4770      	bx	lr

08000d86 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000d86:	b480      	push	{r7}
 8000d88:	b083      	sub	sp, #12
 8000d8a:	af00      	add	r7, sp, #0
 8000d8c:	6078      	str	r0, [r7, #4]
 8000d8e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000d90:	683b      	ldr	r3, [r7, #0]
 8000d92:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000d96:	605a      	str	r2, [r3, #4]
	return 0;
 8000d98:	2300      	movs	r3, #0
}
 8000d9a:	4618      	mov	r0, r3
 8000d9c:	370c      	adds	r7, #12
 8000d9e:	46bd      	mov	sp, r7
 8000da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da4:	4770      	bx	lr

08000da6 <_isatty>:

int _isatty(int file)
{
 8000da6:	b480      	push	{r7}
 8000da8:	b083      	sub	sp, #12
 8000daa:	af00      	add	r7, sp, #0
 8000dac:	6078      	str	r0, [r7, #4]
	return 1;
 8000dae:	2301      	movs	r3, #1
}
 8000db0:	4618      	mov	r0, r3
 8000db2:	370c      	adds	r7, #12
 8000db4:	46bd      	mov	sp, r7
 8000db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dba:	4770      	bx	lr

08000dbc <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000dbc:	b480      	push	{r7}
 8000dbe:	b085      	sub	sp, #20
 8000dc0:	af00      	add	r7, sp, #0
 8000dc2:	60f8      	str	r0, [r7, #12]
 8000dc4:	60b9      	str	r1, [r7, #8]
 8000dc6:	607a      	str	r2, [r7, #4]
	return 0;
 8000dc8:	2300      	movs	r3, #0
}
 8000dca:	4618      	mov	r0, r3
 8000dcc:	3714      	adds	r7, #20
 8000dce:	46bd      	mov	sp, r7
 8000dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd4:	4770      	bx	lr
	...

08000dd8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000dd8:	b580      	push	{r7, lr}
 8000dda:	b086      	sub	sp, #24
 8000ddc:	af00      	add	r7, sp, #0
 8000dde:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000de0:	4a14      	ldr	r2, [pc, #80]	; (8000e34 <_sbrk+0x5c>)
 8000de2:	4b15      	ldr	r3, [pc, #84]	; (8000e38 <_sbrk+0x60>)
 8000de4:	1ad3      	subs	r3, r2, r3
 8000de6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000de8:	697b      	ldr	r3, [r7, #20]
 8000dea:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000dec:	4b13      	ldr	r3, [pc, #76]	; (8000e3c <_sbrk+0x64>)
 8000dee:	681b      	ldr	r3, [r3, #0]
 8000df0:	2b00      	cmp	r3, #0
 8000df2:	d102      	bne.n	8000dfa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000df4:	4b11      	ldr	r3, [pc, #68]	; (8000e3c <_sbrk+0x64>)
 8000df6:	4a12      	ldr	r2, [pc, #72]	; (8000e40 <_sbrk+0x68>)
 8000df8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000dfa:	4b10      	ldr	r3, [pc, #64]	; (8000e3c <_sbrk+0x64>)
 8000dfc:	681a      	ldr	r2, [r3, #0]
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	4413      	add	r3, r2
 8000e02:	693a      	ldr	r2, [r7, #16]
 8000e04:	429a      	cmp	r2, r3
 8000e06:	d207      	bcs.n	8000e18 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000e08:	f005 fd58 	bl	80068bc <__errno>
 8000e0c:	4602      	mov	r2, r0
 8000e0e:	230c      	movs	r3, #12
 8000e10:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8000e12:	f04f 33ff 	mov.w	r3, #4294967295
 8000e16:	e009      	b.n	8000e2c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000e18:	4b08      	ldr	r3, [pc, #32]	; (8000e3c <_sbrk+0x64>)
 8000e1a:	681b      	ldr	r3, [r3, #0]
 8000e1c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000e1e:	4b07      	ldr	r3, [pc, #28]	; (8000e3c <_sbrk+0x64>)
 8000e20:	681a      	ldr	r2, [r3, #0]
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	4413      	add	r3, r2
 8000e26:	4a05      	ldr	r2, [pc, #20]	; (8000e3c <_sbrk+0x64>)
 8000e28:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000e2a:	68fb      	ldr	r3, [r7, #12]
}
 8000e2c:	4618      	mov	r0, r3
 8000e2e:	3718      	adds	r7, #24
 8000e30:	46bd      	mov	sp, r7
 8000e32:	bd80      	pop	{r7, pc}
 8000e34:	20050000 	.word	0x20050000
 8000e38:	00000400 	.word	0x00000400
 8000e3c:	20000090 	.word	0x20000090
 8000e40:	20004f10 	.word	0x20004f10

08000e44 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000e44:	b480      	push	{r7}
 8000e46:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000e48:	4b06      	ldr	r3, [pc, #24]	; (8000e64 <SystemInit+0x20>)
 8000e4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000e4e:	4a05      	ldr	r2, [pc, #20]	; (8000e64 <SystemInit+0x20>)
 8000e50:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000e54:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000e58:	bf00      	nop
 8000e5a:	46bd      	mov	sp, r7
 8000e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e60:	4770      	bx	lr
 8000e62:	bf00      	nop
 8000e64:	e000ed00 	.word	0xe000ed00

08000e68 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000e68:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000ea0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000e6c:	480d      	ldr	r0, [pc, #52]	; (8000ea4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000e6e:	490e      	ldr	r1, [pc, #56]	; (8000ea8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000e70:	4a0e      	ldr	r2, [pc, #56]	; (8000eac <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000e72:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e74:	e002      	b.n	8000e7c <LoopCopyDataInit>

08000e76 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e76:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e78:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e7a:	3304      	adds	r3, #4

08000e7c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e7c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e7e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e80:	d3f9      	bcc.n	8000e76 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e82:	4a0b      	ldr	r2, [pc, #44]	; (8000eb0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000e84:	4c0b      	ldr	r4, [pc, #44]	; (8000eb4 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000e86:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e88:	e001      	b.n	8000e8e <LoopFillZerobss>

08000e8a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e8a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e8c:	3204      	adds	r2, #4

08000e8e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e8e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e90:	d3fb      	bcc.n	8000e8a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000e92:	f7ff ffd7 	bl	8000e44 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000e96:	f005 fd17 	bl	80068c8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000e9a:	f7ff fbb1 	bl	8000600 <main>
  bx  lr    
 8000e9e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000ea0:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8000ea4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ea8:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8000eac:	08007830 	.word	0x08007830
  ldr r2, =_sbss
 8000eb0:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8000eb4:	20004f0c 	.word	0x20004f0c

08000eb8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000eb8:	e7fe      	b.n	8000eb8 <ADC_IRQHandler>

08000eba <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000eba:	b580      	push	{r7, lr}
 8000ebc:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ebe:	2003      	movs	r0, #3
 8000ec0:	f000 f8f7 	bl	80010b2 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000ec4:	2000      	movs	r0, #0
 8000ec6:	f7ff febd 	bl	8000c44 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 8000eca:	f7ff fdf3 	bl	8000ab4 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 8000ece:	2300      	movs	r3, #0
}
 8000ed0:	4618      	mov	r0, r3
 8000ed2:	bd80      	pop	{r7, pc}

08000ed4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ed4:	b480      	push	{r7}
 8000ed6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000ed8:	4b06      	ldr	r3, [pc, #24]	; (8000ef4 <HAL_IncTick+0x20>)
 8000eda:	781b      	ldrb	r3, [r3, #0]
 8000edc:	461a      	mov	r2, r3
 8000ede:	4b06      	ldr	r3, [pc, #24]	; (8000ef8 <HAL_IncTick+0x24>)
 8000ee0:	681b      	ldr	r3, [r3, #0]
 8000ee2:	4413      	add	r3, r2
 8000ee4:	4a04      	ldr	r2, [pc, #16]	; (8000ef8 <HAL_IncTick+0x24>)
 8000ee6:	6013      	str	r3, [r2, #0]
}
 8000ee8:	bf00      	nop
 8000eea:	46bd      	mov	sp, r7
 8000eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef0:	4770      	bx	lr
 8000ef2:	bf00      	nop
 8000ef4:	20000008 	.word	0x20000008
 8000ef8:	20004ec4 	.word	0x20004ec4

08000efc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000efc:	b480      	push	{r7}
 8000efe:	af00      	add	r7, sp, #0
  return uwTick;
 8000f00:	4b03      	ldr	r3, [pc, #12]	; (8000f10 <HAL_GetTick+0x14>)
 8000f02:	681b      	ldr	r3, [r3, #0]
}
 8000f04:	4618      	mov	r0, r3
 8000f06:	46bd      	mov	sp, r7
 8000f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f0c:	4770      	bx	lr
 8000f0e:	bf00      	nop
 8000f10:	20004ec4 	.word	0x20004ec4

08000f14 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000f14:	b580      	push	{r7, lr}
 8000f16:	b084      	sub	sp, #16
 8000f18:	af00      	add	r7, sp, #0
 8000f1a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000f1c:	f7ff ffee 	bl	8000efc <HAL_GetTick>
 8000f20:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000f26:	68fb      	ldr	r3, [r7, #12]
 8000f28:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000f2c:	d005      	beq.n	8000f3a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000f2e:	4b09      	ldr	r3, [pc, #36]	; (8000f54 <HAL_Delay+0x40>)
 8000f30:	781b      	ldrb	r3, [r3, #0]
 8000f32:	461a      	mov	r2, r3
 8000f34:	68fb      	ldr	r3, [r7, #12]
 8000f36:	4413      	add	r3, r2
 8000f38:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000f3a:	bf00      	nop
 8000f3c:	f7ff ffde 	bl	8000efc <HAL_GetTick>
 8000f40:	4602      	mov	r2, r0
 8000f42:	68bb      	ldr	r3, [r7, #8]
 8000f44:	1ad3      	subs	r3, r2, r3
 8000f46:	68fa      	ldr	r2, [r7, #12]
 8000f48:	429a      	cmp	r2, r3
 8000f4a:	d8f7      	bhi.n	8000f3c <HAL_Delay+0x28>
  {
  }
}
 8000f4c:	bf00      	nop
 8000f4e:	3710      	adds	r7, #16
 8000f50:	46bd      	mov	sp, r7
 8000f52:	bd80      	pop	{r7, pc}
 8000f54:	20000008 	.word	0x20000008

08000f58 <__NVIC_SetPriorityGrouping>:
{
 8000f58:	b480      	push	{r7}
 8000f5a:	b085      	sub	sp, #20
 8000f5c:	af00      	add	r7, sp, #0
 8000f5e:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	f003 0307 	and.w	r3, r3, #7
 8000f66:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000f68:	4b0b      	ldr	r3, [pc, #44]	; (8000f98 <__NVIC_SetPriorityGrouping+0x40>)
 8000f6a:	68db      	ldr	r3, [r3, #12]
 8000f6c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000f6e:	68ba      	ldr	r2, [r7, #8]
 8000f70:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000f74:	4013      	ands	r3, r2
 8000f76:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000f78:	68fb      	ldr	r3, [r7, #12]
 8000f7a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000f7c:	68bb      	ldr	r3, [r7, #8]
 8000f7e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8000f80:	4b06      	ldr	r3, [pc, #24]	; (8000f9c <__NVIC_SetPriorityGrouping+0x44>)
 8000f82:	4313      	orrs	r3, r2
 8000f84:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000f86:	4a04      	ldr	r2, [pc, #16]	; (8000f98 <__NVIC_SetPriorityGrouping+0x40>)
 8000f88:	68bb      	ldr	r3, [r7, #8]
 8000f8a:	60d3      	str	r3, [r2, #12]
}
 8000f8c:	bf00      	nop
 8000f8e:	3714      	adds	r7, #20
 8000f90:	46bd      	mov	sp, r7
 8000f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f96:	4770      	bx	lr
 8000f98:	e000ed00 	.word	0xe000ed00
 8000f9c:	05fa0000 	.word	0x05fa0000

08000fa0 <__NVIC_GetPriorityGrouping>:
{
 8000fa0:	b480      	push	{r7}
 8000fa2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000fa4:	4b04      	ldr	r3, [pc, #16]	; (8000fb8 <__NVIC_GetPriorityGrouping+0x18>)
 8000fa6:	68db      	ldr	r3, [r3, #12]
 8000fa8:	0a1b      	lsrs	r3, r3, #8
 8000faa:	f003 0307 	and.w	r3, r3, #7
}
 8000fae:	4618      	mov	r0, r3
 8000fb0:	46bd      	mov	sp, r7
 8000fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb6:	4770      	bx	lr
 8000fb8:	e000ed00 	.word	0xe000ed00

08000fbc <__NVIC_EnableIRQ>:
{
 8000fbc:	b480      	push	{r7}
 8000fbe:	b083      	sub	sp, #12
 8000fc0:	af00      	add	r7, sp, #0
 8000fc2:	4603      	mov	r3, r0
 8000fc4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000fc6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fca:	2b00      	cmp	r3, #0
 8000fcc:	db0b      	blt.n	8000fe6 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000fce:	79fb      	ldrb	r3, [r7, #7]
 8000fd0:	f003 021f 	and.w	r2, r3, #31
 8000fd4:	4907      	ldr	r1, [pc, #28]	; (8000ff4 <__NVIC_EnableIRQ+0x38>)
 8000fd6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fda:	095b      	lsrs	r3, r3, #5
 8000fdc:	2001      	movs	r0, #1
 8000fde:	fa00 f202 	lsl.w	r2, r0, r2
 8000fe2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8000fe6:	bf00      	nop
 8000fe8:	370c      	adds	r7, #12
 8000fea:	46bd      	mov	sp, r7
 8000fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff0:	4770      	bx	lr
 8000ff2:	bf00      	nop
 8000ff4:	e000e100 	.word	0xe000e100

08000ff8 <__NVIC_SetPriority>:
{
 8000ff8:	b480      	push	{r7}
 8000ffa:	b083      	sub	sp, #12
 8000ffc:	af00      	add	r7, sp, #0
 8000ffe:	4603      	mov	r3, r0
 8001000:	6039      	str	r1, [r7, #0]
 8001002:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001004:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001008:	2b00      	cmp	r3, #0
 800100a:	db0a      	blt.n	8001022 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800100c:	683b      	ldr	r3, [r7, #0]
 800100e:	b2da      	uxtb	r2, r3
 8001010:	490c      	ldr	r1, [pc, #48]	; (8001044 <__NVIC_SetPriority+0x4c>)
 8001012:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001016:	0112      	lsls	r2, r2, #4
 8001018:	b2d2      	uxtb	r2, r2
 800101a:	440b      	add	r3, r1
 800101c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8001020:	e00a      	b.n	8001038 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001022:	683b      	ldr	r3, [r7, #0]
 8001024:	b2da      	uxtb	r2, r3
 8001026:	4908      	ldr	r1, [pc, #32]	; (8001048 <__NVIC_SetPriority+0x50>)
 8001028:	79fb      	ldrb	r3, [r7, #7]
 800102a:	f003 030f 	and.w	r3, r3, #15
 800102e:	3b04      	subs	r3, #4
 8001030:	0112      	lsls	r2, r2, #4
 8001032:	b2d2      	uxtb	r2, r2
 8001034:	440b      	add	r3, r1
 8001036:	761a      	strb	r2, [r3, #24]
}
 8001038:	bf00      	nop
 800103a:	370c      	adds	r7, #12
 800103c:	46bd      	mov	sp, r7
 800103e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001042:	4770      	bx	lr
 8001044:	e000e100 	.word	0xe000e100
 8001048:	e000ed00 	.word	0xe000ed00

0800104c <NVIC_EncodePriority>:
{
 800104c:	b480      	push	{r7}
 800104e:	b089      	sub	sp, #36	; 0x24
 8001050:	af00      	add	r7, sp, #0
 8001052:	60f8      	str	r0, [r7, #12]
 8001054:	60b9      	str	r1, [r7, #8]
 8001056:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001058:	68fb      	ldr	r3, [r7, #12]
 800105a:	f003 0307 	and.w	r3, r3, #7
 800105e:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001060:	69fb      	ldr	r3, [r7, #28]
 8001062:	f1c3 0307 	rsb	r3, r3, #7
 8001066:	2b04      	cmp	r3, #4
 8001068:	bf28      	it	cs
 800106a:	2304      	movcs	r3, #4
 800106c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800106e:	69fb      	ldr	r3, [r7, #28]
 8001070:	3304      	adds	r3, #4
 8001072:	2b06      	cmp	r3, #6
 8001074:	d902      	bls.n	800107c <NVIC_EncodePriority+0x30>
 8001076:	69fb      	ldr	r3, [r7, #28]
 8001078:	3b03      	subs	r3, #3
 800107a:	e000      	b.n	800107e <NVIC_EncodePriority+0x32>
 800107c:	2300      	movs	r3, #0
 800107e:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001080:	f04f 32ff 	mov.w	r2, #4294967295
 8001084:	69bb      	ldr	r3, [r7, #24]
 8001086:	fa02 f303 	lsl.w	r3, r2, r3
 800108a:	43da      	mvns	r2, r3
 800108c:	68bb      	ldr	r3, [r7, #8]
 800108e:	401a      	ands	r2, r3
 8001090:	697b      	ldr	r3, [r7, #20]
 8001092:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001094:	f04f 31ff 	mov.w	r1, #4294967295
 8001098:	697b      	ldr	r3, [r7, #20]
 800109a:	fa01 f303 	lsl.w	r3, r1, r3
 800109e:	43d9      	mvns	r1, r3
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010a4:	4313      	orrs	r3, r2
}
 80010a6:	4618      	mov	r0, r3
 80010a8:	3724      	adds	r7, #36	; 0x24
 80010aa:	46bd      	mov	sp, r7
 80010ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b0:	4770      	bx	lr

080010b2 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010b2:	b580      	push	{r7, lr}
 80010b4:	b082      	sub	sp, #8
 80010b6:	af00      	add	r7, sp, #0
 80010b8:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80010ba:	6878      	ldr	r0, [r7, #4]
 80010bc:	f7ff ff4c 	bl	8000f58 <__NVIC_SetPriorityGrouping>
}
 80010c0:	bf00      	nop
 80010c2:	3708      	adds	r7, #8
 80010c4:	46bd      	mov	sp, r7
 80010c6:	bd80      	pop	{r7, pc}

080010c8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80010c8:	b580      	push	{r7, lr}
 80010ca:	b086      	sub	sp, #24
 80010cc:	af00      	add	r7, sp, #0
 80010ce:	4603      	mov	r3, r0
 80010d0:	60b9      	str	r1, [r7, #8]
 80010d2:	607a      	str	r2, [r7, #4]
 80010d4:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80010d6:	2300      	movs	r3, #0
 80010d8:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80010da:	f7ff ff61 	bl	8000fa0 <__NVIC_GetPriorityGrouping>
 80010de:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80010e0:	687a      	ldr	r2, [r7, #4]
 80010e2:	68b9      	ldr	r1, [r7, #8]
 80010e4:	6978      	ldr	r0, [r7, #20]
 80010e6:	f7ff ffb1 	bl	800104c <NVIC_EncodePriority>
 80010ea:	4602      	mov	r2, r0
 80010ec:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80010f0:	4611      	mov	r1, r2
 80010f2:	4618      	mov	r0, r3
 80010f4:	f7ff ff80 	bl	8000ff8 <__NVIC_SetPriority>
}
 80010f8:	bf00      	nop
 80010fa:	3718      	adds	r7, #24
 80010fc:	46bd      	mov	sp, r7
 80010fe:	bd80      	pop	{r7, pc}

08001100 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001100:	b580      	push	{r7, lr}
 8001102:	b082      	sub	sp, #8
 8001104:	af00      	add	r7, sp, #0
 8001106:	4603      	mov	r3, r0
 8001108:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800110a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800110e:	4618      	mov	r0, r3
 8001110:	f7ff ff54 	bl	8000fbc <__NVIC_EnableIRQ>
}
 8001114:	bf00      	nop
 8001116:	3708      	adds	r7, #8
 8001118:	46bd      	mov	sp, r7
 800111a:	bd80      	pop	{r7, pc}

0800111c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800111c:	b480      	push	{r7}
 800111e:	b089      	sub	sp, #36	; 0x24
 8001120:	af00      	add	r7, sp, #0
 8001122:	6078      	str	r0, [r7, #4]
 8001124:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8001126:	2300      	movs	r3, #0
 8001128:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 800112a:	2300      	movs	r3, #0
 800112c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 800112e:	2300      	movs	r3, #0
 8001130:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8001132:	2300      	movs	r3, #0
 8001134:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8001136:	2300      	movs	r3, #0
 8001138:	61fb      	str	r3, [r7, #28]
 800113a:	e175      	b.n	8001428 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 800113c:	2201      	movs	r2, #1
 800113e:	69fb      	ldr	r3, [r7, #28]
 8001140:	fa02 f303 	lsl.w	r3, r2, r3
 8001144:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001146:	683b      	ldr	r3, [r7, #0]
 8001148:	681b      	ldr	r3, [r3, #0]
 800114a:	697a      	ldr	r2, [r7, #20]
 800114c:	4013      	ands	r3, r2
 800114e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001150:	693a      	ldr	r2, [r7, #16]
 8001152:	697b      	ldr	r3, [r7, #20]
 8001154:	429a      	cmp	r2, r3
 8001156:	f040 8164 	bne.w	8001422 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800115a:	683b      	ldr	r3, [r7, #0]
 800115c:	685b      	ldr	r3, [r3, #4]
 800115e:	2b01      	cmp	r3, #1
 8001160:	d00b      	beq.n	800117a <HAL_GPIO_Init+0x5e>
 8001162:	683b      	ldr	r3, [r7, #0]
 8001164:	685b      	ldr	r3, [r3, #4]
 8001166:	2b02      	cmp	r3, #2
 8001168:	d007      	beq.n	800117a <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800116a:	683b      	ldr	r3, [r7, #0]
 800116c:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800116e:	2b11      	cmp	r3, #17
 8001170:	d003      	beq.n	800117a <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001172:	683b      	ldr	r3, [r7, #0]
 8001174:	685b      	ldr	r3, [r3, #4]
 8001176:	2b12      	cmp	r3, #18
 8001178:	d130      	bne.n	80011dc <HAL_GPIO_Init+0xc0>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	689b      	ldr	r3, [r3, #8]
 800117e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8001180:	69fb      	ldr	r3, [r7, #28]
 8001182:	005b      	lsls	r3, r3, #1
 8001184:	2203      	movs	r2, #3
 8001186:	fa02 f303 	lsl.w	r3, r2, r3
 800118a:	43db      	mvns	r3, r3
 800118c:	69ba      	ldr	r2, [r7, #24]
 800118e:	4013      	ands	r3, r2
 8001190:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8001192:	683b      	ldr	r3, [r7, #0]
 8001194:	68da      	ldr	r2, [r3, #12]
 8001196:	69fb      	ldr	r3, [r7, #28]
 8001198:	005b      	lsls	r3, r3, #1
 800119a:	fa02 f303 	lsl.w	r3, r2, r3
 800119e:	69ba      	ldr	r2, [r7, #24]
 80011a0:	4313      	orrs	r3, r2
 80011a2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	69ba      	ldr	r2, [r7, #24]
 80011a8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	685b      	ldr	r3, [r3, #4]
 80011ae:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80011b0:	2201      	movs	r2, #1
 80011b2:	69fb      	ldr	r3, [r7, #28]
 80011b4:	fa02 f303 	lsl.w	r3, r2, r3
 80011b8:	43db      	mvns	r3, r3
 80011ba:	69ba      	ldr	r2, [r7, #24]
 80011bc:	4013      	ands	r3, r2
 80011be:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 80011c0:	683b      	ldr	r3, [r7, #0]
 80011c2:	685b      	ldr	r3, [r3, #4]
 80011c4:	091b      	lsrs	r3, r3, #4
 80011c6:	f003 0201 	and.w	r2, r3, #1
 80011ca:	69fb      	ldr	r3, [r7, #28]
 80011cc:	fa02 f303 	lsl.w	r3, r2, r3
 80011d0:	69ba      	ldr	r2, [r7, #24]
 80011d2:	4313      	orrs	r3, r2
 80011d4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	69ba      	ldr	r2, [r7, #24]
 80011da:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	68db      	ldr	r3, [r3, #12]
 80011e0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80011e2:	69fb      	ldr	r3, [r7, #28]
 80011e4:	005b      	lsls	r3, r3, #1
 80011e6:	2203      	movs	r2, #3
 80011e8:	fa02 f303 	lsl.w	r3, r2, r3
 80011ec:	43db      	mvns	r3, r3
 80011ee:	69ba      	ldr	r2, [r7, #24]
 80011f0:	4013      	ands	r3, r2
 80011f2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 80011f4:	683b      	ldr	r3, [r7, #0]
 80011f6:	689a      	ldr	r2, [r3, #8]
 80011f8:	69fb      	ldr	r3, [r7, #28]
 80011fa:	005b      	lsls	r3, r3, #1
 80011fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001200:	69ba      	ldr	r2, [r7, #24]
 8001202:	4313      	orrs	r3, r2
 8001204:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	69ba      	ldr	r2, [r7, #24]
 800120a:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800120c:	683b      	ldr	r3, [r7, #0]
 800120e:	685b      	ldr	r3, [r3, #4]
 8001210:	2b02      	cmp	r3, #2
 8001212:	d003      	beq.n	800121c <HAL_GPIO_Init+0x100>
 8001214:	683b      	ldr	r3, [r7, #0]
 8001216:	685b      	ldr	r3, [r3, #4]
 8001218:	2b12      	cmp	r3, #18
 800121a:	d123      	bne.n	8001264 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 800121c:	69fb      	ldr	r3, [r7, #28]
 800121e:	08da      	lsrs	r2, r3, #3
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	3208      	adds	r2, #8
 8001224:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001228:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800122a:	69fb      	ldr	r3, [r7, #28]
 800122c:	f003 0307 	and.w	r3, r3, #7
 8001230:	009b      	lsls	r3, r3, #2
 8001232:	220f      	movs	r2, #15
 8001234:	fa02 f303 	lsl.w	r3, r2, r3
 8001238:	43db      	mvns	r3, r3
 800123a:	69ba      	ldr	r2, [r7, #24]
 800123c:	4013      	ands	r3, r2
 800123e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8001240:	683b      	ldr	r3, [r7, #0]
 8001242:	691a      	ldr	r2, [r3, #16]
 8001244:	69fb      	ldr	r3, [r7, #28]
 8001246:	f003 0307 	and.w	r3, r3, #7
 800124a:	009b      	lsls	r3, r3, #2
 800124c:	fa02 f303 	lsl.w	r3, r2, r3
 8001250:	69ba      	ldr	r2, [r7, #24]
 8001252:	4313      	orrs	r3, r2
 8001254:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8001256:	69fb      	ldr	r3, [r7, #28]
 8001258:	08da      	lsrs	r2, r3, #3
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	3208      	adds	r2, #8
 800125e:	69b9      	ldr	r1, [r7, #24]
 8001260:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 800126a:	69fb      	ldr	r3, [r7, #28]
 800126c:	005b      	lsls	r3, r3, #1
 800126e:	2203      	movs	r2, #3
 8001270:	fa02 f303 	lsl.w	r3, r2, r3
 8001274:	43db      	mvns	r3, r3
 8001276:	69ba      	ldr	r2, [r7, #24]
 8001278:	4013      	ands	r3, r2
 800127a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 800127c:	683b      	ldr	r3, [r7, #0]
 800127e:	685b      	ldr	r3, [r3, #4]
 8001280:	f003 0203 	and.w	r2, r3, #3
 8001284:	69fb      	ldr	r3, [r7, #28]
 8001286:	005b      	lsls	r3, r3, #1
 8001288:	fa02 f303 	lsl.w	r3, r2, r3
 800128c:	69ba      	ldr	r2, [r7, #24]
 800128e:	4313      	orrs	r3, r2
 8001290:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	69ba      	ldr	r2, [r7, #24]
 8001296:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001298:	683b      	ldr	r3, [r7, #0]
 800129a:	685b      	ldr	r3, [r3, #4]
 800129c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012a0:	2b00      	cmp	r3, #0
 80012a2:	f000 80be 	beq.w	8001422 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80012a6:	4b65      	ldr	r3, [pc, #404]	; (800143c <HAL_GPIO_Init+0x320>)
 80012a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012aa:	4a64      	ldr	r2, [pc, #400]	; (800143c <HAL_GPIO_Init+0x320>)
 80012ac:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80012b0:	6453      	str	r3, [r2, #68]	; 0x44
 80012b2:	4b62      	ldr	r3, [pc, #392]	; (800143c <HAL_GPIO_Init+0x320>)
 80012b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012b6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80012ba:	60fb      	str	r3, [r7, #12]
 80012bc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 80012be:	4a60      	ldr	r2, [pc, #384]	; (8001440 <HAL_GPIO_Init+0x324>)
 80012c0:	69fb      	ldr	r3, [r7, #28]
 80012c2:	089b      	lsrs	r3, r3, #2
 80012c4:	3302      	adds	r3, #2
 80012c6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80012ca:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80012cc:	69fb      	ldr	r3, [r7, #28]
 80012ce:	f003 0303 	and.w	r3, r3, #3
 80012d2:	009b      	lsls	r3, r3, #2
 80012d4:	220f      	movs	r2, #15
 80012d6:	fa02 f303 	lsl.w	r3, r2, r3
 80012da:	43db      	mvns	r3, r3
 80012dc:	69ba      	ldr	r2, [r7, #24]
 80012de:	4013      	ands	r3, r2
 80012e0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	4a57      	ldr	r2, [pc, #348]	; (8001444 <HAL_GPIO_Init+0x328>)
 80012e6:	4293      	cmp	r3, r2
 80012e8:	d037      	beq.n	800135a <HAL_GPIO_Init+0x23e>
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	4a56      	ldr	r2, [pc, #344]	; (8001448 <HAL_GPIO_Init+0x32c>)
 80012ee:	4293      	cmp	r3, r2
 80012f0:	d031      	beq.n	8001356 <HAL_GPIO_Init+0x23a>
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	4a55      	ldr	r2, [pc, #340]	; (800144c <HAL_GPIO_Init+0x330>)
 80012f6:	4293      	cmp	r3, r2
 80012f8:	d02b      	beq.n	8001352 <HAL_GPIO_Init+0x236>
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	4a54      	ldr	r2, [pc, #336]	; (8001450 <HAL_GPIO_Init+0x334>)
 80012fe:	4293      	cmp	r3, r2
 8001300:	d025      	beq.n	800134e <HAL_GPIO_Init+0x232>
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	4a53      	ldr	r2, [pc, #332]	; (8001454 <HAL_GPIO_Init+0x338>)
 8001306:	4293      	cmp	r3, r2
 8001308:	d01f      	beq.n	800134a <HAL_GPIO_Init+0x22e>
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	4a52      	ldr	r2, [pc, #328]	; (8001458 <HAL_GPIO_Init+0x33c>)
 800130e:	4293      	cmp	r3, r2
 8001310:	d019      	beq.n	8001346 <HAL_GPIO_Init+0x22a>
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	4a51      	ldr	r2, [pc, #324]	; (800145c <HAL_GPIO_Init+0x340>)
 8001316:	4293      	cmp	r3, r2
 8001318:	d013      	beq.n	8001342 <HAL_GPIO_Init+0x226>
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	4a50      	ldr	r2, [pc, #320]	; (8001460 <HAL_GPIO_Init+0x344>)
 800131e:	4293      	cmp	r3, r2
 8001320:	d00d      	beq.n	800133e <HAL_GPIO_Init+0x222>
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	4a4f      	ldr	r2, [pc, #316]	; (8001464 <HAL_GPIO_Init+0x348>)
 8001326:	4293      	cmp	r3, r2
 8001328:	d007      	beq.n	800133a <HAL_GPIO_Init+0x21e>
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	4a4e      	ldr	r2, [pc, #312]	; (8001468 <HAL_GPIO_Init+0x34c>)
 800132e:	4293      	cmp	r3, r2
 8001330:	d101      	bne.n	8001336 <HAL_GPIO_Init+0x21a>
 8001332:	2309      	movs	r3, #9
 8001334:	e012      	b.n	800135c <HAL_GPIO_Init+0x240>
 8001336:	230a      	movs	r3, #10
 8001338:	e010      	b.n	800135c <HAL_GPIO_Init+0x240>
 800133a:	2308      	movs	r3, #8
 800133c:	e00e      	b.n	800135c <HAL_GPIO_Init+0x240>
 800133e:	2307      	movs	r3, #7
 8001340:	e00c      	b.n	800135c <HAL_GPIO_Init+0x240>
 8001342:	2306      	movs	r3, #6
 8001344:	e00a      	b.n	800135c <HAL_GPIO_Init+0x240>
 8001346:	2305      	movs	r3, #5
 8001348:	e008      	b.n	800135c <HAL_GPIO_Init+0x240>
 800134a:	2304      	movs	r3, #4
 800134c:	e006      	b.n	800135c <HAL_GPIO_Init+0x240>
 800134e:	2303      	movs	r3, #3
 8001350:	e004      	b.n	800135c <HAL_GPIO_Init+0x240>
 8001352:	2302      	movs	r3, #2
 8001354:	e002      	b.n	800135c <HAL_GPIO_Init+0x240>
 8001356:	2301      	movs	r3, #1
 8001358:	e000      	b.n	800135c <HAL_GPIO_Init+0x240>
 800135a:	2300      	movs	r3, #0
 800135c:	69fa      	ldr	r2, [r7, #28]
 800135e:	f002 0203 	and.w	r2, r2, #3
 8001362:	0092      	lsls	r2, r2, #2
 8001364:	4093      	lsls	r3, r2
 8001366:	69ba      	ldr	r2, [r7, #24]
 8001368:	4313      	orrs	r3, r2
 800136a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 800136c:	4934      	ldr	r1, [pc, #208]	; (8001440 <HAL_GPIO_Init+0x324>)
 800136e:	69fb      	ldr	r3, [r7, #28]
 8001370:	089b      	lsrs	r3, r3, #2
 8001372:	3302      	adds	r3, #2
 8001374:	69ba      	ldr	r2, [r7, #24]
 8001376:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800137a:	4b3c      	ldr	r3, [pc, #240]	; (800146c <HAL_GPIO_Init+0x350>)
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001380:	693b      	ldr	r3, [r7, #16]
 8001382:	43db      	mvns	r3, r3
 8001384:	69ba      	ldr	r2, [r7, #24]
 8001386:	4013      	ands	r3, r2
 8001388:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800138a:	683b      	ldr	r3, [r7, #0]
 800138c:	685b      	ldr	r3, [r3, #4]
 800138e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001392:	2b00      	cmp	r3, #0
 8001394:	d003      	beq.n	800139e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001396:	69ba      	ldr	r2, [r7, #24]
 8001398:	693b      	ldr	r3, [r7, #16]
 800139a:	4313      	orrs	r3, r2
 800139c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800139e:	4a33      	ldr	r2, [pc, #204]	; (800146c <HAL_GPIO_Init+0x350>)
 80013a0:	69bb      	ldr	r3, [r7, #24]
 80013a2:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80013a4:	4b31      	ldr	r3, [pc, #196]	; (800146c <HAL_GPIO_Init+0x350>)
 80013a6:	685b      	ldr	r3, [r3, #4]
 80013a8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80013aa:	693b      	ldr	r3, [r7, #16]
 80013ac:	43db      	mvns	r3, r3
 80013ae:	69ba      	ldr	r2, [r7, #24]
 80013b0:	4013      	ands	r3, r2
 80013b2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80013b4:	683b      	ldr	r3, [r7, #0]
 80013b6:	685b      	ldr	r3, [r3, #4]
 80013b8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013bc:	2b00      	cmp	r3, #0
 80013be:	d003      	beq.n	80013c8 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80013c0:	69ba      	ldr	r2, [r7, #24]
 80013c2:	693b      	ldr	r3, [r7, #16]
 80013c4:	4313      	orrs	r3, r2
 80013c6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80013c8:	4a28      	ldr	r2, [pc, #160]	; (800146c <HAL_GPIO_Init+0x350>)
 80013ca:	69bb      	ldr	r3, [r7, #24]
 80013cc:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80013ce:	4b27      	ldr	r3, [pc, #156]	; (800146c <HAL_GPIO_Init+0x350>)
 80013d0:	689b      	ldr	r3, [r3, #8]
 80013d2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80013d4:	693b      	ldr	r3, [r7, #16]
 80013d6:	43db      	mvns	r3, r3
 80013d8:	69ba      	ldr	r2, [r7, #24]
 80013da:	4013      	ands	r3, r2
 80013dc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80013de:	683b      	ldr	r3, [r7, #0]
 80013e0:	685b      	ldr	r3, [r3, #4]
 80013e2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	d003      	beq.n	80013f2 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80013ea:	69ba      	ldr	r2, [r7, #24]
 80013ec:	693b      	ldr	r3, [r7, #16]
 80013ee:	4313      	orrs	r3, r2
 80013f0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80013f2:	4a1e      	ldr	r2, [pc, #120]	; (800146c <HAL_GPIO_Init+0x350>)
 80013f4:	69bb      	ldr	r3, [r7, #24]
 80013f6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80013f8:	4b1c      	ldr	r3, [pc, #112]	; (800146c <HAL_GPIO_Init+0x350>)
 80013fa:	68db      	ldr	r3, [r3, #12]
 80013fc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80013fe:	693b      	ldr	r3, [r7, #16]
 8001400:	43db      	mvns	r3, r3
 8001402:	69ba      	ldr	r2, [r7, #24]
 8001404:	4013      	ands	r3, r2
 8001406:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001408:	683b      	ldr	r3, [r7, #0]
 800140a:	685b      	ldr	r3, [r3, #4]
 800140c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001410:	2b00      	cmp	r3, #0
 8001412:	d003      	beq.n	800141c <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001414:	69ba      	ldr	r2, [r7, #24]
 8001416:	693b      	ldr	r3, [r7, #16]
 8001418:	4313      	orrs	r3, r2
 800141a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800141c:	4a13      	ldr	r2, [pc, #76]	; (800146c <HAL_GPIO_Init+0x350>)
 800141e:	69bb      	ldr	r3, [r7, #24]
 8001420:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 8001422:	69fb      	ldr	r3, [r7, #28]
 8001424:	3301      	adds	r3, #1
 8001426:	61fb      	str	r3, [r7, #28]
 8001428:	69fb      	ldr	r3, [r7, #28]
 800142a:	2b0f      	cmp	r3, #15
 800142c:	f67f ae86 	bls.w	800113c <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8001430:	bf00      	nop
 8001432:	3724      	adds	r7, #36	; 0x24
 8001434:	46bd      	mov	sp, r7
 8001436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800143a:	4770      	bx	lr
 800143c:	40023800 	.word	0x40023800
 8001440:	40013800 	.word	0x40013800
 8001444:	40020000 	.word	0x40020000
 8001448:	40020400 	.word	0x40020400
 800144c:	40020800 	.word	0x40020800
 8001450:	40020c00 	.word	0x40020c00
 8001454:	40021000 	.word	0x40021000
 8001458:	40021400 	.word	0x40021400
 800145c:	40021800 	.word	0x40021800
 8001460:	40021c00 	.word	0x40021c00
 8001464:	40022000 	.word	0x40022000
 8001468:	40022400 	.word	0x40022400
 800146c:	40013c00 	.word	0x40013c00

08001470 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001470:	b480      	push	{r7}
 8001472:	b083      	sub	sp, #12
 8001474:	af00      	add	r7, sp, #0
 8001476:	6078      	str	r0, [r7, #4]
 8001478:	460b      	mov	r3, r1
 800147a:	807b      	strh	r3, [r7, #2]
 800147c:	4613      	mov	r3, r2
 800147e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001480:	787b      	ldrb	r3, [r7, #1]
 8001482:	2b00      	cmp	r3, #0
 8001484:	d003      	beq.n	800148e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001486:	887a      	ldrh	r2, [r7, #2]
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 800148c:	e003      	b.n	8001496 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 800148e:	887b      	ldrh	r3, [r7, #2]
 8001490:	041a      	lsls	r2, r3, #16
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	619a      	str	r2, [r3, #24]
}
 8001496:	bf00      	nop
 8001498:	370c      	adds	r7, #12
 800149a:	46bd      	mov	sp, r7
 800149c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a0:	4770      	bx	lr

080014a2 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80014a2:	b5f0      	push	{r4, r5, r6, r7, lr}
 80014a4:	b08f      	sub	sp, #60	; 0x3c
 80014a6:	af0a      	add	r7, sp, #40	; 0x28
 80014a8:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	2b00      	cmp	r3, #0
 80014ae:	d101      	bne.n	80014b4 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80014b0:	2301      	movs	r3, #1
 80014b2:	e116      	b.n	80016e2 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 80014c0:	b2db      	uxtb	r3, r3
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	d106      	bne.n	80014d4 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	2200      	movs	r2, #0
 80014ca:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80014ce:	6878      	ldr	r0, [r7, #4]
 80014d0:	f7ff fb5c 	bl	8000b8c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	2203      	movs	r2, #3
 80014d8:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80014dc:	68bb      	ldr	r3, [r7, #8]
 80014de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80014e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80014e4:	2b00      	cmp	r3, #0
 80014e6:	d102      	bne.n	80014ee <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	2200      	movs	r2, #0
 80014ec:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	4618      	mov	r0, r3
 80014f4:	f002 f974 	bl	80037e0 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	603b      	str	r3, [r7, #0]
 80014fe:	687e      	ldr	r6, [r7, #4]
 8001500:	466d      	mov	r5, sp
 8001502:	f106 0410 	add.w	r4, r6, #16
 8001506:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001508:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800150a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800150c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800150e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001512:	e885 0003 	stmia.w	r5, {r0, r1}
 8001516:	1d33      	adds	r3, r6, #4
 8001518:	cb0e      	ldmia	r3, {r1, r2, r3}
 800151a:	6838      	ldr	r0, [r7, #0]
 800151c:	f002 f908 	bl	8003730 <USB_CoreInit>
 8001520:	4603      	mov	r3, r0
 8001522:	2b00      	cmp	r3, #0
 8001524:	d005      	beq.n	8001532 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	2202      	movs	r2, #2
 800152a:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 800152e:	2301      	movs	r3, #1
 8001530:	e0d7      	b.n	80016e2 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	2100      	movs	r1, #0
 8001538:	4618      	mov	r0, r3
 800153a:	f002 f962 	bl	8003802 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800153e:	2300      	movs	r3, #0
 8001540:	73fb      	strb	r3, [r7, #15]
 8001542:	e04a      	b.n	80015da <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001544:	7bfa      	ldrb	r2, [r7, #15]
 8001546:	6879      	ldr	r1, [r7, #4]
 8001548:	4613      	mov	r3, r2
 800154a:	00db      	lsls	r3, r3, #3
 800154c:	1a9b      	subs	r3, r3, r2
 800154e:	009b      	lsls	r3, r3, #2
 8001550:	440b      	add	r3, r1
 8001552:	333d      	adds	r3, #61	; 0x3d
 8001554:	2201      	movs	r2, #1
 8001556:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001558:	7bfa      	ldrb	r2, [r7, #15]
 800155a:	6879      	ldr	r1, [r7, #4]
 800155c:	4613      	mov	r3, r2
 800155e:	00db      	lsls	r3, r3, #3
 8001560:	1a9b      	subs	r3, r3, r2
 8001562:	009b      	lsls	r3, r3, #2
 8001564:	440b      	add	r3, r1
 8001566:	333c      	adds	r3, #60	; 0x3c
 8001568:	7bfa      	ldrb	r2, [r7, #15]
 800156a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800156c:	7bfa      	ldrb	r2, [r7, #15]
 800156e:	7bfb      	ldrb	r3, [r7, #15]
 8001570:	b298      	uxth	r0, r3
 8001572:	6879      	ldr	r1, [r7, #4]
 8001574:	4613      	mov	r3, r2
 8001576:	00db      	lsls	r3, r3, #3
 8001578:	1a9b      	subs	r3, r3, r2
 800157a:	009b      	lsls	r3, r3, #2
 800157c:	440b      	add	r3, r1
 800157e:	3342      	adds	r3, #66	; 0x42
 8001580:	4602      	mov	r2, r0
 8001582:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001584:	7bfa      	ldrb	r2, [r7, #15]
 8001586:	6879      	ldr	r1, [r7, #4]
 8001588:	4613      	mov	r3, r2
 800158a:	00db      	lsls	r3, r3, #3
 800158c:	1a9b      	subs	r3, r3, r2
 800158e:	009b      	lsls	r3, r3, #2
 8001590:	440b      	add	r3, r1
 8001592:	333f      	adds	r3, #63	; 0x3f
 8001594:	2200      	movs	r2, #0
 8001596:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001598:	7bfa      	ldrb	r2, [r7, #15]
 800159a:	6879      	ldr	r1, [r7, #4]
 800159c:	4613      	mov	r3, r2
 800159e:	00db      	lsls	r3, r3, #3
 80015a0:	1a9b      	subs	r3, r3, r2
 80015a2:	009b      	lsls	r3, r3, #2
 80015a4:	440b      	add	r3, r1
 80015a6:	3344      	adds	r3, #68	; 0x44
 80015a8:	2200      	movs	r2, #0
 80015aa:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80015ac:	7bfa      	ldrb	r2, [r7, #15]
 80015ae:	6879      	ldr	r1, [r7, #4]
 80015b0:	4613      	mov	r3, r2
 80015b2:	00db      	lsls	r3, r3, #3
 80015b4:	1a9b      	subs	r3, r3, r2
 80015b6:	009b      	lsls	r3, r3, #2
 80015b8:	440b      	add	r3, r1
 80015ba:	3348      	adds	r3, #72	; 0x48
 80015bc:	2200      	movs	r2, #0
 80015be:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80015c0:	7bfa      	ldrb	r2, [r7, #15]
 80015c2:	6879      	ldr	r1, [r7, #4]
 80015c4:	4613      	mov	r3, r2
 80015c6:	00db      	lsls	r3, r3, #3
 80015c8:	1a9b      	subs	r3, r3, r2
 80015ca:	009b      	lsls	r3, r3, #2
 80015cc:	440b      	add	r3, r1
 80015ce:	3350      	adds	r3, #80	; 0x50
 80015d0:	2200      	movs	r2, #0
 80015d2:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80015d4:	7bfb      	ldrb	r3, [r7, #15]
 80015d6:	3301      	adds	r3, #1
 80015d8:	73fb      	strb	r3, [r7, #15]
 80015da:	7bfa      	ldrb	r2, [r7, #15]
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	685b      	ldr	r3, [r3, #4]
 80015e0:	429a      	cmp	r2, r3
 80015e2:	d3af      	bcc.n	8001544 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80015e4:	2300      	movs	r3, #0
 80015e6:	73fb      	strb	r3, [r7, #15]
 80015e8:	e044      	b.n	8001674 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80015ea:	7bfa      	ldrb	r2, [r7, #15]
 80015ec:	6879      	ldr	r1, [r7, #4]
 80015ee:	4613      	mov	r3, r2
 80015f0:	00db      	lsls	r3, r3, #3
 80015f2:	1a9b      	subs	r3, r3, r2
 80015f4:	009b      	lsls	r3, r3, #2
 80015f6:	440b      	add	r3, r1
 80015f8:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 80015fc:	2200      	movs	r2, #0
 80015fe:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001600:	7bfa      	ldrb	r2, [r7, #15]
 8001602:	6879      	ldr	r1, [r7, #4]
 8001604:	4613      	mov	r3, r2
 8001606:	00db      	lsls	r3, r3, #3
 8001608:	1a9b      	subs	r3, r3, r2
 800160a:	009b      	lsls	r3, r3, #2
 800160c:	440b      	add	r3, r1
 800160e:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8001612:	7bfa      	ldrb	r2, [r7, #15]
 8001614:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001616:	7bfa      	ldrb	r2, [r7, #15]
 8001618:	6879      	ldr	r1, [r7, #4]
 800161a:	4613      	mov	r3, r2
 800161c:	00db      	lsls	r3, r3, #3
 800161e:	1a9b      	subs	r3, r3, r2
 8001620:	009b      	lsls	r3, r3, #2
 8001622:	440b      	add	r3, r1
 8001624:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8001628:	2200      	movs	r2, #0
 800162a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800162c:	7bfa      	ldrb	r2, [r7, #15]
 800162e:	6879      	ldr	r1, [r7, #4]
 8001630:	4613      	mov	r3, r2
 8001632:	00db      	lsls	r3, r3, #3
 8001634:	1a9b      	subs	r3, r3, r2
 8001636:	009b      	lsls	r3, r3, #2
 8001638:	440b      	add	r3, r1
 800163a:	f503 7301 	add.w	r3, r3, #516	; 0x204
 800163e:	2200      	movs	r2, #0
 8001640:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001642:	7bfa      	ldrb	r2, [r7, #15]
 8001644:	6879      	ldr	r1, [r7, #4]
 8001646:	4613      	mov	r3, r2
 8001648:	00db      	lsls	r3, r3, #3
 800164a:	1a9b      	subs	r3, r3, r2
 800164c:	009b      	lsls	r3, r3, #2
 800164e:	440b      	add	r3, r1
 8001650:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8001654:	2200      	movs	r2, #0
 8001656:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001658:	7bfa      	ldrb	r2, [r7, #15]
 800165a:	6879      	ldr	r1, [r7, #4]
 800165c:	4613      	mov	r3, r2
 800165e:	00db      	lsls	r3, r3, #3
 8001660:	1a9b      	subs	r3, r3, r2
 8001662:	009b      	lsls	r3, r3, #2
 8001664:	440b      	add	r3, r1
 8001666:	f503 7304 	add.w	r3, r3, #528	; 0x210
 800166a:	2200      	movs	r2, #0
 800166c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800166e:	7bfb      	ldrb	r3, [r7, #15]
 8001670:	3301      	adds	r3, #1
 8001672:	73fb      	strb	r3, [r7, #15]
 8001674:	7bfa      	ldrb	r2, [r7, #15]
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	685b      	ldr	r3, [r3, #4]
 800167a:	429a      	cmp	r2, r3
 800167c:	d3b5      	bcc.n	80015ea <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	603b      	str	r3, [r7, #0]
 8001684:	687e      	ldr	r6, [r7, #4]
 8001686:	466d      	mov	r5, sp
 8001688:	f106 0410 	add.w	r4, r6, #16
 800168c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800168e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001690:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001692:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001694:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001698:	e885 0003 	stmia.w	r5, {r0, r1}
 800169c:	1d33      	adds	r3, r6, #4
 800169e:	cb0e      	ldmia	r3, {r1, r2, r3}
 80016a0:	6838      	ldr	r0, [r7, #0]
 80016a2:	f002 f8d9 	bl	8003858 <USB_DevInit>
 80016a6:	4603      	mov	r3, r0
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	d005      	beq.n	80016b8 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	2202      	movs	r2, #2
 80016b0:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 80016b4:	2301      	movs	r3, #1
 80016b6:	e014      	b.n	80016e2 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	2200      	movs	r2, #0
 80016bc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	2201      	movs	r2, #1
 80016c4:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016cc:	2b01      	cmp	r3, #1
 80016ce:	d102      	bne.n	80016d6 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80016d0:	6878      	ldr	r0, [r7, #4]
 80016d2:	f000 f80b 	bl	80016ec <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	4618      	mov	r0, r3
 80016dc:	f002 fa8b 	bl	8003bf6 <USB_DevDisconnect>

  return HAL_OK;
 80016e0:	2300      	movs	r3, #0
}
 80016e2:	4618      	mov	r0, r3
 80016e4:	3714      	adds	r7, #20
 80016e6:	46bd      	mov	sp, r7
 80016e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

080016ec <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80016ec:	b480      	push	{r7}
 80016ee:	b085      	sub	sp, #20
 80016f0:	af00      	add	r7, sp, #0
 80016f2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	2201      	movs	r2, #1
 80016fe:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	2200      	movs	r2, #0
 8001706:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 800170a:	68fb      	ldr	r3, [r7, #12]
 800170c:	699b      	ldr	r3, [r3, #24]
 800170e:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8001712:	68fb      	ldr	r3, [r7, #12]
 8001714:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8001716:	68fb      	ldr	r3, [r7, #12]
 8001718:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800171a:	4b05      	ldr	r3, [pc, #20]	; (8001730 <HAL_PCDEx_ActivateLPM+0x44>)
 800171c:	4313      	orrs	r3, r2
 800171e:	68fa      	ldr	r2, [r7, #12]
 8001720:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8001722:	2300      	movs	r3, #0
}
 8001724:	4618      	mov	r0, r3
 8001726:	3714      	adds	r7, #20
 8001728:	46bd      	mov	sp, r7
 800172a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800172e:	4770      	bx	lr
 8001730:	10000003 	.word	0x10000003

08001734 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8001734:	b480      	push	{r7}
 8001736:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001738:	4b05      	ldr	r3, [pc, #20]	; (8001750 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	4a04      	ldr	r2, [pc, #16]	; (8001750 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800173e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001742:	6013      	str	r3, [r2, #0]
}
 8001744:	bf00      	nop
 8001746:	46bd      	mov	sp, r7
 8001748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800174c:	4770      	bx	lr
 800174e:	bf00      	nop
 8001750:	40007000 	.word	0x40007000

08001754 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8001754:	b580      	push	{r7, lr}
 8001756:	b082      	sub	sp, #8
 8001758:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 800175a:	2300      	movs	r3, #0
 800175c:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800175e:	4b23      	ldr	r3, [pc, #140]	; (80017ec <HAL_PWREx_EnableOverDrive+0x98>)
 8001760:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001762:	4a22      	ldr	r2, [pc, #136]	; (80017ec <HAL_PWREx_EnableOverDrive+0x98>)
 8001764:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001768:	6413      	str	r3, [r2, #64]	; 0x40
 800176a:	4b20      	ldr	r3, [pc, #128]	; (80017ec <HAL_PWREx_EnableOverDrive+0x98>)
 800176c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800176e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001772:	603b      	str	r3, [r7, #0]
 8001774:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8001776:	4b1e      	ldr	r3, [pc, #120]	; (80017f0 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	4a1d      	ldr	r2, [pc, #116]	; (80017f0 <HAL_PWREx_EnableOverDrive+0x9c>)
 800177c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001780:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001782:	f7ff fbbb 	bl	8000efc <HAL_GetTick>
 8001786:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001788:	e009      	b.n	800179e <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800178a:	f7ff fbb7 	bl	8000efc <HAL_GetTick>
 800178e:	4602      	mov	r2, r0
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	1ad3      	subs	r3, r2, r3
 8001794:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001798:	d901      	bls.n	800179e <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 800179a:	2303      	movs	r3, #3
 800179c:	e022      	b.n	80017e4 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800179e:	4b14      	ldr	r3, [pc, #80]	; (80017f0 <HAL_PWREx_EnableOverDrive+0x9c>)
 80017a0:	685b      	ldr	r3, [r3, #4]
 80017a2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80017a6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80017aa:	d1ee      	bne.n	800178a <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80017ac:	4b10      	ldr	r3, [pc, #64]	; (80017f0 <HAL_PWREx_EnableOverDrive+0x9c>)
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	4a0f      	ldr	r2, [pc, #60]	; (80017f0 <HAL_PWREx_EnableOverDrive+0x9c>)
 80017b2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80017b6:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80017b8:	f7ff fba0 	bl	8000efc <HAL_GetTick>
 80017bc:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80017be:	e009      	b.n	80017d4 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80017c0:	f7ff fb9c 	bl	8000efc <HAL_GetTick>
 80017c4:	4602      	mov	r2, r0
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	1ad3      	subs	r3, r2, r3
 80017ca:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80017ce:	d901      	bls.n	80017d4 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 80017d0:	2303      	movs	r3, #3
 80017d2:	e007      	b.n	80017e4 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80017d4:	4b06      	ldr	r3, [pc, #24]	; (80017f0 <HAL_PWREx_EnableOverDrive+0x9c>)
 80017d6:	685b      	ldr	r3, [r3, #4]
 80017d8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017dc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80017e0:	d1ee      	bne.n	80017c0 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 80017e2:	2300      	movs	r3, #0
}
 80017e4:	4618      	mov	r0, r3
 80017e6:	3708      	adds	r7, #8
 80017e8:	46bd      	mov	sp, r7
 80017ea:	bd80      	pop	{r7, pc}
 80017ec:	40023800 	.word	0x40023800
 80017f0:	40007000 	.word	0x40007000

080017f4 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80017f4:	b580      	push	{r7, lr}
 80017f6:	b086      	sub	sp, #24
 80017f8:	af00      	add	r7, sp, #0
 80017fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 80017fc:	2300      	movs	r3, #0
 80017fe:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	2b00      	cmp	r3, #0
 8001804:	d101      	bne.n	800180a <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8001806:	2301      	movs	r3, #1
 8001808:	e291      	b.n	8001d2e <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	f003 0301 	and.w	r3, r3, #1
 8001812:	2b00      	cmp	r3, #0
 8001814:	f000 8087 	beq.w	8001926 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001818:	4b96      	ldr	r3, [pc, #600]	; (8001a74 <HAL_RCC_OscConfig+0x280>)
 800181a:	689b      	ldr	r3, [r3, #8]
 800181c:	f003 030c 	and.w	r3, r3, #12
 8001820:	2b04      	cmp	r3, #4
 8001822:	d00c      	beq.n	800183e <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001824:	4b93      	ldr	r3, [pc, #588]	; (8001a74 <HAL_RCC_OscConfig+0x280>)
 8001826:	689b      	ldr	r3, [r3, #8]
 8001828:	f003 030c 	and.w	r3, r3, #12
 800182c:	2b08      	cmp	r3, #8
 800182e:	d112      	bne.n	8001856 <HAL_RCC_OscConfig+0x62>
 8001830:	4b90      	ldr	r3, [pc, #576]	; (8001a74 <HAL_RCC_OscConfig+0x280>)
 8001832:	685b      	ldr	r3, [r3, #4]
 8001834:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001838:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800183c:	d10b      	bne.n	8001856 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800183e:	4b8d      	ldr	r3, [pc, #564]	; (8001a74 <HAL_RCC_OscConfig+0x280>)
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001846:	2b00      	cmp	r3, #0
 8001848:	d06c      	beq.n	8001924 <HAL_RCC_OscConfig+0x130>
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	685b      	ldr	r3, [r3, #4]
 800184e:	2b00      	cmp	r3, #0
 8001850:	d168      	bne.n	8001924 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8001852:	2301      	movs	r3, #1
 8001854:	e26b      	b.n	8001d2e <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	685b      	ldr	r3, [r3, #4]
 800185a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800185e:	d106      	bne.n	800186e <HAL_RCC_OscConfig+0x7a>
 8001860:	4b84      	ldr	r3, [pc, #528]	; (8001a74 <HAL_RCC_OscConfig+0x280>)
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	4a83      	ldr	r2, [pc, #524]	; (8001a74 <HAL_RCC_OscConfig+0x280>)
 8001866:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800186a:	6013      	str	r3, [r2, #0]
 800186c:	e02e      	b.n	80018cc <HAL_RCC_OscConfig+0xd8>
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	685b      	ldr	r3, [r3, #4]
 8001872:	2b00      	cmp	r3, #0
 8001874:	d10c      	bne.n	8001890 <HAL_RCC_OscConfig+0x9c>
 8001876:	4b7f      	ldr	r3, [pc, #508]	; (8001a74 <HAL_RCC_OscConfig+0x280>)
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	4a7e      	ldr	r2, [pc, #504]	; (8001a74 <HAL_RCC_OscConfig+0x280>)
 800187c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001880:	6013      	str	r3, [r2, #0]
 8001882:	4b7c      	ldr	r3, [pc, #496]	; (8001a74 <HAL_RCC_OscConfig+0x280>)
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	4a7b      	ldr	r2, [pc, #492]	; (8001a74 <HAL_RCC_OscConfig+0x280>)
 8001888:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800188c:	6013      	str	r3, [r2, #0]
 800188e:	e01d      	b.n	80018cc <HAL_RCC_OscConfig+0xd8>
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	685b      	ldr	r3, [r3, #4]
 8001894:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001898:	d10c      	bne.n	80018b4 <HAL_RCC_OscConfig+0xc0>
 800189a:	4b76      	ldr	r3, [pc, #472]	; (8001a74 <HAL_RCC_OscConfig+0x280>)
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	4a75      	ldr	r2, [pc, #468]	; (8001a74 <HAL_RCC_OscConfig+0x280>)
 80018a0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80018a4:	6013      	str	r3, [r2, #0]
 80018a6:	4b73      	ldr	r3, [pc, #460]	; (8001a74 <HAL_RCC_OscConfig+0x280>)
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	4a72      	ldr	r2, [pc, #456]	; (8001a74 <HAL_RCC_OscConfig+0x280>)
 80018ac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80018b0:	6013      	str	r3, [r2, #0]
 80018b2:	e00b      	b.n	80018cc <HAL_RCC_OscConfig+0xd8>
 80018b4:	4b6f      	ldr	r3, [pc, #444]	; (8001a74 <HAL_RCC_OscConfig+0x280>)
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	4a6e      	ldr	r2, [pc, #440]	; (8001a74 <HAL_RCC_OscConfig+0x280>)
 80018ba:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80018be:	6013      	str	r3, [r2, #0]
 80018c0:	4b6c      	ldr	r3, [pc, #432]	; (8001a74 <HAL_RCC_OscConfig+0x280>)
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	4a6b      	ldr	r2, [pc, #428]	; (8001a74 <HAL_RCC_OscConfig+0x280>)
 80018c6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80018ca:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	685b      	ldr	r3, [r3, #4]
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	d013      	beq.n	80018fc <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018d4:	f7ff fb12 	bl	8000efc <HAL_GetTick>
 80018d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80018da:	e008      	b.n	80018ee <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80018dc:	f7ff fb0e 	bl	8000efc <HAL_GetTick>
 80018e0:	4602      	mov	r2, r0
 80018e2:	693b      	ldr	r3, [r7, #16]
 80018e4:	1ad3      	subs	r3, r2, r3
 80018e6:	2b64      	cmp	r3, #100	; 0x64
 80018e8:	d901      	bls.n	80018ee <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80018ea:	2303      	movs	r3, #3
 80018ec:	e21f      	b.n	8001d2e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80018ee:	4b61      	ldr	r3, [pc, #388]	; (8001a74 <HAL_RCC_OscConfig+0x280>)
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	d0f0      	beq.n	80018dc <HAL_RCC_OscConfig+0xe8>
 80018fa:	e014      	b.n	8001926 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018fc:	f7ff fafe 	bl	8000efc <HAL_GetTick>
 8001900:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001902:	e008      	b.n	8001916 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001904:	f7ff fafa 	bl	8000efc <HAL_GetTick>
 8001908:	4602      	mov	r2, r0
 800190a:	693b      	ldr	r3, [r7, #16]
 800190c:	1ad3      	subs	r3, r2, r3
 800190e:	2b64      	cmp	r3, #100	; 0x64
 8001910:	d901      	bls.n	8001916 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8001912:	2303      	movs	r3, #3
 8001914:	e20b      	b.n	8001d2e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001916:	4b57      	ldr	r3, [pc, #348]	; (8001a74 <HAL_RCC_OscConfig+0x280>)
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800191e:	2b00      	cmp	r3, #0
 8001920:	d1f0      	bne.n	8001904 <HAL_RCC_OscConfig+0x110>
 8001922:	e000      	b.n	8001926 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001924:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	f003 0302 	and.w	r3, r3, #2
 800192e:	2b00      	cmp	r3, #0
 8001930:	d069      	beq.n	8001a06 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001932:	4b50      	ldr	r3, [pc, #320]	; (8001a74 <HAL_RCC_OscConfig+0x280>)
 8001934:	689b      	ldr	r3, [r3, #8]
 8001936:	f003 030c 	and.w	r3, r3, #12
 800193a:	2b00      	cmp	r3, #0
 800193c:	d00b      	beq.n	8001956 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800193e:	4b4d      	ldr	r3, [pc, #308]	; (8001a74 <HAL_RCC_OscConfig+0x280>)
 8001940:	689b      	ldr	r3, [r3, #8]
 8001942:	f003 030c 	and.w	r3, r3, #12
 8001946:	2b08      	cmp	r3, #8
 8001948:	d11c      	bne.n	8001984 <HAL_RCC_OscConfig+0x190>
 800194a:	4b4a      	ldr	r3, [pc, #296]	; (8001a74 <HAL_RCC_OscConfig+0x280>)
 800194c:	685b      	ldr	r3, [r3, #4]
 800194e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001952:	2b00      	cmp	r3, #0
 8001954:	d116      	bne.n	8001984 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001956:	4b47      	ldr	r3, [pc, #284]	; (8001a74 <HAL_RCC_OscConfig+0x280>)
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	f003 0302 	and.w	r3, r3, #2
 800195e:	2b00      	cmp	r3, #0
 8001960:	d005      	beq.n	800196e <HAL_RCC_OscConfig+0x17a>
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	68db      	ldr	r3, [r3, #12]
 8001966:	2b01      	cmp	r3, #1
 8001968:	d001      	beq.n	800196e <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800196a:	2301      	movs	r3, #1
 800196c:	e1df      	b.n	8001d2e <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800196e:	4b41      	ldr	r3, [pc, #260]	; (8001a74 <HAL_RCC_OscConfig+0x280>)
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	691b      	ldr	r3, [r3, #16]
 800197a:	00db      	lsls	r3, r3, #3
 800197c:	493d      	ldr	r1, [pc, #244]	; (8001a74 <HAL_RCC_OscConfig+0x280>)
 800197e:	4313      	orrs	r3, r2
 8001980:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001982:	e040      	b.n	8001a06 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	68db      	ldr	r3, [r3, #12]
 8001988:	2b00      	cmp	r3, #0
 800198a:	d023      	beq.n	80019d4 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800198c:	4b39      	ldr	r3, [pc, #228]	; (8001a74 <HAL_RCC_OscConfig+0x280>)
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	4a38      	ldr	r2, [pc, #224]	; (8001a74 <HAL_RCC_OscConfig+0x280>)
 8001992:	f043 0301 	orr.w	r3, r3, #1
 8001996:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001998:	f7ff fab0 	bl	8000efc <HAL_GetTick>
 800199c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800199e:	e008      	b.n	80019b2 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80019a0:	f7ff faac 	bl	8000efc <HAL_GetTick>
 80019a4:	4602      	mov	r2, r0
 80019a6:	693b      	ldr	r3, [r7, #16]
 80019a8:	1ad3      	subs	r3, r2, r3
 80019aa:	2b02      	cmp	r3, #2
 80019ac:	d901      	bls.n	80019b2 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 80019ae:	2303      	movs	r3, #3
 80019b0:	e1bd      	b.n	8001d2e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80019b2:	4b30      	ldr	r3, [pc, #192]	; (8001a74 <HAL_RCC_OscConfig+0x280>)
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	f003 0302 	and.w	r3, r3, #2
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d0f0      	beq.n	80019a0 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80019be:	4b2d      	ldr	r3, [pc, #180]	; (8001a74 <HAL_RCC_OscConfig+0x280>)
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	691b      	ldr	r3, [r3, #16]
 80019ca:	00db      	lsls	r3, r3, #3
 80019cc:	4929      	ldr	r1, [pc, #164]	; (8001a74 <HAL_RCC_OscConfig+0x280>)
 80019ce:	4313      	orrs	r3, r2
 80019d0:	600b      	str	r3, [r1, #0]
 80019d2:	e018      	b.n	8001a06 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80019d4:	4b27      	ldr	r3, [pc, #156]	; (8001a74 <HAL_RCC_OscConfig+0x280>)
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	4a26      	ldr	r2, [pc, #152]	; (8001a74 <HAL_RCC_OscConfig+0x280>)
 80019da:	f023 0301 	bic.w	r3, r3, #1
 80019de:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019e0:	f7ff fa8c 	bl	8000efc <HAL_GetTick>
 80019e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80019e6:	e008      	b.n	80019fa <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80019e8:	f7ff fa88 	bl	8000efc <HAL_GetTick>
 80019ec:	4602      	mov	r2, r0
 80019ee:	693b      	ldr	r3, [r7, #16]
 80019f0:	1ad3      	subs	r3, r2, r3
 80019f2:	2b02      	cmp	r3, #2
 80019f4:	d901      	bls.n	80019fa <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80019f6:	2303      	movs	r3, #3
 80019f8:	e199      	b.n	8001d2e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80019fa:	4b1e      	ldr	r3, [pc, #120]	; (8001a74 <HAL_RCC_OscConfig+0x280>)
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	f003 0302 	and.w	r3, r3, #2
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	d1f0      	bne.n	80019e8 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	f003 0308 	and.w	r3, r3, #8
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d038      	beq.n	8001a84 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	695b      	ldr	r3, [r3, #20]
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d019      	beq.n	8001a4e <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001a1a:	4b16      	ldr	r3, [pc, #88]	; (8001a74 <HAL_RCC_OscConfig+0x280>)
 8001a1c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001a1e:	4a15      	ldr	r2, [pc, #84]	; (8001a74 <HAL_RCC_OscConfig+0x280>)
 8001a20:	f043 0301 	orr.w	r3, r3, #1
 8001a24:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a26:	f7ff fa69 	bl	8000efc <HAL_GetTick>
 8001a2a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001a2c:	e008      	b.n	8001a40 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001a2e:	f7ff fa65 	bl	8000efc <HAL_GetTick>
 8001a32:	4602      	mov	r2, r0
 8001a34:	693b      	ldr	r3, [r7, #16]
 8001a36:	1ad3      	subs	r3, r2, r3
 8001a38:	2b02      	cmp	r3, #2
 8001a3a:	d901      	bls.n	8001a40 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001a3c:	2303      	movs	r3, #3
 8001a3e:	e176      	b.n	8001d2e <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001a40:	4b0c      	ldr	r3, [pc, #48]	; (8001a74 <HAL_RCC_OscConfig+0x280>)
 8001a42:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001a44:	f003 0302 	and.w	r3, r3, #2
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	d0f0      	beq.n	8001a2e <HAL_RCC_OscConfig+0x23a>
 8001a4c:	e01a      	b.n	8001a84 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001a4e:	4b09      	ldr	r3, [pc, #36]	; (8001a74 <HAL_RCC_OscConfig+0x280>)
 8001a50:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001a52:	4a08      	ldr	r2, [pc, #32]	; (8001a74 <HAL_RCC_OscConfig+0x280>)
 8001a54:	f023 0301 	bic.w	r3, r3, #1
 8001a58:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a5a:	f7ff fa4f 	bl	8000efc <HAL_GetTick>
 8001a5e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001a60:	e00a      	b.n	8001a78 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001a62:	f7ff fa4b 	bl	8000efc <HAL_GetTick>
 8001a66:	4602      	mov	r2, r0
 8001a68:	693b      	ldr	r3, [r7, #16]
 8001a6a:	1ad3      	subs	r3, r2, r3
 8001a6c:	2b02      	cmp	r3, #2
 8001a6e:	d903      	bls.n	8001a78 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8001a70:	2303      	movs	r3, #3
 8001a72:	e15c      	b.n	8001d2e <HAL_RCC_OscConfig+0x53a>
 8001a74:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001a78:	4b91      	ldr	r3, [pc, #580]	; (8001cc0 <HAL_RCC_OscConfig+0x4cc>)
 8001a7a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001a7c:	f003 0302 	and.w	r3, r3, #2
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	d1ee      	bne.n	8001a62 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	f003 0304 	and.w	r3, r3, #4
 8001a8c:	2b00      	cmp	r3, #0
 8001a8e:	f000 80a4 	beq.w	8001bda <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001a92:	4b8b      	ldr	r3, [pc, #556]	; (8001cc0 <HAL_RCC_OscConfig+0x4cc>)
 8001a94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a96:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	d10d      	bne.n	8001aba <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8001a9e:	4b88      	ldr	r3, [pc, #544]	; (8001cc0 <HAL_RCC_OscConfig+0x4cc>)
 8001aa0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001aa2:	4a87      	ldr	r2, [pc, #540]	; (8001cc0 <HAL_RCC_OscConfig+0x4cc>)
 8001aa4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001aa8:	6413      	str	r3, [r2, #64]	; 0x40
 8001aaa:	4b85      	ldr	r3, [pc, #532]	; (8001cc0 <HAL_RCC_OscConfig+0x4cc>)
 8001aac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001aae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ab2:	60bb      	str	r3, [r7, #8]
 8001ab4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001ab6:	2301      	movs	r3, #1
 8001ab8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001aba:	4b82      	ldr	r3, [pc, #520]	; (8001cc4 <HAL_RCC_OscConfig+0x4d0>)
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	d118      	bne.n	8001af8 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8001ac6:	4b7f      	ldr	r3, [pc, #508]	; (8001cc4 <HAL_RCC_OscConfig+0x4d0>)
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	4a7e      	ldr	r2, [pc, #504]	; (8001cc4 <HAL_RCC_OscConfig+0x4d0>)
 8001acc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001ad0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001ad2:	f7ff fa13 	bl	8000efc <HAL_GetTick>
 8001ad6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001ad8:	e008      	b.n	8001aec <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001ada:	f7ff fa0f 	bl	8000efc <HAL_GetTick>
 8001ade:	4602      	mov	r2, r0
 8001ae0:	693b      	ldr	r3, [r7, #16]
 8001ae2:	1ad3      	subs	r3, r2, r3
 8001ae4:	2b64      	cmp	r3, #100	; 0x64
 8001ae6:	d901      	bls.n	8001aec <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8001ae8:	2303      	movs	r3, #3
 8001aea:	e120      	b.n	8001d2e <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001aec:	4b75      	ldr	r3, [pc, #468]	; (8001cc4 <HAL_RCC_OscConfig+0x4d0>)
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	d0f0      	beq.n	8001ada <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	689b      	ldr	r3, [r3, #8]
 8001afc:	2b01      	cmp	r3, #1
 8001afe:	d106      	bne.n	8001b0e <HAL_RCC_OscConfig+0x31a>
 8001b00:	4b6f      	ldr	r3, [pc, #444]	; (8001cc0 <HAL_RCC_OscConfig+0x4cc>)
 8001b02:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b04:	4a6e      	ldr	r2, [pc, #440]	; (8001cc0 <HAL_RCC_OscConfig+0x4cc>)
 8001b06:	f043 0301 	orr.w	r3, r3, #1
 8001b0a:	6713      	str	r3, [r2, #112]	; 0x70
 8001b0c:	e02d      	b.n	8001b6a <HAL_RCC_OscConfig+0x376>
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	689b      	ldr	r3, [r3, #8]
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d10c      	bne.n	8001b30 <HAL_RCC_OscConfig+0x33c>
 8001b16:	4b6a      	ldr	r3, [pc, #424]	; (8001cc0 <HAL_RCC_OscConfig+0x4cc>)
 8001b18:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b1a:	4a69      	ldr	r2, [pc, #420]	; (8001cc0 <HAL_RCC_OscConfig+0x4cc>)
 8001b1c:	f023 0301 	bic.w	r3, r3, #1
 8001b20:	6713      	str	r3, [r2, #112]	; 0x70
 8001b22:	4b67      	ldr	r3, [pc, #412]	; (8001cc0 <HAL_RCC_OscConfig+0x4cc>)
 8001b24:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b26:	4a66      	ldr	r2, [pc, #408]	; (8001cc0 <HAL_RCC_OscConfig+0x4cc>)
 8001b28:	f023 0304 	bic.w	r3, r3, #4
 8001b2c:	6713      	str	r3, [r2, #112]	; 0x70
 8001b2e:	e01c      	b.n	8001b6a <HAL_RCC_OscConfig+0x376>
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	689b      	ldr	r3, [r3, #8]
 8001b34:	2b05      	cmp	r3, #5
 8001b36:	d10c      	bne.n	8001b52 <HAL_RCC_OscConfig+0x35e>
 8001b38:	4b61      	ldr	r3, [pc, #388]	; (8001cc0 <HAL_RCC_OscConfig+0x4cc>)
 8001b3a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b3c:	4a60      	ldr	r2, [pc, #384]	; (8001cc0 <HAL_RCC_OscConfig+0x4cc>)
 8001b3e:	f043 0304 	orr.w	r3, r3, #4
 8001b42:	6713      	str	r3, [r2, #112]	; 0x70
 8001b44:	4b5e      	ldr	r3, [pc, #376]	; (8001cc0 <HAL_RCC_OscConfig+0x4cc>)
 8001b46:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b48:	4a5d      	ldr	r2, [pc, #372]	; (8001cc0 <HAL_RCC_OscConfig+0x4cc>)
 8001b4a:	f043 0301 	orr.w	r3, r3, #1
 8001b4e:	6713      	str	r3, [r2, #112]	; 0x70
 8001b50:	e00b      	b.n	8001b6a <HAL_RCC_OscConfig+0x376>
 8001b52:	4b5b      	ldr	r3, [pc, #364]	; (8001cc0 <HAL_RCC_OscConfig+0x4cc>)
 8001b54:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b56:	4a5a      	ldr	r2, [pc, #360]	; (8001cc0 <HAL_RCC_OscConfig+0x4cc>)
 8001b58:	f023 0301 	bic.w	r3, r3, #1
 8001b5c:	6713      	str	r3, [r2, #112]	; 0x70
 8001b5e:	4b58      	ldr	r3, [pc, #352]	; (8001cc0 <HAL_RCC_OscConfig+0x4cc>)
 8001b60:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b62:	4a57      	ldr	r2, [pc, #348]	; (8001cc0 <HAL_RCC_OscConfig+0x4cc>)
 8001b64:	f023 0304 	bic.w	r3, r3, #4
 8001b68:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	689b      	ldr	r3, [r3, #8]
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d015      	beq.n	8001b9e <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b72:	f7ff f9c3 	bl	8000efc <HAL_GetTick>
 8001b76:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001b78:	e00a      	b.n	8001b90 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001b7a:	f7ff f9bf 	bl	8000efc <HAL_GetTick>
 8001b7e:	4602      	mov	r2, r0
 8001b80:	693b      	ldr	r3, [r7, #16]
 8001b82:	1ad3      	subs	r3, r2, r3
 8001b84:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b88:	4293      	cmp	r3, r2
 8001b8a:	d901      	bls.n	8001b90 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8001b8c:	2303      	movs	r3, #3
 8001b8e:	e0ce      	b.n	8001d2e <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001b90:	4b4b      	ldr	r3, [pc, #300]	; (8001cc0 <HAL_RCC_OscConfig+0x4cc>)
 8001b92:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b94:	f003 0302 	and.w	r3, r3, #2
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	d0ee      	beq.n	8001b7a <HAL_RCC_OscConfig+0x386>
 8001b9c:	e014      	b.n	8001bc8 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b9e:	f7ff f9ad 	bl	8000efc <HAL_GetTick>
 8001ba2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001ba4:	e00a      	b.n	8001bbc <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001ba6:	f7ff f9a9 	bl	8000efc <HAL_GetTick>
 8001baa:	4602      	mov	r2, r0
 8001bac:	693b      	ldr	r3, [r7, #16]
 8001bae:	1ad3      	subs	r3, r2, r3
 8001bb0:	f241 3288 	movw	r2, #5000	; 0x1388
 8001bb4:	4293      	cmp	r3, r2
 8001bb6:	d901      	bls.n	8001bbc <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8001bb8:	2303      	movs	r3, #3
 8001bba:	e0b8      	b.n	8001d2e <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001bbc:	4b40      	ldr	r3, [pc, #256]	; (8001cc0 <HAL_RCC_OscConfig+0x4cc>)
 8001bbe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001bc0:	f003 0302 	and.w	r3, r3, #2
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	d1ee      	bne.n	8001ba6 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001bc8:	7dfb      	ldrb	r3, [r7, #23]
 8001bca:	2b01      	cmp	r3, #1
 8001bcc:	d105      	bne.n	8001bda <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001bce:	4b3c      	ldr	r3, [pc, #240]	; (8001cc0 <HAL_RCC_OscConfig+0x4cc>)
 8001bd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bd2:	4a3b      	ldr	r2, [pc, #236]	; (8001cc0 <HAL_RCC_OscConfig+0x4cc>)
 8001bd4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001bd8:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	699b      	ldr	r3, [r3, #24]
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	f000 80a4 	beq.w	8001d2c <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001be4:	4b36      	ldr	r3, [pc, #216]	; (8001cc0 <HAL_RCC_OscConfig+0x4cc>)
 8001be6:	689b      	ldr	r3, [r3, #8]
 8001be8:	f003 030c 	and.w	r3, r3, #12
 8001bec:	2b08      	cmp	r3, #8
 8001bee:	d06b      	beq.n	8001cc8 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	699b      	ldr	r3, [r3, #24]
 8001bf4:	2b02      	cmp	r3, #2
 8001bf6:	d149      	bne.n	8001c8c <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001bf8:	4b31      	ldr	r3, [pc, #196]	; (8001cc0 <HAL_RCC_OscConfig+0x4cc>)
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	4a30      	ldr	r2, [pc, #192]	; (8001cc0 <HAL_RCC_OscConfig+0x4cc>)
 8001bfe:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001c02:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c04:	f7ff f97a 	bl	8000efc <HAL_GetTick>
 8001c08:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001c0a:	e008      	b.n	8001c1e <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c0c:	f7ff f976 	bl	8000efc <HAL_GetTick>
 8001c10:	4602      	mov	r2, r0
 8001c12:	693b      	ldr	r3, [r7, #16]
 8001c14:	1ad3      	subs	r3, r2, r3
 8001c16:	2b02      	cmp	r3, #2
 8001c18:	d901      	bls.n	8001c1e <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8001c1a:	2303      	movs	r3, #3
 8001c1c:	e087      	b.n	8001d2e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001c1e:	4b28      	ldr	r3, [pc, #160]	; (8001cc0 <HAL_RCC_OscConfig+0x4cc>)
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d1f0      	bne.n	8001c0c <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	69da      	ldr	r2, [r3, #28]
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	6a1b      	ldr	r3, [r3, #32]
 8001c32:	431a      	orrs	r2, r3
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c38:	019b      	lsls	r3, r3, #6
 8001c3a:	431a      	orrs	r2, r3
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c40:	085b      	lsrs	r3, r3, #1
 8001c42:	3b01      	subs	r3, #1
 8001c44:	041b      	lsls	r3, r3, #16
 8001c46:	431a      	orrs	r2, r3
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c4c:	061b      	lsls	r3, r3, #24
 8001c4e:	4313      	orrs	r3, r2
 8001c50:	4a1b      	ldr	r2, [pc, #108]	; (8001cc0 <HAL_RCC_OscConfig+0x4cc>)
 8001c52:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8001c56:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001c58:	4b19      	ldr	r3, [pc, #100]	; (8001cc0 <HAL_RCC_OscConfig+0x4cc>)
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	4a18      	ldr	r2, [pc, #96]	; (8001cc0 <HAL_RCC_OscConfig+0x4cc>)
 8001c5e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001c62:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c64:	f7ff f94a 	bl	8000efc <HAL_GetTick>
 8001c68:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001c6a:	e008      	b.n	8001c7e <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c6c:	f7ff f946 	bl	8000efc <HAL_GetTick>
 8001c70:	4602      	mov	r2, r0
 8001c72:	693b      	ldr	r3, [r7, #16]
 8001c74:	1ad3      	subs	r3, r2, r3
 8001c76:	2b02      	cmp	r3, #2
 8001c78:	d901      	bls.n	8001c7e <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 8001c7a:	2303      	movs	r3, #3
 8001c7c:	e057      	b.n	8001d2e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001c7e:	4b10      	ldr	r3, [pc, #64]	; (8001cc0 <HAL_RCC_OscConfig+0x4cc>)
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	d0f0      	beq.n	8001c6c <HAL_RCC_OscConfig+0x478>
 8001c8a:	e04f      	b.n	8001d2c <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c8c:	4b0c      	ldr	r3, [pc, #48]	; (8001cc0 <HAL_RCC_OscConfig+0x4cc>)
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	4a0b      	ldr	r2, [pc, #44]	; (8001cc0 <HAL_RCC_OscConfig+0x4cc>)
 8001c92:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001c96:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c98:	f7ff f930 	bl	8000efc <HAL_GetTick>
 8001c9c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001c9e:	e008      	b.n	8001cb2 <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ca0:	f7ff f92c 	bl	8000efc <HAL_GetTick>
 8001ca4:	4602      	mov	r2, r0
 8001ca6:	693b      	ldr	r3, [r7, #16]
 8001ca8:	1ad3      	subs	r3, r2, r3
 8001caa:	2b02      	cmp	r3, #2
 8001cac:	d901      	bls.n	8001cb2 <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 8001cae:	2303      	movs	r3, #3
 8001cb0:	e03d      	b.n	8001d2e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001cb2:	4b03      	ldr	r3, [pc, #12]	; (8001cc0 <HAL_RCC_OscConfig+0x4cc>)
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	d1f0      	bne.n	8001ca0 <HAL_RCC_OscConfig+0x4ac>
 8001cbe:	e035      	b.n	8001d2c <HAL_RCC_OscConfig+0x538>
 8001cc0:	40023800 	.word	0x40023800
 8001cc4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8001cc8:	4b1b      	ldr	r3, [pc, #108]	; (8001d38 <HAL_RCC_OscConfig+0x544>)
 8001cca:	685b      	ldr	r3, [r3, #4]
 8001ccc:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	699b      	ldr	r3, [r3, #24]
 8001cd2:	2b01      	cmp	r3, #1
 8001cd4:	d028      	beq.n	8001d28 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001cd6:	68fb      	ldr	r3, [r7, #12]
 8001cd8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001ce0:	429a      	cmp	r2, r3
 8001ce2:	d121      	bne.n	8001d28 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001ce4:	68fb      	ldr	r3, [r7, #12]
 8001ce6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001cee:	429a      	cmp	r2, r3
 8001cf0:	d11a      	bne.n	8001d28 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001cf2:	68fa      	ldr	r2, [r7, #12]
 8001cf4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001cf8:	4013      	ands	r3, r2
 8001cfa:	687a      	ldr	r2, [r7, #4]
 8001cfc:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001cfe:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001d00:	4293      	cmp	r3, r2
 8001d02:	d111      	bne.n	8001d28 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8001d04:	68fb      	ldr	r3, [r7, #12]
 8001d06:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d0e:	085b      	lsrs	r3, r3, #1
 8001d10:	3b01      	subs	r3, #1
 8001d12:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001d14:	429a      	cmp	r2, r3
 8001d16:	d107      	bne.n	8001d28 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001d18:	68fb      	ldr	r3, [r7, #12]
 8001d1a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d22:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8001d24:	429a      	cmp	r2, r3
 8001d26:	d001      	beq.n	8001d2c <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8001d28:	2301      	movs	r3, #1
 8001d2a:	e000      	b.n	8001d2e <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8001d2c:	2300      	movs	r3, #0
}
 8001d2e:	4618      	mov	r0, r3
 8001d30:	3718      	adds	r7, #24
 8001d32:	46bd      	mov	sp, r7
 8001d34:	bd80      	pop	{r7, pc}
 8001d36:	bf00      	nop
 8001d38:	40023800 	.word	0x40023800

08001d3c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001d3c:	b580      	push	{r7, lr}
 8001d3e:	b084      	sub	sp, #16
 8001d40:	af00      	add	r7, sp, #0
 8001d42:	6078      	str	r0, [r7, #4]
 8001d44:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8001d46:	2300      	movs	r3, #0
 8001d48:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d101      	bne.n	8001d54 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001d50:	2301      	movs	r3, #1
 8001d52:	e0d0      	b.n	8001ef6 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001d54:	4b6a      	ldr	r3, [pc, #424]	; (8001f00 <HAL_RCC_ClockConfig+0x1c4>)
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	f003 030f 	and.w	r3, r3, #15
 8001d5c:	683a      	ldr	r2, [r7, #0]
 8001d5e:	429a      	cmp	r2, r3
 8001d60:	d910      	bls.n	8001d84 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d62:	4b67      	ldr	r3, [pc, #412]	; (8001f00 <HAL_RCC_ClockConfig+0x1c4>)
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	f023 020f 	bic.w	r2, r3, #15
 8001d6a:	4965      	ldr	r1, [pc, #404]	; (8001f00 <HAL_RCC_ClockConfig+0x1c4>)
 8001d6c:	683b      	ldr	r3, [r7, #0]
 8001d6e:	4313      	orrs	r3, r2
 8001d70:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d72:	4b63      	ldr	r3, [pc, #396]	; (8001f00 <HAL_RCC_ClockConfig+0x1c4>)
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	f003 030f 	and.w	r3, r3, #15
 8001d7a:	683a      	ldr	r2, [r7, #0]
 8001d7c:	429a      	cmp	r2, r3
 8001d7e:	d001      	beq.n	8001d84 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001d80:	2301      	movs	r3, #1
 8001d82:	e0b8      	b.n	8001ef6 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	f003 0302 	and.w	r3, r3, #2
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	d020      	beq.n	8001dd2 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	f003 0304 	and.w	r3, r3, #4
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	d005      	beq.n	8001da8 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001d9c:	4b59      	ldr	r3, [pc, #356]	; (8001f04 <HAL_RCC_ClockConfig+0x1c8>)
 8001d9e:	689b      	ldr	r3, [r3, #8]
 8001da0:	4a58      	ldr	r2, [pc, #352]	; (8001f04 <HAL_RCC_ClockConfig+0x1c8>)
 8001da2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001da6:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	f003 0308 	and.w	r3, r3, #8
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	d005      	beq.n	8001dc0 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001db4:	4b53      	ldr	r3, [pc, #332]	; (8001f04 <HAL_RCC_ClockConfig+0x1c8>)
 8001db6:	689b      	ldr	r3, [r3, #8]
 8001db8:	4a52      	ldr	r2, [pc, #328]	; (8001f04 <HAL_RCC_ClockConfig+0x1c8>)
 8001dba:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001dbe:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001dc0:	4b50      	ldr	r3, [pc, #320]	; (8001f04 <HAL_RCC_ClockConfig+0x1c8>)
 8001dc2:	689b      	ldr	r3, [r3, #8]
 8001dc4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	689b      	ldr	r3, [r3, #8]
 8001dcc:	494d      	ldr	r1, [pc, #308]	; (8001f04 <HAL_RCC_ClockConfig+0x1c8>)
 8001dce:	4313      	orrs	r3, r2
 8001dd0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	f003 0301 	and.w	r3, r3, #1
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d040      	beq.n	8001e60 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	685b      	ldr	r3, [r3, #4]
 8001de2:	2b01      	cmp	r3, #1
 8001de4:	d107      	bne.n	8001df6 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001de6:	4b47      	ldr	r3, [pc, #284]	; (8001f04 <HAL_RCC_ClockConfig+0x1c8>)
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d115      	bne.n	8001e1e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8001df2:	2301      	movs	r3, #1
 8001df4:	e07f      	b.n	8001ef6 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	685b      	ldr	r3, [r3, #4]
 8001dfa:	2b02      	cmp	r3, #2
 8001dfc:	d107      	bne.n	8001e0e <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001dfe:	4b41      	ldr	r3, [pc, #260]	; (8001f04 <HAL_RCC_ClockConfig+0x1c8>)
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d109      	bne.n	8001e1e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8001e0a:	2301      	movs	r3, #1
 8001e0c:	e073      	b.n	8001ef6 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e0e:	4b3d      	ldr	r3, [pc, #244]	; (8001f04 <HAL_RCC_ClockConfig+0x1c8>)
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	f003 0302 	and.w	r3, r3, #2
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d101      	bne.n	8001e1e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8001e1a:	2301      	movs	r3, #1
 8001e1c:	e06b      	b.n	8001ef6 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001e1e:	4b39      	ldr	r3, [pc, #228]	; (8001f04 <HAL_RCC_ClockConfig+0x1c8>)
 8001e20:	689b      	ldr	r3, [r3, #8]
 8001e22:	f023 0203 	bic.w	r2, r3, #3
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	685b      	ldr	r3, [r3, #4]
 8001e2a:	4936      	ldr	r1, [pc, #216]	; (8001f04 <HAL_RCC_ClockConfig+0x1c8>)
 8001e2c:	4313      	orrs	r3, r2
 8001e2e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001e30:	f7ff f864 	bl	8000efc <HAL_GetTick>
 8001e34:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e36:	e00a      	b.n	8001e4e <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001e38:	f7ff f860 	bl	8000efc <HAL_GetTick>
 8001e3c:	4602      	mov	r2, r0
 8001e3e:	68fb      	ldr	r3, [r7, #12]
 8001e40:	1ad3      	subs	r3, r2, r3
 8001e42:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e46:	4293      	cmp	r3, r2
 8001e48:	d901      	bls.n	8001e4e <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8001e4a:	2303      	movs	r3, #3
 8001e4c:	e053      	b.n	8001ef6 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e4e:	4b2d      	ldr	r3, [pc, #180]	; (8001f04 <HAL_RCC_ClockConfig+0x1c8>)
 8001e50:	689b      	ldr	r3, [r3, #8]
 8001e52:	f003 020c 	and.w	r2, r3, #12
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	685b      	ldr	r3, [r3, #4]
 8001e5a:	009b      	lsls	r3, r3, #2
 8001e5c:	429a      	cmp	r2, r3
 8001e5e:	d1eb      	bne.n	8001e38 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001e60:	4b27      	ldr	r3, [pc, #156]	; (8001f00 <HAL_RCC_ClockConfig+0x1c4>)
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	f003 030f 	and.w	r3, r3, #15
 8001e68:	683a      	ldr	r2, [r7, #0]
 8001e6a:	429a      	cmp	r2, r3
 8001e6c:	d210      	bcs.n	8001e90 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e6e:	4b24      	ldr	r3, [pc, #144]	; (8001f00 <HAL_RCC_ClockConfig+0x1c4>)
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	f023 020f 	bic.w	r2, r3, #15
 8001e76:	4922      	ldr	r1, [pc, #136]	; (8001f00 <HAL_RCC_ClockConfig+0x1c4>)
 8001e78:	683b      	ldr	r3, [r7, #0]
 8001e7a:	4313      	orrs	r3, r2
 8001e7c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e7e:	4b20      	ldr	r3, [pc, #128]	; (8001f00 <HAL_RCC_ClockConfig+0x1c4>)
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	f003 030f 	and.w	r3, r3, #15
 8001e86:	683a      	ldr	r2, [r7, #0]
 8001e88:	429a      	cmp	r2, r3
 8001e8a:	d001      	beq.n	8001e90 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8001e8c:	2301      	movs	r3, #1
 8001e8e:	e032      	b.n	8001ef6 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	f003 0304 	and.w	r3, r3, #4
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	d008      	beq.n	8001eae <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001e9c:	4b19      	ldr	r3, [pc, #100]	; (8001f04 <HAL_RCC_ClockConfig+0x1c8>)
 8001e9e:	689b      	ldr	r3, [r3, #8]
 8001ea0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	68db      	ldr	r3, [r3, #12]
 8001ea8:	4916      	ldr	r1, [pc, #88]	; (8001f04 <HAL_RCC_ClockConfig+0x1c8>)
 8001eaa:	4313      	orrs	r3, r2
 8001eac:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	f003 0308 	and.w	r3, r3, #8
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d009      	beq.n	8001ece <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001eba:	4b12      	ldr	r3, [pc, #72]	; (8001f04 <HAL_RCC_ClockConfig+0x1c8>)
 8001ebc:	689b      	ldr	r3, [r3, #8]
 8001ebe:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	691b      	ldr	r3, [r3, #16]
 8001ec6:	00db      	lsls	r3, r3, #3
 8001ec8:	490e      	ldr	r1, [pc, #56]	; (8001f04 <HAL_RCC_ClockConfig+0x1c8>)
 8001eca:	4313      	orrs	r3, r2
 8001ecc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001ece:	f000 f821 	bl	8001f14 <HAL_RCC_GetSysClockFreq>
 8001ed2:	4601      	mov	r1, r0
 8001ed4:	4b0b      	ldr	r3, [pc, #44]	; (8001f04 <HAL_RCC_ClockConfig+0x1c8>)
 8001ed6:	689b      	ldr	r3, [r3, #8]
 8001ed8:	091b      	lsrs	r3, r3, #4
 8001eda:	f003 030f 	and.w	r3, r3, #15
 8001ede:	4a0a      	ldr	r2, [pc, #40]	; (8001f08 <HAL_RCC_ClockConfig+0x1cc>)
 8001ee0:	5cd3      	ldrb	r3, [r2, r3]
 8001ee2:	fa21 f303 	lsr.w	r3, r1, r3
 8001ee6:	4a09      	ldr	r2, [pc, #36]	; (8001f0c <HAL_RCC_ClockConfig+0x1d0>)
 8001ee8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001eea:	4b09      	ldr	r3, [pc, #36]	; (8001f10 <HAL_RCC_ClockConfig+0x1d4>)
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	4618      	mov	r0, r3
 8001ef0:	f7fe fea8 	bl	8000c44 <HAL_InitTick>

  return HAL_OK;
 8001ef4:	2300      	movs	r3, #0
}
 8001ef6:	4618      	mov	r0, r3
 8001ef8:	3710      	adds	r7, #16
 8001efa:	46bd      	mov	sp, r7
 8001efc:	bd80      	pop	{r7, pc}
 8001efe:	bf00      	nop
 8001f00:	40023c00 	.word	0x40023c00
 8001f04:	40023800 	.word	0x40023800
 8001f08:	08007770 	.word	0x08007770
 8001f0c:	20000000 	.word	0x20000000
 8001f10:	20000004 	.word	0x20000004

08001f14 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001f14:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001f16:	b085      	sub	sp, #20
 8001f18:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8001f1a:	2300      	movs	r3, #0
 8001f1c:	607b      	str	r3, [r7, #4]
 8001f1e:	2300      	movs	r3, #0
 8001f20:	60fb      	str	r3, [r7, #12]
 8001f22:	2300      	movs	r3, #0
 8001f24:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0;
 8001f26:	2300      	movs	r3, #0
 8001f28:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001f2a:	4b63      	ldr	r3, [pc, #396]	; (80020b8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001f2c:	689b      	ldr	r3, [r3, #8]
 8001f2e:	f003 030c 	and.w	r3, r3, #12
 8001f32:	2b04      	cmp	r3, #4
 8001f34:	d007      	beq.n	8001f46 <HAL_RCC_GetSysClockFreq+0x32>
 8001f36:	2b08      	cmp	r3, #8
 8001f38:	d008      	beq.n	8001f4c <HAL_RCC_GetSysClockFreq+0x38>
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	f040 80b4 	bne.w	80020a8 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001f40:	4b5e      	ldr	r3, [pc, #376]	; (80020bc <HAL_RCC_GetSysClockFreq+0x1a8>)
 8001f42:	60bb      	str	r3, [r7, #8]
      break;
 8001f44:	e0b3      	b.n	80020ae <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001f46:	4b5e      	ldr	r3, [pc, #376]	; (80020c0 <HAL_RCC_GetSysClockFreq+0x1ac>)
 8001f48:	60bb      	str	r3, [r7, #8]
      break;
 8001f4a:	e0b0      	b.n	80020ae <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001f4c:	4b5a      	ldr	r3, [pc, #360]	; (80020b8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001f4e:	685b      	ldr	r3, [r3, #4]
 8001f50:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001f54:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8001f56:	4b58      	ldr	r3, [pc, #352]	; (80020b8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001f58:	685b      	ldr	r3, [r3, #4]
 8001f5a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d04a      	beq.n	8001ff8 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001f62:	4b55      	ldr	r3, [pc, #340]	; (80020b8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001f64:	685b      	ldr	r3, [r3, #4]
 8001f66:	099b      	lsrs	r3, r3, #6
 8001f68:	f04f 0400 	mov.w	r4, #0
 8001f6c:	f240 11ff 	movw	r1, #511	; 0x1ff
 8001f70:	f04f 0200 	mov.w	r2, #0
 8001f74:	ea03 0501 	and.w	r5, r3, r1
 8001f78:	ea04 0602 	and.w	r6, r4, r2
 8001f7c:	4629      	mov	r1, r5
 8001f7e:	4632      	mov	r2, r6
 8001f80:	f04f 0300 	mov.w	r3, #0
 8001f84:	f04f 0400 	mov.w	r4, #0
 8001f88:	0154      	lsls	r4, r2, #5
 8001f8a:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001f8e:	014b      	lsls	r3, r1, #5
 8001f90:	4619      	mov	r1, r3
 8001f92:	4622      	mov	r2, r4
 8001f94:	1b49      	subs	r1, r1, r5
 8001f96:	eb62 0206 	sbc.w	r2, r2, r6
 8001f9a:	f04f 0300 	mov.w	r3, #0
 8001f9e:	f04f 0400 	mov.w	r4, #0
 8001fa2:	0194      	lsls	r4, r2, #6
 8001fa4:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8001fa8:	018b      	lsls	r3, r1, #6
 8001faa:	1a5b      	subs	r3, r3, r1
 8001fac:	eb64 0402 	sbc.w	r4, r4, r2
 8001fb0:	f04f 0100 	mov.w	r1, #0
 8001fb4:	f04f 0200 	mov.w	r2, #0
 8001fb8:	00e2      	lsls	r2, r4, #3
 8001fba:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8001fbe:	00d9      	lsls	r1, r3, #3
 8001fc0:	460b      	mov	r3, r1
 8001fc2:	4614      	mov	r4, r2
 8001fc4:	195b      	adds	r3, r3, r5
 8001fc6:	eb44 0406 	adc.w	r4, r4, r6
 8001fca:	f04f 0100 	mov.w	r1, #0
 8001fce:	f04f 0200 	mov.w	r2, #0
 8001fd2:	0262      	lsls	r2, r4, #9
 8001fd4:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8001fd8:	0259      	lsls	r1, r3, #9
 8001fda:	460b      	mov	r3, r1
 8001fdc:	4614      	mov	r4, r2
 8001fde:	4618      	mov	r0, r3
 8001fe0:	4621      	mov	r1, r4
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	f04f 0400 	mov.w	r4, #0
 8001fe8:	461a      	mov	r2, r3
 8001fea:	4623      	mov	r3, r4
 8001fec:	f7fe f960 	bl	80002b0 <__aeabi_uldivmod>
 8001ff0:	4603      	mov	r3, r0
 8001ff2:	460c      	mov	r4, r1
 8001ff4:	60fb      	str	r3, [r7, #12]
 8001ff6:	e049      	b.n	800208c <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001ff8:	4b2f      	ldr	r3, [pc, #188]	; (80020b8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001ffa:	685b      	ldr	r3, [r3, #4]
 8001ffc:	099b      	lsrs	r3, r3, #6
 8001ffe:	f04f 0400 	mov.w	r4, #0
 8002002:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002006:	f04f 0200 	mov.w	r2, #0
 800200a:	ea03 0501 	and.w	r5, r3, r1
 800200e:	ea04 0602 	and.w	r6, r4, r2
 8002012:	4629      	mov	r1, r5
 8002014:	4632      	mov	r2, r6
 8002016:	f04f 0300 	mov.w	r3, #0
 800201a:	f04f 0400 	mov.w	r4, #0
 800201e:	0154      	lsls	r4, r2, #5
 8002020:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002024:	014b      	lsls	r3, r1, #5
 8002026:	4619      	mov	r1, r3
 8002028:	4622      	mov	r2, r4
 800202a:	1b49      	subs	r1, r1, r5
 800202c:	eb62 0206 	sbc.w	r2, r2, r6
 8002030:	f04f 0300 	mov.w	r3, #0
 8002034:	f04f 0400 	mov.w	r4, #0
 8002038:	0194      	lsls	r4, r2, #6
 800203a:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800203e:	018b      	lsls	r3, r1, #6
 8002040:	1a5b      	subs	r3, r3, r1
 8002042:	eb64 0402 	sbc.w	r4, r4, r2
 8002046:	f04f 0100 	mov.w	r1, #0
 800204a:	f04f 0200 	mov.w	r2, #0
 800204e:	00e2      	lsls	r2, r4, #3
 8002050:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8002054:	00d9      	lsls	r1, r3, #3
 8002056:	460b      	mov	r3, r1
 8002058:	4614      	mov	r4, r2
 800205a:	195b      	adds	r3, r3, r5
 800205c:	eb44 0406 	adc.w	r4, r4, r6
 8002060:	f04f 0100 	mov.w	r1, #0
 8002064:	f04f 0200 	mov.w	r2, #0
 8002068:	02a2      	lsls	r2, r4, #10
 800206a:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 800206e:	0299      	lsls	r1, r3, #10
 8002070:	460b      	mov	r3, r1
 8002072:	4614      	mov	r4, r2
 8002074:	4618      	mov	r0, r3
 8002076:	4621      	mov	r1, r4
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	f04f 0400 	mov.w	r4, #0
 800207e:	461a      	mov	r2, r3
 8002080:	4623      	mov	r3, r4
 8002082:	f7fe f915 	bl	80002b0 <__aeabi_uldivmod>
 8002086:	4603      	mov	r3, r0
 8002088:	460c      	mov	r4, r1
 800208a:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 800208c:	4b0a      	ldr	r3, [pc, #40]	; (80020b8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800208e:	685b      	ldr	r3, [r3, #4]
 8002090:	0c1b      	lsrs	r3, r3, #16
 8002092:	f003 0303 	and.w	r3, r3, #3
 8002096:	3301      	adds	r3, #1
 8002098:	005b      	lsls	r3, r3, #1
 800209a:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 800209c:	68fa      	ldr	r2, [r7, #12]
 800209e:	683b      	ldr	r3, [r7, #0]
 80020a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80020a4:	60bb      	str	r3, [r7, #8]
      break;
 80020a6:	e002      	b.n	80020ae <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80020a8:	4b04      	ldr	r3, [pc, #16]	; (80020bc <HAL_RCC_GetSysClockFreq+0x1a8>)
 80020aa:	60bb      	str	r3, [r7, #8]
      break;
 80020ac:	bf00      	nop
    }
  }
  return sysclockfreq;
 80020ae:	68bb      	ldr	r3, [r7, #8]
}
 80020b0:	4618      	mov	r0, r3
 80020b2:	3714      	adds	r7, #20
 80020b4:	46bd      	mov	sp, r7
 80020b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80020b8:	40023800 	.word	0x40023800
 80020bc:	00f42400 	.word	0x00f42400
 80020c0:	007a1200 	.word	0x007a1200

080020c4 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80020c4:	b480      	push	{r7}
 80020c6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80020c8:	4b03      	ldr	r3, [pc, #12]	; (80020d8 <HAL_RCC_GetHCLKFreq+0x14>)
 80020ca:	681b      	ldr	r3, [r3, #0]
}
 80020cc:	4618      	mov	r0, r3
 80020ce:	46bd      	mov	sp, r7
 80020d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d4:	4770      	bx	lr
 80020d6:	bf00      	nop
 80020d8:	20000000 	.word	0x20000000

080020dc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80020dc:	b580      	push	{r7, lr}
 80020de:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80020e0:	f7ff fff0 	bl	80020c4 <HAL_RCC_GetHCLKFreq>
 80020e4:	4601      	mov	r1, r0
 80020e6:	4b05      	ldr	r3, [pc, #20]	; (80020fc <HAL_RCC_GetPCLK1Freq+0x20>)
 80020e8:	689b      	ldr	r3, [r3, #8]
 80020ea:	0a9b      	lsrs	r3, r3, #10
 80020ec:	f003 0307 	and.w	r3, r3, #7
 80020f0:	4a03      	ldr	r2, [pc, #12]	; (8002100 <HAL_RCC_GetPCLK1Freq+0x24>)
 80020f2:	5cd3      	ldrb	r3, [r2, r3]
 80020f4:	fa21 f303 	lsr.w	r3, r1, r3
}
 80020f8:	4618      	mov	r0, r3
 80020fa:	bd80      	pop	{r7, pc}
 80020fc:	40023800 	.word	0x40023800
 8002100:	08007780 	.word	0x08007780

08002104 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002104:	b580      	push	{r7, lr}
 8002106:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002108:	f7ff ffdc 	bl	80020c4 <HAL_RCC_GetHCLKFreq>
 800210c:	4601      	mov	r1, r0
 800210e:	4b05      	ldr	r3, [pc, #20]	; (8002124 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002110:	689b      	ldr	r3, [r3, #8]
 8002112:	0b5b      	lsrs	r3, r3, #13
 8002114:	f003 0307 	and.w	r3, r3, #7
 8002118:	4a03      	ldr	r2, [pc, #12]	; (8002128 <HAL_RCC_GetPCLK2Freq+0x24>)
 800211a:	5cd3      	ldrb	r3, [r2, r3]
 800211c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002120:	4618      	mov	r0, r3
 8002122:	bd80      	pop	{r7, pc}
 8002124:	40023800 	.word	0x40023800
 8002128:	08007780 	.word	0x08007780

0800212c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800212c:	b480      	push	{r7}
 800212e:	b083      	sub	sp, #12
 8002130:	af00      	add	r7, sp, #0
 8002132:	6078      	str	r0, [r7, #4]
 8002134:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	220f      	movs	r2, #15
 800213a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800213c:	4b12      	ldr	r3, [pc, #72]	; (8002188 <HAL_RCC_GetClockConfig+0x5c>)
 800213e:	689b      	ldr	r3, [r3, #8]
 8002140:	f003 0203 	and.w	r2, r3, #3
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8002148:	4b0f      	ldr	r3, [pc, #60]	; (8002188 <HAL_RCC_GetClockConfig+0x5c>)
 800214a:	689b      	ldr	r3, [r3, #8]
 800214c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8002154:	4b0c      	ldr	r3, [pc, #48]	; (8002188 <HAL_RCC_GetClockConfig+0x5c>)
 8002156:	689b      	ldr	r3, [r3, #8]
 8002158:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8002160:	4b09      	ldr	r3, [pc, #36]	; (8002188 <HAL_RCC_GetClockConfig+0x5c>)
 8002162:	689b      	ldr	r3, [r3, #8]
 8002164:	08db      	lsrs	r3, r3, #3
 8002166:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800216e:	4b07      	ldr	r3, [pc, #28]	; (800218c <HAL_RCC_GetClockConfig+0x60>)
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	f003 020f 	and.w	r2, r3, #15
 8002176:	683b      	ldr	r3, [r7, #0]
 8002178:	601a      	str	r2, [r3, #0]
}
 800217a:	bf00      	nop
 800217c:	370c      	adds	r7, #12
 800217e:	46bd      	mov	sp, r7
 8002180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002184:	4770      	bx	lr
 8002186:	bf00      	nop
 8002188:	40023800 	.word	0x40023800
 800218c:	40023c00 	.word	0x40023c00

08002190 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002190:	b580      	push	{r7, lr}
 8002192:	b088      	sub	sp, #32
 8002194:	af00      	add	r7, sp, #0
 8002196:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8002198:	2300      	movs	r3, #0
 800219a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 800219c:	2300      	movs	r3, #0
 800219e:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 80021a0:	2300      	movs	r3, #0
 80021a2:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 80021a4:	2300      	movs	r3, #0
 80021a6:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 80021a8:	2300      	movs	r3, #0
 80021aa:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	f003 0301 	and.w	r3, r3, #1
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	d012      	beq.n	80021de <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80021b8:	4b69      	ldr	r3, [pc, #420]	; (8002360 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80021ba:	689b      	ldr	r3, [r3, #8]
 80021bc:	4a68      	ldr	r2, [pc, #416]	; (8002360 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80021be:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80021c2:	6093      	str	r3, [r2, #8]
 80021c4:	4b66      	ldr	r3, [pc, #408]	; (8002360 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80021c6:	689a      	ldr	r2, [r3, #8]
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80021cc:	4964      	ldr	r1, [pc, #400]	; (8002360 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80021ce:	4313      	orrs	r3, r2
 80021d0:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d101      	bne.n	80021de <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 80021da:	2301      	movs	r3, #1
 80021dc:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d017      	beq.n	800221a <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80021ea:	4b5d      	ldr	r3, [pc, #372]	; (8002360 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80021ec:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80021f0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80021f8:	4959      	ldr	r1, [pc, #356]	; (8002360 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80021fa:	4313      	orrs	r3, r2
 80021fc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002204:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002208:	d101      	bne.n	800220e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 800220a:	2301      	movs	r3, #1
 800220c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002212:	2b00      	cmp	r3, #0
 8002214:	d101      	bne.n	800221a <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8002216:	2301      	movs	r3, #1
 8002218:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002222:	2b00      	cmp	r3, #0
 8002224:	d017      	beq.n	8002256 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002226:	4b4e      	ldr	r3, [pc, #312]	; (8002360 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002228:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800222c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002234:	494a      	ldr	r1, [pc, #296]	; (8002360 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002236:	4313      	orrs	r3, r2
 8002238:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002240:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002244:	d101      	bne.n	800224a <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8002246:	2301      	movs	r3, #1
 8002248:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800224e:	2b00      	cmp	r3, #0
 8002250:	d101      	bne.n	8002256 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8002252:	2301      	movs	r3, #1
 8002254:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800225e:	2b00      	cmp	r3, #0
 8002260:	d001      	beq.n	8002266 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8002262:	2301      	movs	r3, #1
 8002264:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	f003 0320 	and.w	r3, r3, #32
 800226e:	2b00      	cmp	r3, #0
 8002270:	f000 808b 	beq.w	800238a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8002274:	4b3a      	ldr	r3, [pc, #232]	; (8002360 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002276:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002278:	4a39      	ldr	r2, [pc, #228]	; (8002360 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800227a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800227e:	6413      	str	r3, [r2, #64]	; 0x40
 8002280:	4b37      	ldr	r3, [pc, #220]	; (8002360 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002282:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002284:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002288:	60bb      	str	r3, [r7, #8]
 800228a:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800228c:	4b35      	ldr	r3, [pc, #212]	; (8002364 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	4a34      	ldr	r2, [pc, #208]	; (8002364 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002292:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002296:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002298:	f7fe fe30 	bl	8000efc <HAL_GetTick>
 800229c:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800229e:	e008      	b.n	80022b2 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80022a0:	f7fe fe2c 	bl	8000efc <HAL_GetTick>
 80022a4:	4602      	mov	r2, r0
 80022a6:	697b      	ldr	r3, [r7, #20]
 80022a8:	1ad3      	subs	r3, r2, r3
 80022aa:	2b64      	cmp	r3, #100	; 0x64
 80022ac:	d901      	bls.n	80022b2 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 80022ae:	2303      	movs	r3, #3
 80022b0:	e357      	b.n	8002962 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80022b2:	4b2c      	ldr	r3, [pc, #176]	; (8002364 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d0f0      	beq.n	80022a0 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80022be:	4b28      	ldr	r3, [pc, #160]	; (8002360 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80022c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80022c2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80022c6:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80022c8:	693b      	ldr	r3, [r7, #16]
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d035      	beq.n	800233a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022d2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80022d6:	693a      	ldr	r2, [r7, #16]
 80022d8:	429a      	cmp	r2, r3
 80022da:	d02e      	beq.n	800233a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80022dc:	4b20      	ldr	r3, [pc, #128]	; (8002360 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80022de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80022e0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80022e4:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80022e6:	4b1e      	ldr	r3, [pc, #120]	; (8002360 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80022e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80022ea:	4a1d      	ldr	r2, [pc, #116]	; (8002360 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80022ec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80022f0:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 80022f2:	4b1b      	ldr	r3, [pc, #108]	; (8002360 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80022f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80022f6:	4a1a      	ldr	r2, [pc, #104]	; (8002360 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80022f8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80022fc:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 80022fe:	4a18      	ldr	r2, [pc, #96]	; (8002360 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002300:	693b      	ldr	r3, [r7, #16]
 8002302:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8002304:	4b16      	ldr	r3, [pc, #88]	; (8002360 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002306:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002308:	f003 0301 	and.w	r3, r3, #1
 800230c:	2b01      	cmp	r3, #1
 800230e:	d114      	bne.n	800233a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002310:	f7fe fdf4 	bl	8000efc <HAL_GetTick>
 8002314:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002316:	e00a      	b.n	800232e <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002318:	f7fe fdf0 	bl	8000efc <HAL_GetTick>
 800231c:	4602      	mov	r2, r0
 800231e:	697b      	ldr	r3, [r7, #20]
 8002320:	1ad3      	subs	r3, r2, r3
 8002322:	f241 3288 	movw	r2, #5000	; 0x1388
 8002326:	4293      	cmp	r3, r2
 8002328:	d901      	bls.n	800232e <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 800232a:	2303      	movs	r3, #3
 800232c:	e319      	b.n	8002962 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800232e:	4b0c      	ldr	r3, [pc, #48]	; (8002360 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002330:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002332:	f003 0302 	and.w	r3, r3, #2
 8002336:	2b00      	cmp	r3, #0
 8002338:	d0ee      	beq.n	8002318 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800233e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002342:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002346:	d111      	bne.n	800236c <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8002348:	4b05      	ldr	r3, [pc, #20]	; (8002360 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800234a:	689b      	ldr	r3, [r3, #8]
 800234c:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002354:	4b04      	ldr	r3, [pc, #16]	; (8002368 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8002356:	400b      	ands	r3, r1
 8002358:	4901      	ldr	r1, [pc, #4]	; (8002360 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800235a:	4313      	orrs	r3, r2
 800235c:	608b      	str	r3, [r1, #8]
 800235e:	e00b      	b.n	8002378 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8002360:	40023800 	.word	0x40023800
 8002364:	40007000 	.word	0x40007000
 8002368:	0ffffcff 	.word	0x0ffffcff
 800236c:	4bb1      	ldr	r3, [pc, #708]	; (8002634 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800236e:	689b      	ldr	r3, [r3, #8]
 8002370:	4ab0      	ldr	r2, [pc, #704]	; (8002634 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002372:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8002376:	6093      	str	r3, [r2, #8]
 8002378:	4bae      	ldr	r3, [pc, #696]	; (8002634 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800237a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002380:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002384:	49ab      	ldr	r1, [pc, #684]	; (8002634 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002386:	4313      	orrs	r3, r2
 8002388:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	f003 0310 	and.w	r3, r3, #16
 8002392:	2b00      	cmp	r3, #0
 8002394:	d010      	beq.n	80023b8 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8002396:	4ba7      	ldr	r3, [pc, #668]	; (8002634 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002398:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800239c:	4aa5      	ldr	r2, [pc, #660]	; (8002634 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800239e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80023a2:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80023a6:	4ba3      	ldr	r3, [pc, #652]	; (8002634 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80023a8:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80023b0:	49a0      	ldr	r1, [pc, #640]	; (8002634 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80023b2:	4313      	orrs	r3, r2
 80023b4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d00a      	beq.n	80023da <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80023c4:	4b9b      	ldr	r3, [pc, #620]	; (8002634 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80023c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80023ca:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80023d2:	4998      	ldr	r1, [pc, #608]	; (8002634 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80023d4:	4313      	orrs	r3, r2
 80023d6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d00a      	beq.n	80023fc <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80023e6:	4b93      	ldr	r3, [pc, #588]	; (8002634 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80023e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80023ec:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80023f4:	498f      	ldr	r1, [pc, #572]	; (8002634 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80023f6:	4313      	orrs	r3, r2
 80023f8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002404:	2b00      	cmp	r3, #0
 8002406:	d00a      	beq.n	800241e <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002408:	4b8a      	ldr	r3, [pc, #552]	; (8002634 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800240a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800240e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002416:	4987      	ldr	r1, [pc, #540]	; (8002634 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002418:	4313      	orrs	r3, r2
 800241a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002426:	2b00      	cmp	r3, #0
 8002428:	d00a      	beq.n	8002440 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800242a:	4b82      	ldr	r3, [pc, #520]	; (8002634 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800242c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002430:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002438:	497e      	ldr	r1, [pc, #504]	; (8002634 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800243a:	4313      	orrs	r3, r2
 800243c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002448:	2b00      	cmp	r3, #0
 800244a:	d00a      	beq.n	8002462 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800244c:	4b79      	ldr	r3, [pc, #484]	; (8002634 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800244e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002452:	f023 0203 	bic.w	r2, r3, #3
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800245a:	4976      	ldr	r1, [pc, #472]	; (8002634 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800245c:	4313      	orrs	r3, r2
 800245e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800246a:	2b00      	cmp	r3, #0
 800246c:	d00a      	beq.n	8002484 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800246e:	4b71      	ldr	r3, [pc, #452]	; (8002634 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002470:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002474:	f023 020c 	bic.w	r2, r3, #12
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800247c:	496d      	ldr	r1, [pc, #436]	; (8002634 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800247e:	4313      	orrs	r3, r2
 8002480:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800248c:	2b00      	cmp	r3, #0
 800248e:	d00a      	beq.n	80024a6 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002490:	4b68      	ldr	r3, [pc, #416]	; (8002634 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002492:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002496:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800249e:	4965      	ldr	r1, [pc, #404]	; (8002634 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80024a0:	4313      	orrs	r3, r2
 80024a2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d00a      	beq.n	80024c8 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80024b2:	4b60      	ldr	r3, [pc, #384]	; (8002634 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80024b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80024b8:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80024c0:	495c      	ldr	r1, [pc, #368]	; (8002634 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80024c2:	4313      	orrs	r3, r2
 80024c4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d00a      	beq.n	80024ea <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80024d4:	4b57      	ldr	r3, [pc, #348]	; (8002634 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80024d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80024da:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80024e2:	4954      	ldr	r1, [pc, #336]	; (8002634 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80024e4:	4313      	orrs	r3, r2
 80024e6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d00a      	beq.n	800250c <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 80024f6:	4b4f      	ldr	r3, [pc, #316]	; (8002634 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80024f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80024fc:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002504:	494b      	ldr	r1, [pc, #300]	; (8002634 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002506:	4313      	orrs	r3, r2
 8002508:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002514:	2b00      	cmp	r3, #0
 8002516:	d00a      	beq.n	800252e <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8002518:	4b46      	ldr	r3, [pc, #280]	; (8002634 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800251a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800251e:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002526:	4943      	ldr	r1, [pc, #268]	; (8002634 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002528:	4313      	orrs	r3, r2
 800252a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002536:	2b00      	cmp	r3, #0
 8002538:	d00a      	beq.n	8002550 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 800253a:	4b3e      	ldr	r3, [pc, #248]	; (8002634 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800253c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002540:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002548:	493a      	ldr	r1, [pc, #232]	; (8002634 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800254a:	4313      	orrs	r3, r2
 800254c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002558:	2b00      	cmp	r3, #0
 800255a:	d00a      	beq.n	8002572 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800255c:	4b35      	ldr	r3, [pc, #212]	; (8002634 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800255e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002562:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800256a:	4932      	ldr	r1, [pc, #200]	; (8002634 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800256c:	4313      	orrs	r3, r2
 800256e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800257a:	2b00      	cmp	r3, #0
 800257c:	d011      	beq.n	80025a2 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800257e:	4b2d      	ldr	r3, [pc, #180]	; (8002634 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002580:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002584:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800258c:	4929      	ldr	r1, [pc, #164]	; (8002634 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800258e:	4313      	orrs	r3, r2
 8002590:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002598:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800259c:	d101      	bne.n	80025a2 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 800259e:	2301      	movs	r3, #1
 80025a0:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	f003 0308 	and.w	r3, r3, #8
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d001      	beq.n	80025b2 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 80025ae:	2301      	movs	r3, #1
 80025b0:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d00a      	beq.n	80025d4 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80025be:	4b1d      	ldr	r3, [pc, #116]	; (8002634 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80025c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80025c4:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80025cc:	4919      	ldr	r1, [pc, #100]	; (8002634 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80025ce:	4313      	orrs	r3, r2
 80025d0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d00b      	beq.n	80025f8 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80025e0:	4b14      	ldr	r3, [pc, #80]	; (8002634 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80025e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80025e6:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80025f0:	4910      	ldr	r1, [pc, #64]	; (8002634 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80025f2:	4313      	orrs	r3, r2
 80025f4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80025f8:	69fb      	ldr	r3, [r7, #28]
 80025fa:	2b01      	cmp	r3, #1
 80025fc:	d006      	beq.n	800260c <HAL_RCCEx_PeriphCLKConfig+0x47c>
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002606:	2b00      	cmp	r3, #0
 8002608:	f000 80d9 	beq.w	80027be <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800260c:	4b09      	ldr	r3, [pc, #36]	; (8002634 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	4a08      	ldr	r2, [pc, #32]	; (8002634 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002612:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002616:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002618:	f7fe fc70 	bl	8000efc <HAL_GetTick>
 800261c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800261e:	e00b      	b.n	8002638 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002620:	f7fe fc6c 	bl	8000efc <HAL_GetTick>
 8002624:	4602      	mov	r2, r0
 8002626:	697b      	ldr	r3, [r7, #20]
 8002628:	1ad3      	subs	r3, r2, r3
 800262a:	2b64      	cmp	r3, #100	; 0x64
 800262c:	d904      	bls.n	8002638 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800262e:	2303      	movs	r3, #3
 8002630:	e197      	b.n	8002962 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 8002632:	bf00      	nop
 8002634:	40023800 	.word	0x40023800
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002638:	4b6c      	ldr	r3, [pc, #432]	; (80027ec <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002640:	2b00      	cmp	r3, #0
 8002642:	d1ed      	bne.n	8002620 <HAL_RCCEx_PeriphCLKConfig+0x490>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	f003 0301 	and.w	r3, r3, #1
 800264c:	2b00      	cmp	r3, #0
 800264e:	d021      	beq.n	8002694 <HAL_RCCEx_PeriphCLKConfig+0x504>
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002654:	2b00      	cmp	r3, #0
 8002656:	d11d      	bne.n	8002694 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8002658:	4b64      	ldr	r3, [pc, #400]	; (80027ec <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800265a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800265e:	0c1b      	lsrs	r3, r3, #16
 8002660:	f003 0303 	and.w	r3, r3, #3
 8002664:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8002666:	4b61      	ldr	r3, [pc, #388]	; (80027ec <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002668:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800266c:	0e1b      	lsrs	r3, r3, #24
 800266e:	f003 030f 	and.w	r3, r3, #15
 8002672:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	685b      	ldr	r3, [r3, #4]
 8002678:	019a      	lsls	r2, r3, #6
 800267a:	693b      	ldr	r3, [r7, #16]
 800267c:	041b      	lsls	r3, r3, #16
 800267e:	431a      	orrs	r2, r3
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	061b      	lsls	r3, r3, #24
 8002684:	431a      	orrs	r2, r3
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	689b      	ldr	r3, [r3, #8]
 800268a:	071b      	lsls	r3, r3, #28
 800268c:	4957      	ldr	r1, [pc, #348]	; (80027ec <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800268e:	4313      	orrs	r3, r2
 8002690:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800269c:	2b00      	cmp	r3, #0
 800269e:	d004      	beq.n	80026aa <HAL_RCCEx_PeriphCLKConfig+0x51a>
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80026a4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80026a8:	d00a      	beq.n	80026c0 <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d02e      	beq.n	8002714 <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026ba:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80026be:	d129      	bne.n	8002714 <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80026c0:	4b4a      	ldr	r3, [pc, #296]	; (80027ec <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80026c2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80026c6:	0c1b      	lsrs	r3, r3, #16
 80026c8:	f003 0303 	and.w	r3, r3, #3
 80026cc:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80026ce:	4b47      	ldr	r3, [pc, #284]	; (80027ec <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80026d0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80026d4:	0f1b      	lsrs	r3, r3, #28
 80026d6:	f003 0307 	and.w	r3, r3, #7
 80026da:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	685b      	ldr	r3, [r3, #4]
 80026e0:	019a      	lsls	r2, r3, #6
 80026e2:	693b      	ldr	r3, [r7, #16]
 80026e4:	041b      	lsls	r3, r3, #16
 80026e6:	431a      	orrs	r2, r3
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	68db      	ldr	r3, [r3, #12]
 80026ec:	061b      	lsls	r3, r3, #24
 80026ee:	431a      	orrs	r2, r3
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	071b      	lsls	r3, r3, #28
 80026f4:	493d      	ldr	r1, [pc, #244]	; (80027ec <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80026f6:	4313      	orrs	r3, r2
 80026f8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80026fc:	4b3b      	ldr	r3, [pc, #236]	; (80027ec <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80026fe:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002702:	f023 021f 	bic.w	r2, r3, #31
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800270a:	3b01      	subs	r3, #1
 800270c:	4937      	ldr	r1, [pc, #220]	; (80027ec <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800270e:	4313      	orrs	r3, r2
 8002710:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800271c:	2b00      	cmp	r3, #0
 800271e:	d01d      	beq.n	800275c <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8002720:	4b32      	ldr	r3, [pc, #200]	; (80027ec <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002722:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002726:	0e1b      	lsrs	r3, r3, #24
 8002728:	f003 030f 	and.w	r3, r3, #15
 800272c:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800272e:	4b2f      	ldr	r3, [pc, #188]	; (80027ec <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002730:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002734:	0f1b      	lsrs	r3, r3, #28
 8002736:	f003 0307 	and.w	r3, r3, #7
 800273a:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	685b      	ldr	r3, [r3, #4]
 8002740:	019a      	lsls	r2, r3, #6
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	691b      	ldr	r3, [r3, #16]
 8002746:	041b      	lsls	r3, r3, #16
 8002748:	431a      	orrs	r2, r3
 800274a:	693b      	ldr	r3, [r7, #16]
 800274c:	061b      	lsls	r3, r3, #24
 800274e:	431a      	orrs	r2, r3
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	071b      	lsls	r3, r3, #28
 8002754:	4925      	ldr	r1, [pc, #148]	; (80027ec <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002756:	4313      	orrs	r3, r2
 8002758:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002764:	2b00      	cmp	r3, #0
 8002766:	d011      	beq.n	800278c <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	685b      	ldr	r3, [r3, #4]
 800276c:	019a      	lsls	r2, r3, #6
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	691b      	ldr	r3, [r3, #16]
 8002772:	041b      	lsls	r3, r3, #16
 8002774:	431a      	orrs	r2, r3
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	68db      	ldr	r3, [r3, #12]
 800277a:	061b      	lsls	r3, r3, #24
 800277c:	431a      	orrs	r2, r3
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	689b      	ldr	r3, [r3, #8]
 8002782:	071b      	lsls	r3, r3, #28
 8002784:	4919      	ldr	r1, [pc, #100]	; (80027ec <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002786:	4313      	orrs	r3, r2
 8002788:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800278c:	4b17      	ldr	r3, [pc, #92]	; (80027ec <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	4a16      	ldr	r2, [pc, #88]	; (80027ec <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002792:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002796:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002798:	f7fe fbb0 	bl	8000efc <HAL_GetTick>
 800279c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800279e:	e008      	b.n	80027b2 <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80027a0:	f7fe fbac 	bl	8000efc <HAL_GetTick>
 80027a4:	4602      	mov	r2, r0
 80027a6:	697b      	ldr	r3, [r7, #20]
 80027a8:	1ad3      	subs	r3, r2, r3
 80027aa:	2b64      	cmp	r3, #100	; 0x64
 80027ac:	d901      	bls.n	80027b2 <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80027ae:	2303      	movs	r3, #3
 80027b0:	e0d7      	b.n	8002962 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80027b2:	4b0e      	ldr	r3, [pc, #56]	; (80027ec <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d0f0      	beq.n	80027a0 <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 80027be:	69bb      	ldr	r3, [r7, #24]
 80027c0:	2b01      	cmp	r3, #1
 80027c2:	f040 80cd 	bne.w	8002960 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80027c6:	4b09      	ldr	r3, [pc, #36]	; (80027ec <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	4a08      	ldr	r2, [pc, #32]	; (80027ec <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80027cc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80027d0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80027d2:	f7fe fb93 	bl	8000efc <HAL_GetTick>
 80027d6:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80027d8:	e00a      	b.n	80027f0 <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80027da:	f7fe fb8f 	bl	8000efc <HAL_GetTick>
 80027de:	4602      	mov	r2, r0
 80027e0:	697b      	ldr	r3, [r7, #20]
 80027e2:	1ad3      	subs	r3, r2, r3
 80027e4:	2b64      	cmp	r3, #100	; 0x64
 80027e6:	d903      	bls.n	80027f0 <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80027e8:	2303      	movs	r3, #3
 80027ea:	e0ba      	b.n	8002962 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 80027ec:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80027f0:	4b5e      	ldr	r3, [pc, #376]	; (800296c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80027f8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80027fc:	d0ed      	beq.n	80027da <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002806:	2b00      	cmp	r3, #0
 8002808:	d003      	beq.n	8002812 <HAL_RCCEx_PeriphCLKConfig+0x682>
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800280e:	2b00      	cmp	r3, #0
 8002810:	d009      	beq.n	8002826 <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800281a:	2b00      	cmp	r3, #0
 800281c:	d02e      	beq.n	800287c <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002822:	2b00      	cmp	r3, #0
 8002824:	d12a      	bne.n	800287c <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8002826:	4b51      	ldr	r3, [pc, #324]	; (800296c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002828:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800282c:	0c1b      	lsrs	r3, r3, #16
 800282e:	f003 0303 	and.w	r3, r3, #3
 8002832:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8002834:	4b4d      	ldr	r3, [pc, #308]	; (800296c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002836:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800283a:	0f1b      	lsrs	r3, r3, #28
 800283c:	f003 0307 	and.w	r3, r3, #7
 8002840:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	695b      	ldr	r3, [r3, #20]
 8002846:	019a      	lsls	r2, r3, #6
 8002848:	693b      	ldr	r3, [r7, #16]
 800284a:	041b      	lsls	r3, r3, #16
 800284c:	431a      	orrs	r2, r3
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	699b      	ldr	r3, [r3, #24]
 8002852:	061b      	lsls	r3, r3, #24
 8002854:	431a      	orrs	r2, r3
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	071b      	lsls	r3, r3, #28
 800285a:	4944      	ldr	r1, [pc, #272]	; (800296c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800285c:	4313      	orrs	r3, r2
 800285e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8002862:	4b42      	ldr	r3, [pc, #264]	; (800296c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002864:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002868:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002870:	3b01      	subs	r3, #1
 8002872:	021b      	lsls	r3, r3, #8
 8002874:	493d      	ldr	r1, [pc, #244]	; (800296c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002876:	4313      	orrs	r3, r2
 8002878:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002884:	2b00      	cmp	r3, #0
 8002886:	d022      	beq.n	80028ce <HAL_RCCEx_PeriphCLKConfig+0x73e>
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800288c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002890:	d11d      	bne.n	80028ce <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8002892:	4b36      	ldr	r3, [pc, #216]	; (800296c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002894:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002898:	0e1b      	lsrs	r3, r3, #24
 800289a:	f003 030f 	and.w	r3, r3, #15
 800289e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80028a0:	4b32      	ldr	r3, [pc, #200]	; (800296c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80028a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80028a6:	0f1b      	lsrs	r3, r3, #28
 80028a8:	f003 0307 	and.w	r3, r3, #7
 80028ac:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	695b      	ldr	r3, [r3, #20]
 80028b2:	019a      	lsls	r2, r3, #6
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	6a1b      	ldr	r3, [r3, #32]
 80028b8:	041b      	lsls	r3, r3, #16
 80028ba:	431a      	orrs	r2, r3
 80028bc:	693b      	ldr	r3, [r7, #16]
 80028be:	061b      	lsls	r3, r3, #24
 80028c0:	431a      	orrs	r2, r3
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	071b      	lsls	r3, r3, #28
 80028c6:	4929      	ldr	r1, [pc, #164]	; (800296c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80028c8:	4313      	orrs	r3, r2
 80028ca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	f003 0308 	and.w	r3, r3, #8
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d028      	beq.n	800292c <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80028da:	4b24      	ldr	r3, [pc, #144]	; (800296c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80028dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80028e0:	0e1b      	lsrs	r3, r3, #24
 80028e2:	f003 030f 	and.w	r3, r3, #15
 80028e6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80028e8:	4b20      	ldr	r3, [pc, #128]	; (800296c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80028ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80028ee:	0c1b      	lsrs	r3, r3, #16
 80028f0:	f003 0303 	and.w	r3, r3, #3
 80028f4:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	695b      	ldr	r3, [r3, #20]
 80028fa:	019a      	lsls	r2, r3, #6
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	041b      	lsls	r3, r3, #16
 8002900:	431a      	orrs	r2, r3
 8002902:	693b      	ldr	r3, [r7, #16]
 8002904:	061b      	lsls	r3, r3, #24
 8002906:	431a      	orrs	r2, r3
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	69db      	ldr	r3, [r3, #28]
 800290c:	071b      	lsls	r3, r3, #28
 800290e:	4917      	ldr	r1, [pc, #92]	; (800296c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002910:	4313      	orrs	r3, r2
 8002912:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8002916:	4b15      	ldr	r3, [pc, #84]	; (800296c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002918:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800291c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002924:	4911      	ldr	r1, [pc, #68]	; (800296c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002926:	4313      	orrs	r3, r2
 8002928:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 800292c:	4b0f      	ldr	r3, [pc, #60]	; (800296c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	4a0e      	ldr	r2, [pc, #56]	; (800296c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002932:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002936:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002938:	f7fe fae0 	bl	8000efc <HAL_GetTick>
 800293c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800293e:	e008      	b.n	8002952 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8002940:	f7fe fadc 	bl	8000efc <HAL_GetTick>
 8002944:	4602      	mov	r2, r0
 8002946:	697b      	ldr	r3, [r7, #20]
 8002948:	1ad3      	subs	r3, r2, r3
 800294a:	2b64      	cmp	r3, #100	; 0x64
 800294c:	d901      	bls.n	8002952 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800294e:	2303      	movs	r3, #3
 8002950:	e007      	b.n	8002962 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8002952:	4b06      	ldr	r3, [pc, #24]	; (800296c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800295a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800295e:	d1ef      	bne.n	8002940 <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 8002960:	2300      	movs	r3, #0
}
 8002962:	4618      	mov	r0, r3
 8002964:	3720      	adds	r7, #32
 8002966:	46bd      	mov	sp, r7
 8002968:	bd80      	pop	{r7, pc}
 800296a:	bf00      	nop
 800296c:	40023800 	.word	0x40023800

08002970 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002970:	b580      	push	{r7, lr}
 8002972:	b082      	sub	sp, #8
 8002974:	af00      	add	r7, sp, #0
 8002976:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	2b00      	cmp	r3, #0
 800297c:	d101      	bne.n	8002982 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800297e:	2301      	movs	r3, #1
 8002980:	e049      	b.n	8002a16 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002988:	b2db      	uxtb	r3, r3
 800298a:	2b00      	cmp	r3, #0
 800298c:	d106      	bne.n	800299c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	2200      	movs	r2, #0
 8002992:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002996:	6878      	ldr	r0, [r7, #4]
 8002998:	f000 f841 	bl	8002a1e <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	2202      	movs	r2, #2
 80029a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	681a      	ldr	r2, [r3, #0]
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	3304      	adds	r3, #4
 80029ac:	4619      	mov	r1, r3
 80029ae:	4610      	mov	r0, r2
 80029b0:	f000 fa00 	bl	8002db4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	2201      	movs	r2, #1
 80029b8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	2201      	movs	r2, #1
 80029c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	2201      	movs	r2, #1
 80029c8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	2201      	movs	r2, #1
 80029d0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	2201      	movs	r2, #1
 80029d8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	2201      	movs	r2, #1
 80029e0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	2201      	movs	r2, #1
 80029e8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	2201      	movs	r2, #1
 80029f0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	2201      	movs	r2, #1
 80029f8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	2201      	movs	r2, #1
 8002a00:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	2201      	movs	r2, #1
 8002a08:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	2201      	movs	r2, #1
 8002a10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002a14:	2300      	movs	r3, #0
}
 8002a16:	4618      	mov	r0, r3
 8002a18:	3708      	adds	r7, #8
 8002a1a:	46bd      	mov	sp, r7
 8002a1c:	bd80      	pop	{r7, pc}

08002a1e <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8002a1e:	b480      	push	{r7}
 8002a20:	b083      	sub	sp, #12
 8002a22:	af00      	add	r7, sp, #0
 8002a24:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8002a26:	bf00      	nop
 8002a28:	370c      	adds	r7, #12
 8002a2a:	46bd      	mov	sp, r7
 8002a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a30:	4770      	bx	lr
	...

08002a34 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002a34:	b480      	push	{r7}
 8002a36:	b085      	sub	sp, #20
 8002a38:	af00      	add	r7, sp, #0
 8002a3a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002a42:	b2db      	uxtb	r3, r3
 8002a44:	2b01      	cmp	r3, #1
 8002a46:	d001      	beq.n	8002a4c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002a48:	2301      	movs	r3, #1
 8002a4a:	e054      	b.n	8002af6 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	2202      	movs	r2, #2
 8002a50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	68da      	ldr	r2, [r3, #12]
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	f042 0201 	orr.w	r2, r2, #1
 8002a62:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	4a26      	ldr	r2, [pc, #152]	; (8002b04 <HAL_TIM_Base_Start_IT+0xd0>)
 8002a6a:	4293      	cmp	r3, r2
 8002a6c:	d022      	beq.n	8002ab4 <HAL_TIM_Base_Start_IT+0x80>
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002a76:	d01d      	beq.n	8002ab4 <HAL_TIM_Base_Start_IT+0x80>
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	4a22      	ldr	r2, [pc, #136]	; (8002b08 <HAL_TIM_Base_Start_IT+0xd4>)
 8002a7e:	4293      	cmp	r3, r2
 8002a80:	d018      	beq.n	8002ab4 <HAL_TIM_Base_Start_IT+0x80>
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	4a21      	ldr	r2, [pc, #132]	; (8002b0c <HAL_TIM_Base_Start_IT+0xd8>)
 8002a88:	4293      	cmp	r3, r2
 8002a8a:	d013      	beq.n	8002ab4 <HAL_TIM_Base_Start_IT+0x80>
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	4a1f      	ldr	r2, [pc, #124]	; (8002b10 <HAL_TIM_Base_Start_IT+0xdc>)
 8002a92:	4293      	cmp	r3, r2
 8002a94:	d00e      	beq.n	8002ab4 <HAL_TIM_Base_Start_IT+0x80>
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	4a1e      	ldr	r2, [pc, #120]	; (8002b14 <HAL_TIM_Base_Start_IT+0xe0>)
 8002a9c:	4293      	cmp	r3, r2
 8002a9e:	d009      	beq.n	8002ab4 <HAL_TIM_Base_Start_IT+0x80>
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	4a1c      	ldr	r2, [pc, #112]	; (8002b18 <HAL_TIM_Base_Start_IT+0xe4>)
 8002aa6:	4293      	cmp	r3, r2
 8002aa8:	d004      	beq.n	8002ab4 <HAL_TIM_Base_Start_IT+0x80>
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	4a1b      	ldr	r2, [pc, #108]	; (8002b1c <HAL_TIM_Base_Start_IT+0xe8>)
 8002ab0:	4293      	cmp	r3, r2
 8002ab2:	d115      	bne.n	8002ae0 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	689a      	ldr	r2, [r3, #8]
 8002aba:	4b19      	ldr	r3, [pc, #100]	; (8002b20 <HAL_TIM_Base_Start_IT+0xec>)
 8002abc:	4013      	ands	r3, r2
 8002abe:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	2b06      	cmp	r3, #6
 8002ac4:	d015      	beq.n	8002af2 <HAL_TIM_Base_Start_IT+0xbe>
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002acc:	d011      	beq.n	8002af2 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	681a      	ldr	r2, [r3, #0]
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	f042 0201 	orr.w	r2, r2, #1
 8002adc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002ade:	e008      	b.n	8002af2 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	681a      	ldr	r2, [r3, #0]
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	f042 0201 	orr.w	r2, r2, #1
 8002aee:	601a      	str	r2, [r3, #0]
 8002af0:	e000      	b.n	8002af4 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002af2:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8002af4:	2300      	movs	r3, #0
}
 8002af6:	4618      	mov	r0, r3
 8002af8:	3714      	adds	r7, #20
 8002afa:	46bd      	mov	sp, r7
 8002afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b00:	4770      	bx	lr
 8002b02:	bf00      	nop
 8002b04:	40010000 	.word	0x40010000
 8002b08:	40000400 	.word	0x40000400
 8002b0c:	40000800 	.word	0x40000800
 8002b10:	40000c00 	.word	0x40000c00
 8002b14:	40010400 	.word	0x40010400
 8002b18:	40014000 	.word	0x40014000
 8002b1c:	40001800 	.word	0x40001800
 8002b20:	00010007 	.word	0x00010007

08002b24 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002b24:	b580      	push	{r7, lr}
 8002b26:	b082      	sub	sp, #8
 8002b28:	af00      	add	r7, sp, #0
 8002b2a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	691b      	ldr	r3, [r3, #16]
 8002b32:	f003 0302 	and.w	r3, r3, #2
 8002b36:	2b02      	cmp	r3, #2
 8002b38:	d122      	bne.n	8002b80 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	68db      	ldr	r3, [r3, #12]
 8002b40:	f003 0302 	and.w	r3, r3, #2
 8002b44:	2b02      	cmp	r3, #2
 8002b46:	d11b      	bne.n	8002b80 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	f06f 0202 	mvn.w	r2, #2
 8002b50:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	2201      	movs	r2, #1
 8002b56:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	699b      	ldr	r3, [r3, #24]
 8002b5e:	f003 0303 	and.w	r3, r3, #3
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d003      	beq.n	8002b6e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002b66:	6878      	ldr	r0, [r7, #4]
 8002b68:	f000 f905 	bl	8002d76 <HAL_TIM_IC_CaptureCallback>
 8002b6c:	e005      	b.n	8002b7a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002b6e:	6878      	ldr	r0, [r7, #4]
 8002b70:	f000 f8f7 	bl	8002d62 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002b74:	6878      	ldr	r0, [r7, #4]
 8002b76:	f000 f908 	bl	8002d8a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	2200      	movs	r2, #0
 8002b7e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	691b      	ldr	r3, [r3, #16]
 8002b86:	f003 0304 	and.w	r3, r3, #4
 8002b8a:	2b04      	cmp	r3, #4
 8002b8c:	d122      	bne.n	8002bd4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	68db      	ldr	r3, [r3, #12]
 8002b94:	f003 0304 	and.w	r3, r3, #4
 8002b98:	2b04      	cmp	r3, #4
 8002b9a:	d11b      	bne.n	8002bd4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	f06f 0204 	mvn.w	r2, #4
 8002ba4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	2202      	movs	r2, #2
 8002baa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	699b      	ldr	r3, [r3, #24]
 8002bb2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d003      	beq.n	8002bc2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002bba:	6878      	ldr	r0, [r7, #4]
 8002bbc:	f000 f8db 	bl	8002d76 <HAL_TIM_IC_CaptureCallback>
 8002bc0:	e005      	b.n	8002bce <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002bc2:	6878      	ldr	r0, [r7, #4]
 8002bc4:	f000 f8cd 	bl	8002d62 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002bc8:	6878      	ldr	r0, [r7, #4]
 8002bca:	f000 f8de 	bl	8002d8a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	2200      	movs	r2, #0
 8002bd2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	691b      	ldr	r3, [r3, #16]
 8002bda:	f003 0308 	and.w	r3, r3, #8
 8002bde:	2b08      	cmp	r3, #8
 8002be0:	d122      	bne.n	8002c28 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	68db      	ldr	r3, [r3, #12]
 8002be8:	f003 0308 	and.w	r3, r3, #8
 8002bec:	2b08      	cmp	r3, #8
 8002bee:	d11b      	bne.n	8002c28 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	f06f 0208 	mvn.w	r2, #8
 8002bf8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	2204      	movs	r2, #4
 8002bfe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	69db      	ldr	r3, [r3, #28]
 8002c06:	f003 0303 	and.w	r3, r3, #3
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d003      	beq.n	8002c16 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002c0e:	6878      	ldr	r0, [r7, #4]
 8002c10:	f000 f8b1 	bl	8002d76 <HAL_TIM_IC_CaptureCallback>
 8002c14:	e005      	b.n	8002c22 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002c16:	6878      	ldr	r0, [r7, #4]
 8002c18:	f000 f8a3 	bl	8002d62 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002c1c:	6878      	ldr	r0, [r7, #4]
 8002c1e:	f000 f8b4 	bl	8002d8a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	2200      	movs	r2, #0
 8002c26:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	691b      	ldr	r3, [r3, #16]
 8002c2e:	f003 0310 	and.w	r3, r3, #16
 8002c32:	2b10      	cmp	r3, #16
 8002c34:	d122      	bne.n	8002c7c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	68db      	ldr	r3, [r3, #12]
 8002c3c:	f003 0310 	and.w	r3, r3, #16
 8002c40:	2b10      	cmp	r3, #16
 8002c42:	d11b      	bne.n	8002c7c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	f06f 0210 	mvn.w	r2, #16
 8002c4c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	2208      	movs	r2, #8
 8002c52:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	69db      	ldr	r3, [r3, #28]
 8002c5a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d003      	beq.n	8002c6a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002c62:	6878      	ldr	r0, [r7, #4]
 8002c64:	f000 f887 	bl	8002d76 <HAL_TIM_IC_CaptureCallback>
 8002c68:	e005      	b.n	8002c76 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002c6a:	6878      	ldr	r0, [r7, #4]
 8002c6c:	f000 f879 	bl	8002d62 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002c70:	6878      	ldr	r0, [r7, #4]
 8002c72:	f000 f88a 	bl	8002d8a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	2200      	movs	r2, #0
 8002c7a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	691b      	ldr	r3, [r3, #16]
 8002c82:	f003 0301 	and.w	r3, r3, #1
 8002c86:	2b01      	cmp	r3, #1
 8002c88:	d10e      	bne.n	8002ca8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	68db      	ldr	r3, [r3, #12]
 8002c90:	f003 0301 	and.w	r3, r3, #1
 8002c94:	2b01      	cmp	r3, #1
 8002c96:	d107      	bne.n	8002ca8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	f06f 0201 	mvn.w	r2, #1
 8002ca0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002ca2:	6878      	ldr	r0, [r7, #4]
 8002ca4:	f7fd fef0 	bl	8000a88 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	691b      	ldr	r3, [r3, #16]
 8002cae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002cb2:	2b80      	cmp	r3, #128	; 0x80
 8002cb4:	d10e      	bne.n	8002cd4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	68db      	ldr	r3, [r3, #12]
 8002cbc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002cc0:	2b80      	cmp	r3, #128	; 0x80
 8002cc2:	d107      	bne.n	8002cd4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002ccc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002cce:	6878      	ldr	r0, [r7, #4]
 8002cd0:	f000 f91a 	bl	8002f08 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	691b      	ldr	r3, [r3, #16]
 8002cda:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002cde:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002ce2:	d10e      	bne.n	8002d02 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	68db      	ldr	r3, [r3, #12]
 8002cea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002cee:	2b80      	cmp	r3, #128	; 0x80
 8002cf0:	d107      	bne.n	8002d02 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8002cfa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8002cfc:	6878      	ldr	r0, [r7, #4]
 8002cfe:	f000 f90d 	bl	8002f1c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	691b      	ldr	r3, [r3, #16]
 8002d08:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d0c:	2b40      	cmp	r3, #64	; 0x40
 8002d0e:	d10e      	bne.n	8002d2e <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	68db      	ldr	r3, [r3, #12]
 8002d16:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d1a:	2b40      	cmp	r3, #64	; 0x40
 8002d1c:	d107      	bne.n	8002d2e <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002d26:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002d28:	6878      	ldr	r0, [r7, #4]
 8002d2a:	f000 f838 	bl	8002d9e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	691b      	ldr	r3, [r3, #16]
 8002d34:	f003 0320 	and.w	r3, r3, #32
 8002d38:	2b20      	cmp	r3, #32
 8002d3a:	d10e      	bne.n	8002d5a <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	68db      	ldr	r3, [r3, #12]
 8002d42:	f003 0320 	and.w	r3, r3, #32
 8002d46:	2b20      	cmp	r3, #32
 8002d48:	d107      	bne.n	8002d5a <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	f06f 0220 	mvn.w	r2, #32
 8002d52:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002d54:	6878      	ldr	r0, [r7, #4]
 8002d56:	f000 f8cd 	bl	8002ef4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002d5a:	bf00      	nop
 8002d5c:	3708      	adds	r7, #8
 8002d5e:	46bd      	mov	sp, r7
 8002d60:	bd80      	pop	{r7, pc}

08002d62 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002d62:	b480      	push	{r7}
 8002d64:	b083      	sub	sp, #12
 8002d66:	af00      	add	r7, sp, #0
 8002d68:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002d6a:	bf00      	nop
 8002d6c:	370c      	adds	r7, #12
 8002d6e:	46bd      	mov	sp, r7
 8002d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d74:	4770      	bx	lr

08002d76 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002d76:	b480      	push	{r7}
 8002d78:	b083      	sub	sp, #12
 8002d7a:	af00      	add	r7, sp, #0
 8002d7c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002d7e:	bf00      	nop
 8002d80:	370c      	adds	r7, #12
 8002d82:	46bd      	mov	sp, r7
 8002d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d88:	4770      	bx	lr

08002d8a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002d8a:	b480      	push	{r7}
 8002d8c:	b083      	sub	sp, #12
 8002d8e:	af00      	add	r7, sp, #0
 8002d90:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002d92:	bf00      	nop
 8002d94:	370c      	adds	r7, #12
 8002d96:	46bd      	mov	sp, r7
 8002d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d9c:	4770      	bx	lr

08002d9e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002d9e:	b480      	push	{r7}
 8002da0:	b083      	sub	sp, #12
 8002da2:	af00      	add	r7, sp, #0
 8002da4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002da6:	bf00      	nop
 8002da8:	370c      	adds	r7, #12
 8002daa:	46bd      	mov	sp, r7
 8002dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002db0:	4770      	bx	lr
	...

08002db4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002db4:	b480      	push	{r7}
 8002db6:	b085      	sub	sp, #20
 8002db8:	af00      	add	r7, sp, #0
 8002dba:	6078      	str	r0, [r7, #4]
 8002dbc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	4a40      	ldr	r2, [pc, #256]	; (8002ec8 <TIM_Base_SetConfig+0x114>)
 8002dc8:	4293      	cmp	r3, r2
 8002dca:	d013      	beq.n	8002df4 <TIM_Base_SetConfig+0x40>
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002dd2:	d00f      	beq.n	8002df4 <TIM_Base_SetConfig+0x40>
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	4a3d      	ldr	r2, [pc, #244]	; (8002ecc <TIM_Base_SetConfig+0x118>)
 8002dd8:	4293      	cmp	r3, r2
 8002dda:	d00b      	beq.n	8002df4 <TIM_Base_SetConfig+0x40>
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	4a3c      	ldr	r2, [pc, #240]	; (8002ed0 <TIM_Base_SetConfig+0x11c>)
 8002de0:	4293      	cmp	r3, r2
 8002de2:	d007      	beq.n	8002df4 <TIM_Base_SetConfig+0x40>
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	4a3b      	ldr	r2, [pc, #236]	; (8002ed4 <TIM_Base_SetConfig+0x120>)
 8002de8:	4293      	cmp	r3, r2
 8002dea:	d003      	beq.n	8002df4 <TIM_Base_SetConfig+0x40>
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	4a3a      	ldr	r2, [pc, #232]	; (8002ed8 <TIM_Base_SetConfig+0x124>)
 8002df0:	4293      	cmp	r3, r2
 8002df2:	d108      	bne.n	8002e06 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002dfa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002dfc:	683b      	ldr	r3, [r7, #0]
 8002dfe:	685b      	ldr	r3, [r3, #4]
 8002e00:	68fa      	ldr	r2, [r7, #12]
 8002e02:	4313      	orrs	r3, r2
 8002e04:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	4a2f      	ldr	r2, [pc, #188]	; (8002ec8 <TIM_Base_SetConfig+0x114>)
 8002e0a:	4293      	cmp	r3, r2
 8002e0c:	d02b      	beq.n	8002e66 <TIM_Base_SetConfig+0xb2>
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002e14:	d027      	beq.n	8002e66 <TIM_Base_SetConfig+0xb2>
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	4a2c      	ldr	r2, [pc, #176]	; (8002ecc <TIM_Base_SetConfig+0x118>)
 8002e1a:	4293      	cmp	r3, r2
 8002e1c:	d023      	beq.n	8002e66 <TIM_Base_SetConfig+0xb2>
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	4a2b      	ldr	r2, [pc, #172]	; (8002ed0 <TIM_Base_SetConfig+0x11c>)
 8002e22:	4293      	cmp	r3, r2
 8002e24:	d01f      	beq.n	8002e66 <TIM_Base_SetConfig+0xb2>
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	4a2a      	ldr	r2, [pc, #168]	; (8002ed4 <TIM_Base_SetConfig+0x120>)
 8002e2a:	4293      	cmp	r3, r2
 8002e2c:	d01b      	beq.n	8002e66 <TIM_Base_SetConfig+0xb2>
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	4a29      	ldr	r2, [pc, #164]	; (8002ed8 <TIM_Base_SetConfig+0x124>)
 8002e32:	4293      	cmp	r3, r2
 8002e34:	d017      	beq.n	8002e66 <TIM_Base_SetConfig+0xb2>
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	4a28      	ldr	r2, [pc, #160]	; (8002edc <TIM_Base_SetConfig+0x128>)
 8002e3a:	4293      	cmp	r3, r2
 8002e3c:	d013      	beq.n	8002e66 <TIM_Base_SetConfig+0xb2>
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	4a27      	ldr	r2, [pc, #156]	; (8002ee0 <TIM_Base_SetConfig+0x12c>)
 8002e42:	4293      	cmp	r3, r2
 8002e44:	d00f      	beq.n	8002e66 <TIM_Base_SetConfig+0xb2>
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	4a26      	ldr	r2, [pc, #152]	; (8002ee4 <TIM_Base_SetConfig+0x130>)
 8002e4a:	4293      	cmp	r3, r2
 8002e4c:	d00b      	beq.n	8002e66 <TIM_Base_SetConfig+0xb2>
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	4a25      	ldr	r2, [pc, #148]	; (8002ee8 <TIM_Base_SetConfig+0x134>)
 8002e52:	4293      	cmp	r3, r2
 8002e54:	d007      	beq.n	8002e66 <TIM_Base_SetConfig+0xb2>
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	4a24      	ldr	r2, [pc, #144]	; (8002eec <TIM_Base_SetConfig+0x138>)
 8002e5a:	4293      	cmp	r3, r2
 8002e5c:	d003      	beq.n	8002e66 <TIM_Base_SetConfig+0xb2>
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	4a23      	ldr	r2, [pc, #140]	; (8002ef0 <TIM_Base_SetConfig+0x13c>)
 8002e62:	4293      	cmp	r3, r2
 8002e64:	d108      	bne.n	8002e78 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002e6c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002e6e:	683b      	ldr	r3, [r7, #0]
 8002e70:	68db      	ldr	r3, [r3, #12]
 8002e72:	68fa      	ldr	r2, [r7, #12]
 8002e74:	4313      	orrs	r3, r2
 8002e76:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002e7e:	683b      	ldr	r3, [r7, #0]
 8002e80:	695b      	ldr	r3, [r3, #20]
 8002e82:	4313      	orrs	r3, r2
 8002e84:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	68fa      	ldr	r2, [r7, #12]
 8002e8a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002e8c:	683b      	ldr	r3, [r7, #0]
 8002e8e:	689a      	ldr	r2, [r3, #8]
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002e94:	683b      	ldr	r3, [r7, #0]
 8002e96:	681a      	ldr	r2, [r3, #0]
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	4a0a      	ldr	r2, [pc, #40]	; (8002ec8 <TIM_Base_SetConfig+0x114>)
 8002ea0:	4293      	cmp	r3, r2
 8002ea2:	d003      	beq.n	8002eac <TIM_Base_SetConfig+0xf8>
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	4a0c      	ldr	r2, [pc, #48]	; (8002ed8 <TIM_Base_SetConfig+0x124>)
 8002ea8:	4293      	cmp	r3, r2
 8002eaa:	d103      	bne.n	8002eb4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002eac:	683b      	ldr	r3, [r7, #0]
 8002eae:	691a      	ldr	r2, [r3, #16]
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	2201      	movs	r2, #1
 8002eb8:	615a      	str	r2, [r3, #20]
}
 8002eba:	bf00      	nop
 8002ebc:	3714      	adds	r7, #20
 8002ebe:	46bd      	mov	sp, r7
 8002ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ec4:	4770      	bx	lr
 8002ec6:	bf00      	nop
 8002ec8:	40010000 	.word	0x40010000
 8002ecc:	40000400 	.word	0x40000400
 8002ed0:	40000800 	.word	0x40000800
 8002ed4:	40000c00 	.word	0x40000c00
 8002ed8:	40010400 	.word	0x40010400
 8002edc:	40014000 	.word	0x40014000
 8002ee0:	40014400 	.word	0x40014400
 8002ee4:	40014800 	.word	0x40014800
 8002ee8:	40001800 	.word	0x40001800
 8002eec:	40001c00 	.word	0x40001c00
 8002ef0:	40002000 	.word	0x40002000

08002ef4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002ef4:	b480      	push	{r7}
 8002ef6:	b083      	sub	sp, #12
 8002ef8:	af00      	add	r7, sp, #0
 8002efa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002efc:	bf00      	nop
 8002efe:	370c      	adds	r7, #12
 8002f00:	46bd      	mov	sp, r7
 8002f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f06:	4770      	bx	lr

08002f08 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002f08:	b480      	push	{r7}
 8002f0a:	b083      	sub	sp, #12
 8002f0c:	af00      	add	r7, sp, #0
 8002f0e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002f10:	bf00      	nop
 8002f12:	370c      	adds	r7, #12
 8002f14:	46bd      	mov	sp, r7
 8002f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f1a:	4770      	bx	lr

08002f1c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8002f1c:	b480      	push	{r7}
 8002f1e:	b083      	sub	sp, #12
 8002f20:	af00      	add	r7, sp, #0
 8002f22:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8002f24:	bf00      	nop
 8002f26:	370c      	adds	r7, #12
 8002f28:	46bd      	mov	sp, r7
 8002f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f2e:	4770      	bx	lr

08002f30 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002f30:	b580      	push	{r7, lr}
 8002f32:	b082      	sub	sp, #8
 8002f34:	af00      	add	r7, sp, #0
 8002f36:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d101      	bne.n	8002f42 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002f3e:	2301      	movs	r3, #1
 8002f40:	e040      	b.n	8002fc4 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d106      	bne.n	8002f58 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	2200      	movs	r2, #0
 8002f4e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002f52:	6878      	ldr	r0, [r7, #4]
 8002f54:	f7fd fdd6 	bl	8000b04 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	2224      	movs	r2, #36	; 0x24
 8002f5c:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	681a      	ldr	r2, [r3, #0]
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	f022 0201 	bic.w	r2, r2, #1
 8002f6c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002f6e:	6878      	ldr	r0, [r7, #4]
 8002f70:	f000 f82c 	bl	8002fcc <UART_SetConfig>
 8002f74:	4603      	mov	r3, r0
 8002f76:	2b01      	cmp	r3, #1
 8002f78:	d101      	bne.n	8002f7e <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8002f7a:	2301      	movs	r3, #1
 8002f7c:	e022      	b.n	8002fc4 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d002      	beq.n	8002f8c <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8002f86:	6878      	ldr	r0, [r7, #4]
 8002f88:	f000 fa80 	bl	800348c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	685a      	ldr	r2, [r3, #4]
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002f9a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	689a      	ldr	r2, [r3, #8]
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002faa:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	681a      	ldr	r2, [r3, #0]
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	f042 0201 	orr.w	r2, r2, #1
 8002fba:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002fbc:	6878      	ldr	r0, [r7, #4]
 8002fbe:	f000 fb07 	bl	80035d0 <UART_CheckIdleState>
 8002fc2:	4603      	mov	r3, r0
}
 8002fc4:	4618      	mov	r0, r3
 8002fc6:	3708      	adds	r7, #8
 8002fc8:	46bd      	mov	sp, r7
 8002fca:	bd80      	pop	{r7, pc}

08002fcc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002fcc:	b580      	push	{r7, lr}
 8002fce:	b088      	sub	sp, #32
 8002fd0:	af00      	add	r7, sp, #0
 8002fd2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002fd4:	2300      	movs	r3, #0
 8002fd6:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	689a      	ldr	r2, [r3, #8]
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	691b      	ldr	r3, [r3, #16]
 8002fe0:	431a      	orrs	r2, r3
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	695b      	ldr	r3, [r3, #20]
 8002fe6:	431a      	orrs	r2, r3
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	69db      	ldr	r3, [r3, #28]
 8002fec:	4313      	orrs	r3, r2
 8002fee:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	681a      	ldr	r2, [r3, #0]
 8002ff6:	4bb1      	ldr	r3, [pc, #708]	; (80032bc <UART_SetConfig+0x2f0>)
 8002ff8:	4013      	ands	r3, r2
 8002ffa:	687a      	ldr	r2, [r7, #4]
 8002ffc:	6812      	ldr	r2, [r2, #0]
 8002ffe:	6979      	ldr	r1, [r7, #20]
 8003000:	430b      	orrs	r3, r1
 8003002:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	685b      	ldr	r3, [r3, #4]
 800300a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	68da      	ldr	r2, [r3, #12]
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	430a      	orrs	r2, r1
 8003018:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	699b      	ldr	r3, [r3, #24]
 800301e:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	6a1b      	ldr	r3, [r3, #32]
 8003024:	697a      	ldr	r2, [r7, #20]
 8003026:	4313      	orrs	r3, r2
 8003028:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	689b      	ldr	r3, [r3, #8]
 8003030:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	697a      	ldr	r2, [r7, #20]
 800303a:	430a      	orrs	r2, r1
 800303c:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	4a9f      	ldr	r2, [pc, #636]	; (80032c0 <UART_SetConfig+0x2f4>)
 8003044:	4293      	cmp	r3, r2
 8003046:	d121      	bne.n	800308c <UART_SetConfig+0xc0>
 8003048:	4b9e      	ldr	r3, [pc, #632]	; (80032c4 <UART_SetConfig+0x2f8>)
 800304a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800304e:	f003 0303 	and.w	r3, r3, #3
 8003052:	2b03      	cmp	r3, #3
 8003054:	d816      	bhi.n	8003084 <UART_SetConfig+0xb8>
 8003056:	a201      	add	r2, pc, #4	; (adr r2, 800305c <UART_SetConfig+0x90>)
 8003058:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800305c:	0800306d 	.word	0x0800306d
 8003060:	08003079 	.word	0x08003079
 8003064:	08003073 	.word	0x08003073
 8003068:	0800307f 	.word	0x0800307f
 800306c:	2301      	movs	r3, #1
 800306e:	77fb      	strb	r3, [r7, #31]
 8003070:	e151      	b.n	8003316 <UART_SetConfig+0x34a>
 8003072:	2302      	movs	r3, #2
 8003074:	77fb      	strb	r3, [r7, #31]
 8003076:	e14e      	b.n	8003316 <UART_SetConfig+0x34a>
 8003078:	2304      	movs	r3, #4
 800307a:	77fb      	strb	r3, [r7, #31]
 800307c:	e14b      	b.n	8003316 <UART_SetConfig+0x34a>
 800307e:	2308      	movs	r3, #8
 8003080:	77fb      	strb	r3, [r7, #31]
 8003082:	e148      	b.n	8003316 <UART_SetConfig+0x34a>
 8003084:	2310      	movs	r3, #16
 8003086:	77fb      	strb	r3, [r7, #31]
 8003088:	bf00      	nop
 800308a:	e144      	b.n	8003316 <UART_SetConfig+0x34a>
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	4a8d      	ldr	r2, [pc, #564]	; (80032c8 <UART_SetConfig+0x2fc>)
 8003092:	4293      	cmp	r3, r2
 8003094:	d134      	bne.n	8003100 <UART_SetConfig+0x134>
 8003096:	4b8b      	ldr	r3, [pc, #556]	; (80032c4 <UART_SetConfig+0x2f8>)
 8003098:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800309c:	f003 030c 	and.w	r3, r3, #12
 80030a0:	2b0c      	cmp	r3, #12
 80030a2:	d829      	bhi.n	80030f8 <UART_SetConfig+0x12c>
 80030a4:	a201      	add	r2, pc, #4	; (adr r2, 80030ac <UART_SetConfig+0xe0>)
 80030a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80030aa:	bf00      	nop
 80030ac:	080030e1 	.word	0x080030e1
 80030b0:	080030f9 	.word	0x080030f9
 80030b4:	080030f9 	.word	0x080030f9
 80030b8:	080030f9 	.word	0x080030f9
 80030bc:	080030ed 	.word	0x080030ed
 80030c0:	080030f9 	.word	0x080030f9
 80030c4:	080030f9 	.word	0x080030f9
 80030c8:	080030f9 	.word	0x080030f9
 80030cc:	080030e7 	.word	0x080030e7
 80030d0:	080030f9 	.word	0x080030f9
 80030d4:	080030f9 	.word	0x080030f9
 80030d8:	080030f9 	.word	0x080030f9
 80030dc:	080030f3 	.word	0x080030f3
 80030e0:	2300      	movs	r3, #0
 80030e2:	77fb      	strb	r3, [r7, #31]
 80030e4:	e117      	b.n	8003316 <UART_SetConfig+0x34a>
 80030e6:	2302      	movs	r3, #2
 80030e8:	77fb      	strb	r3, [r7, #31]
 80030ea:	e114      	b.n	8003316 <UART_SetConfig+0x34a>
 80030ec:	2304      	movs	r3, #4
 80030ee:	77fb      	strb	r3, [r7, #31]
 80030f0:	e111      	b.n	8003316 <UART_SetConfig+0x34a>
 80030f2:	2308      	movs	r3, #8
 80030f4:	77fb      	strb	r3, [r7, #31]
 80030f6:	e10e      	b.n	8003316 <UART_SetConfig+0x34a>
 80030f8:	2310      	movs	r3, #16
 80030fa:	77fb      	strb	r3, [r7, #31]
 80030fc:	bf00      	nop
 80030fe:	e10a      	b.n	8003316 <UART_SetConfig+0x34a>
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	4a71      	ldr	r2, [pc, #452]	; (80032cc <UART_SetConfig+0x300>)
 8003106:	4293      	cmp	r3, r2
 8003108:	d120      	bne.n	800314c <UART_SetConfig+0x180>
 800310a:	4b6e      	ldr	r3, [pc, #440]	; (80032c4 <UART_SetConfig+0x2f8>)
 800310c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003110:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8003114:	2b10      	cmp	r3, #16
 8003116:	d00f      	beq.n	8003138 <UART_SetConfig+0x16c>
 8003118:	2b10      	cmp	r3, #16
 800311a:	d802      	bhi.n	8003122 <UART_SetConfig+0x156>
 800311c:	2b00      	cmp	r3, #0
 800311e:	d005      	beq.n	800312c <UART_SetConfig+0x160>
 8003120:	e010      	b.n	8003144 <UART_SetConfig+0x178>
 8003122:	2b20      	cmp	r3, #32
 8003124:	d005      	beq.n	8003132 <UART_SetConfig+0x166>
 8003126:	2b30      	cmp	r3, #48	; 0x30
 8003128:	d009      	beq.n	800313e <UART_SetConfig+0x172>
 800312a:	e00b      	b.n	8003144 <UART_SetConfig+0x178>
 800312c:	2300      	movs	r3, #0
 800312e:	77fb      	strb	r3, [r7, #31]
 8003130:	e0f1      	b.n	8003316 <UART_SetConfig+0x34a>
 8003132:	2302      	movs	r3, #2
 8003134:	77fb      	strb	r3, [r7, #31]
 8003136:	e0ee      	b.n	8003316 <UART_SetConfig+0x34a>
 8003138:	2304      	movs	r3, #4
 800313a:	77fb      	strb	r3, [r7, #31]
 800313c:	e0eb      	b.n	8003316 <UART_SetConfig+0x34a>
 800313e:	2308      	movs	r3, #8
 8003140:	77fb      	strb	r3, [r7, #31]
 8003142:	e0e8      	b.n	8003316 <UART_SetConfig+0x34a>
 8003144:	2310      	movs	r3, #16
 8003146:	77fb      	strb	r3, [r7, #31]
 8003148:	bf00      	nop
 800314a:	e0e4      	b.n	8003316 <UART_SetConfig+0x34a>
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	4a5f      	ldr	r2, [pc, #380]	; (80032d0 <UART_SetConfig+0x304>)
 8003152:	4293      	cmp	r3, r2
 8003154:	d120      	bne.n	8003198 <UART_SetConfig+0x1cc>
 8003156:	4b5b      	ldr	r3, [pc, #364]	; (80032c4 <UART_SetConfig+0x2f8>)
 8003158:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800315c:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8003160:	2b40      	cmp	r3, #64	; 0x40
 8003162:	d00f      	beq.n	8003184 <UART_SetConfig+0x1b8>
 8003164:	2b40      	cmp	r3, #64	; 0x40
 8003166:	d802      	bhi.n	800316e <UART_SetConfig+0x1a2>
 8003168:	2b00      	cmp	r3, #0
 800316a:	d005      	beq.n	8003178 <UART_SetConfig+0x1ac>
 800316c:	e010      	b.n	8003190 <UART_SetConfig+0x1c4>
 800316e:	2b80      	cmp	r3, #128	; 0x80
 8003170:	d005      	beq.n	800317e <UART_SetConfig+0x1b2>
 8003172:	2bc0      	cmp	r3, #192	; 0xc0
 8003174:	d009      	beq.n	800318a <UART_SetConfig+0x1be>
 8003176:	e00b      	b.n	8003190 <UART_SetConfig+0x1c4>
 8003178:	2300      	movs	r3, #0
 800317a:	77fb      	strb	r3, [r7, #31]
 800317c:	e0cb      	b.n	8003316 <UART_SetConfig+0x34a>
 800317e:	2302      	movs	r3, #2
 8003180:	77fb      	strb	r3, [r7, #31]
 8003182:	e0c8      	b.n	8003316 <UART_SetConfig+0x34a>
 8003184:	2304      	movs	r3, #4
 8003186:	77fb      	strb	r3, [r7, #31]
 8003188:	e0c5      	b.n	8003316 <UART_SetConfig+0x34a>
 800318a:	2308      	movs	r3, #8
 800318c:	77fb      	strb	r3, [r7, #31]
 800318e:	e0c2      	b.n	8003316 <UART_SetConfig+0x34a>
 8003190:	2310      	movs	r3, #16
 8003192:	77fb      	strb	r3, [r7, #31]
 8003194:	bf00      	nop
 8003196:	e0be      	b.n	8003316 <UART_SetConfig+0x34a>
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	4a4d      	ldr	r2, [pc, #308]	; (80032d4 <UART_SetConfig+0x308>)
 800319e:	4293      	cmp	r3, r2
 80031a0:	d124      	bne.n	80031ec <UART_SetConfig+0x220>
 80031a2:	4b48      	ldr	r3, [pc, #288]	; (80032c4 <UART_SetConfig+0x2f8>)
 80031a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80031a8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80031ac:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80031b0:	d012      	beq.n	80031d8 <UART_SetConfig+0x20c>
 80031b2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80031b6:	d802      	bhi.n	80031be <UART_SetConfig+0x1f2>
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	d007      	beq.n	80031cc <UART_SetConfig+0x200>
 80031bc:	e012      	b.n	80031e4 <UART_SetConfig+0x218>
 80031be:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80031c2:	d006      	beq.n	80031d2 <UART_SetConfig+0x206>
 80031c4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80031c8:	d009      	beq.n	80031de <UART_SetConfig+0x212>
 80031ca:	e00b      	b.n	80031e4 <UART_SetConfig+0x218>
 80031cc:	2300      	movs	r3, #0
 80031ce:	77fb      	strb	r3, [r7, #31]
 80031d0:	e0a1      	b.n	8003316 <UART_SetConfig+0x34a>
 80031d2:	2302      	movs	r3, #2
 80031d4:	77fb      	strb	r3, [r7, #31]
 80031d6:	e09e      	b.n	8003316 <UART_SetConfig+0x34a>
 80031d8:	2304      	movs	r3, #4
 80031da:	77fb      	strb	r3, [r7, #31]
 80031dc:	e09b      	b.n	8003316 <UART_SetConfig+0x34a>
 80031de:	2308      	movs	r3, #8
 80031e0:	77fb      	strb	r3, [r7, #31]
 80031e2:	e098      	b.n	8003316 <UART_SetConfig+0x34a>
 80031e4:	2310      	movs	r3, #16
 80031e6:	77fb      	strb	r3, [r7, #31]
 80031e8:	bf00      	nop
 80031ea:	e094      	b.n	8003316 <UART_SetConfig+0x34a>
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	4a39      	ldr	r2, [pc, #228]	; (80032d8 <UART_SetConfig+0x30c>)
 80031f2:	4293      	cmp	r3, r2
 80031f4:	d124      	bne.n	8003240 <UART_SetConfig+0x274>
 80031f6:	4b33      	ldr	r3, [pc, #204]	; (80032c4 <UART_SetConfig+0x2f8>)
 80031f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80031fc:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003200:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003204:	d012      	beq.n	800322c <UART_SetConfig+0x260>
 8003206:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800320a:	d802      	bhi.n	8003212 <UART_SetConfig+0x246>
 800320c:	2b00      	cmp	r3, #0
 800320e:	d007      	beq.n	8003220 <UART_SetConfig+0x254>
 8003210:	e012      	b.n	8003238 <UART_SetConfig+0x26c>
 8003212:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003216:	d006      	beq.n	8003226 <UART_SetConfig+0x25a>
 8003218:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800321c:	d009      	beq.n	8003232 <UART_SetConfig+0x266>
 800321e:	e00b      	b.n	8003238 <UART_SetConfig+0x26c>
 8003220:	2301      	movs	r3, #1
 8003222:	77fb      	strb	r3, [r7, #31]
 8003224:	e077      	b.n	8003316 <UART_SetConfig+0x34a>
 8003226:	2302      	movs	r3, #2
 8003228:	77fb      	strb	r3, [r7, #31]
 800322a:	e074      	b.n	8003316 <UART_SetConfig+0x34a>
 800322c:	2304      	movs	r3, #4
 800322e:	77fb      	strb	r3, [r7, #31]
 8003230:	e071      	b.n	8003316 <UART_SetConfig+0x34a>
 8003232:	2308      	movs	r3, #8
 8003234:	77fb      	strb	r3, [r7, #31]
 8003236:	e06e      	b.n	8003316 <UART_SetConfig+0x34a>
 8003238:	2310      	movs	r3, #16
 800323a:	77fb      	strb	r3, [r7, #31]
 800323c:	bf00      	nop
 800323e:	e06a      	b.n	8003316 <UART_SetConfig+0x34a>
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	4a25      	ldr	r2, [pc, #148]	; (80032dc <UART_SetConfig+0x310>)
 8003246:	4293      	cmp	r3, r2
 8003248:	d124      	bne.n	8003294 <UART_SetConfig+0x2c8>
 800324a:	4b1e      	ldr	r3, [pc, #120]	; (80032c4 <UART_SetConfig+0x2f8>)
 800324c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003250:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8003254:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003258:	d012      	beq.n	8003280 <UART_SetConfig+0x2b4>
 800325a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800325e:	d802      	bhi.n	8003266 <UART_SetConfig+0x29a>
 8003260:	2b00      	cmp	r3, #0
 8003262:	d007      	beq.n	8003274 <UART_SetConfig+0x2a8>
 8003264:	e012      	b.n	800328c <UART_SetConfig+0x2c0>
 8003266:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800326a:	d006      	beq.n	800327a <UART_SetConfig+0x2ae>
 800326c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003270:	d009      	beq.n	8003286 <UART_SetConfig+0x2ba>
 8003272:	e00b      	b.n	800328c <UART_SetConfig+0x2c0>
 8003274:	2300      	movs	r3, #0
 8003276:	77fb      	strb	r3, [r7, #31]
 8003278:	e04d      	b.n	8003316 <UART_SetConfig+0x34a>
 800327a:	2302      	movs	r3, #2
 800327c:	77fb      	strb	r3, [r7, #31]
 800327e:	e04a      	b.n	8003316 <UART_SetConfig+0x34a>
 8003280:	2304      	movs	r3, #4
 8003282:	77fb      	strb	r3, [r7, #31]
 8003284:	e047      	b.n	8003316 <UART_SetConfig+0x34a>
 8003286:	2308      	movs	r3, #8
 8003288:	77fb      	strb	r3, [r7, #31]
 800328a:	e044      	b.n	8003316 <UART_SetConfig+0x34a>
 800328c:	2310      	movs	r3, #16
 800328e:	77fb      	strb	r3, [r7, #31]
 8003290:	bf00      	nop
 8003292:	e040      	b.n	8003316 <UART_SetConfig+0x34a>
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	4a11      	ldr	r2, [pc, #68]	; (80032e0 <UART_SetConfig+0x314>)
 800329a:	4293      	cmp	r3, r2
 800329c:	d139      	bne.n	8003312 <UART_SetConfig+0x346>
 800329e:	4b09      	ldr	r3, [pc, #36]	; (80032c4 <UART_SetConfig+0x2f8>)
 80032a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80032a4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80032a8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80032ac:	d027      	beq.n	80032fe <UART_SetConfig+0x332>
 80032ae:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80032b2:	d817      	bhi.n	80032e4 <UART_SetConfig+0x318>
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	d01c      	beq.n	80032f2 <UART_SetConfig+0x326>
 80032b8:	e027      	b.n	800330a <UART_SetConfig+0x33e>
 80032ba:	bf00      	nop
 80032bc:	efff69f3 	.word	0xefff69f3
 80032c0:	40011000 	.word	0x40011000
 80032c4:	40023800 	.word	0x40023800
 80032c8:	40004400 	.word	0x40004400
 80032cc:	40004800 	.word	0x40004800
 80032d0:	40004c00 	.word	0x40004c00
 80032d4:	40005000 	.word	0x40005000
 80032d8:	40011400 	.word	0x40011400
 80032dc:	40007800 	.word	0x40007800
 80032e0:	40007c00 	.word	0x40007c00
 80032e4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80032e8:	d006      	beq.n	80032f8 <UART_SetConfig+0x32c>
 80032ea:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80032ee:	d009      	beq.n	8003304 <UART_SetConfig+0x338>
 80032f0:	e00b      	b.n	800330a <UART_SetConfig+0x33e>
 80032f2:	2300      	movs	r3, #0
 80032f4:	77fb      	strb	r3, [r7, #31]
 80032f6:	e00e      	b.n	8003316 <UART_SetConfig+0x34a>
 80032f8:	2302      	movs	r3, #2
 80032fa:	77fb      	strb	r3, [r7, #31]
 80032fc:	e00b      	b.n	8003316 <UART_SetConfig+0x34a>
 80032fe:	2304      	movs	r3, #4
 8003300:	77fb      	strb	r3, [r7, #31]
 8003302:	e008      	b.n	8003316 <UART_SetConfig+0x34a>
 8003304:	2308      	movs	r3, #8
 8003306:	77fb      	strb	r3, [r7, #31]
 8003308:	e005      	b.n	8003316 <UART_SetConfig+0x34a>
 800330a:	2310      	movs	r3, #16
 800330c:	77fb      	strb	r3, [r7, #31]
 800330e:	bf00      	nop
 8003310:	e001      	b.n	8003316 <UART_SetConfig+0x34a>
 8003312:	2310      	movs	r3, #16
 8003314:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	69db      	ldr	r3, [r3, #28]
 800331a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800331e:	d15b      	bne.n	80033d8 <UART_SetConfig+0x40c>
  {
    switch (clocksource)
 8003320:	7ffb      	ldrb	r3, [r7, #31]
 8003322:	2b08      	cmp	r3, #8
 8003324:	d827      	bhi.n	8003376 <UART_SetConfig+0x3aa>
 8003326:	a201      	add	r2, pc, #4	; (adr r2, 800332c <UART_SetConfig+0x360>)
 8003328:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800332c:	08003351 	.word	0x08003351
 8003330:	08003359 	.word	0x08003359
 8003334:	08003361 	.word	0x08003361
 8003338:	08003377 	.word	0x08003377
 800333c:	08003367 	.word	0x08003367
 8003340:	08003377 	.word	0x08003377
 8003344:	08003377 	.word	0x08003377
 8003348:	08003377 	.word	0x08003377
 800334c:	0800336f 	.word	0x0800336f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003350:	f7fe fec4 	bl	80020dc <HAL_RCC_GetPCLK1Freq>
 8003354:	61b8      	str	r0, [r7, #24]
        break;
 8003356:	e013      	b.n	8003380 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003358:	f7fe fed4 	bl	8002104 <HAL_RCC_GetPCLK2Freq>
 800335c:	61b8      	str	r0, [r7, #24]
        break;
 800335e:	e00f      	b.n	8003380 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003360:	4b49      	ldr	r3, [pc, #292]	; (8003488 <UART_SetConfig+0x4bc>)
 8003362:	61bb      	str	r3, [r7, #24]
        break;
 8003364:	e00c      	b.n	8003380 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003366:	f7fe fdd5 	bl	8001f14 <HAL_RCC_GetSysClockFreq>
 800336a:	61b8      	str	r0, [r7, #24]
        break;
 800336c:	e008      	b.n	8003380 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800336e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003372:	61bb      	str	r3, [r7, #24]
        break;
 8003374:	e004      	b.n	8003380 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8003376:	2300      	movs	r3, #0
 8003378:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800337a:	2301      	movs	r3, #1
 800337c:	77bb      	strb	r3, [r7, #30]
        break;
 800337e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003380:	69bb      	ldr	r3, [r7, #24]
 8003382:	2b00      	cmp	r3, #0
 8003384:	d074      	beq.n	8003470 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003386:	69bb      	ldr	r3, [r7, #24]
 8003388:	005a      	lsls	r2, r3, #1
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	685b      	ldr	r3, [r3, #4]
 800338e:	085b      	lsrs	r3, r3, #1
 8003390:	441a      	add	r2, r3
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	685b      	ldr	r3, [r3, #4]
 8003396:	fbb2 f3f3 	udiv	r3, r2, r3
 800339a:	b29b      	uxth	r3, r3
 800339c:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800339e:	693b      	ldr	r3, [r7, #16]
 80033a0:	2b0f      	cmp	r3, #15
 80033a2:	d916      	bls.n	80033d2 <UART_SetConfig+0x406>
 80033a4:	693b      	ldr	r3, [r7, #16]
 80033a6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80033aa:	d212      	bcs.n	80033d2 <UART_SetConfig+0x406>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80033ac:	693b      	ldr	r3, [r7, #16]
 80033ae:	b29b      	uxth	r3, r3
 80033b0:	f023 030f 	bic.w	r3, r3, #15
 80033b4:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80033b6:	693b      	ldr	r3, [r7, #16]
 80033b8:	085b      	lsrs	r3, r3, #1
 80033ba:	b29b      	uxth	r3, r3
 80033bc:	f003 0307 	and.w	r3, r3, #7
 80033c0:	b29a      	uxth	r2, r3
 80033c2:	89fb      	ldrh	r3, [r7, #14]
 80033c4:	4313      	orrs	r3, r2
 80033c6:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	89fa      	ldrh	r2, [r7, #14]
 80033ce:	60da      	str	r2, [r3, #12]
 80033d0:	e04e      	b.n	8003470 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 80033d2:	2301      	movs	r3, #1
 80033d4:	77bb      	strb	r3, [r7, #30]
 80033d6:	e04b      	b.n	8003470 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 80033d8:	7ffb      	ldrb	r3, [r7, #31]
 80033da:	2b08      	cmp	r3, #8
 80033dc:	d827      	bhi.n	800342e <UART_SetConfig+0x462>
 80033de:	a201      	add	r2, pc, #4	; (adr r2, 80033e4 <UART_SetConfig+0x418>)
 80033e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80033e4:	08003409 	.word	0x08003409
 80033e8:	08003411 	.word	0x08003411
 80033ec:	08003419 	.word	0x08003419
 80033f0:	0800342f 	.word	0x0800342f
 80033f4:	0800341f 	.word	0x0800341f
 80033f8:	0800342f 	.word	0x0800342f
 80033fc:	0800342f 	.word	0x0800342f
 8003400:	0800342f 	.word	0x0800342f
 8003404:	08003427 	.word	0x08003427
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003408:	f7fe fe68 	bl	80020dc <HAL_RCC_GetPCLK1Freq>
 800340c:	61b8      	str	r0, [r7, #24]
        break;
 800340e:	e013      	b.n	8003438 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003410:	f7fe fe78 	bl	8002104 <HAL_RCC_GetPCLK2Freq>
 8003414:	61b8      	str	r0, [r7, #24]
        break;
 8003416:	e00f      	b.n	8003438 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003418:	4b1b      	ldr	r3, [pc, #108]	; (8003488 <UART_SetConfig+0x4bc>)
 800341a:	61bb      	str	r3, [r7, #24]
        break;
 800341c:	e00c      	b.n	8003438 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800341e:	f7fe fd79 	bl	8001f14 <HAL_RCC_GetSysClockFreq>
 8003422:	61b8      	str	r0, [r7, #24]
        break;
 8003424:	e008      	b.n	8003438 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003426:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800342a:	61bb      	str	r3, [r7, #24]
        break;
 800342c:	e004      	b.n	8003438 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 800342e:	2300      	movs	r3, #0
 8003430:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003432:	2301      	movs	r3, #1
 8003434:	77bb      	strb	r3, [r7, #30]
        break;
 8003436:	bf00      	nop
    }

    if (pclk != 0U)
 8003438:	69bb      	ldr	r3, [r7, #24]
 800343a:	2b00      	cmp	r3, #0
 800343c:	d018      	beq.n	8003470 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	685b      	ldr	r3, [r3, #4]
 8003442:	085a      	lsrs	r2, r3, #1
 8003444:	69bb      	ldr	r3, [r7, #24]
 8003446:	441a      	add	r2, r3
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	685b      	ldr	r3, [r3, #4]
 800344c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003450:	b29b      	uxth	r3, r3
 8003452:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003454:	693b      	ldr	r3, [r7, #16]
 8003456:	2b0f      	cmp	r3, #15
 8003458:	d908      	bls.n	800346c <UART_SetConfig+0x4a0>
 800345a:	693b      	ldr	r3, [r7, #16]
 800345c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003460:	d204      	bcs.n	800346c <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = usartdiv;
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	693a      	ldr	r2, [r7, #16]
 8003468:	60da      	str	r2, [r3, #12]
 800346a:	e001      	b.n	8003470 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 800346c:	2301      	movs	r3, #1
 800346e:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	2200      	movs	r2, #0
 8003474:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	2200      	movs	r2, #0
 800347a:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 800347c:	7fbb      	ldrb	r3, [r7, #30]
}
 800347e:	4618      	mov	r0, r3
 8003480:	3720      	adds	r7, #32
 8003482:	46bd      	mov	sp, r7
 8003484:	bd80      	pop	{r7, pc}
 8003486:	bf00      	nop
 8003488:	00f42400 	.word	0x00f42400

0800348c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800348c:	b480      	push	{r7}
 800348e:	b083      	sub	sp, #12
 8003490:	af00      	add	r7, sp, #0
 8003492:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003498:	f003 0301 	and.w	r3, r3, #1
 800349c:	2b00      	cmp	r3, #0
 800349e:	d00a      	beq.n	80034b6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	685b      	ldr	r3, [r3, #4]
 80034a6:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	430a      	orrs	r2, r1
 80034b4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034ba:	f003 0302 	and.w	r3, r3, #2
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d00a      	beq.n	80034d8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	685b      	ldr	r3, [r3, #4]
 80034c8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	430a      	orrs	r2, r1
 80034d6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034dc:	f003 0304 	and.w	r3, r3, #4
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	d00a      	beq.n	80034fa <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	685b      	ldr	r3, [r3, #4]
 80034ea:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	430a      	orrs	r2, r1
 80034f8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034fe:	f003 0308 	and.w	r3, r3, #8
 8003502:	2b00      	cmp	r3, #0
 8003504:	d00a      	beq.n	800351c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	685b      	ldr	r3, [r3, #4]
 800350c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	430a      	orrs	r2, r1
 800351a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003520:	f003 0310 	and.w	r3, r3, #16
 8003524:	2b00      	cmp	r3, #0
 8003526:	d00a      	beq.n	800353e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	689b      	ldr	r3, [r3, #8]
 800352e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	430a      	orrs	r2, r1
 800353c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003542:	f003 0320 	and.w	r3, r3, #32
 8003546:	2b00      	cmp	r3, #0
 8003548:	d00a      	beq.n	8003560 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	689b      	ldr	r3, [r3, #8]
 8003550:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	430a      	orrs	r2, r1
 800355e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003564:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003568:	2b00      	cmp	r3, #0
 800356a:	d01a      	beq.n	80035a2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	685b      	ldr	r3, [r3, #4]
 8003572:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	430a      	orrs	r2, r1
 8003580:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003586:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800358a:	d10a      	bne.n	80035a2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	685b      	ldr	r3, [r3, #4]
 8003592:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	430a      	orrs	r2, r1
 80035a0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d00a      	beq.n	80035c4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	685b      	ldr	r3, [r3, #4]
 80035b4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	430a      	orrs	r2, r1
 80035c2:	605a      	str	r2, [r3, #4]
  }
}
 80035c4:	bf00      	nop
 80035c6:	370c      	adds	r7, #12
 80035c8:	46bd      	mov	sp, r7
 80035ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ce:	4770      	bx	lr

080035d0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80035d0:	b580      	push	{r7, lr}
 80035d2:	b086      	sub	sp, #24
 80035d4:	af02      	add	r7, sp, #8
 80035d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	2200      	movs	r2, #0
 80035dc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80035e0:	f7fd fc8c 	bl	8000efc <HAL_GetTick>
 80035e4:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	f003 0308 	and.w	r3, r3, #8
 80035f0:	2b08      	cmp	r3, #8
 80035f2:	d10e      	bne.n	8003612 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80035f4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80035f8:	9300      	str	r3, [sp, #0]
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	2200      	movs	r2, #0
 80035fe:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003602:	6878      	ldr	r0, [r7, #4]
 8003604:	f000 f817 	bl	8003636 <UART_WaitOnFlagUntilTimeout>
 8003608:	4603      	mov	r3, r0
 800360a:	2b00      	cmp	r3, #0
 800360c:	d001      	beq.n	8003612 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800360e:	2303      	movs	r3, #3
 8003610:	e00d      	b.n	800362e <UART_CheckIdleState+0x5e>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	2220      	movs	r2, #32
 8003616:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	2220      	movs	r2, #32
 800361c:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	2200      	movs	r2, #0
 8003622:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	2200      	movs	r2, #0
 8003628:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 800362c:	2300      	movs	r3, #0
}
 800362e:	4618      	mov	r0, r3
 8003630:	3710      	adds	r7, #16
 8003632:	46bd      	mov	sp, r7
 8003634:	bd80      	pop	{r7, pc}

08003636 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003636:	b580      	push	{r7, lr}
 8003638:	b084      	sub	sp, #16
 800363a:	af00      	add	r7, sp, #0
 800363c:	60f8      	str	r0, [r7, #12]
 800363e:	60b9      	str	r1, [r7, #8]
 8003640:	603b      	str	r3, [r7, #0]
 8003642:	4613      	mov	r3, r2
 8003644:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003646:	e05e      	b.n	8003706 <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003648:	69bb      	ldr	r3, [r7, #24]
 800364a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800364e:	d05a      	beq.n	8003706 <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003650:	f7fd fc54 	bl	8000efc <HAL_GetTick>
 8003654:	4602      	mov	r2, r0
 8003656:	683b      	ldr	r3, [r7, #0]
 8003658:	1ad3      	subs	r3, r2, r3
 800365a:	69ba      	ldr	r2, [r7, #24]
 800365c:	429a      	cmp	r2, r3
 800365e:	d302      	bcc.n	8003666 <UART_WaitOnFlagUntilTimeout+0x30>
 8003660:	69bb      	ldr	r3, [r7, #24]
 8003662:	2b00      	cmp	r3, #0
 8003664:	d11b      	bne.n	800369e <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	681a      	ldr	r2, [r3, #0]
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003674:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	689a      	ldr	r2, [r3, #8]
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	f022 0201 	bic.w	r2, r2, #1
 8003684:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	2220      	movs	r2, #32
 800368a:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	2220      	movs	r2, #32
 8003690:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	2200      	movs	r2, #0
 8003696:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 800369a:	2303      	movs	r3, #3
 800369c:	e043      	b.n	8003726 <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	f003 0304 	and.w	r3, r3, #4
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	d02c      	beq.n	8003706 <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	69db      	ldr	r3, [r3, #28]
 80036b2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80036b6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80036ba:	d124      	bne.n	8003706 <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80036c4:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	681a      	ldr	r2, [r3, #0]
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80036d4:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	689a      	ldr	r2, [r3, #8]
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	f022 0201 	bic.w	r2, r2, #1
 80036e4:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	2220      	movs	r2, #32
 80036ea:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	2220      	movs	r2, #32
 80036f0:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	2220      	movs	r2, #32
 80036f6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	2200      	movs	r2, #0
 80036fe:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8003702:	2303      	movs	r3, #3
 8003704:	e00f      	b.n	8003726 <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	69da      	ldr	r2, [r3, #28]
 800370c:	68bb      	ldr	r3, [r7, #8]
 800370e:	4013      	ands	r3, r2
 8003710:	68ba      	ldr	r2, [r7, #8]
 8003712:	429a      	cmp	r2, r3
 8003714:	bf0c      	ite	eq
 8003716:	2301      	moveq	r3, #1
 8003718:	2300      	movne	r3, #0
 800371a:	b2db      	uxtb	r3, r3
 800371c:	461a      	mov	r2, r3
 800371e:	79fb      	ldrb	r3, [r7, #7]
 8003720:	429a      	cmp	r2, r3
 8003722:	d091      	beq.n	8003648 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003724:	2300      	movs	r3, #0
}
 8003726:	4618      	mov	r0, r3
 8003728:	3710      	adds	r7, #16
 800372a:	46bd      	mov	sp, r7
 800372c:	bd80      	pop	{r7, pc}
	...

08003730 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003730:	b084      	sub	sp, #16
 8003732:	b580      	push	{r7, lr}
 8003734:	b084      	sub	sp, #16
 8003736:	af00      	add	r7, sp, #0
 8003738:	6078      	str	r0, [r7, #4]
 800373a:	f107 001c 	add.w	r0, r7, #28
 800373e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8003742:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003744:	2b01      	cmp	r3, #1
 8003746:	d120      	bne.n	800378a <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800374c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	68da      	ldr	r2, [r3, #12]
 8003758:	4b20      	ldr	r3, [pc, #128]	; (80037dc <USB_CoreInit+0xac>)
 800375a:	4013      	ands	r3, r2
 800375c:	687a      	ldr	r2, [r7, #4]
 800375e:	60d3      	str	r3, [r2, #12]
    /* Select ULPI Interface */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	68db      	ldr	r3, [r3, #12]
 8003764:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800376c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800376e:	2b01      	cmp	r3, #1
 8003770:	d105      	bne.n	800377e <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	68db      	ldr	r3, [r3, #12]
 8003776:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 800377e:	6878      	ldr	r0, [r7, #4]
 8003780:	f000 fa5a 	bl	8003c38 <USB_CoreReset>
 8003784:	4603      	mov	r3, r0
 8003786:	73fb      	strb	r3, [r7, #15]
 8003788:	e010      	b.n	80037ac <USB_CoreInit+0x7c>
  }
#endif
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	68db      	ldr	r3, [r3, #12]
 800378e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8003796:	6878      	ldr	r0, [r7, #4]
 8003798:	f000 fa4e 	bl	8003c38 <USB_CoreReset>
 800379c:	4603      	mov	r3, r0
 800379e:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037a4:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 80037ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037ae:	2b01      	cmp	r3, #1
 80037b0:	d10b      	bne.n	80037ca <USB_CoreInit+0x9a>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	689b      	ldr	r3, [r3, #8]
 80037b6:	f043 0206 	orr.w	r2, r3, #6
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	689b      	ldr	r3, [r3, #8]
 80037c2:	f043 0220 	orr.w	r2, r3, #32
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80037ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80037cc:	4618      	mov	r0, r3
 80037ce:	3710      	adds	r7, #16
 80037d0:	46bd      	mov	sp, r7
 80037d2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80037d6:	b004      	add	sp, #16
 80037d8:	4770      	bx	lr
 80037da:	bf00      	nop
 80037dc:	ffbdffbf 	.word	0xffbdffbf

080037e0 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80037e0:	b480      	push	{r7}
 80037e2:	b083      	sub	sp, #12
 80037e4:	af00      	add	r7, sp, #0
 80037e6:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	689b      	ldr	r3, [r3, #8]
 80037ec:	f023 0201 	bic.w	r2, r3, #1
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80037f4:	2300      	movs	r3, #0
}
 80037f6:	4618      	mov	r0, r3
 80037f8:	370c      	adds	r7, #12
 80037fa:	46bd      	mov	sp, r7
 80037fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003800:	4770      	bx	lr

08003802 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8003802:	b580      	push	{r7, lr}
 8003804:	b082      	sub	sp, #8
 8003806:	af00      	add	r7, sp, #0
 8003808:	6078      	str	r0, [r7, #4]
 800380a:	460b      	mov	r3, r1
 800380c:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	68db      	ldr	r3, [r3, #12]
 8003812:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800381a:	78fb      	ldrb	r3, [r7, #3]
 800381c:	2b01      	cmp	r3, #1
 800381e:	d106      	bne.n	800382e <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	68db      	ldr	r3, [r3, #12]
 8003824:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	60da      	str	r2, [r3, #12]
 800382c:	e00b      	b.n	8003846 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 800382e:	78fb      	ldrb	r3, [r7, #3]
 8003830:	2b00      	cmp	r3, #0
 8003832:	d106      	bne.n	8003842 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	68db      	ldr	r3, [r3, #12]
 8003838:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	60da      	str	r2, [r3, #12]
 8003840:	e001      	b.n	8003846 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 8003842:	2301      	movs	r3, #1
 8003844:	e003      	b.n	800384e <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 8003846:	2032      	movs	r0, #50	; 0x32
 8003848:	f7fd fb64 	bl	8000f14 <HAL_Delay>

  return HAL_OK;
 800384c:	2300      	movs	r3, #0
}
 800384e:	4618      	mov	r0, r3
 8003850:	3708      	adds	r7, #8
 8003852:	46bd      	mov	sp, r7
 8003854:	bd80      	pop	{r7, pc}
	...

08003858 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003858:	b084      	sub	sp, #16
 800385a:	b580      	push	{r7, lr}
 800385c:	b086      	sub	sp, #24
 800385e:	af00      	add	r7, sp, #0
 8003860:	6078      	str	r0, [r7, #4]
 8003862:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8003866:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800386a:	2300      	movs	r3, #0
 800386c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8003872:	2300      	movs	r3, #0
 8003874:	613b      	str	r3, [r7, #16]
 8003876:	e009      	b.n	800388c <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8003878:	687a      	ldr	r2, [r7, #4]
 800387a:	693b      	ldr	r3, [r7, #16]
 800387c:	3340      	adds	r3, #64	; 0x40
 800387e:	009b      	lsls	r3, r3, #2
 8003880:	4413      	add	r3, r2
 8003882:	2200      	movs	r2, #0
 8003884:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8003886:	693b      	ldr	r3, [r7, #16]
 8003888:	3301      	adds	r3, #1
 800388a:	613b      	str	r3, [r7, #16]
 800388c:	693b      	ldr	r3, [r7, #16]
 800388e:	2b0e      	cmp	r3, #14
 8003890:	d9f2      	bls.n	8003878 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8003892:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003894:	2b00      	cmp	r3, #0
 8003896:	d11c      	bne.n	80038d2 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800389e:	685b      	ldr	r3, [r3, #4]
 80038a0:	68fa      	ldr	r2, [r7, #12]
 80038a2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80038a6:	f043 0302 	orr.w	r3, r3, #2
 80038aa:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038b0:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	601a      	str	r2, [r3, #0]
 80038d0:	e005      	b.n	80038de <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038d6:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80038e4:	461a      	mov	r2, r3
 80038e6:	2300      	movs	r3, #0
 80038e8:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80038f0:	4619      	mov	r1, r3
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80038f8:	461a      	mov	r2, r3
 80038fa:	680b      	ldr	r3, [r1, #0]
 80038fc:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80038fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003900:	2b01      	cmp	r3, #1
 8003902:	d10c      	bne.n	800391e <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8003904:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003906:	2b00      	cmp	r3, #0
 8003908:	d104      	bne.n	8003914 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800390a:	2100      	movs	r1, #0
 800390c:	6878      	ldr	r0, [r7, #4]
 800390e:	f000 f959 	bl	8003bc4 <USB_SetDevSpeed>
 8003912:	e018      	b.n	8003946 <USB_DevInit+0xee>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8003914:	2101      	movs	r1, #1
 8003916:	6878      	ldr	r0, [r7, #4]
 8003918:	f000 f954 	bl	8003bc4 <USB_SetDevSpeed>
 800391c:	e013      	b.n	8003946 <USB_DevInit+0xee>
    }
  }
  else if (cfg.phy_itface == USB_OTG_HS_EMBEDDED_PHY)
 800391e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003920:	2b03      	cmp	r3, #3
 8003922:	d10c      	bne.n	800393e <USB_DevInit+0xe6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8003924:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003926:	2b00      	cmp	r3, #0
 8003928:	d104      	bne.n	8003934 <USB_DevInit+0xdc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800392a:	2100      	movs	r1, #0
 800392c:	6878      	ldr	r0, [r7, #4]
 800392e:	f000 f949 	bl	8003bc4 <USB_SetDevSpeed>
 8003932:	e008      	b.n	8003946 <USB_DevInit+0xee>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8003934:	2101      	movs	r1, #1
 8003936:	6878      	ldr	r0, [r7, #4]
 8003938:	f000 f944 	bl	8003bc4 <USB_SetDevSpeed>
 800393c:	e003      	b.n	8003946 <USB_DevInit+0xee>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800393e:	2103      	movs	r1, #3
 8003940:	6878      	ldr	r0, [r7, #4]
 8003942:	f000 f93f 	bl	8003bc4 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8003946:	2110      	movs	r1, #16
 8003948:	6878      	ldr	r0, [r7, #4]
 800394a:	f000 f8f3 	bl	8003b34 <USB_FlushTxFifo>
 800394e:	4603      	mov	r3, r0
 8003950:	2b00      	cmp	r3, #0
 8003952:	d001      	beq.n	8003958 <USB_DevInit+0x100>
  {
    ret = HAL_ERROR;
 8003954:	2301      	movs	r3, #1
 8003956:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8003958:	6878      	ldr	r0, [r7, #4]
 800395a:	f000 f911 	bl	8003b80 <USB_FlushRxFifo>
 800395e:	4603      	mov	r3, r0
 8003960:	2b00      	cmp	r3, #0
 8003962:	d001      	beq.n	8003968 <USB_DevInit+0x110>
  {
    ret = HAL_ERROR;
 8003964:	2301      	movs	r3, #1
 8003966:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800396e:	461a      	mov	r2, r3
 8003970:	2300      	movs	r3, #0
 8003972:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800397a:	461a      	mov	r2, r3
 800397c:	2300      	movs	r3, #0
 800397e:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003986:	461a      	mov	r2, r3
 8003988:	2300      	movs	r3, #0
 800398a:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800398c:	2300      	movs	r3, #0
 800398e:	613b      	str	r3, [r7, #16]
 8003990:	e043      	b.n	8003a1a <USB_DevInit+0x1c2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8003992:	693b      	ldr	r3, [r7, #16]
 8003994:	015a      	lsls	r2, r3, #5
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	4413      	add	r3, r2
 800399a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80039a4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80039a8:	d118      	bne.n	80039dc <USB_DevInit+0x184>
    {
      if (i == 0U)
 80039aa:	693b      	ldr	r3, [r7, #16]
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	d10a      	bne.n	80039c6 <USB_DevInit+0x16e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80039b0:	693b      	ldr	r3, [r7, #16]
 80039b2:	015a      	lsls	r2, r3, #5
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	4413      	add	r3, r2
 80039b8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80039bc:	461a      	mov	r2, r3
 80039be:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80039c2:	6013      	str	r3, [r2, #0]
 80039c4:	e013      	b.n	80039ee <USB_DevInit+0x196>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80039c6:	693b      	ldr	r3, [r7, #16]
 80039c8:	015a      	lsls	r2, r3, #5
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	4413      	add	r3, r2
 80039ce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80039d2:	461a      	mov	r2, r3
 80039d4:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80039d8:	6013      	str	r3, [r2, #0]
 80039da:	e008      	b.n	80039ee <USB_DevInit+0x196>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80039dc:	693b      	ldr	r3, [r7, #16]
 80039de:	015a      	lsls	r2, r3, #5
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	4413      	add	r3, r2
 80039e4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80039e8:	461a      	mov	r2, r3
 80039ea:	2300      	movs	r3, #0
 80039ec:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80039ee:	693b      	ldr	r3, [r7, #16]
 80039f0:	015a      	lsls	r2, r3, #5
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	4413      	add	r3, r2
 80039f6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80039fa:	461a      	mov	r2, r3
 80039fc:	2300      	movs	r3, #0
 80039fe:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8003a00:	693b      	ldr	r3, [r7, #16]
 8003a02:	015a      	lsls	r2, r3, #5
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	4413      	add	r3, r2
 8003a08:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003a0c:	461a      	mov	r2, r3
 8003a0e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003a12:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003a14:	693b      	ldr	r3, [r7, #16]
 8003a16:	3301      	adds	r3, #1
 8003a18:	613b      	str	r3, [r7, #16]
 8003a1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a1c:	693a      	ldr	r2, [r7, #16]
 8003a1e:	429a      	cmp	r2, r3
 8003a20:	d3b7      	bcc.n	8003992 <USB_DevInit+0x13a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003a22:	2300      	movs	r3, #0
 8003a24:	613b      	str	r3, [r7, #16]
 8003a26:	e043      	b.n	8003ab0 <USB_DevInit+0x258>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8003a28:	693b      	ldr	r3, [r7, #16]
 8003a2a:	015a      	lsls	r2, r3, #5
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	4413      	add	r3, r2
 8003a30:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003a3a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003a3e:	d118      	bne.n	8003a72 <USB_DevInit+0x21a>
    {
      if (i == 0U)
 8003a40:	693b      	ldr	r3, [r7, #16]
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d10a      	bne.n	8003a5c <USB_DevInit+0x204>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8003a46:	693b      	ldr	r3, [r7, #16]
 8003a48:	015a      	lsls	r2, r3, #5
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	4413      	add	r3, r2
 8003a4e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003a52:	461a      	mov	r2, r3
 8003a54:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8003a58:	6013      	str	r3, [r2, #0]
 8003a5a:	e013      	b.n	8003a84 <USB_DevInit+0x22c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8003a5c:	693b      	ldr	r3, [r7, #16]
 8003a5e:	015a      	lsls	r2, r3, #5
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	4413      	add	r3, r2
 8003a64:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003a68:	461a      	mov	r2, r3
 8003a6a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8003a6e:	6013      	str	r3, [r2, #0]
 8003a70:	e008      	b.n	8003a84 <USB_DevInit+0x22c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8003a72:	693b      	ldr	r3, [r7, #16]
 8003a74:	015a      	lsls	r2, r3, #5
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	4413      	add	r3, r2
 8003a7a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003a7e:	461a      	mov	r2, r3
 8003a80:	2300      	movs	r3, #0
 8003a82:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8003a84:	693b      	ldr	r3, [r7, #16]
 8003a86:	015a      	lsls	r2, r3, #5
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	4413      	add	r3, r2
 8003a8c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003a90:	461a      	mov	r2, r3
 8003a92:	2300      	movs	r3, #0
 8003a94:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8003a96:	693b      	ldr	r3, [r7, #16]
 8003a98:	015a      	lsls	r2, r3, #5
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	4413      	add	r3, r2
 8003a9e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003aa2:	461a      	mov	r2, r3
 8003aa4:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003aa8:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003aaa:	693b      	ldr	r3, [r7, #16]
 8003aac:	3301      	adds	r3, #1
 8003aae:	613b      	str	r3, [r7, #16]
 8003ab0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ab2:	693a      	ldr	r2, [r7, #16]
 8003ab4:	429a      	cmp	r2, r3
 8003ab6:	d3b7      	bcc.n	8003a28 <USB_DevInit+0x1d0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003abe:	691b      	ldr	r3, [r3, #16]
 8003ac0:	68fa      	ldr	r2, [r7, #12]
 8003ac2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003ac6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003aca:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	2200      	movs	r2, #0
 8003ad0:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8003ad8:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8003ada:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	d105      	bne.n	8003aec <USB_DevInit+0x294>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	699b      	ldr	r3, [r3, #24]
 8003ae4:	f043 0210 	orr.w	r2, r3, #16
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	699a      	ldr	r2, [r3, #24]
 8003af0:	4b0e      	ldr	r3, [pc, #56]	; (8003b2c <USB_DevInit+0x2d4>)
 8003af2:	4313      	orrs	r3, r2
 8003af4:	687a      	ldr	r2, [r7, #4]
 8003af6:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8003af8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d005      	beq.n	8003b0a <USB_DevInit+0x2b2>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	699b      	ldr	r3, [r3, #24]
 8003b02:	f043 0208 	orr.w	r2, r3, #8
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8003b0a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003b0c:	2b01      	cmp	r3, #1
 8003b0e:	d105      	bne.n	8003b1c <USB_DevInit+0x2c4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	699a      	ldr	r2, [r3, #24]
 8003b14:	4b06      	ldr	r3, [pc, #24]	; (8003b30 <USB_DevInit+0x2d8>)
 8003b16:	4313      	orrs	r3, r2
 8003b18:	687a      	ldr	r2, [r7, #4]
 8003b1a:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8003b1c:	7dfb      	ldrb	r3, [r7, #23]
}
 8003b1e:	4618      	mov	r0, r3
 8003b20:	3718      	adds	r7, #24
 8003b22:	46bd      	mov	sp, r7
 8003b24:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003b28:	b004      	add	sp, #16
 8003b2a:	4770      	bx	lr
 8003b2c:	803c3800 	.word	0x803c3800
 8003b30:	40000004 	.word	0x40000004

08003b34 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8003b34:	b480      	push	{r7}
 8003b36:	b085      	sub	sp, #20
 8003b38:	af00      	add	r7, sp, #0
 8003b3a:	6078      	str	r0, [r7, #4]
 8003b3c:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 8003b3e:	2300      	movs	r3, #0
 8003b40:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8003b42:	683b      	ldr	r3, [r7, #0]
 8003b44:	019b      	lsls	r3, r3, #6
 8003b46:	f043 0220 	orr.w	r2, r3, #32
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	3301      	adds	r3, #1
 8003b52:	60fb      	str	r3, [r7, #12]
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	4a09      	ldr	r2, [pc, #36]	; (8003b7c <USB_FlushTxFifo+0x48>)
 8003b58:	4293      	cmp	r3, r2
 8003b5a:	d901      	bls.n	8003b60 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8003b5c:	2303      	movs	r3, #3
 8003b5e:	e006      	b.n	8003b6e <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	691b      	ldr	r3, [r3, #16]
 8003b64:	f003 0320 	and.w	r3, r3, #32
 8003b68:	2b20      	cmp	r3, #32
 8003b6a:	d0f0      	beq.n	8003b4e <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8003b6c:	2300      	movs	r3, #0
}
 8003b6e:	4618      	mov	r0, r3
 8003b70:	3714      	adds	r7, #20
 8003b72:	46bd      	mov	sp, r7
 8003b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b78:	4770      	bx	lr
 8003b7a:	bf00      	nop
 8003b7c:	00030d40 	.word	0x00030d40

08003b80 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8003b80:	b480      	push	{r7}
 8003b82:	b085      	sub	sp, #20
 8003b84:	af00      	add	r7, sp, #0
 8003b86:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8003b88:	2300      	movs	r3, #0
 8003b8a:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	2210      	movs	r2, #16
 8003b90:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	3301      	adds	r3, #1
 8003b96:	60fb      	str	r3, [r7, #12]
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	4a09      	ldr	r2, [pc, #36]	; (8003bc0 <USB_FlushRxFifo+0x40>)
 8003b9c:	4293      	cmp	r3, r2
 8003b9e:	d901      	bls.n	8003ba4 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8003ba0:	2303      	movs	r3, #3
 8003ba2:	e006      	b.n	8003bb2 <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	691b      	ldr	r3, [r3, #16]
 8003ba8:	f003 0310 	and.w	r3, r3, #16
 8003bac:	2b10      	cmp	r3, #16
 8003bae:	d0f0      	beq.n	8003b92 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8003bb0:	2300      	movs	r3, #0
}
 8003bb2:	4618      	mov	r0, r3
 8003bb4:	3714      	adds	r7, #20
 8003bb6:	46bd      	mov	sp, r7
 8003bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bbc:	4770      	bx	lr
 8003bbe:	bf00      	nop
 8003bc0:	00030d40 	.word	0x00030d40

08003bc4 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8003bc4:	b480      	push	{r7}
 8003bc6:	b085      	sub	sp, #20
 8003bc8:	af00      	add	r7, sp, #0
 8003bca:	6078      	str	r0, [r7, #4]
 8003bcc:	460b      	mov	r3, r1
 8003bce:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003bda:	681a      	ldr	r2, [r3, #0]
 8003bdc:	78fb      	ldrb	r3, [r7, #3]
 8003bde:	68f9      	ldr	r1, [r7, #12]
 8003be0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003be4:	4313      	orrs	r3, r2
 8003be6:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8003be8:	2300      	movs	r3, #0
}
 8003bea:	4618      	mov	r0, r3
 8003bec:	3714      	adds	r7, #20
 8003bee:	46bd      	mov	sp, r7
 8003bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bf4:	4770      	bx	lr

08003bf6 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8003bf6:	b480      	push	{r7}
 8003bf8:	b085      	sub	sp, #20
 8003bfa:	af00      	add	r7, sp, #0
 8003bfc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	68fa      	ldr	r2, [r7, #12]
 8003c0c:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8003c10:	f023 0303 	bic.w	r3, r3, #3
 8003c14:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003c1c:	685b      	ldr	r3, [r3, #4]
 8003c1e:	68fa      	ldr	r2, [r7, #12]
 8003c20:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003c24:	f043 0302 	orr.w	r3, r3, #2
 8003c28:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8003c2a:	2300      	movs	r3, #0
}
 8003c2c:	4618      	mov	r0, r3
 8003c2e:	3714      	adds	r7, #20
 8003c30:	46bd      	mov	sp, r7
 8003c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c36:	4770      	bx	lr

08003c38 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8003c38:	b480      	push	{r7}
 8003c3a:	b085      	sub	sp, #20
 8003c3c:	af00      	add	r7, sp, #0
 8003c3e:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8003c40:	2300      	movs	r3, #0
 8003c42:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	3301      	adds	r3, #1
 8003c48:	60fb      	str	r3, [r7, #12]
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	4a13      	ldr	r2, [pc, #76]	; (8003c9c <USB_CoreReset+0x64>)
 8003c4e:	4293      	cmp	r3, r2
 8003c50:	d901      	bls.n	8003c56 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8003c52:	2303      	movs	r3, #3
 8003c54:	e01b      	b.n	8003c8e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	691b      	ldr	r3, [r3, #16]
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	daf2      	bge.n	8003c44 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8003c5e:	2300      	movs	r3, #0
 8003c60:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	691b      	ldr	r3, [r3, #16]
 8003c66:	f043 0201 	orr.w	r2, r3, #1
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	3301      	adds	r3, #1
 8003c72:	60fb      	str	r3, [r7, #12]
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	4a09      	ldr	r2, [pc, #36]	; (8003c9c <USB_CoreReset+0x64>)
 8003c78:	4293      	cmp	r3, r2
 8003c7a:	d901      	bls.n	8003c80 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8003c7c:	2303      	movs	r3, #3
 8003c7e:	e006      	b.n	8003c8e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	691b      	ldr	r3, [r3, #16]
 8003c84:	f003 0301 	and.w	r3, r3, #1
 8003c88:	2b01      	cmp	r3, #1
 8003c8a:	d0f0      	beq.n	8003c6e <USB_CoreReset+0x36>

  return HAL_OK;
 8003c8c:	2300      	movs	r3, #0
}
 8003c8e:	4618      	mov	r0, r3
 8003c90:	3714      	adds	r7, #20
 8003c92:	46bd      	mov	sp, r7
 8003c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c98:	4770      	bx	lr
 8003c9a:	bf00      	nop
 8003c9c:	00030d40 	.word	0x00030d40

08003ca0 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8003ca0:	b480      	push	{r7}
 8003ca2:	af00      	add	r7, sp, #0
  * The issue was logged under:https://github.com/ARM-software/CMSIS-FreeRTOS/issues/35
  * until it is correctly fixed, the code below is commented
  */
/*    NVIC_SetPriority (SVCall_IRQn, 0U); */
#endif
}
 8003ca4:	bf00      	nop
 8003ca6:	46bd      	mov	sp, r7
 8003ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cac:	4770      	bx	lr
	...

08003cb0 <osKernelInitialize>:

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8003cb0:	b480      	push	{r7}
 8003cb2:	b085      	sub	sp, #20
 8003cb4:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003cb6:	f3ef 8305 	mrs	r3, IPSR
 8003cba:	60bb      	str	r3, [r7, #8]
  return(result);
 8003cbc:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	d10f      	bne.n	8003ce2 <osKernelInitialize+0x32>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003cc2:	f3ef 8310 	mrs	r3, PRIMASK
 8003cc6:	607b      	str	r3, [r7, #4]
  return(result);
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d105      	bne.n	8003cda <osKernelInitialize+0x2a>
 */
__STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8003cce:	f3ef 8311 	mrs	r3, BASEPRI
 8003cd2:	603b      	str	r3, [r7, #0]
  return(result);
 8003cd4:	683b      	ldr	r3, [r7, #0]
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	d007      	beq.n	8003cea <osKernelInitialize+0x3a>
 8003cda:	4b0e      	ldr	r3, [pc, #56]	; (8003d14 <osKernelInitialize+0x64>)
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	2b02      	cmp	r3, #2
 8003ce0:	d103      	bne.n	8003cea <osKernelInitialize+0x3a>
    stat = osErrorISR;
 8003ce2:	f06f 0305 	mvn.w	r3, #5
 8003ce6:	60fb      	str	r3, [r7, #12]
 8003ce8:	e00c      	b.n	8003d04 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 8003cea:	4b0a      	ldr	r3, [pc, #40]	; (8003d14 <osKernelInitialize+0x64>)
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d105      	bne.n	8003cfe <osKernelInitialize+0x4e>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8003cf2:	4b08      	ldr	r3, [pc, #32]	; (8003d14 <osKernelInitialize+0x64>)
 8003cf4:	2201      	movs	r2, #1
 8003cf6:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8003cf8:	2300      	movs	r3, #0
 8003cfa:	60fb      	str	r3, [r7, #12]
 8003cfc:	e002      	b.n	8003d04 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 8003cfe:	f04f 33ff 	mov.w	r3, #4294967295
 8003d02:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8003d04:	68fb      	ldr	r3, [r7, #12]
}
 8003d06:	4618      	mov	r0, r3
 8003d08:	3714      	adds	r7, #20
 8003d0a:	46bd      	mov	sp, r7
 8003d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d10:	4770      	bx	lr
 8003d12:	bf00      	nop
 8003d14:	20000094 	.word	0x20000094

08003d18 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8003d18:	b580      	push	{r7, lr}
 8003d1a:	b084      	sub	sp, #16
 8003d1c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003d1e:	f3ef 8305 	mrs	r3, IPSR
 8003d22:	60bb      	str	r3, [r7, #8]
  return(result);
 8003d24:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d10f      	bne.n	8003d4a <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003d2a:	f3ef 8310 	mrs	r3, PRIMASK
 8003d2e:	607b      	str	r3, [r7, #4]
  return(result);
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d105      	bne.n	8003d42 <osKernelStart+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8003d36:	f3ef 8311 	mrs	r3, BASEPRI
 8003d3a:	603b      	str	r3, [r7, #0]
  return(result);
 8003d3c:	683b      	ldr	r3, [r7, #0]
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d007      	beq.n	8003d52 <osKernelStart+0x3a>
 8003d42:	4b0f      	ldr	r3, [pc, #60]	; (8003d80 <osKernelStart+0x68>)
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	2b02      	cmp	r3, #2
 8003d48:	d103      	bne.n	8003d52 <osKernelStart+0x3a>
    stat = osErrorISR;
 8003d4a:	f06f 0305 	mvn.w	r3, #5
 8003d4e:	60fb      	str	r3, [r7, #12]
 8003d50:	e010      	b.n	8003d74 <osKernelStart+0x5c>
  }
  else {
    if (KernelState == osKernelReady) {
 8003d52:	4b0b      	ldr	r3, [pc, #44]	; (8003d80 <osKernelStart+0x68>)
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	2b01      	cmp	r3, #1
 8003d58:	d109      	bne.n	8003d6e <osKernelStart+0x56>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8003d5a:	f7ff ffa1 	bl	8003ca0 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8003d5e:	4b08      	ldr	r3, [pc, #32]	; (8003d80 <osKernelStart+0x68>)
 8003d60:	2202      	movs	r2, #2
 8003d62:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8003d64:	f001 f91c 	bl	8004fa0 <vTaskStartScheduler>
      stat = osOK;
 8003d68:	2300      	movs	r3, #0
 8003d6a:	60fb      	str	r3, [r7, #12]
 8003d6c:	e002      	b.n	8003d74 <osKernelStart+0x5c>
    } else {
      stat = osError;
 8003d6e:	f04f 33ff 	mov.w	r3, #4294967295
 8003d72:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8003d74:	68fb      	ldr	r3, [r7, #12]
}
 8003d76:	4618      	mov	r0, r3
 8003d78:	3710      	adds	r7, #16
 8003d7a:	46bd      	mov	sp, r7
 8003d7c:	bd80      	pop	{r7, pc}
 8003d7e:	bf00      	nop
 8003d80:	20000094 	.word	0x20000094

08003d84 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8003d84:	b580      	push	{r7, lr}
 8003d86:	b090      	sub	sp, #64	; 0x40
 8003d88:	af04      	add	r7, sp, #16
 8003d8a:	60f8      	str	r0, [r7, #12]
 8003d8c:	60b9      	str	r1, [r7, #8]
 8003d8e:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8003d90:	2300      	movs	r3, #0
 8003d92:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003d94:	f3ef 8305 	mrs	r3, IPSR
 8003d98:	61fb      	str	r3, [r7, #28]
  return(result);
 8003d9a:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	f040 808f 	bne.w	8003ec0 <osThreadNew+0x13c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003da2:	f3ef 8310 	mrs	r3, PRIMASK
 8003da6:	61bb      	str	r3, [r7, #24]
  return(result);
 8003da8:	69bb      	ldr	r3, [r7, #24]
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	d105      	bne.n	8003dba <osThreadNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8003dae:	f3ef 8311 	mrs	r3, BASEPRI
 8003db2:	617b      	str	r3, [r7, #20]
  return(result);
 8003db4:	697b      	ldr	r3, [r7, #20]
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d003      	beq.n	8003dc2 <osThreadNew+0x3e>
 8003dba:	4b44      	ldr	r3, [pc, #272]	; (8003ecc <osThreadNew+0x148>)
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	2b02      	cmp	r3, #2
 8003dc0:	d07e      	beq.n	8003ec0 <osThreadNew+0x13c>
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	2b00      	cmp	r3, #0
 8003dc6:	d07b      	beq.n	8003ec0 <osThreadNew+0x13c>
    stack = configMINIMAL_STACK_SIZE;
 8003dc8:	2380      	movs	r3, #128	; 0x80
 8003dca:	62bb      	str	r3, [r7, #40]	; 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 8003dcc:	2318      	movs	r3, #24
 8003dce:	627b      	str	r3, [r7, #36]	; 0x24

    name = NULL;
 8003dd0:	2300      	movs	r3, #0
 8003dd2:	62fb      	str	r3, [r7, #44]	; 0x2c
    mem  = -1;
 8003dd4:	f04f 33ff 	mov.w	r3, #4294967295
 8003dd8:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	2b00      	cmp	r3, #0
 8003dde:	d045      	beq.n	8003e6c <osThreadNew+0xe8>
      if (attr->name != NULL) {
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	2b00      	cmp	r3, #0
 8003de6:	d002      	beq.n	8003dee <osThreadNew+0x6a>
        name = attr->name;
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (attr->priority != osPriorityNone) {
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	699b      	ldr	r3, [r3, #24]
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d002      	beq.n	8003dfc <osThreadNew+0x78>
        prio = (UBaseType_t)attr->priority;
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	699b      	ldr	r3, [r3, #24]
 8003dfa:	627b      	str	r3, [r7, #36]	; 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8003dfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d008      	beq.n	8003e14 <osThreadNew+0x90>
 8003e02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e04:	2b38      	cmp	r3, #56	; 0x38
 8003e06:	d805      	bhi.n	8003e14 <osThreadNew+0x90>
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	685b      	ldr	r3, [r3, #4]
 8003e0c:	f003 0301 	and.w	r3, r3, #1
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	d001      	beq.n	8003e18 <osThreadNew+0x94>
        return (NULL);
 8003e14:	2300      	movs	r3, #0
 8003e16:	e054      	b.n	8003ec2 <osThreadNew+0x13e>
      }

      if (attr->stack_size > 0U) {
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	695b      	ldr	r3, [r3, #20]
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	d003      	beq.n	8003e28 <osThreadNew+0xa4>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	695b      	ldr	r3, [r3, #20]
 8003e24:	089b      	lsrs	r3, r3, #2
 8003e26:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	689b      	ldr	r3, [r3, #8]
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	d00e      	beq.n	8003e4e <osThreadNew+0xca>
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	68db      	ldr	r3, [r3, #12]
 8003e34:	2b5b      	cmp	r3, #91	; 0x5b
 8003e36:	d90a      	bls.n	8003e4e <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	d006      	beq.n	8003e4e <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	695b      	ldr	r3, [r3, #20]
 8003e44:	2b00      	cmp	r3, #0
 8003e46:	d002      	beq.n	8003e4e <osThreadNew+0xca>
        mem = 1;
 8003e48:	2301      	movs	r3, #1
 8003e4a:	623b      	str	r3, [r7, #32]
 8003e4c:	e010      	b.n	8003e70 <osThreadNew+0xec>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	689b      	ldr	r3, [r3, #8]
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	d10c      	bne.n	8003e70 <osThreadNew+0xec>
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	68db      	ldr	r3, [r3, #12]
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	d108      	bne.n	8003e70 <osThreadNew+0xec>
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	691b      	ldr	r3, [r3, #16]
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d104      	bne.n	8003e70 <osThreadNew+0xec>
          mem = 0;
 8003e66:	2300      	movs	r3, #0
 8003e68:	623b      	str	r3, [r7, #32]
 8003e6a:	e001      	b.n	8003e70 <osThreadNew+0xec>
        }
      }
    }
    else {
      mem = 0;
 8003e6c:	2300      	movs	r3, #0
 8003e6e:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 8003e70:	6a3b      	ldr	r3, [r7, #32]
 8003e72:	2b01      	cmp	r3, #1
 8003e74:	d110      	bne.n	8003e98 <osThreadNew+0x114>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 8003e7a:	687a      	ldr	r2, [r7, #4]
 8003e7c:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8003e7e:	9202      	str	r2, [sp, #8]
 8003e80:	9301      	str	r3, [sp, #4]
 8003e82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e84:	9300      	str	r3, [sp, #0]
 8003e86:	68bb      	ldr	r3, [r7, #8]
 8003e88:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003e8a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003e8c:	68f8      	ldr	r0, [r7, #12]
 8003e8e:	f000 fe2b 	bl	8004ae8 <xTaskCreateStatic>
 8003e92:	4603      	mov	r3, r0
 8003e94:	613b      	str	r3, [r7, #16]
 8003e96:	e013      	b.n	8003ec0 <osThreadNew+0x13c>
    }
    else {
      if (mem == 0) {
 8003e98:	6a3b      	ldr	r3, [r7, #32]
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	d110      	bne.n	8003ec0 <osThreadNew+0x13c>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8003e9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ea0:	b29a      	uxth	r2, r3
 8003ea2:	f107 0310 	add.w	r3, r7, #16
 8003ea6:	9301      	str	r3, [sp, #4]
 8003ea8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003eaa:	9300      	str	r3, [sp, #0]
 8003eac:	68bb      	ldr	r3, [r7, #8]
 8003eae:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003eb0:	68f8      	ldr	r0, [r7, #12]
 8003eb2:	f000 fe79 	bl	8004ba8 <xTaskCreate>
 8003eb6:	4603      	mov	r3, r0
 8003eb8:	2b01      	cmp	r3, #1
 8003eba:	d001      	beq.n	8003ec0 <osThreadNew+0x13c>
          hTask = NULL;
 8003ebc:	2300      	movs	r3, #0
 8003ebe:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 8003ec0:	693b      	ldr	r3, [r7, #16]
}
 8003ec2:	4618      	mov	r0, r3
 8003ec4:	3730      	adds	r7, #48	; 0x30
 8003ec6:	46bd      	mov	sp, r7
 8003ec8:	bd80      	pop	{r7, pc}
 8003eca:	bf00      	nop
 8003ecc:	20000094 	.word	0x20000094

08003ed0 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 8003ed0:	b580      	push	{r7, lr}
 8003ed2:	b086      	sub	sp, #24
 8003ed4:	af00      	add	r7, sp, #0
 8003ed6:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003ed8:	f3ef 8305 	mrs	r3, IPSR
 8003edc:	613b      	str	r3, [r7, #16]
  return(result);
 8003ede:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003ee0:	2b00      	cmp	r3, #0
 8003ee2:	d10f      	bne.n	8003f04 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003ee4:	f3ef 8310 	mrs	r3, PRIMASK
 8003ee8:	60fb      	str	r3, [r7, #12]
  return(result);
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	2b00      	cmp	r3, #0
 8003eee:	d105      	bne.n	8003efc <osDelay+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8003ef0:	f3ef 8311 	mrs	r3, BASEPRI
 8003ef4:	60bb      	str	r3, [r7, #8]
  return(result);
 8003ef6:	68bb      	ldr	r3, [r7, #8]
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	d007      	beq.n	8003f0c <osDelay+0x3c>
 8003efc:	4b0a      	ldr	r3, [pc, #40]	; (8003f28 <osDelay+0x58>)
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	2b02      	cmp	r3, #2
 8003f02:	d103      	bne.n	8003f0c <osDelay+0x3c>
    stat = osErrorISR;
 8003f04:	f06f 0305 	mvn.w	r3, #5
 8003f08:	617b      	str	r3, [r7, #20]
 8003f0a:	e007      	b.n	8003f1c <osDelay+0x4c>
  }
  else {
    stat = osOK;
 8003f0c:	2300      	movs	r3, #0
 8003f0e:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d002      	beq.n	8003f1c <osDelay+0x4c>
      vTaskDelay(ticks);
 8003f16:	6878      	ldr	r0, [r7, #4]
 8003f18:	f001 f80c 	bl	8004f34 <vTaskDelay>
    }
  }

  return (stat);
 8003f1c:	697b      	ldr	r3, [r7, #20]
}
 8003f1e:	4618      	mov	r0, r3
 8003f20:	3718      	adds	r7, #24
 8003f22:	46bd      	mov	sp, r7
 8003f24:	bd80      	pop	{r7, pc}
 8003f26:	bf00      	nop
 8003f28:	20000094 	.word	0x20000094

08003f2c <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8003f2c:	b480      	push	{r7}
 8003f2e:	b085      	sub	sp, #20
 8003f30:	af00      	add	r7, sp, #0
 8003f32:	60f8      	str	r0, [r7, #12]
 8003f34:	60b9      	str	r1, [r7, #8]
 8003f36:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	4a07      	ldr	r2, [pc, #28]	; (8003f58 <vApplicationGetIdleTaskMemory+0x2c>)
 8003f3c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8003f3e:	68bb      	ldr	r3, [r7, #8]
 8003f40:	4a06      	ldr	r2, [pc, #24]	; (8003f5c <vApplicationGetIdleTaskMemory+0x30>)
 8003f42:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	2280      	movs	r2, #128	; 0x80
 8003f48:	601a      	str	r2, [r3, #0]
}
 8003f4a:	bf00      	nop
 8003f4c:	3714      	adds	r7, #20
 8003f4e:	46bd      	mov	sp, r7
 8003f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f54:	4770      	bx	lr
 8003f56:	bf00      	nop
 8003f58:	20000098 	.word	0x20000098
 8003f5c:	200000f4 	.word	0x200000f4

08003f60 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8003f60:	b480      	push	{r7}
 8003f62:	b085      	sub	sp, #20
 8003f64:	af00      	add	r7, sp, #0
 8003f66:	60f8      	str	r0, [r7, #12]
 8003f68:	60b9      	str	r1, [r7, #8]
 8003f6a:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	4a07      	ldr	r2, [pc, #28]	; (8003f8c <vApplicationGetTimerTaskMemory+0x2c>)
 8003f70:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8003f72:	68bb      	ldr	r3, [r7, #8]
 8003f74:	4a06      	ldr	r2, [pc, #24]	; (8003f90 <vApplicationGetTimerTaskMemory+0x30>)
 8003f76:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003f7e:	601a      	str	r2, [r3, #0]
}
 8003f80:	bf00      	nop
 8003f82:	3714      	adds	r7, #20
 8003f84:	46bd      	mov	sp, r7
 8003f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f8a:	4770      	bx	lr
 8003f8c:	200002f4 	.word	0x200002f4
 8003f90:	20000350 	.word	0x20000350

08003f94 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8003f94:	b480      	push	{r7}
 8003f96:	b083      	sub	sp, #12
 8003f98:	af00      	add	r7, sp, #0
 8003f9a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	f103 0208 	add.w	r2, r3, #8
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	f04f 32ff 	mov.w	r2, #4294967295
 8003fac:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	f103 0208 	add.w	r2, r3, #8
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	f103 0208 	add.w	r2, r3, #8
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	2200      	movs	r2, #0
 8003fc6:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8003fc8:	bf00      	nop
 8003fca:	370c      	adds	r7, #12
 8003fcc:	46bd      	mov	sp, r7
 8003fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fd2:	4770      	bx	lr

08003fd4 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8003fd4:	b480      	push	{r7}
 8003fd6:	b083      	sub	sp, #12
 8003fd8:	af00      	add	r7, sp, #0
 8003fda:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	2200      	movs	r2, #0
 8003fe0:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8003fe2:	bf00      	nop
 8003fe4:	370c      	adds	r7, #12
 8003fe6:	46bd      	mov	sp, r7
 8003fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fec:	4770      	bx	lr

08003fee <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003fee:	b480      	push	{r7}
 8003ff0:	b085      	sub	sp, #20
 8003ff2:	af00      	add	r7, sp, #0
 8003ff4:	6078      	str	r0, [r7, #4]
 8003ff6:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	685b      	ldr	r3, [r3, #4]
 8003ffc:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8003ffe:	683b      	ldr	r3, [r7, #0]
 8004000:	68fa      	ldr	r2, [r7, #12]
 8004002:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	689a      	ldr	r2, [r3, #8]
 8004008:	683b      	ldr	r3, [r7, #0]
 800400a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	689b      	ldr	r3, [r3, #8]
 8004010:	683a      	ldr	r2, [r7, #0]
 8004012:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	683a      	ldr	r2, [r7, #0]
 8004018:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800401a:	683b      	ldr	r3, [r7, #0]
 800401c:	687a      	ldr	r2, [r7, #4]
 800401e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	1c5a      	adds	r2, r3, #1
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	601a      	str	r2, [r3, #0]
}
 800402a:	bf00      	nop
 800402c:	3714      	adds	r7, #20
 800402e:	46bd      	mov	sp, r7
 8004030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004034:	4770      	bx	lr

08004036 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004036:	b480      	push	{r7}
 8004038:	b085      	sub	sp, #20
 800403a:	af00      	add	r7, sp, #0
 800403c:	6078      	str	r0, [r7, #4]
 800403e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8004040:	683b      	ldr	r3, [r7, #0]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8004046:	68bb      	ldr	r3, [r7, #8]
 8004048:	f1b3 3fff 	cmp.w	r3, #4294967295
 800404c:	d103      	bne.n	8004056 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	691b      	ldr	r3, [r3, #16]
 8004052:	60fb      	str	r3, [r7, #12]
 8004054:	e00c      	b.n	8004070 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	3308      	adds	r3, #8
 800405a:	60fb      	str	r3, [r7, #12]
 800405c:	e002      	b.n	8004064 <vListInsert+0x2e>
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	685b      	ldr	r3, [r3, #4]
 8004062:	60fb      	str	r3, [r7, #12]
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	685b      	ldr	r3, [r3, #4]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	68ba      	ldr	r2, [r7, #8]
 800406c:	429a      	cmp	r2, r3
 800406e:	d2f6      	bcs.n	800405e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	685a      	ldr	r2, [r3, #4]
 8004074:	683b      	ldr	r3, [r7, #0]
 8004076:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8004078:	683b      	ldr	r3, [r7, #0]
 800407a:	685b      	ldr	r3, [r3, #4]
 800407c:	683a      	ldr	r2, [r7, #0]
 800407e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8004080:	683b      	ldr	r3, [r7, #0]
 8004082:	68fa      	ldr	r2, [r7, #12]
 8004084:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	683a      	ldr	r2, [r7, #0]
 800408a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800408c:	683b      	ldr	r3, [r7, #0]
 800408e:	687a      	ldr	r2, [r7, #4]
 8004090:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	1c5a      	adds	r2, r3, #1
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	601a      	str	r2, [r3, #0]
}
 800409c:	bf00      	nop
 800409e:	3714      	adds	r7, #20
 80040a0:	46bd      	mov	sp, r7
 80040a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040a6:	4770      	bx	lr

080040a8 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80040a8:	b480      	push	{r7}
 80040aa:	b085      	sub	sp, #20
 80040ac:	af00      	add	r7, sp, #0
 80040ae:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	691b      	ldr	r3, [r3, #16]
 80040b4:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	685b      	ldr	r3, [r3, #4]
 80040ba:	687a      	ldr	r2, [r7, #4]
 80040bc:	6892      	ldr	r2, [r2, #8]
 80040be:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	689b      	ldr	r3, [r3, #8]
 80040c4:	687a      	ldr	r2, [r7, #4]
 80040c6:	6852      	ldr	r2, [r2, #4]
 80040c8:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	685b      	ldr	r3, [r3, #4]
 80040ce:	687a      	ldr	r2, [r7, #4]
 80040d0:	429a      	cmp	r2, r3
 80040d2:	d103      	bne.n	80040dc <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	689a      	ldr	r2, [r3, #8]
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	2200      	movs	r2, #0
 80040e0:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	1e5a      	subs	r2, r3, #1
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	681b      	ldr	r3, [r3, #0]
}
 80040f0:	4618      	mov	r0, r3
 80040f2:	3714      	adds	r7, #20
 80040f4:	46bd      	mov	sp, r7
 80040f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040fa:	4770      	bx	lr

080040fc <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80040fc:	b580      	push	{r7, lr}
 80040fe:	b084      	sub	sp, #16
 8004100:	af00      	add	r7, sp, #0
 8004102:	6078      	str	r0, [r7, #4]
 8004104:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	2b00      	cmp	r3, #0
 800410e:	d10b      	bne.n	8004128 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8004110:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004114:	b672      	cpsid	i
 8004116:	f383 8811 	msr	BASEPRI, r3
 800411a:	f3bf 8f6f 	isb	sy
 800411e:	f3bf 8f4f 	dsb	sy
 8004122:	b662      	cpsie	i
 8004124:	60bb      	str	r3, [r7, #8]
 8004126:	e7fe      	b.n	8004126 <xQueueGenericReset+0x2a>

	taskENTER_CRITICAL();
 8004128:	f002 f8c6 	bl	80062b8 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	681a      	ldr	r2, [r3, #0]
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004134:	68f9      	ldr	r1, [r7, #12]
 8004136:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8004138:	fb01 f303 	mul.w	r3, r1, r3
 800413c:	441a      	add	r2, r3
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	2200      	movs	r2, #0
 8004146:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	681a      	ldr	r2, [r3, #0]
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	681a      	ldr	r2, [r3, #0]
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004158:	3b01      	subs	r3, #1
 800415a:	68f9      	ldr	r1, [r7, #12]
 800415c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800415e:	fb01 f303 	mul.w	r3, r1, r3
 8004162:	441a      	add	r2, r3
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	22ff      	movs	r2, #255	; 0xff
 800416c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	22ff      	movs	r2, #255	; 0xff
 8004174:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8004178:	683b      	ldr	r3, [r7, #0]
 800417a:	2b00      	cmp	r3, #0
 800417c:	d114      	bne.n	80041a8 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	691b      	ldr	r3, [r3, #16]
 8004182:	2b00      	cmp	r3, #0
 8004184:	d01a      	beq.n	80041bc <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	3310      	adds	r3, #16
 800418a:	4618      	mov	r0, r3
 800418c:	f001 f996 	bl	80054bc <xTaskRemoveFromEventList>
 8004190:	4603      	mov	r3, r0
 8004192:	2b00      	cmp	r3, #0
 8004194:	d012      	beq.n	80041bc <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8004196:	4b0d      	ldr	r3, [pc, #52]	; (80041cc <xQueueGenericReset+0xd0>)
 8004198:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800419c:	601a      	str	r2, [r3, #0]
 800419e:	f3bf 8f4f 	dsb	sy
 80041a2:	f3bf 8f6f 	isb	sy
 80041a6:	e009      	b.n	80041bc <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	3310      	adds	r3, #16
 80041ac:	4618      	mov	r0, r3
 80041ae:	f7ff fef1 	bl	8003f94 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	3324      	adds	r3, #36	; 0x24
 80041b6:	4618      	mov	r0, r3
 80041b8:	f7ff feec 	bl	8003f94 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80041bc:	f002 f8ae 	bl	800631c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80041c0:	2301      	movs	r3, #1
}
 80041c2:	4618      	mov	r0, r3
 80041c4:	3710      	adds	r7, #16
 80041c6:	46bd      	mov	sp, r7
 80041c8:	bd80      	pop	{r7, pc}
 80041ca:	bf00      	nop
 80041cc:	e000ed04 	.word	0xe000ed04

080041d0 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80041d0:	b580      	push	{r7, lr}
 80041d2:	b08e      	sub	sp, #56	; 0x38
 80041d4:	af02      	add	r7, sp, #8
 80041d6:	60f8      	str	r0, [r7, #12]
 80041d8:	60b9      	str	r1, [r7, #8]
 80041da:	607a      	str	r2, [r7, #4]
 80041dc:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	d10b      	bne.n	80041fc <xQueueGenericCreateStatic+0x2c>
 80041e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041e8:	b672      	cpsid	i
 80041ea:	f383 8811 	msr	BASEPRI, r3
 80041ee:	f3bf 8f6f 	isb	sy
 80041f2:	f3bf 8f4f 	dsb	sy
 80041f6:	b662      	cpsie	i
 80041f8:	62bb      	str	r3, [r7, #40]	; 0x28
 80041fa:	e7fe      	b.n	80041fa <xQueueGenericCreateStatic+0x2a>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80041fc:	683b      	ldr	r3, [r7, #0]
 80041fe:	2b00      	cmp	r3, #0
 8004200:	d10b      	bne.n	800421a <xQueueGenericCreateStatic+0x4a>
 8004202:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004206:	b672      	cpsid	i
 8004208:	f383 8811 	msr	BASEPRI, r3
 800420c:	f3bf 8f6f 	isb	sy
 8004210:	f3bf 8f4f 	dsb	sy
 8004214:	b662      	cpsie	i
 8004216:	627b      	str	r3, [r7, #36]	; 0x24
 8004218:	e7fe      	b.n	8004218 <xQueueGenericCreateStatic+0x48>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	2b00      	cmp	r3, #0
 800421e:	d002      	beq.n	8004226 <xQueueGenericCreateStatic+0x56>
 8004220:	68bb      	ldr	r3, [r7, #8]
 8004222:	2b00      	cmp	r3, #0
 8004224:	d001      	beq.n	800422a <xQueueGenericCreateStatic+0x5a>
 8004226:	2301      	movs	r3, #1
 8004228:	e000      	b.n	800422c <xQueueGenericCreateStatic+0x5c>
 800422a:	2300      	movs	r3, #0
 800422c:	2b00      	cmp	r3, #0
 800422e:	d10b      	bne.n	8004248 <xQueueGenericCreateStatic+0x78>
 8004230:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004234:	b672      	cpsid	i
 8004236:	f383 8811 	msr	BASEPRI, r3
 800423a:	f3bf 8f6f 	isb	sy
 800423e:	f3bf 8f4f 	dsb	sy
 8004242:	b662      	cpsie	i
 8004244:	623b      	str	r3, [r7, #32]
 8004246:	e7fe      	b.n	8004246 <xQueueGenericCreateStatic+0x76>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	2b00      	cmp	r3, #0
 800424c:	d102      	bne.n	8004254 <xQueueGenericCreateStatic+0x84>
 800424e:	68bb      	ldr	r3, [r7, #8]
 8004250:	2b00      	cmp	r3, #0
 8004252:	d101      	bne.n	8004258 <xQueueGenericCreateStatic+0x88>
 8004254:	2301      	movs	r3, #1
 8004256:	e000      	b.n	800425a <xQueueGenericCreateStatic+0x8a>
 8004258:	2300      	movs	r3, #0
 800425a:	2b00      	cmp	r3, #0
 800425c:	d10b      	bne.n	8004276 <xQueueGenericCreateStatic+0xa6>
 800425e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004262:	b672      	cpsid	i
 8004264:	f383 8811 	msr	BASEPRI, r3
 8004268:	f3bf 8f6f 	isb	sy
 800426c:	f3bf 8f4f 	dsb	sy
 8004270:	b662      	cpsie	i
 8004272:	61fb      	str	r3, [r7, #28]
 8004274:	e7fe      	b.n	8004274 <xQueueGenericCreateStatic+0xa4>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8004276:	2350      	movs	r3, #80	; 0x50
 8004278:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800427a:	697b      	ldr	r3, [r7, #20]
 800427c:	2b50      	cmp	r3, #80	; 0x50
 800427e:	d00b      	beq.n	8004298 <xQueueGenericCreateStatic+0xc8>
 8004280:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004284:	b672      	cpsid	i
 8004286:	f383 8811 	msr	BASEPRI, r3
 800428a:	f3bf 8f6f 	isb	sy
 800428e:	f3bf 8f4f 	dsb	sy
 8004292:	b662      	cpsie	i
 8004294:	61bb      	str	r3, [r7, #24]
 8004296:	e7fe      	b.n	8004296 <xQueueGenericCreateStatic+0xc6>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8004298:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800429a:	683b      	ldr	r3, [r7, #0]
 800429c:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800429e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80042a0:	2b00      	cmp	r3, #0
 80042a2:	d00d      	beq.n	80042c0 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80042a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80042a6:	2201      	movs	r2, #1
 80042a8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80042ac:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80042b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80042b2:	9300      	str	r3, [sp, #0]
 80042b4:	4613      	mov	r3, r2
 80042b6:	687a      	ldr	r2, [r7, #4]
 80042b8:	68b9      	ldr	r1, [r7, #8]
 80042ba:	68f8      	ldr	r0, [r7, #12]
 80042bc:	f000 f805 	bl	80042ca <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80042c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 80042c2:	4618      	mov	r0, r3
 80042c4:	3730      	adds	r7, #48	; 0x30
 80042c6:	46bd      	mov	sp, r7
 80042c8:	bd80      	pop	{r7, pc}

080042ca <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80042ca:	b580      	push	{r7, lr}
 80042cc:	b084      	sub	sp, #16
 80042ce:	af00      	add	r7, sp, #0
 80042d0:	60f8      	str	r0, [r7, #12]
 80042d2:	60b9      	str	r1, [r7, #8]
 80042d4:	607a      	str	r2, [r7, #4]
 80042d6:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80042d8:	68bb      	ldr	r3, [r7, #8]
 80042da:	2b00      	cmp	r3, #0
 80042dc:	d103      	bne.n	80042e6 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80042de:	69bb      	ldr	r3, [r7, #24]
 80042e0:	69ba      	ldr	r2, [r7, #24]
 80042e2:	601a      	str	r2, [r3, #0]
 80042e4:	e002      	b.n	80042ec <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80042e6:	69bb      	ldr	r3, [r7, #24]
 80042e8:	687a      	ldr	r2, [r7, #4]
 80042ea:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80042ec:	69bb      	ldr	r3, [r7, #24]
 80042ee:	68fa      	ldr	r2, [r7, #12]
 80042f0:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80042f2:	69bb      	ldr	r3, [r7, #24]
 80042f4:	68ba      	ldr	r2, [r7, #8]
 80042f6:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80042f8:	2101      	movs	r1, #1
 80042fa:	69b8      	ldr	r0, [r7, #24]
 80042fc:	f7ff fefe 	bl	80040fc <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8004300:	69bb      	ldr	r3, [r7, #24]
 8004302:	78fa      	ldrb	r2, [r7, #3]
 8004304:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8004308:	bf00      	nop
 800430a:	3710      	adds	r7, #16
 800430c:	46bd      	mov	sp, r7
 800430e:	bd80      	pop	{r7, pc}

08004310 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8004310:	b580      	push	{r7, lr}
 8004312:	b08e      	sub	sp, #56	; 0x38
 8004314:	af00      	add	r7, sp, #0
 8004316:	60f8      	str	r0, [r7, #12]
 8004318:	60b9      	str	r1, [r7, #8]
 800431a:	607a      	str	r2, [r7, #4]
 800431c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800431e:	2300      	movs	r3, #0
 8004320:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8004326:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004328:	2b00      	cmp	r3, #0
 800432a:	d10b      	bne.n	8004344 <xQueueGenericSend+0x34>
 800432c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004330:	b672      	cpsid	i
 8004332:	f383 8811 	msr	BASEPRI, r3
 8004336:	f3bf 8f6f 	isb	sy
 800433a:	f3bf 8f4f 	dsb	sy
 800433e:	b662      	cpsie	i
 8004340:	62bb      	str	r3, [r7, #40]	; 0x28
 8004342:	e7fe      	b.n	8004342 <xQueueGenericSend+0x32>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004344:	68bb      	ldr	r3, [r7, #8]
 8004346:	2b00      	cmp	r3, #0
 8004348:	d103      	bne.n	8004352 <xQueueGenericSend+0x42>
 800434a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800434c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800434e:	2b00      	cmp	r3, #0
 8004350:	d101      	bne.n	8004356 <xQueueGenericSend+0x46>
 8004352:	2301      	movs	r3, #1
 8004354:	e000      	b.n	8004358 <xQueueGenericSend+0x48>
 8004356:	2300      	movs	r3, #0
 8004358:	2b00      	cmp	r3, #0
 800435a:	d10b      	bne.n	8004374 <xQueueGenericSend+0x64>
 800435c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004360:	b672      	cpsid	i
 8004362:	f383 8811 	msr	BASEPRI, r3
 8004366:	f3bf 8f6f 	isb	sy
 800436a:	f3bf 8f4f 	dsb	sy
 800436e:	b662      	cpsie	i
 8004370:	627b      	str	r3, [r7, #36]	; 0x24
 8004372:	e7fe      	b.n	8004372 <xQueueGenericSend+0x62>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004374:	683b      	ldr	r3, [r7, #0]
 8004376:	2b02      	cmp	r3, #2
 8004378:	d103      	bne.n	8004382 <xQueueGenericSend+0x72>
 800437a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800437c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800437e:	2b01      	cmp	r3, #1
 8004380:	d101      	bne.n	8004386 <xQueueGenericSend+0x76>
 8004382:	2301      	movs	r3, #1
 8004384:	e000      	b.n	8004388 <xQueueGenericSend+0x78>
 8004386:	2300      	movs	r3, #0
 8004388:	2b00      	cmp	r3, #0
 800438a:	d10b      	bne.n	80043a4 <xQueueGenericSend+0x94>
 800438c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004390:	b672      	cpsid	i
 8004392:	f383 8811 	msr	BASEPRI, r3
 8004396:	f3bf 8f6f 	isb	sy
 800439a:	f3bf 8f4f 	dsb	sy
 800439e:	b662      	cpsie	i
 80043a0:	623b      	str	r3, [r7, #32]
 80043a2:	e7fe      	b.n	80043a2 <xQueueGenericSend+0x92>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80043a4:	f001 fa48 	bl	8005838 <xTaskGetSchedulerState>
 80043a8:	4603      	mov	r3, r0
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d102      	bne.n	80043b4 <xQueueGenericSend+0xa4>
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	d101      	bne.n	80043b8 <xQueueGenericSend+0xa8>
 80043b4:	2301      	movs	r3, #1
 80043b6:	e000      	b.n	80043ba <xQueueGenericSend+0xaa>
 80043b8:	2300      	movs	r3, #0
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d10b      	bne.n	80043d6 <xQueueGenericSend+0xc6>
 80043be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043c2:	b672      	cpsid	i
 80043c4:	f383 8811 	msr	BASEPRI, r3
 80043c8:	f3bf 8f6f 	isb	sy
 80043cc:	f3bf 8f4f 	dsb	sy
 80043d0:	b662      	cpsie	i
 80043d2:	61fb      	str	r3, [r7, #28]
 80043d4:	e7fe      	b.n	80043d4 <xQueueGenericSend+0xc4>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80043d6:	f001 ff6f 	bl	80062b8 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80043da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80043dc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80043de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80043e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80043e2:	429a      	cmp	r2, r3
 80043e4:	d302      	bcc.n	80043ec <xQueueGenericSend+0xdc>
 80043e6:	683b      	ldr	r3, [r7, #0]
 80043e8:	2b02      	cmp	r3, #2
 80043ea:	d129      	bne.n	8004440 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80043ec:	683a      	ldr	r2, [r7, #0]
 80043ee:	68b9      	ldr	r1, [r7, #8]
 80043f0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80043f2:	f000 fa0d 	bl	8004810 <prvCopyDataToQueue>
 80043f6:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80043f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80043fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043fc:	2b00      	cmp	r3, #0
 80043fe:	d010      	beq.n	8004422 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004400:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004402:	3324      	adds	r3, #36	; 0x24
 8004404:	4618      	mov	r0, r3
 8004406:	f001 f859 	bl	80054bc <xTaskRemoveFromEventList>
 800440a:	4603      	mov	r3, r0
 800440c:	2b00      	cmp	r3, #0
 800440e:	d013      	beq.n	8004438 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8004410:	4b3f      	ldr	r3, [pc, #252]	; (8004510 <xQueueGenericSend+0x200>)
 8004412:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004416:	601a      	str	r2, [r3, #0]
 8004418:	f3bf 8f4f 	dsb	sy
 800441c:	f3bf 8f6f 	isb	sy
 8004420:	e00a      	b.n	8004438 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8004422:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004424:	2b00      	cmp	r3, #0
 8004426:	d007      	beq.n	8004438 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8004428:	4b39      	ldr	r3, [pc, #228]	; (8004510 <xQueueGenericSend+0x200>)
 800442a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800442e:	601a      	str	r2, [r3, #0]
 8004430:	f3bf 8f4f 	dsb	sy
 8004434:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8004438:	f001 ff70 	bl	800631c <vPortExitCritical>
				return pdPASS;
 800443c:	2301      	movs	r3, #1
 800443e:	e063      	b.n	8004508 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	2b00      	cmp	r3, #0
 8004444:	d103      	bne.n	800444e <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004446:	f001 ff69 	bl	800631c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800444a:	2300      	movs	r3, #0
 800444c:	e05c      	b.n	8004508 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800444e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004450:	2b00      	cmp	r3, #0
 8004452:	d106      	bne.n	8004462 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004454:	f107 0314 	add.w	r3, r7, #20
 8004458:	4618      	mov	r0, r3
 800445a:	f001 f893 	bl	8005584 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800445e:	2301      	movs	r3, #1
 8004460:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004462:	f001 ff5b 	bl	800631c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004466:	f000 fe03 	bl	8005070 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800446a:	f001 ff25 	bl	80062b8 <vPortEnterCritical>
 800446e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004470:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004474:	b25b      	sxtb	r3, r3
 8004476:	f1b3 3fff 	cmp.w	r3, #4294967295
 800447a:	d103      	bne.n	8004484 <xQueueGenericSend+0x174>
 800447c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800447e:	2200      	movs	r2, #0
 8004480:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004484:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004486:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800448a:	b25b      	sxtb	r3, r3
 800448c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004490:	d103      	bne.n	800449a <xQueueGenericSend+0x18a>
 8004492:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004494:	2200      	movs	r2, #0
 8004496:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800449a:	f001 ff3f 	bl	800631c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800449e:	1d3a      	adds	r2, r7, #4
 80044a0:	f107 0314 	add.w	r3, r7, #20
 80044a4:	4611      	mov	r1, r2
 80044a6:	4618      	mov	r0, r3
 80044a8:	f001 f882 	bl	80055b0 <xTaskCheckForTimeOut>
 80044ac:	4603      	mov	r3, r0
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	d124      	bne.n	80044fc <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80044b2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80044b4:	f000 faa4 	bl	8004a00 <prvIsQueueFull>
 80044b8:	4603      	mov	r3, r0
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d018      	beq.n	80044f0 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80044be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044c0:	3310      	adds	r3, #16
 80044c2:	687a      	ldr	r2, [r7, #4]
 80044c4:	4611      	mov	r1, r2
 80044c6:	4618      	mov	r0, r3
 80044c8:	f000 ffa6 	bl	8005418 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80044cc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80044ce:	f000 fa2f 	bl	8004930 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80044d2:	f000 fddb 	bl	800508c <xTaskResumeAll>
 80044d6:	4603      	mov	r3, r0
 80044d8:	2b00      	cmp	r3, #0
 80044da:	f47f af7c 	bne.w	80043d6 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 80044de:	4b0c      	ldr	r3, [pc, #48]	; (8004510 <xQueueGenericSend+0x200>)
 80044e0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80044e4:	601a      	str	r2, [r3, #0]
 80044e6:	f3bf 8f4f 	dsb	sy
 80044ea:	f3bf 8f6f 	isb	sy
 80044ee:	e772      	b.n	80043d6 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80044f0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80044f2:	f000 fa1d 	bl	8004930 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80044f6:	f000 fdc9 	bl	800508c <xTaskResumeAll>
 80044fa:	e76c      	b.n	80043d6 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80044fc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80044fe:	f000 fa17 	bl	8004930 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004502:	f000 fdc3 	bl	800508c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8004506:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8004508:	4618      	mov	r0, r3
 800450a:	3738      	adds	r7, #56	; 0x38
 800450c:	46bd      	mov	sp, r7
 800450e:	bd80      	pop	{r7, pc}
 8004510:	e000ed04 	.word	0xe000ed04

08004514 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8004514:	b580      	push	{r7, lr}
 8004516:	b08e      	sub	sp, #56	; 0x38
 8004518:	af00      	add	r7, sp, #0
 800451a:	60f8      	str	r0, [r7, #12]
 800451c:	60b9      	str	r1, [r7, #8]
 800451e:	607a      	str	r2, [r7, #4]
 8004520:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8004526:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004528:	2b00      	cmp	r3, #0
 800452a:	d10b      	bne.n	8004544 <xQueueGenericSendFromISR+0x30>
 800452c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004530:	b672      	cpsid	i
 8004532:	f383 8811 	msr	BASEPRI, r3
 8004536:	f3bf 8f6f 	isb	sy
 800453a:	f3bf 8f4f 	dsb	sy
 800453e:	b662      	cpsie	i
 8004540:	627b      	str	r3, [r7, #36]	; 0x24
 8004542:	e7fe      	b.n	8004542 <xQueueGenericSendFromISR+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004544:	68bb      	ldr	r3, [r7, #8]
 8004546:	2b00      	cmp	r3, #0
 8004548:	d103      	bne.n	8004552 <xQueueGenericSendFromISR+0x3e>
 800454a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800454c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800454e:	2b00      	cmp	r3, #0
 8004550:	d101      	bne.n	8004556 <xQueueGenericSendFromISR+0x42>
 8004552:	2301      	movs	r3, #1
 8004554:	e000      	b.n	8004558 <xQueueGenericSendFromISR+0x44>
 8004556:	2300      	movs	r3, #0
 8004558:	2b00      	cmp	r3, #0
 800455a:	d10b      	bne.n	8004574 <xQueueGenericSendFromISR+0x60>
 800455c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004560:	b672      	cpsid	i
 8004562:	f383 8811 	msr	BASEPRI, r3
 8004566:	f3bf 8f6f 	isb	sy
 800456a:	f3bf 8f4f 	dsb	sy
 800456e:	b662      	cpsie	i
 8004570:	623b      	str	r3, [r7, #32]
 8004572:	e7fe      	b.n	8004572 <xQueueGenericSendFromISR+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004574:	683b      	ldr	r3, [r7, #0]
 8004576:	2b02      	cmp	r3, #2
 8004578:	d103      	bne.n	8004582 <xQueueGenericSendFromISR+0x6e>
 800457a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800457c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800457e:	2b01      	cmp	r3, #1
 8004580:	d101      	bne.n	8004586 <xQueueGenericSendFromISR+0x72>
 8004582:	2301      	movs	r3, #1
 8004584:	e000      	b.n	8004588 <xQueueGenericSendFromISR+0x74>
 8004586:	2300      	movs	r3, #0
 8004588:	2b00      	cmp	r3, #0
 800458a:	d10b      	bne.n	80045a4 <xQueueGenericSendFromISR+0x90>
 800458c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004590:	b672      	cpsid	i
 8004592:	f383 8811 	msr	BASEPRI, r3
 8004596:	f3bf 8f6f 	isb	sy
 800459a:	f3bf 8f4f 	dsb	sy
 800459e:	b662      	cpsie	i
 80045a0:	61fb      	str	r3, [r7, #28]
 80045a2:	e7fe      	b.n	80045a2 <xQueueGenericSendFromISR+0x8e>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80045a4:	f001 ff68 	bl	8006478 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80045a8:	f3ef 8211 	mrs	r2, BASEPRI
 80045ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045b0:	b672      	cpsid	i
 80045b2:	f383 8811 	msr	BASEPRI, r3
 80045b6:	f3bf 8f6f 	isb	sy
 80045ba:	f3bf 8f4f 	dsb	sy
 80045be:	b662      	cpsie	i
 80045c0:	61ba      	str	r2, [r7, #24]
 80045c2:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80045c4:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80045c6:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80045c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045ca:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80045cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045ce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80045d0:	429a      	cmp	r2, r3
 80045d2:	d302      	bcc.n	80045da <xQueueGenericSendFromISR+0xc6>
 80045d4:	683b      	ldr	r3, [r7, #0]
 80045d6:	2b02      	cmp	r3, #2
 80045d8:	d12c      	bne.n	8004634 <xQueueGenericSendFromISR+0x120>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80045da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045dc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80045e0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80045e4:	683a      	ldr	r2, [r7, #0]
 80045e6:	68b9      	ldr	r1, [r7, #8]
 80045e8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80045ea:	f000 f911 	bl	8004810 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80045ee:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 80045f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80045f6:	d112      	bne.n	800461e <xQueueGenericSendFromISR+0x10a>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80045f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045fc:	2b00      	cmp	r3, #0
 80045fe:	d016      	beq.n	800462e <xQueueGenericSendFromISR+0x11a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004600:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004602:	3324      	adds	r3, #36	; 0x24
 8004604:	4618      	mov	r0, r3
 8004606:	f000 ff59 	bl	80054bc <xTaskRemoveFromEventList>
 800460a:	4603      	mov	r3, r0
 800460c:	2b00      	cmp	r3, #0
 800460e:	d00e      	beq.n	800462e <xQueueGenericSendFromISR+0x11a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	2b00      	cmp	r3, #0
 8004614:	d00b      	beq.n	800462e <xQueueGenericSendFromISR+0x11a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	2201      	movs	r2, #1
 800461a:	601a      	str	r2, [r3, #0]
 800461c:	e007      	b.n	800462e <xQueueGenericSendFromISR+0x11a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800461e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8004622:	3301      	adds	r3, #1
 8004624:	b2db      	uxtb	r3, r3
 8004626:	b25a      	sxtb	r2, r3
 8004628:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800462a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800462e:	2301      	movs	r3, #1
 8004630:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8004632:	e001      	b.n	8004638 <xQueueGenericSendFromISR+0x124>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8004634:	2300      	movs	r3, #0
 8004636:	637b      	str	r3, [r7, #52]	; 0x34
 8004638:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800463a:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800463c:	693b      	ldr	r3, [r7, #16]
 800463e:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8004642:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8004644:	4618      	mov	r0, r3
 8004646:	3738      	adds	r7, #56	; 0x38
 8004648:	46bd      	mov	sp, r7
 800464a:	bd80      	pop	{r7, pc}

0800464c <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800464c:	b580      	push	{r7, lr}
 800464e:	b08c      	sub	sp, #48	; 0x30
 8004650:	af00      	add	r7, sp, #0
 8004652:	60f8      	str	r0, [r7, #12]
 8004654:	60b9      	str	r1, [r7, #8]
 8004656:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8004658:	2300      	movs	r3, #0
 800465a:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8004660:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004662:	2b00      	cmp	r3, #0
 8004664:	d10b      	bne.n	800467e <xQueueReceive+0x32>
	__asm volatile
 8004666:	f04f 0350 	mov.w	r3, #80	; 0x50
 800466a:	b672      	cpsid	i
 800466c:	f383 8811 	msr	BASEPRI, r3
 8004670:	f3bf 8f6f 	isb	sy
 8004674:	f3bf 8f4f 	dsb	sy
 8004678:	b662      	cpsie	i
 800467a:	623b      	str	r3, [r7, #32]
 800467c:	e7fe      	b.n	800467c <xQueueReceive+0x30>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800467e:	68bb      	ldr	r3, [r7, #8]
 8004680:	2b00      	cmp	r3, #0
 8004682:	d103      	bne.n	800468c <xQueueReceive+0x40>
 8004684:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004686:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004688:	2b00      	cmp	r3, #0
 800468a:	d101      	bne.n	8004690 <xQueueReceive+0x44>
 800468c:	2301      	movs	r3, #1
 800468e:	e000      	b.n	8004692 <xQueueReceive+0x46>
 8004690:	2300      	movs	r3, #0
 8004692:	2b00      	cmp	r3, #0
 8004694:	d10b      	bne.n	80046ae <xQueueReceive+0x62>
 8004696:	f04f 0350 	mov.w	r3, #80	; 0x50
 800469a:	b672      	cpsid	i
 800469c:	f383 8811 	msr	BASEPRI, r3
 80046a0:	f3bf 8f6f 	isb	sy
 80046a4:	f3bf 8f4f 	dsb	sy
 80046a8:	b662      	cpsie	i
 80046aa:	61fb      	str	r3, [r7, #28]
 80046ac:	e7fe      	b.n	80046ac <xQueueReceive+0x60>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80046ae:	f001 f8c3 	bl	8005838 <xTaskGetSchedulerState>
 80046b2:	4603      	mov	r3, r0
 80046b4:	2b00      	cmp	r3, #0
 80046b6:	d102      	bne.n	80046be <xQueueReceive+0x72>
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	2b00      	cmp	r3, #0
 80046bc:	d101      	bne.n	80046c2 <xQueueReceive+0x76>
 80046be:	2301      	movs	r3, #1
 80046c0:	e000      	b.n	80046c4 <xQueueReceive+0x78>
 80046c2:	2300      	movs	r3, #0
 80046c4:	2b00      	cmp	r3, #0
 80046c6:	d10b      	bne.n	80046e0 <xQueueReceive+0x94>
 80046c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046cc:	b672      	cpsid	i
 80046ce:	f383 8811 	msr	BASEPRI, r3
 80046d2:	f3bf 8f6f 	isb	sy
 80046d6:	f3bf 8f4f 	dsb	sy
 80046da:	b662      	cpsie	i
 80046dc:	61bb      	str	r3, [r7, #24]
 80046de:	e7fe      	b.n	80046de <xQueueReceive+0x92>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80046e0:	f001 fdea 	bl	80062b8 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80046e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046e8:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80046ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	d01f      	beq.n	8004730 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80046f0:	68b9      	ldr	r1, [r7, #8]
 80046f2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80046f4:	f000 f8f6 	bl	80048e4 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80046f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046fa:	1e5a      	subs	r2, r3, #1
 80046fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046fe:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004700:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004702:	691b      	ldr	r3, [r3, #16]
 8004704:	2b00      	cmp	r3, #0
 8004706:	d00f      	beq.n	8004728 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004708:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800470a:	3310      	adds	r3, #16
 800470c:	4618      	mov	r0, r3
 800470e:	f000 fed5 	bl	80054bc <xTaskRemoveFromEventList>
 8004712:	4603      	mov	r3, r0
 8004714:	2b00      	cmp	r3, #0
 8004716:	d007      	beq.n	8004728 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8004718:	4b3c      	ldr	r3, [pc, #240]	; (800480c <xQueueReceive+0x1c0>)
 800471a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800471e:	601a      	str	r2, [r3, #0]
 8004720:	f3bf 8f4f 	dsb	sy
 8004724:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8004728:	f001 fdf8 	bl	800631c <vPortExitCritical>
				return pdPASS;
 800472c:	2301      	movs	r3, #1
 800472e:	e069      	b.n	8004804 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	2b00      	cmp	r3, #0
 8004734:	d103      	bne.n	800473e <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004736:	f001 fdf1 	bl	800631c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800473a:	2300      	movs	r3, #0
 800473c:	e062      	b.n	8004804 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800473e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004740:	2b00      	cmp	r3, #0
 8004742:	d106      	bne.n	8004752 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004744:	f107 0310 	add.w	r3, r7, #16
 8004748:	4618      	mov	r0, r3
 800474a:	f000 ff1b 	bl	8005584 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800474e:	2301      	movs	r3, #1
 8004750:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004752:	f001 fde3 	bl	800631c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004756:	f000 fc8b 	bl	8005070 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800475a:	f001 fdad 	bl	80062b8 <vPortEnterCritical>
 800475e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004760:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004764:	b25b      	sxtb	r3, r3
 8004766:	f1b3 3fff 	cmp.w	r3, #4294967295
 800476a:	d103      	bne.n	8004774 <xQueueReceive+0x128>
 800476c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800476e:	2200      	movs	r2, #0
 8004770:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004774:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004776:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800477a:	b25b      	sxtb	r3, r3
 800477c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004780:	d103      	bne.n	800478a <xQueueReceive+0x13e>
 8004782:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004784:	2200      	movs	r2, #0
 8004786:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800478a:	f001 fdc7 	bl	800631c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800478e:	1d3a      	adds	r2, r7, #4
 8004790:	f107 0310 	add.w	r3, r7, #16
 8004794:	4611      	mov	r1, r2
 8004796:	4618      	mov	r0, r3
 8004798:	f000 ff0a 	bl	80055b0 <xTaskCheckForTimeOut>
 800479c:	4603      	mov	r3, r0
 800479e:	2b00      	cmp	r3, #0
 80047a0:	d123      	bne.n	80047ea <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80047a2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80047a4:	f000 f916 	bl	80049d4 <prvIsQueueEmpty>
 80047a8:	4603      	mov	r3, r0
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	d017      	beq.n	80047de <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80047ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047b0:	3324      	adds	r3, #36	; 0x24
 80047b2:	687a      	ldr	r2, [r7, #4]
 80047b4:	4611      	mov	r1, r2
 80047b6:	4618      	mov	r0, r3
 80047b8:	f000 fe2e 	bl	8005418 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80047bc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80047be:	f000 f8b7 	bl	8004930 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80047c2:	f000 fc63 	bl	800508c <xTaskResumeAll>
 80047c6:	4603      	mov	r3, r0
 80047c8:	2b00      	cmp	r3, #0
 80047ca:	d189      	bne.n	80046e0 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 80047cc:	4b0f      	ldr	r3, [pc, #60]	; (800480c <xQueueReceive+0x1c0>)
 80047ce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80047d2:	601a      	str	r2, [r3, #0]
 80047d4:	f3bf 8f4f 	dsb	sy
 80047d8:	f3bf 8f6f 	isb	sy
 80047dc:	e780      	b.n	80046e0 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80047de:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80047e0:	f000 f8a6 	bl	8004930 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80047e4:	f000 fc52 	bl	800508c <xTaskResumeAll>
 80047e8:	e77a      	b.n	80046e0 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80047ea:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80047ec:	f000 f8a0 	bl	8004930 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80047f0:	f000 fc4c 	bl	800508c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80047f4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80047f6:	f000 f8ed 	bl	80049d4 <prvIsQueueEmpty>
 80047fa:	4603      	mov	r3, r0
 80047fc:	2b00      	cmp	r3, #0
 80047fe:	f43f af6f 	beq.w	80046e0 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8004802:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8004804:	4618      	mov	r0, r3
 8004806:	3730      	adds	r7, #48	; 0x30
 8004808:	46bd      	mov	sp, r7
 800480a:	bd80      	pop	{r7, pc}
 800480c:	e000ed04 	.word	0xe000ed04

08004810 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8004810:	b580      	push	{r7, lr}
 8004812:	b086      	sub	sp, #24
 8004814:	af00      	add	r7, sp, #0
 8004816:	60f8      	str	r0, [r7, #12]
 8004818:	60b9      	str	r1, [r7, #8]
 800481a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800481c:	2300      	movs	r3, #0
 800481e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004824:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800482a:	2b00      	cmp	r3, #0
 800482c:	d10d      	bne.n	800484a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	2b00      	cmp	r3, #0
 8004834:	d14d      	bne.n	80048d2 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8004836:	68fb      	ldr	r3, [r7, #12]
 8004838:	689b      	ldr	r3, [r3, #8]
 800483a:	4618      	mov	r0, r3
 800483c:	f001 f81a 	bl	8005874 <xTaskPriorityDisinherit>
 8004840:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	2200      	movs	r2, #0
 8004846:	609a      	str	r2, [r3, #8]
 8004848:	e043      	b.n	80048d2 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	2b00      	cmp	r3, #0
 800484e:	d119      	bne.n	8004884 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	6858      	ldr	r0, [r3, #4]
 8004854:	68fb      	ldr	r3, [r7, #12]
 8004856:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004858:	461a      	mov	r2, r3
 800485a:	68b9      	ldr	r1, [r7, #8]
 800485c:	f002 f858 	bl	8006910 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	685a      	ldr	r2, [r3, #4]
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004868:	441a      	add	r2, r3
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	685a      	ldr	r2, [r3, #4]
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	689b      	ldr	r3, [r3, #8]
 8004876:	429a      	cmp	r2, r3
 8004878:	d32b      	bcc.n	80048d2 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	681a      	ldr	r2, [r3, #0]
 800487e:	68fb      	ldr	r3, [r7, #12]
 8004880:	605a      	str	r2, [r3, #4]
 8004882:	e026      	b.n	80048d2 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	68d8      	ldr	r0, [r3, #12]
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800488c:	461a      	mov	r2, r3
 800488e:	68b9      	ldr	r1, [r7, #8]
 8004890:	f002 f83e 	bl	8006910 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	68da      	ldr	r2, [r3, #12]
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800489c:	425b      	negs	r3, r3
 800489e:	441a      	add	r2, r3
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	68da      	ldr	r2, [r3, #12]
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	429a      	cmp	r2, r3
 80048ae:	d207      	bcs.n	80048c0 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	689a      	ldr	r2, [r3, #8]
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048b8:	425b      	negs	r3, r3
 80048ba:	441a      	add	r2, r3
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	2b02      	cmp	r3, #2
 80048c4:	d105      	bne.n	80048d2 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80048c6:	693b      	ldr	r3, [r7, #16]
 80048c8:	2b00      	cmp	r3, #0
 80048ca:	d002      	beq.n	80048d2 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80048cc:	693b      	ldr	r3, [r7, #16]
 80048ce:	3b01      	subs	r3, #1
 80048d0:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80048d2:	693b      	ldr	r3, [r7, #16]
 80048d4:	1c5a      	adds	r2, r3, #1
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80048da:	697b      	ldr	r3, [r7, #20]
}
 80048dc:	4618      	mov	r0, r3
 80048de:	3718      	adds	r7, #24
 80048e0:	46bd      	mov	sp, r7
 80048e2:	bd80      	pop	{r7, pc}

080048e4 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80048e4:	b580      	push	{r7, lr}
 80048e6:	b082      	sub	sp, #8
 80048e8:	af00      	add	r7, sp, #0
 80048ea:	6078      	str	r0, [r7, #4]
 80048ec:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	d018      	beq.n	8004928 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	68da      	ldr	r2, [r3, #12]
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048fe:	441a      	add	r2, r3
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	68da      	ldr	r2, [r3, #12]
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	689b      	ldr	r3, [r3, #8]
 800490c:	429a      	cmp	r2, r3
 800490e:	d303      	bcc.n	8004918 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	681a      	ldr	r2, [r3, #0]
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	68d9      	ldr	r1, [r3, #12]
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004920:	461a      	mov	r2, r3
 8004922:	6838      	ldr	r0, [r7, #0]
 8004924:	f001 fff4 	bl	8006910 <memcpy>
	}
}
 8004928:	bf00      	nop
 800492a:	3708      	adds	r7, #8
 800492c:	46bd      	mov	sp, r7
 800492e:	bd80      	pop	{r7, pc}

08004930 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8004930:	b580      	push	{r7, lr}
 8004932:	b084      	sub	sp, #16
 8004934:	af00      	add	r7, sp, #0
 8004936:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8004938:	f001 fcbe 	bl	80062b8 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004942:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004944:	e011      	b.n	800496a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800494a:	2b00      	cmp	r3, #0
 800494c:	d012      	beq.n	8004974 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	3324      	adds	r3, #36	; 0x24
 8004952:	4618      	mov	r0, r3
 8004954:	f000 fdb2 	bl	80054bc <xTaskRemoveFromEventList>
 8004958:	4603      	mov	r3, r0
 800495a:	2b00      	cmp	r3, #0
 800495c:	d001      	beq.n	8004962 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800495e:	f000 fe8b 	bl	8005678 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8004962:	7bfb      	ldrb	r3, [r7, #15]
 8004964:	3b01      	subs	r3, #1
 8004966:	b2db      	uxtb	r3, r3
 8004968:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800496a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800496e:	2b00      	cmp	r3, #0
 8004970:	dce9      	bgt.n	8004946 <prvUnlockQueue+0x16>
 8004972:	e000      	b.n	8004976 <prvUnlockQueue+0x46>
					break;
 8004974:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	22ff      	movs	r2, #255	; 0xff
 800497a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800497e:	f001 fccd 	bl	800631c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8004982:	f001 fc99 	bl	80062b8 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800498c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800498e:	e011      	b.n	80049b4 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	691b      	ldr	r3, [r3, #16]
 8004994:	2b00      	cmp	r3, #0
 8004996:	d012      	beq.n	80049be <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	3310      	adds	r3, #16
 800499c:	4618      	mov	r0, r3
 800499e:	f000 fd8d 	bl	80054bc <xTaskRemoveFromEventList>
 80049a2:	4603      	mov	r3, r0
 80049a4:	2b00      	cmp	r3, #0
 80049a6:	d001      	beq.n	80049ac <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80049a8:	f000 fe66 	bl	8005678 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80049ac:	7bbb      	ldrb	r3, [r7, #14]
 80049ae:	3b01      	subs	r3, #1
 80049b0:	b2db      	uxtb	r3, r3
 80049b2:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80049b4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80049b8:	2b00      	cmp	r3, #0
 80049ba:	dce9      	bgt.n	8004990 <prvUnlockQueue+0x60>
 80049bc:	e000      	b.n	80049c0 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80049be:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	22ff      	movs	r2, #255	; 0xff
 80049c4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80049c8:	f001 fca8 	bl	800631c <vPortExitCritical>
}
 80049cc:	bf00      	nop
 80049ce:	3710      	adds	r7, #16
 80049d0:	46bd      	mov	sp, r7
 80049d2:	bd80      	pop	{r7, pc}

080049d4 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80049d4:	b580      	push	{r7, lr}
 80049d6:	b084      	sub	sp, #16
 80049d8:	af00      	add	r7, sp, #0
 80049da:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80049dc:	f001 fc6c 	bl	80062b8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049e4:	2b00      	cmp	r3, #0
 80049e6:	d102      	bne.n	80049ee <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80049e8:	2301      	movs	r3, #1
 80049ea:	60fb      	str	r3, [r7, #12]
 80049ec:	e001      	b.n	80049f2 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80049ee:	2300      	movs	r3, #0
 80049f0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80049f2:	f001 fc93 	bl	800631c <vPortExitCritical>

	return xReturn;
 80049f6:	68fb      	ldr	r3, [r7, #12]
}
 80049f8:	4618      	mov	r0, r3
 80049fa:	3710      	adds	r7, #16
 80049fc:	46bd      	mov	sp, r7
 80049fe:	bd80      	pop	{r7, pc}

08004a00 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8004a00:	b580      	push	{r7, lr}
 8004a02:	b084      	sub	sp, #16
 8004a04:	af00      	add	r7, sp, #0
 8004a06:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004a08:	f001 fc56 	bl	80062b8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a14:	429a      	cmp	r2, r3
 8004a16:	d102      	bne.n	8004a1e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8004a18:	2301      	movs	r3, #1
 8004a1a:	60fb      	str	r3, [r7, #12]
 8004a1c:	e001      	b.n	8004a22 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8004a1e:	2300      	movs	r3, #0
 8004a20:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004a22:	f001 fc7b 	bl	800631c <vPortExitCritical>

	return xReturn;
 8004a26:	68fb      	ldr	r3, [r7, #12]
}
 8004a28:	4618      	mov	r0, r3
 8004a2a:	3710      	adds	r7, #16
 8004a2c:	46bd      	mov	sp, r7
 8004a2e:	bd80      	pop	{r7, pc}

08004a30 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8004a30:	b480      	push	{r7}
 8004a32:	b085      	sub	sp, #20
 8004a34:	af00      	add	r7, sp, #0
 8004a36:	6078      	str	r0, [r7, #4]
 8004a38:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004a3a:	2300      	movs	r3, #0
 8004a3c:	60fb      	str	r3, [r7, #12]
 8004a3e:	e014      	b.n	8004a6a <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8004a40:	4a0e      	ldr	r2, [pc, #56]	; (8004a7c <vQueueAddToRegistry+0x4c>)
 8004a42:	68fb      	ldr	r3, [r7, #12]
 8004a44:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8004a48:	2b00      	cmp	r3, #0
 8004a4a:	d10b      	bne.n	8004a64 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8004a4c:	490b      	ldr	r1, [pc, #44]	; (8004a7c <vQueueAddToRegistry+0x4c>)
 8004a4e:	68fb      	ldr	r3, [r7, #12]
 8004a50:	683a      	ldr	r2, [r7, #0]
 8004a52:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8004a56:	4a09      	ldr	r2, [pc, #36]	; (8004a7c <vQueueAddToRegistry+0x4c>)
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	00db      	lsls	r3, r3, #3
 8004a5c:	4413      	add	r3, r2
 8004a5e:	687a      	ldr	r2, [r7, #4]
 8004a60:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8004a62:	e005      	b.n	8004a70 <vQueueAddToRegistry+0x40>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	3301      	adds	r3, #1
 8004a68:	60fb      	str	r3, [r7, #12]
 8004a6a:	68fb      	ldr	r3, [r7, #12]
 8004a6c:	2b07      	cmp	r3, #7
 8004a6e:	d9e7      	bls.n	8004a40 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8004a70:	bf00      	nop
 8004a72:	3714      	adds	r7, #20
 8004a74:	46bd      	mov	sp, r7
 8004a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a7a:	4770      	bx	lr
 8004a7c:	20004ec8 	.word	0x20004ec8

08004a80 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8004a80:	b580      	push	{r7, lr}
 8004a82:	b086      	sub	sp, #24
 8004a84:	af00      	add	r7, sp, #0
 8004a86:	60f8      	str	r0, [r7, #12]
 8004a88:	60b9      	str	r1, [r7, #8]
 8004a8a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8004a90:	f001 fc12 	bl	80062b8 <vPortEnterCritical>
 8004a94:	697b      	ldr	r3, [r7, #20]
 8004a96:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004a9a:	b25b      	sxtb	r3, r3
 8004a9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004aa0:	d103      	bne.n	8004aaa <vQueueWaitForMessageRestricted+0x2a>
 8004aa2:	697b      	ldr	r3, [r7, #20]
 8004aa4:	2200      	movs	r2, #0
 8004aa6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004aaa:	697b      	ldr	r3, [r7, #20]
 8004aac:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004ab0:	b25b      	sxtb	r3, r3
 8004ab2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ab6:	d103      	bne.n	8004ac0 <vQueueWaitForMessageRestricted+0x40>
 8004ab8:	697b      	ldr	r3, [r7, #20]
 8004aba:	2200      	movs	r2, #0
 8004abc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004ac0:	f001 fc2c 	bl	800631c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8004ac4:	697b      	ldr	r3, [r7, #20]
 8004ac6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ac8:	2b00      	cmp	r3, #0
 8004aca:	d106      	bne.n	8004ada <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8004acc:	697b      	ldr	r3, [r7, #20]
 8004ace:	3324      	adds	r3, #36	; 0x24
 8004ad0:	687a      	ldr	r2, [r7, #4]
 8004ad2:	68b9      	ldr	r1, [r7, #8]
 8004ad4:	4618      	mov	r0, r3
 8004ad6:	f000 fcc5 	bl	8005464 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8004ada:	6978      	ldr	r0, [r7, #20]
 8004adc:	f7ff ff28 	bl	8004930 <prvUnlockQueue>
	}
 8004ae0:	bf00      	nop
 8004ae2:	3718      	adds	r7, #24
 8004ae4:	46bd      	mov	sp, r7
 8004ae6:	bd80      	pop	{r7, pc}

08004ae8 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8004ae8:	b580      	push	{r7, lr}
 8004aea:	b08e      	sub	sp, #56	; 0x38
 8004aec:	af04      	add	r7, sp, #16
 8004aee:	60f8      	str	r0, [r7, #12]
 8004af0:	60b9      	str	r1, [r7, #8]
 8004af2:	607a      	str	r2, [r7, #4]
 8004af4:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8004af6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004af8:	2b00      	cmp	r3, #0
 8004afa:	d10b      	bne.n	8004b14 <xTaskCreateStatic+0x2c>
 8004afc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b00:	b672      	cpsid	i
 8004b02:	f383 8811 	msr	BASEPRI, r3
 8004b06:	f3bf 8f6f 	isb	sy
 8004b0a:	f3bf 8f4f 	dsb	sy
 8004b0e:	b662      	cpsie	i
 8004b10:	623b      	str	r3, [r7, #32]
 8004b12:	e7fe      	b.n	8004b12 <xTaskCreateStatic+0x2a>
		configASSERT( pxTaskBuffer != NULL );
 8004b14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	d10b      	bne.n	8004b32 <xTaskCreateStatic+0x4a>
 8004b1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b1e:	b672      	cpsid	i
 8004b20:	f383 8811 	msr	BASEPRI, r3
 8004b24:	f3bf 8f6f 	isb	sy
 8004b28:	f3bf 8f4f 	dsb	sy
 8004b2c:	b662      	cpsie	i
 8004b2e:	61fb      	str	r3, [r7, #28]
 8004b30:	e7fe      	b.n	8004b30 <xTaskCreateStatic+0x48>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8004b32:	235c      	movs	r3, #92	; 0x5c
 8004b34:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8004b36:	693b      	ldr	r3, [r7, #16]
 8004b38:	2b5c      	cmp	r3, #92	; 0x5c
 8004b3a:	d00b      	beq.n	8004b54 <xTaskCreateStatic+0x6c>
 8004b3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b40:	b672      	cpsid	i
 8004b42:	f383 8811 	msr	BASEPRI, r3
 8004b46:	f3bf 8f6f 	isb	sy
 8004b4a:	f3bf 8f4f 	dsb	sy
 8004b4e:	b662      	cpsie	i
 8004b50:	61bb      	str	r3, [r7, #24]
 8004b52:	e7fe      	b.n	8004b52 <xTaskCreateStatic+0x6a>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8004b54:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8004b56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b58:	2b00      	cmp	r3, #0
 8004b5a:	d01e      	beq.n	8004b9a <xTaskCreateStatic+0xb2>
 8004b5c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004b5e:	2b00      	cmp	r3, #0
 8004b60:	d01b      	beq.n	8004b9a <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004b62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b64:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8004b66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b68:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004b6a:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8004b6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b6e:	2202      	movs	r2, #2
 8004b70:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8004b74:	2300      	movs	r3, #0
 8004b76:	9303      	str	r3, [sp, #12]
 8004b78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b7a:	9302      	str	r3, [sp, #8]
 8004b7c:	f107 0314 	add.w	r3, r7, #20
 8004b80:	9301      	str	r3, [sp, #4]
 8004b82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b84:	9300      	str	r3, [sp, #0]
 8004b86:	683b      	ldr	r3, [r7, #0]
 8004b88:	687a      	ldr	r2, [r7, #4]
 8004b8a:	68b9      	ldr	r1, [r7, #8]
 8004b8c:	68f8      	ldr	r0, [r7, #12]
 8004b8e:	f000 f850 	bl	8004c32 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004b92:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004b94:	f000 f8de 	bl	8004d54 <prvAddNewTaskToReadyList>
 8004b98:	e001      	b.n	8004b9e <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8004b9a:	2300      	movs	r3, #0
 8004b9c:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8004b9e:	697b      	ldr	r3, [r7, #20]
	}
 8004ba0:	4618      	mov	r0, r3
 8004ba2:	3728      	adds	r7, #40	; 0x28
 8004ba4:	46bd      	mov	sp, r7
 8004ba6:	bd80      	pop	{r7, pc}

08004ba8 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8004ba8:	b580      	push	{r7, lr}
 8004baa:	b08c      	sub	sp, #48	; 0x30
 8004bac:	af04      	add	r7, sp, #16
 8004bae:	60f8      	str	r0, [r7, #12]
 8004bb0:	60b9      	str	r1, [r7, #8]
 8004bb2:	603b      	str	r3, [r7, #0]
 8004bb4:	4613      	mov	r3, r2
 8004bb6:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8004bb8:	88fb      	ldrh	r3, [r7, #6]
 8004bba:	009b      	lsls	r3, r3, #2
 8004bbc:	4618      	mov	r0, r3
 8004bbe:	f001 fc9d 	bl	80064fc <pvPortMalloc>
 8004bc2:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8004bc4:	697b      	ldr	r3, [r7, #20]
 8004bc6:	2b00      	cmp	r3, #0
 8004bc8:	d00e      	beq.n	8004be8 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8004bca:	205c      	movs	r0, #92	; 0x5c
 8004bcc:	f001 fc96 	bl	80064fc <pvPortMalloc>
 8004bd0:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8004bd2:	69fb      	ldr	r3, [r7, #28]
 8004bd4:	2b00      	cmp	r3, #0
 8004bd6:	d003      	beq.n	8004be0 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8004bd8:	69fb      	ldr	r3, [r7, #28]
 8004bda:	697a      	ldr	r2, [r7, #20]
 8004bdc:	631a      	str	r2, [r3, #48]	; 0x30
 8004bde:	e005      	b.n	8004bec <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8004be0:	6978      	ldr	r0, [r7, #20]
 8004be2:	f001 fd53 	bl	800668c <vPortFree>
 8004be6:	e001      	b.n	8004bec <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8004be8:	2300      	movs	r3, #0
 8004bea:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8004bec:	69fb      	ldr	r3, [r7, #28]
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	d017      	beq.n	8004c22 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8004bf2:	69fb      	ldr	r3, [r7, #28]
 8004bf4:	2200      	movs	r2, #0
 8004bf6:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8004bfa:	88fa      	ldrh	r2, [r7, #6]
 8004bfc:	2300      	movs	r3, #0
 8004bfe:	9303      	str	r3, [sp, #12]
 8004c00:	69fb      	ldr	r3, [r7, #28]
 8004c02:	9302      	str	r3, [sp, #8]
 8004c04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c06:	9301      	str	r3, [sp, #4]
 8004c08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c0a:	9300      	str	r3, [sp, #0]
 8004c0c:	683b      	ldr	r3, [r7, #0]
 8004c0e:	68b9      	ldr	r1, [r7, #8]
 8004c10:	68f8      	ldr	r0, [r7, #12]
 8004c12:	f000 f80e 	bl	8004c32 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004c16:	69f8      	ldr	r0, [r7, #28]
 8004c18:	f000 f89c 	bl	8004d54 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8004c1c:	2301      	movs	r3, #1
 8004c1e:	61bb      	str	r3, [r7, #24]
 8004c20:	e002      	b.n	8004c28 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8004c22:	f04f 33ff 	mov.w	r3, #4294967295
 8004c26:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8004c28:	69bb      	ldr	r3, [r7, #24]
	}
 8004c2a:	4618      	mov	r0, r3
 8004c2c:	3720      	adds	r7, #32
 8004c2e:	46bd      	mov	sp, r7
 8004c30:	bd80      	pop	{r7, pc}

08004c32 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8004c32:	b580      	push	{r7, lr}
 8004c34:	b088      	sub	sp, #32
 8004c36:	af00      	add	r7, sp, #0
 8004c38:	60f8      	str	r0, [r7, #12]
 8004c3a:	60b9      	str	r1, [r7, #8]
 8004c3c:	607a      	str	r2, [r7, #4]
 8004c3e:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8004c40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c42:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	009b      	lsls	r3, r3, #2
 8004c48:	461a      	mov	r2, r3
 8004c4a:	21a5      	movs	r1, #165	; 0xa5
 8004c4c:	f001 fe6b 	bl	8006926 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8004c50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c52:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004c54:	6879      	ldr	r1, [r7, #4]
 8004c56:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 8004c5a:	440b      	add	r3, r1
 8004c5c:	009b      	lsls	r3, r3, #2
 8004c5e:	4413      	add	r3, r2
 8004c60:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8004c62:	69bb      	ldr	r3, [r7, #24]
 8004c64:	f023 0307 	bic.w	r3, r3, #7
 8004c68:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8004c6a:	69bb      	ldr	r3, [r7, #24]
 8004c6c:	f003 0307 	and.w	r3, r3, #7
 8004c70:	2b00      	cmp	r3, #0
 8004c72:	d00b      	beq.n	8004c8c <prvInitialiseNewTask+0x5a>
 8004c74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c78:	b672      	cpsid	i
 8004c7a:	f383 8811 	msr	BASEPRI, r3
 8004c7e:	f3bf 8f6f 	isb	sy
 8004c82:	f3bf 8f4f 	dsb	sy
 8004c86:	b662      	cpsie	i
 8004c88:	617b      	str	r3, [r7, #20]
 8004c8a:	e7fe      	b.n	8004c8a <prvInitialiseNewTask+0x58>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8004c8c:	68bb      	ldr	r3, [r7, #8]
 8004c8e:	2b00      	cmp	r3, #0
 8004c90:	d01f      	beq.n	8004cd2 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004c92:	2300      	movs	r3, #0
 8004c94:	61fb      	str	r3, [r7, #28]
 8004c96:	e012      	b.n	8004cbe <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8004c98:	68ba      	ldr	r2, [r7, #8]
 8004c9a:	69fb      	ldr	r3, [r7, #28]
 8004c9c:	4413      	add	r3, r2
 8004c9e:	7819      	ldrb	r1, [r3, #0]
 8004ca0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004ca2:	69fb      	ldr	r3, [r7, #28]
 8004ca4:	4413      	add	r3, r2
 8004ca6:	3334      	adds	r3, #52	; 0x34
 8004ca8:	460a      	mov	r2, r1
 8004caa:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8004cac:	68ba      	ldr	r2, [r7, #8]
 8004cae:	69fb      	ldr	r3, [r7, #28]
 8004cb0:	4413      	add	r3, r2
 8004cb2:	781b      	ldrb	r3, [r3, #0]
 8004cb4:	2b00      	cmp	r3, #0
 8004cb6:	d006      	beq.n	8004cc6 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004cb8:	69fb      	ldr	r3, [r7, #28]
 8004cba:	3301      	adds	r3, #1
 8004cbc:	61fb      	str	r3, [r7, #28]
 8004cbe:	69fb      	ldr	r3, [r7, #28]
 8004cc0:	2b0f      	cmp	r3, #15
 8004cc2:	d9e9      	bls.n	8004c98 <prvInitialiseNewTask+0x66>
 8004cc4:	e000      	b.n	8004cc8 <prvInitialiseNewTask+0x96>
			{
				break;
 8004cc6:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8004cc8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004cca:	2200      	movs	r2, #0
 8004ccc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004cd0:	e003      	b.n	8004cda <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8004cd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004cd4:	2200      	movs	r2, #0
 8004cd6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8004cda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004cdc:	2b37      	cmp	r3, #55	; 0x37
 8004cde:	d901      	bls.n	8004ce4 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8004ce0:	2337      	movs	r3, #55	; 0x37
 8004ce2:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8004ce4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ce6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004ce8:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8004cea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004cec:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004cee:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8004cf0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004cf2:	2200      	movs	r2, #0
 8004cf4:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8004cf6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004cf8:	3304      	adds	r3, #4
 8004cfa:	4618      	mov	r0, r3
 8004cfc:	f7ff f96a 	bl	8003fd4 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8004d00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d02:	3318      	adds	r3, #24
 8004d04:	4618      	mov	r0, r3
 8004d06:	f7ff f965 	bl	8003fd4 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8004d0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d0c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004d0e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004d10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d12:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8004d16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d18:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8004d1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d1c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004d1e:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8004d20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d22:	2200      	movs	r2, #0
 8004d24:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8004d26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d28:	2200      	movs	r2, #0
 8004d2a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8004d2e:	683a      	ldr	r2, [r7, #0]
 8004d30:	68f9      	ldr	r1, [r7, #12]
 8004d32:	69b8      	ldr	r0, [r7, #24]
 8004d34:	f001 f9b6 	bl	80060a4 <pxPortInitialiseStack>
 8004d38:	4602      	mov	r2, r0
 8004d3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d3c:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8004d3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d40:	2b00      	cmp	r3, #0
 8004d42:	d002      	beq.n	8004d4a <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8004d44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d46:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004d48:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004d4a:	bf00      	nop
 8004d4c:	3720      	adds	r7, #32
 8004d4e:	46bd      	mov	sp, r7
 8004d50:	bd80      	pop	{r7, pc}
	...

08004d54 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8004d54:	b580      	push	{r7, lr}
 8004d56:	b082      	sub	sp, #8
 8004d58:	af00      	add	r7, sp, #0
 8004d5a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8004d5c:	f001 faac 	bl	80062b8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8004d60:	4b2d      	ldr	r3, [pc, #180]	; (8004e18 <prvAddNewTaskToReadyList+0xc4>)
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	3301      	adds	r3, #1
 8004d66:	4a2c      	ldr	r2, [pc, #176]	; (8004e18 <prvAddNewTaskToReadyList+0xc4>)
 8004d68:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8004d6a:	4b2c      	ldr	r3, [pc, #176]	; (8004e1c <prvAddNewTaskToReadyList+0xc8>)
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	2b00      	cmp	r3, #0
 8004d70:	d109      	bne.n	8004d86 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8004d72:	4a2a      	ldr	r2, [pc, #168]	; (8004e1c <prvAddNewTaskToReadyList+0xc8>)
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8004d78:	4b27      	ldr	r3, [pc, #156]	; (8004e18 <prvAddNewTaskToReadyList+0xc4>)
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	2b01      	cmp	r3, #1
 8004d7e:	d110      	bne.n	8004da2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8004d80:	f000 fc9e 	bl	80056c0 <prvInitialiseTaskLists>
 8004d84:	e00d      	b.n	8004da2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8004d86:	4b26      	ldr	r3, [pc, #152]	; (8004e20 <prvAddNewTaskToReadyList+0xcc>)
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	d109      	bne.n	8004da2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8004d8e:	4b23      	ldr	r3, [pc, #140]	; (8004e1c <prvAddNewTaskToReadyList+0xc8>)
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d98:	429a      	cmp	r2, r3
 8004d9a:	d802      	bhi.n	8004da2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8004d9c:	4a1f      	ldr	r2, [pc, #124]	; (8004e1c <prvAddNewTaskToReadyList+0xc8>)
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8004da2:	4b20      	ldr	r3, [pc, #128]	; (8004e24 <prvAddNewTaskToReadyList+0xd0>)
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	3301      	adds	r3, #1
 8004da8:	4a1e      	ldr	r2, [pc, #120]	; (8004e24 <prvAddNewTaskToReadyList+0xd0>)
 8004daa:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8004dac:	4b1d      	ldr	r3, [pc, #116]	; (8004e24 <prvAddNewTaskToReadyList+0xd0>)
 8004dae:	681a      	ldr	r2, [r3, #0]
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004db8:	4b1b      	ldr	r3, [pc, #108]	; (8004e28 <prvAddNewTaskToReadyList+0xd4>)
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	429a      	cmp	r2, r3
 8004dbe:	d903      	bls.n	8004dc8 <prvAddNewTaskToReadyList+0x74>
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004dc4:	4a18      	ldr	r2, [pc, #96]	; (8004e28 <prvAddNewTaskToReadyList+0xd4>)
 8004dc6:	6013      	str	r3, [r2, #0]
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004dcc:	4613      	mov	r3, r2
 8004dce:	009b      	lsls	r3, r3, #2
 8004dd0:	4413      	add	r3, r2
 8004dd2:	009b      	lsls	r3, r3, #2
 8004dd4:	4a15      	ldr	r2, [pc, #84]	; (8004e2c <prvAddNewTaskToReadyList+0xd8>)
 8004dd6:	441a      	add	r2, r3
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	3304      	adds	r3, #4
 8004ddc:	4619      	mov	r1, r3
 8004dde:	4610      	mov	r0, r2
 8004de0:	f7ff f905 	bl	8003fee <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8004de4:	f001 fa9a 	bl	800631c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8004de8:	4b0d      	ldr	r3, [pc, #52]	; (8004e20 <prvAddNewTaskToReadyList+0xcc>)
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	2b00      	cmp	r3, #0
 8004dee:	d00e      	beq.n	8004e0e <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8004df0:	4b0a      	ldr	r3, [pc, #40]	; (8004e1c <prvAddNewTaskToReadyList+0xc8>)
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004dfa:	429a      	cmp	r2, r3
 8004dfc:	d207      	bcs.n	8004e0e <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8004dfe:	4b0c      	ldr	r3, [pc, #48]	; (8004e30 <prvAddNewTaskToReadyList+0xdc>)
 8004e00:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004e04:	601a      	str	r2, [r3, #0]
 8004e06:	f3bf 8f4f 	dsb	sy
 8004e0a:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004e0e:	bf00      	nop
 8004e10:	3708      	adds	r7, #8
 8004e12:	46bd      	mov	sp, r7
 8004e14:	bd80      	pop	{r7, pc}
 8004e16:	bf00      	nop
 8004e18:	20000c24 	.word	0x20000c24
 8004e1c:	20000750 	.word	0x20000750
 8004e20:	20000c30 	.word	0x20000c30
 8004e24:	20000c40 	.word	0x20000c40
 8004e28:	20000c2c 	.word	0x20000c2c
 8004e2c:	20000754 	.word	0x20000754
 8004e30:	e000ed04 	.word	0xe000ed04

08004e34 <vTaskDelayUntil>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
 8004e34:	b580      	push	{r7, lr}
 8004e36:	b08a      	sub	sp, #40	; 0x28
 8004e38:	af00      	add	r7, sp, #0
 8004e3a:	6078      	str	r0, [r7, #4]
 8004e3c:	6039      	str	r1, [r7, #0]
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 8004e3e:	2300      	movs	r3, #0
 8004e40:	627b      	str	r3, [r7, #36]	; 0x24

		configASSERT( pxPreviousWakeTime );
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	2b00      	cmp	r3, #0
 8004e46:	d10b      	bne.n	8004e60 <vTaskDelayUntil+0x2c>
 8004e48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e4c:	b672      	cpsid	i
 8004e4e:	f383 8811 	msr	BASEPRI, r3
 8004e52:	f3bf 8f6f 	isb	sy
 8004e56:	f3bf 8f4f 	dsb	sy
 8004e5a:	b662      	cpsie	i
 8004e5c:	617b      	str	r3, [r7, #20]
 8004e5e:	e7fe      	b.n	8004e5e <vTaskDelayUntil+0x2a>
		configASSERT( ( xTimeIncrement > 0U ) );
 8004e60:	683b      	ldr	r3, [r7, #0]
 8004e62:	2b00      	cmp	r3, #0
 8004e64:	d10b      	bne.n	8004e7e <vTaskDelayUntil+0x4a>
 8004e66:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e6a:	b672      	cpsid	i
 8004e6c:	f383 8811 	msr	BASEPRI, r3
 8004e70:	f3bf 8f6f 	isb	sy
 8004e74:	f3bf 8f4f 	dsb	sy
 8004e78:	b662      	cpsie	i
 8004e7a:	613b      	str	r3, [r7, #16]
 8004e7c:	e7fe      	b.n	8004e7c <vTaskDelayUntil+0x48>
		configASSERT( uxSchedulerSuspended == 0 );
 8004e7e:	4b2a      	ldr	r3, [pc, #168]	; (8004f28 <vTaskDelayUntil+0xf4>)
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	2b00      	cmp	r3, #0
 8004e84:	d00b      	beq.n	8004e9e <vTaskDelayUntil+0x6a>
 8004e86:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e8a:	b672      	cpsid	i
 8004e8c:	f383 8811 	msr	BASEPRI, r3
 8004e90:	f3bf 8f6f 	isb	sy
 8004e94:	f3bf 8f4f 	dsb	sy
 8004e98:	b662      	cpsie	i
 8004e9a:	60fb      	str	r3, [r7, #12]
 8004e9c:	e7fe      	b.n	8004e9c <vTaskDelayUntil+0x68>

		vTaskSuspendAll();
 8004e9e:	f000 f8e7 	bl	8005070 <vTaskSuspendAll>
		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
 8004ea2:	4b22      	ldr	r3, [pc, #136]	; (8004f2c <vTaskDelayUntil+0xf8>)
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	623b      	str	r3, [r7, #32]

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	683a      	ldr	r2, [r7, #0]
 8004eae:	4413      	add	r3, r2
 8004eb0:	61fb      	str	r3, [r7, #28]

			if( xConstTickCount < *pxPreviousWakeTime )
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	6a3a      	ldr	r2, [r7, #32]
 8004eb8:	429a      	cmp	r2, r3
 8004eba:	d20b      	bcs.n	8004ed4 <vTaskDelayUntil+0xa0>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	69fa      	ldr	r2, [r7, #28]
 8004ec2:	429a      	cmp	r2, r3
 8004ec4:	d211      	bcs.n	8004eea <vTaskDelayUntil+0xb6>
 8004ec6:	69fa      	ldr	r2, [r7, #28]
 8004ec8:	6a3b      	ldr	r3, [r7, #32]
 8004eca:	429a      	cmp	r2, r3
 8004ecc:	d90d      	bls.n	8004eea <vTaskDelayUntil+0xb6>
				{
					xShouldDelay = pdTRUE;
 8004ece:	2301      	movs	r3, #1
 8004ed0:	627b      	str	r3, [r7, #36]	; 0x24
 8004ed2:	e00a      	b.n	8004eea <vTaskDelayUntil+0xb6>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	69fa      	ldr	r2, [r7, #28]
 8004eda:	429a      	cmp	r2, r3
 8004edc:	d303      	bcc.n	8004ee6 <vTaskDelayUntil+0xb2>
 8004ede:	69fa      	ldr	r2, [r7, #28]
 8004ee0:	6a3b      	ldr	r3, [r7, #32]
 8004ee2:	429a      	cmp	r2, r3
 8004ee4:	d901      	bls.n	8004eea <vTaskDelayUntil+0xb6>
				{
					xShouldDelay = pdTRUE;
 8004ee6:	2301      	movs	r3, #1
 8004ee8:	627b      	str	r3, [r7, #36]	; 0x24
					mtCOVERAGE_TEST_MARKER();
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	69fa      	ldr	r2, [r7, #28]
 8004eee:	601a      	str	r2, [r3, #0]

			if( xShouldDelay != pdFALSE )
 8004ef0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ef2:	2b00      	cmp	r3, #0
 8004ef4:	d006      	beq.n	8004f04 <vTaskDelayUntil+0xd0>
			{
				traceTASK_DELAY_UNTIL( xTimeToWake );

				/* prvAddCurrentTaskToDelayedList() needs the block time, not
				the time to wake, so subtract the current tick count. */
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 8004ef6:	69fa      	ldr	r2, [r7, #28]
 8004ef8:	6a3b      	ldr	r3, [r7, #32]
 8004efa:	1ad3      	subs	r3, r2, r3
 8004efc:	2100      	movs	r1, #0
 8004efe:	4618      	mov	r0, r3
 8004f00:	f000 fd28 	bl	8005954 <prvAddCurrentTaskToDelayedList>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		xAlreadyYielded = xTaskResumeAll();
 8004f04:	f000 f8c2 	bl	800508c <xTaskResumeAll>
 8004f08:	61b8      	str	r0, [r7, #24]

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8004f0a:	69bb      	ldr	r3, [r7, #24]
 8004f0c:	2b00      	cmp	r3, #0
 8004f0e:	d107      	bne.n	8004f20 <vTaskDelayUntil+0xec>
		{
			portYIELD_WITHIN_API();
 8004f10:	4b07      	ldr	r3, [pc, #28]	; (8004f30 <vTaskDelayUntil+0xfc>)
 8004f12:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004f16:	601a      	str	r2, [r3, #0]
 8004f18:	f3bf 8f4f 	dsb	sy
 8004f1c:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8004f20:	bf00      	nop
 8004f22:	3728      	adds	r7, #40	; 0x28
 8004f24:	46bd      	mov	sp, r7
 8004f26:	bd80      	pop	{r7, pc}
 8004f28:	20000c4c 	.word	0x20000c4c
 8004f2c:	20000c28 	.word	0x20000c28
 8004f30:	e000ed04 	.word	0xe000ed04

08004f34 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8004f34:	b580      	push	{r7, lr}
 8004f36:	b084      	sub	sp, #16
 8004f38:	af00      	add	r7, sp, #0
 8004f3a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8004f3c:	2300      	movs	r3, #0
 8004f3e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	2b00      	cmp	r3, #0
 8004f44:	d018      	beq.n	8004f78 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8004f46:	4b14      	ldr	r3, [pc, #80]	; (8004f98 <vTaskDelay+0x64>)
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	2b00      	cmp	r3, #0
 8004f4c:	d00b      	beq.n	8004f66 <vTaskDelay+0x32>
 8004f4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f52:	b672      	cpsid	i
 8004f54:	f383 8811 	msr	BASEPRI, r3
 8004f58:	f3bf 8f6f 	isb	sy
 8004f5c:	f3bf 8f4f 	dsb	sy
 8004f60:	b662      	cpsie	i
 8004f62:	60bb      	str	r3, [r7, #8]
 8004f64:	e7fe      	b.n	8004f64 <vTaskDelay+0x30>
			vTaskSuspendAll();
 8004f66:	f000 f883 	bl	8005070 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8004f6a:	2100      	movs	r1, #0
 8004f6c:	6878      	ldr	r0, [r7, #4]
 8004f6e:	f000 fcf1 	bl	8005954 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8004f72:	f000 f88b 	bl	800508c <xTaskResumeAll>
 8004f76:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8004f78:	68fb      	ldr	r3, [r7, #12]
 8004f7a:	2b00      	cmp	r3, #0
 8004f7c:	d107      	bne.n	8004f8e <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8004f7e:	4b07      	ldr	r3, [pc, #28]	; (8004f9c <vTaskDelay+0x68>)
 8004f80:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004f84:	601a      	str	r2, [r3, #0]
 8004f86:	f3bf 8f4f 	dsb	sy
 8004f8a:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8004f8e:	bf00      	nop
 8004f90:	3710      	adds	r7, #16
 8004f92:	46bd      	mov	sp, r7
 8004f94:	bd80      	pop	{r7, pc}
 8004f96:	bf00      	nop
 8004f98:	20000c4c 	.word	0x20000c4c
 8004f9c:	e000ed04 	.word	0xe000ed04

08004fa0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8004fa0:	b580      	push	{r7, lr}
 8004fa2:	b08a      	sub	sp, #40	; 0x28
 8004fa4:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8004fa6:	2300      	movs	r3, #0
 8004fa8:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8004faa:	2300      	movs	r3, #0
 8004fac:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8004fae:	463a      	mov	r2, r7
 8004fb0:	1d39      	adds	r1, r7, #4
 8004fb2:	f107 0308 	add.w	r3, r7, #8
 8004fb6:	4618      	mov	r0, r3
 8004fb8:	f7fe ffb8 	bl	8003f2c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8004fbc:	6839      	ldr	r1, [r7, #0]
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	68ba      	ldr	r2, [r7, #8]
 8004fc2:	9202      	str	r2, [sp, #8]
 8004fc4:	9301      	str	r3, [sp, #4]
 8004fc6:	2300      	movs	r3, #0
 8004fc8:	9300      	str	r3, [sp, #0]
 8004fca:	2300      	movs	r3, #0
 8004fcc:	460a      	mov	r2, r1
 8004fce:	4922      	ldr	r1, [pc, #136]	; (8005058 <vTaskStartScheduler+0xb8>)
 8004fd0:	4822      	ldr	r0, [pc, #136]	; (800505c <vTaskStartScheduler+0xbc>)
 8004fd2:	f7ff fd89 	bl	8004ae8 <xTaskCreateStatic>
 8004fd6:	4602      	mov	r2, r0
 8004fd8:	4b21      	ldr	r3, [pc, #132]	; (8005060 <vTaskStartScheduler+0xc0>)
 8004fda:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8004fdc:	4b20      	ldr	r3, [pc, #128]	; (8005060 <vTaskStartScheduler+0xc0>)
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	2b00      	cmp	r3, #0
 8004fe2:	d002      	beq.n	8004fea <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8004fe4:	2301      	movs	r3, #1
 8004fe6:	617b      	str	r3, [r7, #20]
 8004fe8:	e001      	b.n	8004fee <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8004fea:	2300      	movs	r3, #0
 8004fec:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8004fee:	697b      	ldr	r3, [r7, #20]
 8004ff0:	2b01      	cmp	r3, #1
 8004ff2:	d102      	bne.n	8004ffa <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8004ff4:	f000 fd02 	bl	80059fc <xTimerCreateTimerTask>
 8004ff8:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8004ffa:	697b      	ldr	r3, [r7, #20]
 8004ffc:	2b01      	cmp	r3, #1
 8004ffe:	d117      	bne.n	8005030 <vTaskStartScheduler+0x90>
 8005000:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005004:	b672      	cpsid	i
 8005006:	f383 8811 	msr	BASEPRI, r3
 800500a:	f3bf 8f6f 	isb	sy
 800500e:	f3bf 8f4f 	dsb	sy
 8005012:	b662      	cpsie	i
 8005014:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8005016:	4b13      	ldr	r3, [pc, #76]	; (8005064 <vTaskStartScheduler+0xc4>)
 8005018:	f04f 32ff 	mov.w	r2, #4294967295
 800501c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800501e:	4b12      	ldr	r3, [pc, #72]	; (8005068 <vTaskStartScheduler+0xc8>)
 8005020:	2201      	movs	r2, #1
 8005022:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8005024:	4b11      	ldr	r3, [pc, #68]	; (800506c <vTaskStartScheduler+0xcc>)
 8005026:	2200      	movs	r2, #0
 8005028:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800502a:	f001 f8c9 	bl	80061c0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800502e:	e00f      	b.n	8005050 <vTaskStartScheduler+0xb0>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8005030:	697b      	ldr	r3, [r7, #20]
 8005032:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005036:	d10b      	bne.n	8005050 <vTaskStartScheduler+0xb0>
 8005038:	f04f 0350 	mov.w	r3, #80	; 0x50
 800503c:	b672      	cpsid	i
 800503e:	f383 8811 	msr	BASEPRI, r3
 8005042:	f3bf 8f6f 	isb	sy
 8005046:	f3bf 8f4f 	dsb	sy
 800504a:	b662      	cpsie	i
 800504c:	60fb      	str	r3, [r7, #12]
 800504e:	e7fe      	b.n	800504e <vTaskStartScheduler+0xae>
}
 8005050:	bf00      	nop
 8005052:	3718      	adds	r7, #24
 8005054:	46bd      	mov	sp, r7
 8005056:	bd80      	pop	{r7, pc}
 8005058:	08007734 	.word	0x08007734
 800505c:	08005691 	.word	0x08005691
 8005060:	20000c48 	.word	0x20000c48
 8005064:	20000c44 	.word	0x20000c44
 8005068:	20000c30 	.word	0x20000c30
 800506c:	20000c28 	.word	0x20000c28

08005070 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8005070:	b480      	push	{r7}
 8005072:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8005074:	4b04      	ldr	r3, [pc, #16]	; (8005088 <vTaskSuspendAll+0x18>)
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	3301      	adds	r3, #1
 800507a:	4a03      	ldr	r2, [pc, #12]	; (8005088 <vTaskSuspendAll+0x18>)
 800507c:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 800507e:	bf00      	nop
 8005080:	46bd      	mov	sp, r7
 8005082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005086:	4770      	bx	lr
 8005088:	20000c4c 	.word	0x20000c4c

0800508c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800508c:	b580      	push	{r7, lr}
 800508e:	b084      	sub	sp, #16
 8005090:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8005092:	2300      	movs	r3, #0
 8005094:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8005096:	2300      	movs	r3, #0
 8005098:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800509a:	4b42      	ldr	r3, [pc, #264]	; (80051a4 <xTaskResumeAll+0x118>)
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	2b00      	cmp	r3, #0
 80050a0:	d10b      	bne.n	80050ba <xTaskResumeAll+0x2e>
 80050a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050a6:	b672      	cpsid	i
 80050a8:	f383 8811 	msr	BASEPRI, r3
 80050ac:	f3bf 8f6f 	isb	sy
 80050b0:	f3bf 8f4f 	dsb	sy
 80050b4:	b662      	cpsie	i
 80050b6:	603b      	str	r3, [r7, #0]
 80050b8:	e7fe      	b.n	80050b8 <xTaskResumeAll+0x2c>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80050ba:	f001 f8fd 	bl	80062b8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80050be:	4b39      	ldr	r3, [pc, #228]	; (80051a4 <xTaskResumeAll+0x118>)
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	3b01      	subs	r3, #1
 80050c4:	4a37      	ldr	r2, [pc, #220]	; (80051a4 <xTaskResumeAll+0x118>)
 80050c6:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80050c8:	4b36      	ldr	r3, [pc, #216]	; (80051a4 <xTaskResumeAll+0x118>)
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	2b00      	cmp	r3, #0
 80050ce:	d162      	bne.n	8005196 <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80050d0:	4b35      	ldr	r3, [pc, #212]	; (80051a8 <xTaskResumeAll+0x11c>)
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	2b00      	cmp	r3, #0
 80050d6:	d05e      	beq.n	8005196 <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80050d8:	e02f      	b.n	800513a <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80050da:	4b34      	ldr	r3, [pc, #208]	; (80051ac <xTaskResumeAll+0x120>)
 80050dc:	68db      	ldr	r3, [r3, #12]
 80050de:	68db      	ldr	r3, [r3, #12]
 80050e0:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80050e2:	68fb      	ldr	r3, [r7, #12]
 80050e4:	3318      	adds	r3, #24
 80050e6:	4618      	mov	r0, r3
 80050e8:	f7fe ffde 	bl	80040a8 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80050ec:	68fb      	ldr	r3, [r7, #12]
 80050ee:	3304      	adds	r3, #4
 80050f0:	4618      	mov	r0, r3
 80050f2:	f7fe ffd9 	bl	80040a8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80050f6:	68fb      	ldr	r3, [r7, #12]
 80050f8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80050fa:	4b2d      	ldr	r3, [pc, #180]	; (80051b0 <xTaskResumeAll+0x124>)
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	429a      	cmp	r2, r3
 8005100:	d903      	bls.n	800510a <xTaskResumeAll+0x7e>
 8005102:	68fb      	ldr	r3, [r7, #12]
 8005104:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005106:	4a2a      	ldr	r2, [pc, #168]	; (80051b0 <xTaskResumeAll+0x124>)
 8005108:	6013      	str	r3, [r2, #0]
 800510a:	68fb      	ldr	r3, [r7, #12]
 800510c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800510e:	4613      	mov	r3, r2
 8005110:	009b      	lsls	r3, r3, #2
 8005112:	4413      	add	r3, r2
 8005114:	009b      	lsls	r3, r3, #2
 8005116:	4a27      	ldr	r2, [pc, #156]	; (80051b4 <xTaskResumeAll+0x128>)
 8005118:	441a      	add	r2, r3
 800511a:	68fb      	ldr	r3, [r7, #12]
 800511c:	3304      	adds	r3, #4
 800511e:	4619      	mov	r1, r3
 8005120:	4610      	mov	r0, r2
 8005122:	f7fe ff64 	bl	8003fee <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005126:	68fb      	ldr	r3, [r7, #12]
 8005128:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800512a:	4b23      	ldr	r3, [pc, #140]	; (80051b8 <xTaskResumeAll+0x12c>)
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005130:	429a      	cmp	r2, r3
 8005132:	d302      	bcc.n	800513a <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8005134:	4b21      	ldr	r3, [pc, #132]	; (80051bc <xTaskResumeAll+0x130>)
 8005136:	2201      	movs	r2, #1
 8005138:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800513a:	4b1c      	ldr	r3, [pc, #112]	; (80051ac <xTaskResumeAll+0x120>)
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	2b00      	cmp	r3, #0
 8005140:	d1cb      	bne.n	80050da <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8005142:	68fb      	ldr	r3, [r7, #12]
 8005144:	2b00      	cmp	r3, #0
 8005146:	d001      	beq.n	800514c <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8005148:	f000 fb56 	bl	80057f8 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800514c:	4b1c      	ldr	r3, [pc, #112]	; (80051c0 <xTaskResumeAll+0x134>)
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	2b00      	cmp	r3, #0
 8005156:	d010      	beq.n	800517a <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8005158:	f000 f846 	bl	80051e8 <xTaskIncrementTick>
 800515c:	4603      	mov	r3, r0
 800515e:	2b00      	cmp	r3, #0
 8005160:	d002      	beq.n	8005168 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 8005162:	4b16      	ldr	r3, [pc, #88]	; (80051bc <xTaskResumeAll+0x130>)
 8005164:	2201      	movs	r2, #1
 8005166:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	3b01      	subs	r3, #1
 800516c:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	2b00      	cmp	r3, #0
 8005172:	d1f1      	bne.n	8005158 <xTaskResumeAll+0xcc>

						uxPendedTicks = 0;
 8005174:	4b12      	ldr	r3, [pc, #72]	; (80051c0 <xTaskResumeAll+0x134>)
 8005176:	2200      	movs	r2, #0
 8005178:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800517a:	4b10      	ldr	r3, [pc, #64]	; (80051bc <xTaskResumeAll+0x130>)
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	2b00      	cmp	r3, #0
 8005180:	d009      	beq.n	8005196 <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8005182:	2301      	movs	r3, #1
 8005184:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8005186:	4b0f      	ldr	r3, [pc, #60]	; (80051c4 <xTaskResumeAll+0x138>)
 8005188:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800518c:	601a      	str	r2, [r3, #0]
 800518e:	f3bf 8f4f 	dsb	sy
 8005192:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005196:	f001 f8c1 	bl	800631c <vPortExitCritical>

	return xAlreadyYielded;
 800519a:	68bb      	ldr	r3, [r7, #8]
}
 800519c:	4618      	mov	r0, r3
 800519e:	3710      	adds	r7, #16
 80051a0:	46bd      	mov	sp, r7
 80051a2:	bd80      	pop	{r7, pc}
 80051a4:	20000c4c 	.word	0x20000c4c
 80051a8:	20000c24 	.word	0x20000c24
 80051ac:	20000be4 	.word	0x20000be4
 80051b0:	20000c2c 	.word	0x20000c2c
 80051b4:	20000754 	.word	0x20000754
 80051b8:	20000750 	.word	0x20000750
 80051bc:	20000c38 	.word	0x20000c38
 80051c0:	20000c34 	.word	0x20000c34
 80051c4:	e000ed04 	.word	0xe000ed04

080051c8 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80051c8:	b480      	push	{r7}
 80051ca:	b083      	sub	sp, #12
 80051cc:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80051ce:	4b05      	ldr	r3, [pc, #20]	; (80051e4 <xTaskGetTickCount+0x1c>)
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80051d4:	687b      	ldr	r3, [r7, #4]
}
 80051d6:	4618      	mov	r0, r3
 80051d8:	370c      	adds	r7, #12
 80051da:	46bd      	mov	sp, r7
 80051dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051e0:	4770      	bx	lr
 80051e2:	bf00      	nop
 80051e4:	20000c28 	.word	0x20000c28

080051e8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80051e8:	b580      	push	{r7, lr}
 80051ea:	b086      	sub	sp, #24
 80051ec:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80051ee:	2300      	movs	r3, #0
 80051f0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80051f2:	4b4f      	ldr	r3, [pc, #316]	; (8005330 <xTaskIncrementTick+0x148>)
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	2b00      	cmp	r3, #0
 80051f8:	f040 808a 	bne.w	8005310 <xTaskIncrementTick+0x128>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80051fc:	4b4d      	ldr	r3, [pc, #308]	; (8005334 <xTaskIncrementTick+0x14c>)
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	3301      	adds	r3, #1
 8005202:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8005204:	4a4b      	ldr	r2, [pc, #300]	; (8005334 <xTaskIncrementTick+0x14c>)
 8005206:	693b      	ldr	r3, [r7, #16]
 8005208:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800520a:	693b      	ldr	r3, [r7, #16]
 800520c:	2b00      	cmp	r3, #0
 800520e:	d121      	bne.n	8005254 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8005210:	4b49      	ldr	r3, [pc, #292]	; (8005338 <xTaskIncrementTick+0x150>)
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	2b00      	cmp	r3, #0
 8005218:	d00b      	beq.n	8005232 <xTaskIncrementTick+0x4a>
 800521a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800521e:	b672      	cpsid	i
 8005220:	f383 8811 	msr	BASEPRI, r3
 8005224:	f3bf 8f6f 	isb	sy
 8005228:	f3bf 8f4f 	dsb	sy
 800522c:	b662      	cpsie	i
 800522e:	603b      	str	r3, [r7, #0]
 8005230:	e7fe      	b.n	8005230 <xTaskIncrementTick+0x48>
 8005232:	4b41      	ldr	r3, [pc, #260]	; (8005338 <xTaskIncrementTick+0x150>)
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	60fb      	str	r3, [r7, #12]
 8005238:	4b40      	ldr	r3, [pc, #256]	; (800533c <xTaskIncrementTick+0x154>)
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	4a3e      	ldr	r2, [pc, #248]	; (8005338 <xTaskIncrementTick+0x150>)
 800523e:	6013      	str	r3, [r2, #0]
 8005240:	4a3e      	ldr	r2, [pc, #248]	; (800533c <xTaskIncrementTick+0x154>)
 8005242:	68fb      	ldr	r3, [r7, #12]
 8005244:	6013      	str	r3, [r2, #0]
 8005246:	4b3e      	ldr	r3, [pc, #248]	; (8005340 <xTaskIncrementTick+0x158>)
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	3301      	adds	r3, #1
 800524c:	4a3c      	ldr	r2, [pc, #240]	; (8005340 <xTaskIncrementTick+0x158>)
 800524e:	6013      	str	r3, [r2, #0]
 8005250:	f000 fad2 	bl	80057f8 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8005254:	4b3b      	ldr	r3, [pc, #236]	; (8005344 <xTaskIncrementTick+0x15c>)
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	693a      	ldr	r2, [r7, #16]
 800525a:	429a      	cmp	r2, r3
 800525c:	d349      	bcc.n	80052f2 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800525e:	4b36      	ldr	r3, [pc, #216]	; (8005338 <xTaskIncrementTick+0x150>)
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	2b00      	cmp	r3, #0
 8005266:	d104      	bne.n	8005272 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005268:	4b36      	ldr	r3, [pc, #216]	; (8005344 <xTaskIncrementTick+0x15c>)
 800526a:	f04f 32ff 	mov.w	r2, #4294967295
 800526e:	601a      	str	r2, [r3, #0]
					break;
 8005270:	e03f      	b.n	80052f2 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005272:	4b31      	ldr	r3, [pc, #196]	; (8005338 <xTaskIncrementTick+0x150>)
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	68db      	ldr	r3, [r3, #12]
 8005278:	68db      	ldr	r3, [r3, #12]
 800527a:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800527c:	68bb      	ldr	r3, [r7, #8]
 800527e:	685b      	ldr	r3, [r3, #4]
 8005280:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8005282:	693a      	ldr	r2, [r7, #16]
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	429a      	cmp	r2, r3
 8005288:	d203      	bcs.n	8005292 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800528a:	4a2e      	ldr	r2, [pc, #184]	; (8005344 <xTaskIncrementTick+0x15c>)
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8005290:	e02f      	b.n	80052f2 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005292:	68bb      	ldr	r3, [r7, #8]
 8005294:	3304      	adds	r3, #4
 8005296:	4618      	mov	r0, r3
 8005298:	f7fe ff06 	bl	80040a8 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800529c:	68bb      	ldr	r3, [r7, #8]
 800529e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80052a0:	2b00      	cmp	r3, #0
 80052a2:	d004      	beq.n	80052ae <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80052a4:	68bb      	ldr	r3, [r7, #8]
 80052a6:	3318      	adds	r3, #24
 80052a8:	4618      	mov	r0, r3
 80052aa:	f7fe fefd 	bl	80040a8 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80052ae:	68bb      	ldr	r3, [r7, #8]
 80052b0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80052b2:	4b25      	ldr	r3, [pc, #148]	; (8005348 <xTaskIncrementTick+0x160>)
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	429a      	cmp	r2, r3
 80052b8:	d903      	bls.n	80052c2 <xTaskIncrementTick+0xda>
 80052ba:	68bb      	ldr	r3, [r7, #8]
 80052bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052be:	4a22      	ldr	r2, [pc, #136]	; (8005348 <xTaskIncrementTick+0x160>)
 80052c0:	6013      	str	r3, [r2, #0]
 80052c2:	68bb      	ldr	r3, [r7, #8]
 80052c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80052c6:	4613      	mov	r3, r2
 80052c8:	009b      	lsls	r3, r3, #2
 80052ca:	4413      	add	r3, r2
 80052cc:	009b      	lsls	r3, r3, #2
 80052ce:	4a1f      	ldr	r2, [pc, #124]	; (800534c <xTaskIncrementTick+0x164>)
 80052d0:	441a      	add	r2, r3
 80052d2:	68bb      	ldr	r3, [r7, #8]
 80052d4:	3304      	adds	r3, #4
 80052d6:	4619      	mov	r1, r3
 80052d8:	4610      	mov	r0, r2
 80052da:	f7fe fe88 	bl	8003fee <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80052de:	68bb      	ldr	r3, [r7, #8]
 80052e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80052e2:	4b1b      	ldr	r3, [pc, #108]	; (8005350 <xTaskIncrementTick+0x168>)
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052e8:	429a      	cmp	r2, r3
 80052ea:	d3b8      	bcc.n	800525e <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 80052ec:	2301      	movs	r3, #1
 80052ee:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80052f0:	e7b5      	b.n	800525e <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80052f2:	4b17      	ldr	r3, [pc, #92]	; (8005350 <xTaskIncrementTick+0x168>)
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80052f8:	4914      	ldr	r1, [pc, #80]	; (800534c <xTaskIncrementTick+0x164>)
 80052fa:	4613      	mov	r3, r2
 80052fc:	009b      	lsls	r3, r3, #2
 80052fe:	4413      	add	r3, r2
 8005300:	009b      	lsls	r3, r3, #2
 8005302:	440b      	add	r3, r1
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	2b01      	cmp	r3, #1
 8005308:	d907      	bls.n	800531a <xTaskIncrementTick+0x132>
			{
				xSwitchRequired = pdTRUE;
 800530a:	2301      	movs	r3, #1
 800530c:	617b      	str	r3, [r7, #20]
 800530e:	e004      	b.n	800531a <xTaskIncrementTick+0x132>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8005310:	4b10      	ldr	r3, [pc, #64]	; (8005354 <xTaskIncrementTick+0x16c>)
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	3301      	adds	r3, #1
 8005316:	4a0f      	ldr	r2, [pc, #60]	; (8005354 <xTaskIncrementTick+0x16c>)
 8005318:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800531a:	4b0f      	ldr	r3, [pc, #60]	; (8005358 <xTaskIncrementTick+0x170>)
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	2b00      	cmp	r3, #0
 8005320:	d001      	beq.n	8005326 <xTaskIncrementTick+0x13e>
		{
			xSwitchRequired = pdTRUE;
 8005322:	2301      	movs	r3, #1
 8005324:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8005326:	697b      	ldr	r3, [r7, #20]
}
 8005328:	4618      	mov	r0, r3
 800532a:	3718      	adds	r7, #24
 800532c:	46bd      	mov	sp, r7
 800532e:	bd80      	pop	{r7, pc}
 8005330:	20000c4c 	.word	0x20000c4c
 8005334:	20000c28 	.word	0x20000c28
 8005338:	20000bdc 	.word	0x20000bdc
 800533c:	20000be0 	.word	0x20000be0
 8005340:	20000c3c 	.word	0x20000c3c
 8005344:	20000c44 	.word	0x20000c44
 8005348:	20000c2c 	.word	0x20000c2c
 800534c:	20000754 	.word	0x20000754
 8005350:	20000750 	.word	0x20000750
 8005354:	20000c34 	.word	0x20000c34
 8005358:	20000c38 	.word	0x20000c38

0800535c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800535c:	b480      	push	{r7}
 800535e:	b085      	sub	sp, #20
 8005360:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8005362:	4b28      	ldr	r3, [pc, #160]	; (8005404 <vTaskSwitchContext+0xa8>)
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	2b00      	cmp	r3, #0
 8005368:	d003      	beq.n	8005372 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800536a:	4b27      	ldr	r3, [pc, #156]	; (8005408 <vTaskSwitchContext+0xac>)
 800536c:	2201      	movs	r2, #1
 800536e:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8005370:	e042      	b.n	80053f8 <vTaskSwitchContext+0x9c>
		xYieldPending = pdFALSE;
 8005372:	4b25      	ldr	r3, [pc, #148]	; (8005408 <vTaskSwitchContext+0xac>)
 8005374:	2200      	movs	r2, #0
 8005376:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005378:	4b24      	ldr	r3, [pc, #144]	; (800540c <vTaskSwitchContext+0xb0>)
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	60fb      	str	r3, [r7, #12]
 800537e:	e011      	b.n	80053a4 <vTaskSwitchContext+0x48>
 8005380:	68fb      	ldr	r3, [r7, #12]
 8005382:	2b00      	cmp	r3, #0
 8005384:	d10b      	bne.n	800539e <vTaskSwitchContext+0x42>
 8005386:	f04f 0350 	mov.w	r3, #80	; 0x50
 800538a:	b672      	cpsid	i
 800538c:	f383 8811 	msr	BASEPRI, r3
 8005390:	f3bf 8f6f 	isb	sy
 8005394:	f3bf 8f4f 	dsb	sy
 8005398:	b662      	cpsie	i
 800539a:	607b      	str	r3, [r7, #4]
 800539c:	e7fe      	b.n	800539c <vTaskSwitchContext+0x40>
 800539e:	68fb      	ldr	r3, [r7, #12]
 80053a0:	3b01      	subs	r3, #1
 80053a2:	60fb      	str	r3, [r7, #12]
 80053a4:	491a      	ldr	r1, [pc, #104]	; (8005410 <vTaskSwitchContext+0xb4>)
 80053a6:	68fa      	ldr	r2, [r7, #12]
 80053a8:	4613      	mov	r3, r2
 80053aa:	009b      	lsls	r3, r3, #2
 80053ac:	4413      	add	r3, r2
 80053ae:	009b      	lsls	r3, r3, #2
 80053b0:	440b      	add	r3, r1
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	2b00      	cmp	r3, #0
 80053b6:	d0e3      	beq.n	8005380 <vTaskSwitchContext+0x24>
 80053b8:	68fa      	ldr	r2, [r7, #12]
 80053ba:	4613      	mov	r3, r2
 80053bc:	009b      	lsls	r3, r3, #2
 80053be:	4413      	add	r3, r2
 80053c0:	009b      	lsls	r3, r3, #2
 80053c2:	4a13      	ldr	r2, [pc, #76]	; (8005410 <vTaskSwitchContext+0xb4>)
 80053c4:	4413      	add	r3, r2
 80053c6:	60bb      	str	r3, [r7, #8]
 80053c8:	68bb      	ldr	r3, [r7, #8]
 80053ca:	685b      	ldr	r3, [r3, #4]
 80053cc:	685a      	ldr	r2, [r3, #4]
 80053ce:	68bb      	ldr	r3, [r7, #8]
 80053d0:	605a      	str	r2, [r3, #4]
 80053d2:	68bb      	ldr	r3, [r7, #8]
 80053d4:	685a      	ldr	r2, [r3, #4]
 80053d6:	68bb      	ldr	r3, [r7, #8]
 80053d8:	3308      	adds	r3, #8
 80053da:	429a      	cmp	r2, r3
 80053dc:	d104      	bne.n	80053e8 <vTaskSwitchContext+0x8c>
 80053de:	68bb      	ldr	r3, [r7, #8]
 80053e0:	685b      	ldr	r3, [r3, #4]
 80053e2:	685a      	ldr	r2, [r3, #4]
 80053e4:	68bb      	ldr	r3, [r7, #8]
 80053e6:	605a      	str	r2, [r3, #4]
 80053e8:	68bb      	ldr	r3, [r7, #8]
 80053ea:	685b      	ldr	r3, [r3, #4]
 80053ec:	68db      	ldr	r3, [r3, #12]
 80053ee:	4a09      	ldr	r2, [pc, #36]	; (8005414 <vTaskSwitchContext+0xb8>)
 80053f0:	6013      	str	r3, [r2, #0]
 80053f2:	4a06      	ldr	r2, [pc, #24]	; (800540c <vTaskSwitchContext+0xb0>)
 80053f4:	68fb      	ldr	r3, [r7, #12]
 80053f6:	6013      	str	r3, [r2, #0]
}
 80053f8:	bf00      	nop
 80053fa:	3714      	adds	r7, #20
 80053fc:	46bd      	mov	sp, r7
 80053fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005402:	4770      	bx	lr
 8005404:	20000c4c 	.word	0x20000c4c
 8005408:	20000c38 	.word	0x20000c38
 800540c:	20000c2c 	.word	0x20000c2c
 8005410:	20000754 	.word	0x20000754
 8005414:	20000750 	.word	0x20000750

08005418 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8005418:	b580      	push	{r7, lr}
 800541a:	b084      	sub	sp, #16
 800541c:	af00      	add	r7, sp, #0
 800541e:	6078      	str	r0, [r7, #4]
 8005420:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	2b00      	cmp	r3, #0
 8005426:	d10b      	bne.n	8005440 <vTaskPlaceOnEventList+0x28>
 8005428:	f04f 0350 	mov.w	r3, #80	; 0x50
 800542c:	b672      	cpsid	i
 800542e:	f383 8811 	msr	BASEPRI, r3
 8005432:	f3bf 8f6f 	isb	sy
 8005436:	f3bf 8f4f 	dsb	sy
 800543a:	b662      	cpsie	i
 800543c:	60fb      	str	r3, [r7, #12]
 800543e:	e7fe      	b.n	800543e <vTaskPlaceOnEventList+0x26>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005440:	4b07      	ldr	r3, [pc, #28]	; (8005460 <vTaskPlaceOnEventList+0x48>)
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	3318      	adds	r3, #24
 8005446:	4619      	mov	r1, r3
 8005448:	6878      	ldr	r0, [r7, #4]
 800544a:	f7fe fdf4 	bl	8004036 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800544e:	2101      	movs	r1, #1
 8005450:	6838      	ldr	r0, [r7, #0]
 8005452:	f000 fa7f 	bl	8005954 <prvAddCurrentTaskToDelayedList>
}
 8005456:	bf00      	nop
 8005458:	3710      	adds	r7, #16
 800545a:	46bd      	mov	sp, r7
 800545c:	bd80      	pop	{r7, pc}
 800545e:	bf00      	nop
 8005460:	20000750 	.word	0x20000750

08005464 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8005464:	b580      	push	{r7, lr}
 8005466:	b086      	sub	sp, #24
 8005468:	af00      	add	r7, sp, #0
 800546a:	60f8      	str	r0, [r7, #12]
 800546c:	60b9      	str	r1, [r7, #8]
 800546e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8005470:	68fb      	ldr	r3, [r7, #12]
 8005472:	2b00      	cmp	r3, #0
 8005474:	d10b      	bne.n	800548e <vTaskPlaceOnEventListRestricted+0x2a>
 8005476:	f04f 0350 	mov.w	r3, #80	; 0x50
 800547a:	b672      	cpsid	i
 800547c:	f383 8811 	msr	BASEPRI, r3
 8005480:	f3bf 8f6f 	isb	sy
 8005484:	f3bf 8f4f 	dsb	sy
 8005488:	b662      	cpsie	i
 800548a:	617b      	str	r3, [r7, #20]
 800548c:	e7fe      	b.n	800548c <vTaskPlaceOnEventListRestricted+0x28>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800548e:	4b0a      	ldr	r3, [pc, #40]	; (80054b8 <vTaskPlaceOnEventListRestricted+0x54>)
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	3318      	adds	r3, #24
 8005494:	4619      	mov	r1, r3
 8005496:	68f8      	ldr	r0, [r7, #12]
 8005498:	f7fe fda9 	bl	8003fee <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	2b00      	cmp	r3, #0
 80054a0:	d002      	beq.n	80054a8 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 80054a2:	f04f 33ff 	mov.w	r3, #4294967295
 80054a6:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80054a8:	6879      	ldr	r1, [r7, #4]
 80054aa:	68b8      	ldr	r0, [r7, #8]
 80054ac:	f000 fa52 	bl	8005954 <prvAddCurrentTaskToDelayedList>
	}
 80054b0:	bf00      	nop
 80054b2:	3718      	adds	r7, #24
 80054b4:	46bd      	mov	sp, r7
 80054b6:	bd80      	pop	{r7, pc}
 80054b8:	20000750 	.word	0x20000750

080054bc <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80054bc:	b580      	push	{r7, lr}
 80054be:	b086      	sub	sp, #24
 80054c0:	af00      	add	r7, sp, #0
 80054c2:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	68db      	ldr	r3, [r3, #12]
 80054c8:	68db      	ldr	r3, [r3, #12]
 80054ca:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80054cc:	693b      	ldr	r3, [r7, #16]
 80054ce:	2b00      	cmp	r3, #0
 80054d0:	d10b      	bne.n	80054ea <xTaskRemoveFromEventList+0x2e>
 80054d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054d6:	b672      	cpsid	i
 80054d8:	f383 8811 	msr	BASEPRI, r3
 80054dc:	f3bf 8f6f 	isb	sy
 80054e0:	f3bf 8f4f 	dsb	sy
 80054e4:	b662      	cpsie	i
 80054e6:	60fb      	str	r3, [r7, #12]
 80054e8:	e7fe      	b.n	80054e8 <xTaskRemoveFromEventList+0x2c>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80054ea:	693b      	ldr	r3, [r7, #16]
 80054ec:	3318      	adds	r3, #24
 80054ee:	4618      	mov	r0, r3
 80054f0:	f7fe fdda 	bl	80040a8 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80054f4:	4b1d      	ldr	r3, [pc, #116]	; (800556c <xTaskRemoveFromEventList+0xb0>)
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	2b00      	cmp	r3, #0
 80054fa:	d11d      	bne.n	8005538 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80054fc:	693b      	ldr	r3, [r7, #16]
 80054fe:	3304      	adds	r3, #4
 8005500:	4618      	mov	r0, r3
 8005502:	f7fe fdd1 	bl	80040a8 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8005506:	693b      	ldr	r3, [r7, #16]
 8005508:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800550a:	4b19      	ldr	r3, [pc, #100]	; (8005570 <xTaskRemoveFromEventList+0xb4>)
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	429a      	cmp	r2, r3
 8005510:	d903      	bls.n	800551a <xTaskRemoveFromEventList+0x5e>
 8005512:	693b      	ldr	r3, [r7, #16]
 8005514:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005516:	4a16      	ldr	r2, [pc, #88]	; (8005570 <xTaskRemoveFromEventList+0xb4>)
 8005518:	6013      	str	r3, [r2, #0]
 800551a:	693b      	ldr	r3, [r7, #16]
 800551c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800551e:	4613      	mov	r3, r2
 8005520:	009b      	lsls	r3, r3, #2
 8005522:	4413      	add	r3, r2
 8005524:	009b      	lsls	r3, r3, #2
 8005526:	4a13      	ldr	r2, [pc, #76]	; (8005574 <xTaskRemoveFromEventList+0xb8>)
 8005528:	441a      	add	r2, r3
 800552a:	693b      	ldr	r3, [r7, #16]
 800552c:	3304      	adds	r3, #4
 800552e:	4619      	mov	r1, r3
 8005530:	4610      	mov	r0, r2
 8005532:	f7fe fd5c 	bl	8003fee <vListInsertEnd>
 8005536:	e005      	b.n	8005544 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8005538:	693b      	ldr	r3, [r7, #16]
 800553a:	3318      	adds	r3, #24
 800553c:	4619      	mov	r1, r3
 800553e:	480e      	ldr	r0, [pc, #56]	; (8005578 <xTaskRemoveFromEventList+0xbc>)
 8005540:	f7fe fd55 	bl	8003fee <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8005544:	693b      	ldr	r3, [r7, #16]
 8005546:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005548:	4b0c      	ldr	r3, [pc, #48]	; (800557c <xTaskRemoveFromEventList+0xc0>)
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800554e:	429a      	cmp	r2, r3
 8005550:	d905      	bls.n	800555e <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8005552:	2301      	movs	r3, #1
 8005554:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8005556:	4b0a      	ldr	r3, [pc, #40]	; (8005580 <xTaskRemoveFromEventList+0xc4>)
 8005558:	2201      	movs	r2, #1
 800555a:	601a      	str	r2, [r3, #0]
 800555c:	e001      	b.n	8005562 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 800555e:	2300      	movs	r3, #0
 8005560:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8005562:	697b      	ldr	r3, [r7, #20]
}
 8005564:	4618      	mov	r0, r3
 8005566:	3718      	adds	r7, #24
 8005568:	46bd      	mov	sp, r7
 800556a:	bd80      	pop	{r7, pc}
 800556c:	20000c4c 	.word	0x20000c4c
 8005570:	20000c2c 	.word	0x20000c2c
 8005574:	20000754 	.word	0x20000754
 8005578:	20000be4 	.word	0x20000be4
 800557c:	20000750 	.word	0x20000750
 8005580:	20000c38 	.word	0x20000c38

08005584 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8005584:	b480      	push	{r7}
 8005586:	b083      	sub	sp, #12
 8005588:	af00      	add	r7, sp, #0
 800558a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800558c:	4b06      	ldr	r3, [pc, #24]	; (80055a8 <vTaskInternalSetTimeOutState+0x24>)
 800558e:	681a      	ldr	r2, [r3, #0]
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8005594:	4b05      	ldr	r3, [pc, #20]	; (80055ac <vTaskInternalSetTimeOutState+0x28>)
 8005596:	681a      	ldr	r2, [r3, #0]
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	605a      	str	r2, [r3, #4]
}
 800559c:	bf00      	nop
 800559e:	370c      	adds	r7, #12
 80055a0:	46bd      	mov	sp, r7
 80055a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055a6:	4770      	bx	lr
 80055a8:	20000c3c 	.word	0x20000c3c
 80055ac:	20000c28 	.word	0x20000c28

080055b0 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80055b0:	b580      	push	{r7, lr}
 80055b2:	b088      	sub	sp, #32
 80055b4:	af00      	add	r7, sp, #0
 80055b6:	6078      	str	r0, [r7, #4]
 80055b8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	2b00      	cmp	r3, #0
 80055be:	d10b      	bne.n	80055d8 <xTaskCheckForTimeOut+0x28>
 80055c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055c4:	b672      	cpsid	i
 80055c6:	f383 8811 	msr	BASEPRI, r3
 80055ca:	f3bf 8f6f 	isb	sy
 80055ce:	f3bf 8f4f 	dsb	sy
 80055d2:	b662      	cpsie	i
 80055d4:	613b      	str	r3, [r7, #16]
 80055d6:	e7fe      	b.n	80055d6 <xTaskCheckForTimeOut+0x26>
	configASSERT( pxTicksToWait );
 80055d8:	683b      	ldr	r3, [r7, #0]
 80055da:	2b00      	cmp	r3, #0
 80055dc:	d10b      	bne.n	80055f6 <xTaskCheckForTimeOut+0x46>
 80055de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055e2:	b672      	cpsid	i
 80055e4:	f383 8811 	msr	BASEPRI, r3
 80055e8:	f3bf 8f6f 	isb	sy
 80055ec:	f3bf 8f4f 	dsb	sy
 80055f0:	b662      	cpsie	i
 80055f2:	60fb      	str	r3, [r7, #12]
 80055f4:	e7fe      	b.n	80055f4 <xTaskCheckForTimeOut+0x44>

	taskENTER_CRITICAL();
 80055f6:	f000 fe5f 	bl	80062b8 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80055fa:	4b1d      	ldr	r3, [pc, #116]	; (8005670 <xTaskCheckForTimeOut+0xc0>)
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	685b      	ldr	r3, [r3, #4]
 8005604:	69ba      	ldr	r2, [r7, #24]
 8005606:	1ad3      	subs	r3, r2, r3
 8005608:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800560a:	683b      	ldr	r3, [r7, #0]
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005612:	d102      	bne.n	800561a <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8005614:	2300      	movs	r3, #0
 8005616:	61fb      	str	r3, [r7, #28]
 8005618:	e023      	b.n	8005662 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	681a      	ldr	r2, [r3, #0]
 800561e:	4b15      	ldr	r3, [pc, #84]	; (8005674 <xTaskCheckForTimeOut+0xc4>)
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	429a      	cmp	r2, r3
 8005624:	d007      	beq.n	8005636 <xTaskCheckForTimeOut+0x86>
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	685b      	ldr	r3, [r3, #4]
 800562a:	69ba      	ldr	r2, [r7, #24]
 800562c:	429a      	cmp	r2, r3
 800562e:	d302      	bcc.n	8005636 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8005630:	2301      	movs	r3, #1
 8005632:	61fb      	str	r3, [r7, #28]
 8005634:	e015      	b.n	8005662 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8005636:	683b      	ldr	r3, [r7, #0]
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	697a      	ldr	r2, [r7, #20]
 800563c:	429a      	cmp	r2, r3
 800563e:	d20b      	bcs.n	8005658 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8005640:	683b      	ldr	r3, [r7, #0]
 8005642:	681a      	ldr	r2, [r3, #0]
 8005644:	697b      	ldr	r3, [r7, #20]
 8005646:	1ad2      	subs	r2, r2, r3
 8005648:	683b      	ldr	r3, [r7, #0]
 800564a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800564c:	6878      	ldr	r0, [r7, #4]
 800564e:	f7ff ff99 	bl	8005584 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8005652:	2300      	movs	r3, #0
 8005654:	61fb      	str	r3, [r7, #28]
 8005656:	e004      	b.n	8005662 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8005658:	683b      	ldr	r3, [r7, #0]
 800565a:	2200      	movs	r2, #0
 800565c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800565e:	2301      	movs	r3, #1
 8005660:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8005662:	f000 fe5b 	bl	800631c <vPortExitCritical>

	return xReturn;
 8005666:	69fb      	ldr	r3, [r7, #28]
}
 8005668:	4618      	mov	r0, r3
 800566a:	3720      	adds	r7, #32
 800566c:	46bd      	mov	sp, r7
 800566e:	bd80      	pop	{r7, pc}
 8005670:	20000c28 	.word	0x20000c28
 8005674:	20000c3c 	.word	0x20000c3c

08005678 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8005678:	b480      	push	{r7}
 800567a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800567c:	4b03      	ldr	r3, [pc, #12]	; (800568c <vTaskMissedYield+0x14>)
 800567e:	2201      	movs	r2, #1
 8005680:	601a      	str	r2, [r3, #0]
}
 8005682:	bf00      	nop
 8005684:	46bd      	mov	sp, r7
 8005686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800568a:	4770      	bx	lr
 800568c:	20000c38 	.word	0x20000c38

08005690 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8005690:	b580      	push	{r7, lr}
 8005692:	b082      	sub	sp, #8
 8005694:	af00      	add	r7, sp, #0
 8005696:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8005698:	f000 f852 	bl	8005740 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800569c:	4b06      	ldr	r3, [pc, #24]	; (80056b8 <prvIdleTask+0x28>)
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	2b01      	cmp	r3, #1
 80056a2:	d9f9      	bls.n	8005698 <prvIdleTask+0x8>
			{
				taskYIELD();
 80056a4:	4b05      	ldr	r3, [pc, #20]	; (80056bc <prvIdleTask+0x2c>)
 80056a6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80056aa:	601a      	str	r2, [r3, #0]
 80056ac:	f3bf 8f4f 	dsb	sy
 80056b0:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80056b4:	e7f0      	b.n	8005698 <prvIdleTask+0x8>
 80056b6:	bf00      	nop
 80056b8:	20000754 	.word	0x20000754
 80056bc:	e000ed04 	.word	0xe000ed04

080056c0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80056c0:	b580      	push	{r7, lr}
 80056c2:	b082      	sub	sp, #8
 80056c4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80056c6:	2300      	movs	r3, #0
 80056c8:	607b      	str	r3, [r7, #4]
 80056ca:	e00c      	b.n	80056e6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80056cc:	687a      	ldr	r2, [r7, #4]
 80056ce:	4613      	mov	r3, r2
 80056d0:	009b      	lsls	r3, r3, #2
 80056d2:	4413      	add	r3, r2
 80056d4:	009b      	lsls	r3, r3, #2
 80056d6:	4a12      	ldr	r2, [pc, #72]	; (8005720 <prvInitialiseTaskLists+0x60>)
 80056d8:	4413      	add	r3, r2
 80056da:	4618      	mov	r0, r3
 80056dc:	f7fe fc5a 	bl	8003f94 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	3301      	adds	r3, #1
 80056e4:	607b      	str	r3, [r7, #4]
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	2b37      	cmp	r3, #55	; 0x37
 80056ea:	d9ef      	bls.n	80056cc <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80056ec:	480d      	ldr	r0, [pc, #52]	; (8005724 <prvInitialiseTaskLists+0x64>)
 80056ee:	f7fe fc51 	bl	8003f94 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80056f2:	480d      	ldr	r0, [pc, #52]	; (8005728 <prvInitialiseTaskLists+0x68>)
 80056f4:	f7fe fc4e 	bl	8003f94 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80056f8:	480c      	ldr	r0, [pc, #48]	; (800572c <prvInitialiseTaskLists+0x6c>)
 80056fa:	f7fe fc4b 	bl	8003f94 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80056fe:	480c      	ldr	r0, [pc, #48]	; (8005730 <prvInitialiseTaskLists+0x70>)
 8005700:	f7fe fc48 	bl	8003f94 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8005704:	480b      	ldr	r0, [pc, #44]	; (8005734 <prvInitialiseTaskLists+0x74>)
 8005706:	f7fe fc45 	bl	8003f94 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800570a:	4b0b      	ldr	r3, [pc, #44]	; (8005738 <prvInitialiseTaskLists+0x78>)
 800570c:	4a05      	ldr	r2, [pc, #20]	; (8005724 <prvInitialiseTaskLists+0x64>)
 800570e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8005710:	4b0a      	ldr	r3, [pc, #40]	; (800573c <prvInitialiseTaskLists+0x7c>)
 8005712:	4a05      	ldr	r2, [pc, #20]	; (8005728 <prvInitialiseTaskLists+0x68>)
 8005714:	601a      	str	r2, [r3, #0]
}
 8005716:	bf00      	nop
 8005718:	3708      	adds	r7, #8
 800571a:	46bd      	mov	sp, r7
 800571c:	bd80      	pop	{r7, pc}
 800571e:	bf00      	nop
 8005720:	20000754 	.word	0x20000754
 8005724:	20000bb4 	.word	0x20000bb4
 8005728:	20000bc8 	.word	0x20000bc8
 800572c:	20000be4 	.word	0x20000be4
 8005730:	20000bf8 	.word	0x20000bf8
 8005734:	20000c10 	.word	0x20000c10
 8005738:	20000bdc 	.word	0x20000bdc
 800573c:	20000be0 	.word	0x20000be0

08005740 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8005740:	b580      	push	{r7, lr}
 8005742:	b082      	sub	sp, #8
 8005744:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005746:	e019      	b.n	800577c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8005748:	f000 fdb6 	bl	80062b8 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800574c:	4b0f      	ldr	r3, [pc, #60]	; (800578c <prvCheckTasksWaitingTermination+0x4c>)
 800574e:	68db      	ldr	r3, [r3, #12]
 8005750:	68db      	ldr	r3, [r3, #12]
 8005752:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	3304      	adds	r3, #4
 8005758:	4618      	mov	r0, r3
 800575a:	f7fe fca5 	bl	80040a8 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800575e:	4b0c      	ldr	r3, [pc, #48]	; (8005790 <prvCheckTasksWaitingTermination+0x50>)
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	3b01      	subs	r3, #1
 8005764:	4a0a      	ldr	r2, [pc, #40]	; (8005790 <prvCheckTasksWaitingTermination+0x50>)
 8005766:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8005768:	4b0a      	ldr	r3, [pc, #40]	; (8005794 <prvCheckTasksWaitingTermination+0x54>)
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	3b01      	subs	r3, #1
 800576e:	4a09      	ldr	r2, [pc, #36]	; (8005794 <prvCheckTasksWaitingTermination+0x54>)
 8005770:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8005772:	f000 fdd3 	bl	800631c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8005776:	6878      	ldr	r0, [r7, #4]
 8005778:	f000 f80e 	bl	8005798 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800577c:	4b05      	ldr	r3, [pc, #20]	; (8005794 <prvCheckTasksWaitingTermination+0x54>)
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	2b00      	cmp	r3, #0
 8005782:	d1e1      	bne.n	8005748 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8005784:	bf00      	nop
 8005786:	3708      	adds	r7, #8
 8005788:	46bd      	mov	sp, r7
 800578a:	bd80      	pop	{r7, pc}
 800578c:	20000bf8 	.word	0x20000bf8
 8005790:	20000c24 	.word	0x20000c24
 8005794:	20000c0c 	.word	0x20000c0c

08005798 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8005798:	b580      	push	{r7, lr}
 800579a:	b084      	sub	sp, #16
 800579c:	af00      	add	r7, sp, #0
 800579e:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80057a6:	2b00      	cmp	r3, #0
 80057a8:	d108      	bne.n	80057bc <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80057ae:	4618      	mov	r0, r3
 80057b0:	f000 ff6c 	bl	800668c <vPortFree>
				vPortFree( pxTCB );
 80057b4:	6878      	ldr	r0, [r7, #4]
 80057b6:	f000 ff69 	bl	800668c <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80057ba:	e019      	b.n	80057f0 <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80057c2:	2b01      	cmp	r3, #1
 80057c4:	d103      	bne.n	80057ce <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 80057c6:	6878      	ldr	r0, [r7, #4]
 80057c8:	f000 ff60 	bl	800668c <vPortFree>
	}
 80057cc:	e010      	b.n	80057f0 <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80057d4:	2b02      	cmp	r3, #2
 80057d6:	d00b      	beq.n	80057f0 <prvDeleteTCB+0x58>
 80057d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057dc:	b672      	cpsid	i
 80057de:	f383 8811 	msr	BASEPRI, r3
 80057e2:	f3bf 8f6f 	isb	sy
 80057e6:	f3bf 8f4f 	dsb	sy
 80057ea:	b662      	cpsie	i
 80057ec:	60fb      	str	r3, [r7, #12]
 80057ee:	e7fe      	b.n	80057ee <prvDeleteTCB+0x56>
	}
 80057f0:	bf00      	nop
 80057f2:	3710      	adds	r7, #16
 80057f4:	46bd      	mov	sp, r7
 80057f6:	bd80      	pop	{r7, pc}

080057f8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80057f8:	b480      	push	{r7}
 80057fa:	b083      	sub	sp, #12
 80057fc:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80057fe:	4b0c      	ldr	r3, [pc, #48]	; (8005830 <prvResetNextTaskUnblockTime+0x38>)
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	2b00      	cmp	r3, #0
 8005806:	d104      	bne.n	8005812 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8005808:	4b0a      	ldr	r3, [pc, #40]	; (8005834 <prvResetNextTaskUnblockTime+0x3c>)
 800580a:	f04f 32ff 	mov.w	r2, #4294967295
 800580e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8005810:	e008      	b.n	8005824 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005812:	4b07      	ldr	r3, [pc, #28]	; (8005830 <prvResetNextTaskUnblockTime+0x38>)
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	68db      	ldr	r3, [r3, #12]
 8005818:	68db      	ldr	r3, [r3, #12]
 800581a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	685b      	ldr	r3, [r3, #4]
 8005820:	4a04      	ldr	r2, [pc, #16]	; (8005834 <prvResetNextTaskUnblockTime+0x3c>)
 8005822:	6013      	str	r3, [r2, #0]
}
 8005824:	bf00      	nop
 8005826:	370c      	adds	r7, #12
 8005828:	46bd      	mov	sp, r7
 800582a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800582e:	4770      	bx	lr
 8005830:	20000bdc 	.word	0x20000bdc
 8005834:	20000c44 	.word	0x20000c44

08005838 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8005838:	b480      	push	{r7}
 800583a:	b083      	sub	sp, #12
 800583c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800583e:	4b0b      	ldr	r3, [pc, #44]	; (800586c <xTaskGetSchedulerState+0x34>)
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	2b00      	cmp	r3, #0
 8005844:	d102      	bne.n	800584c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8005846:	2301      	movs	r3, #1
 8005848:	607b      	str	r3, [r7, #4]
 800584a:	e008      	b.n	800585e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800584c:	4b08      	ldr	r3, [pc, #32]	; (8005870 <xTaskGetSchedulerState+0x38>)
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	2b00      	cmp	r3, #0
 8005852:	d102      	bne.n	800585a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8005854:	2302      	movs	r3, #2
 8005856:	607b      	str	r3, [r7, #4]
 8005858:	e001      	b.n	800585e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800585a:	2300      	movs	r3, #0
 800585c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800585e:	687b      	ldr	r3, [r7, #4]
	}
 8005860:	4618      	mov	r0, r3
 8005862:	370c      	adds	r7, #12
 8005864:	46bd      	mov	sp, r7
 8005866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800586a:	4770      	bx	lr
 800586c:	20000c30 	.word	0x20000c30
 8005870:	20000c4c 	.word	0x20000c4c

08005874 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8005874:	b580      	push	{r7, lr}
 8005876:	b086      	sub	sp, #24
 8005878:	af00      	add	r7, sp, #0
 800587a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8005880:	2300      	movs	r3, #0
 8005882:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	2b00      	cmp	r3, #0
 8005888:	d058      	beq.n	800593c <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800588a:	4b2f      	ldr	r3, [pc, #188]	; (8005948 <xTaskPriorityDisinherit+0xd4>)
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	693a      	ldr	r2, [r7, #16]
 8005890:	429a      	cmp	r2, r3
 8005892:	d00b      	beq.n	80058ac <xTaskPriorityDisinherit+0x38>
 8005894:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005898:	b672      	cpsid	i
 800589a:	f383 8811 	msr	BASEPRI, r3
 800589e:	f3bf 8f6f 	isb	sy
 80058a2:	f3bf 8f4f 	dsb	sy
 80058a6:	b662      	cpsie	i
 80058a8:	60fb      	str	r3, [r7, #12]
 80058aa:	e7fe      	b.n	80058aa <xTaskPriorityDisinherit+0x36>
			configASSERT( pxTCB->uxMutexesHeld );
 80058ac:	693b      	ldr	r3, [r7, #16]
 80058ae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80058b0:	2b00      	cmp	r3, #0
 80058b2:	d10b      	bne.n	80058cc <xTaskPriorityDisinherit+0x58>
 80058b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058b8:	b672      	cpsid	i
 80058ba:	f383 8811 	msr	BASEPRI, r3
 80058be:	f3bf 8f6f 	isb	sy
 80058c2:	f3bf 8f4f 	dsb	sy
 80058c6:	b662      	cpsie	i
 80058c8:	60bb      	str	r3, [r7, #8]
 80058ca:	e7fe      	b.n	80058ca <xTaskPriorityDisinherit+0x56>
			( pxTCB->uxMutexesHeld )--;
 80058cc:	693b      	ldr	r3, [r7, #16]
 80058ce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80058d0:	1e5a      	subs	r2, r3, #1
 80058d2:	693b      	ldr	r3, [r7, #16]
 80058d4:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80058d6:	693b      	ldr	r3, [r7, #16]
 80058d8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80058da:	693b      	ldr	r3, [r7, #16]
 80058dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80058de:	429a      	cmp	r2, r3
 80058e0:	d02c      	beq.n	800593c <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80058e2:	693b      	ldr	r3, [r7, #16]
 80058e4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80058e6:	2b00      	cmp	r3, #0
 80058e8:	d128      	bne.n	800593c <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80058ea:	693b      	ldr	r3, [r7, #16]
 80058ec:	3304      	adds	r3, #4
 80058ee:	4618      	mov	r0, r3
 80058f0:	f7fe fbda 	bl	80040a8 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80058f4:	693b      	ldr	r3, [r7, #16]
 80058f6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80058f8:	693b      	ldr	r3, [r7, #16]
 80058fa:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80058fc:	693b      	ldr	r3, [r7, #16]
 80058fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005900:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8005904:	693b      	ldr	r3, [r7, #16]
 8005906:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8005908:	693b      	ldr	r3, [r7, #16]
 800590a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800590c:	4b0f      	ldr	r3, [pc, #60]	; (800594c <xTaskPriorityDisinherit+0xd8>)
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	429a      	cmp	r2, r3
 8005912:	d903      	bls.n	800591c <xTaskPriorityDisinherit+0xa8>
 8005914:	693b      	ldr	r3, [r7, #16]
 8005916:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005918:	4a0c      	ldr	r2, [pc, #48]	; (800594c <xTaskPriorityDisinherit+0xd8>)
 800591a:	6013      	str	r3, [r2, #0]
 800591c:	693b      	ldr	r3, [r7, #16]
 800591e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005920:	4613      	mov	r3, r2
 8005922:	009b      	lsls	r3, r3, #2
 8005924:	4413      	add	r3, r2
 8005926:	009b      	lsls	r3, r3, #2
 8005928:	4a09      	ldr	r2, [pc, #36]	; (8005950 <xTaskPriorityDisinherit+0xdc>)
 800592a:	441a      	add	r2, r3
 800592c:	693b      	ldr	r3, [r7, #16]
 800592e:	3304      	adds	r3, #4
 8005930:	4619      	mov	r1, r3
 8005932:	4610      	mov	r0, r2
 8005934:	f7fe fb5b 	bl	8003fee <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8005938:	2301      	movs	r3, #1
 800593a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800593c:	697b      	ldr	r3, [r7, #20]
	}
 800593e:	4618      	mov	r0, r3
 8005940:	3718      	adds	r7, #24
 8005942:	46bd      	mov	sp, r7
 8005944:	bd80      	pop	{r7, pc}
 8005946:	bf00      	nop
 8005948:	20000750 	.word	0x20000750
 800594c:	20000c2c 	.word	0x20000c2c
 8005950:	20000754 	.word	0x20000754

08005954 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8005954:	b580      	push	{r7, lr}
 8005956:	b084      	sub	sp, #16
 8005958:	af00      	add	r7, sp, #0
 800595a:	6078      	str	r0, [r7, #4]
 800595c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800595e:	4b21      	ldr	r3, [pc, #132]	; (80059e4 <prvAddCurrentTaskToDelayedList+0x90>)
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005964:	4b20      	ldr	r3, [pc, #128]	; (80059e8 <prvAddCurrentTaskToDelayedList+0x94>)
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	3304      	adds	r3, #4
 800596a:	4618      	mov	r0, r3
 800596c:	f7fe fb9c 	bl	80040a8 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005976:	d10a      	bne.n	800598e <prvAddCurrentTaskToDelayedList+0x3a>
 8005978:	683b      	ldr	r3, [r7, #0]
 800597a:	2b00      	cmp	r3, #0
 800597c:	d007      	beq.n	800598e <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800597e:	4b1a      	ldr	r3, [pc, #104]	; (80059e8 <prvAddCurrentTaskToDelayedList+0x94>)
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	3304      	adds	r3, #4
 8005984:	4619      	mov	r1, r3
 8005986:	4819      	ldr	r0, [pc, #100]	; (80059ec <prvAddCurrentTaskToDelayedList+0x98>)
 8005988:	f7fe fb31 	bl	8003fee <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800598c:	e026      	b.n	80059dc <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800598e:	68fa      	ldr	r2, [r7, #12]
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	4413      	add	r3, r2
 8005994:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8005996:	4b14      	ldr	r3, [pc, #80]	; (80059e8 <prvAddCurrentTaskToDelayedList+0x94>)
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	68ba      	ldr	r2, [r7, #8]
 800599c:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800599e:	68ba      	ldr	r2, [r7, #8]
 80059a0:	68fb      	ldr	r3, [r7, #12]
 80059a2:	429a      	cmp	r2, r3
 80059a4:	d209      	bcs.n	80059ba <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80059a6:	4b12      	ldr	r3, [pc, #72]	; (80059f0 <prvAddCurrentTaskToDelayedList+0x9c>)
 80059a8:	681a      	ldr	r2, [r3, #0]
 80059aa:	4b0f      	ldr	r3, [pc, #60]	; (80059e8 <prvAddCurrentTaskToDelayedList+0x94>)
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	3304      	adds	r3, #4
 80059b0:	4619      	mov	r1, r3
 80059b2:	4610      	mov	r0, r2
 80059b4:	f7fe fb3f 	bl	8004036 <vListInsert>
}
 80059b8:	e010      	b.n	80059dc <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80059ba:	4b0e      	ldr	r3, [pc, #56]	; (80059f4 <prvAddCurrentTaskToDelayedList+0xa0>)
 80059bc:	681a      	ldr	r2, [r3, #0]
 80059be:	4b0a      	ldr	r3, [pc, #40]	; (80059e8 <prvAddCurrentTaskToDelayedList+0x94>)
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	3304      	adds	r3, #4
 80059c4:	4619      	mov	r1, r3
 80059c6:	4610      	mov	r0, r2
 80059c8:	f7fe fb35 	bl	8004036 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80059cc:	4b0a      	ldr	r3, [pc, #40]	; (80059f8 <prvAddCurrentTaskToDelayedList+0xa4>)
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	68ba      	ldr	r2, [r7, #8]
 80059d2:	429a      	cmp	r2, r3
 80059d4:	d202      	bcs.n	80059dc <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80059d6:	4a08      	ldr	r2, [pc, #32]	; (80059f8 <prvAddCurrentTaskToDelayedList+0xa4>)
 80059d8:	68bb      	ldr	r3, [r7, #8]
 80059da:	6013      	str	r3, [r2, #0]
}
 80059dc:	bf00      	nop
 80059de:	3710      	adds	r7, #16
 80059e0:	46bd      	mov	sp, r7
 80059e2:	bd80      	pop	{r7, pc}
 80059e4:	20000c28 	.word	0x20000c28
 80059e8:	20000750 	.word	0x20000750
 80059ec:	20000c10 	.word	0x20000c10
 80059f0:	20000be0 	.word	0x20000be0
 80059f4:	20000bdc 	.word	0x20000bdc
 80059f8:	20000c44 	.word	0x20000c44

080059fc <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80059fc:	b580      	push	{r7, lr}
 80059fe:	b08a      	sub	sp, #40	; 0x28
 8005a00:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8005a02:	2300      	movs	r3, #0
 8005a04:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8005a06:	f000 fb0d 	bl	8006024 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8005a0a:	4b1d      	ldr	r3, [pc, #116]	; (8005a80 <xTimerCreateTimerTask+0x84>)
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	2b00      	cmp	r3, #0
 8005a10:	d021      	beq.n	8005a56 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8005a12:	2300      	movs	r3, #0
 8005a14:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8005a16:	2300      	movs	r3, #0
 8005a18:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8005a1a:	1d3a      	adds	r2, r7, #4
 8005a1c:	f107 0108 	add.w	r1, r7, #8
 8005a20:	f107 030c 	add.w	r3, r7, #12
 8005a24:	4618      	mov	r0, r3
 8005a26:	f7fe fa9b 	bl	8003f60 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8005a2a:	6879      	ldr	r1, [r7, #4]
 8005a2c:	68bb      	ldr	r3, [r7, #8]
 8005a2e:	68fa      	ldr	r2, [r7, #12]
 8005a30:	9202      	str	r2, [sp, #8]
 8005a32:	9301      	str	r3, [sp, #4]
 8005a34:	2302      	movs	r3, #2
 8005a36:	9300      	str	r3, [sp, #0]
 8005a38:	2300      	movs	r3, #0
 8005a3a:	460a      	mov	r2, r1
 8005a3c:	4911      	ldr	r1, [pc, #68]	; (8005a84 <xTimerCreateTimerTask+0x88>)
 8005a3e:	4812      	ldr	r0, [pc, #72]	; (8005a88 <xTimerCreateTimerTask+0x8c>)
 8005a40:	f7ff f852 	bl	8004ae8 <xTaskCreateStatic>
 8005a44:	4602      	mov	r2, r0
 8005a46:	4b11      	ldr	r3, [pc, #68]	; (8005a8c <xTimerCreateTimerTask+0x90>)
 8005a48:	601a      	str	r2, [r3, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8005a4a:	4b10      	ldr	r3, [pc, #64]	; (8005a8c <xTimerCreateTimerTask+0x90>)
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	2b00      	cmp	r3, #0
 8005a50:	d001      	beq.n	8005a56 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8005a52:	2301      	movs	r3, #1
 8005a54:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8005a56:	697b      	ldr	r3, [r7, #20]
 8005a58:	2b00      	cmp	r3, #0
 8005a5a:	d10b      	bne.n	8005a74 <xTimerCreateTimerTask+0x78>
 8005a5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a60:	b672      	cpsid	i
 8005a62:	f383 8811 	msr	BASEPRI, r3
 8005a66:	f3bf 8f6f 	isb	sy
 8005a6a:	f3bf 8f4f 	dsb	sy
 8005a6e:	b662      	cpsie	i
 8005a70:	613b      	str	r3, [r7, #16]
 8005a72:	e7fe      	b.n	8005a72 <xTimerCreateTimerTask+0x76>
	return xReturn;
 8005a74:	697b      	ldr	r3, [r7, #20]
}
 8005a76:	4618      	mov	r0, r3
 8005a78:	3718      	adds	r7, #24
 8005a7a:	46bd      	mov	sp, r7
 8005a7c:	bd80      	pop	{r7, pc}
 8005a7e:	bf00      	nop
 8005a80:	20000c80 	.word	0x20000c80
 8005a84:	0800773c 	.word	0x0800773c
 8005a88:	08005bc9 	.word	0x08005bc9
 8005a8c:	20000c84 	.word	0x20000c84

08005a90 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8005a90:	b580      	push	{r7, lr}
 8005a92:	b08a      	sub	sp, #40	; 0x28
 8005a94:	af00      	add	r7, sp, #0
 8005a96:	60f8      	str	r0, [r7, #12]
 8005a98:	60b9      	str	r1, [r7, #8]
 8005a9a:	607a      	str	r2, [r7, #4]
 8005a9c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8005a9e:	2300      	movs	r3, #0
 8005aa0:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8005aa2:	68fb      	ldr	r3, [r7, #12]
 8005aa4:	2b00      	cmp	r3, #0
 8005aa6:	d10b      	bne.n	8005ac0 <xTimerGenericCommand+0x30>
 8005aa8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005aac:	b672      	cpsid	i
 8005aae:	f383 8811 	msr	BASEPRI, r3
 8005ab2:	f3bf 8f6f 	isb	sy
 8005ab6:	f3bf 8f4f 	dsb	sy
 8005aba:	b662      	cpsie	i
 8005abc:	623b      	str	r3, [r7, #32]
 8005abe:	e7fe      	b.n	8005abe <xTimerGenericCommand+0x2e>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8005ac0:	4b19      	ldr	r3, [pc, #100]	; (8005b28 <xTimerGenericCommand+0x98>)
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	2b00      	cmp	r3, #0
 8005ac6:	d02a      	beq.n	8005b1e <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8005ac8:	68bb      	ldr	r3, [r7, #8]
 8005aca:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8005ad0:	68fb      	ldr	r3, [r7, #12]
 8005ad2:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8005ad4:	68bb      	ldr	r3, [r7, #8]
 8005ad6:	2b05      	cmp	r3, #5
 8005ad8:	dc18      	bgt.n	8005b0c <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8005ada:	f7ff fead 	bl	8005838 <xTaskGetSchedulerState>
 8005ade:	4603      	mov	r3, r0
 8005ae0:	2b02      	cmp	r3, #2
 8005ae2:	d109      	bne.n	8005af8 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8005ae4:	4b10      	ldr	r3, [pc, #64]	; (8005b28 <xTimerGenericCommand+0x98>)
 8005ae6:	6818      	ldr	r0, [r3, #0]
 8005ae8:	f107 0110 	add.w	r1, r7, #16
 8005aec:	2300      	movs	r3, #0
 8005aee:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005af0:	f7fe fc0e 	bl	8004310 <xQueueGenericSend>
 8005af4:	6278      	str	r0, [r7, #36]	; 0x24
 8005af6:	e012      	b.n	8005b1e <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8005af8:	4b0b      	ldr	r3, [pc, #44]	; (8005b28 <xTimerGenericCommand+0x98>)
 8005afa:	6818      	ldr	r0, [r3, #0]
 8005afc:	f107 0110 	add.w	r1, r7, #16
 8005b00:	2300      	movs	r3, #0
 8005b02:	2200      	movs	r2, #0
 8005b04:	f7fe fc04 	bl	8004310 <xQueueGenericSend>
 8005b08:	6278      	str	r0, [r7, #36]	; 0x24
 8005b0a:	e008      	b.n	8005b1e <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8005b0c:	4b06      	ldr	r3, [pc, #24]	; (8005b28 <xTimerGenericCommand+0x98>)
 8005b0e:	6818      	ldr	r0, [r3, #0]
 8005b10:	f107 0110 	add.w	r1, r7, #16
 8005b14:	2300      	movs	r3, #0
 8005b16:	683a      	ldr	r2, [r7, #0]
 8005b18:	f7fe fcfc 	bl	8004514 <xQueueGenericSendFromISR>
 8005b1c:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8005b1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8005b20:	4618      	mov	r0, r3
 8005b22:	3728      	adds	r7, #40	; 0x28
 8005b24:	46bd      	mov	sp, r7
 8005b26:	bd80      	pop	{r7, pc}
 8005b28:	20000c80 	.word	0x20000c80

08005b2c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8005b2c:	b580      	push	{r7, lr}
 8005b2e:	b088      	sub	sp, #32
 8005b30:	af02      	add	r7, sp, #8
 8005b32:	6078      	str	r0, [r7, #4]
 8005b34:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005b36:	4b23      	ldr	r3, [pc, #140]	; (8005bc4 <prvProcessExpiredTimer+0x98>)
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	68db      	ldr	r3, [r3, #12]
 8005b3c:	68db      	ldr	r3, [r3, #12]
 8005b3e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005b40:	697b      	ldr	r3, [r7, #20]
 8005b42:	3304      	adds	r3, #4
 8005b44:	4618      	mov	r0, r3
 8005b46:	f7fe faaf 	bl	80040a8 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8005b4a:	697b      	ldr	r3, [r7, #20]
 8005b4c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005b50:	f003 0304 	and.w	r3, r3, #4
 8005b54:	2b00      	cmp	r3, #0
 8005b56:	d023      	beq.n	8005ba0 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8005b58:	697b      	ldr	r3, [r7, #20]
 8005b5a:	699a      	ldr	r2, [r3, #24]
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	18d1      	adds	r1, r2, r3
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	683a      	ldr	r2, [r7, #0]
 8005b64:	6978      	ldr	r0, [r7, #20]
 8005b66:	f000 f8d3 	bl	8005d10 <prvInsertTimerInActiveList>
 8005b6a:	4603      	mov	r3, r0
 8005b6c:	2b00      	cmp	r3, #0
 8005b6e:	d020      	beq.n	8005bb2 <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8005b70:	2300      	movs	r3, #0
 8005b72:	9300      	str	r3, [sp, #0]
 8005b74:	2300      	movs	r3, #0
 8005b76:	687a      	ldr	r2, [r7, #4]
 8005b78:	2100      	movs	r1, #0
 8005b7a:	6978      	ldr	r0, [r7, #20]
 8005b7c:	f7ff ff88 	bl	8005a90 <xTimerGenericCommand>
 8005b80:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8005b82:	693b      	ldr	r3, [r7, #16]
 8005b84:	2b00      	cmp	r3, #0
 8005b86:	d114      	bne.n	8005bb2 <prvProcessExpiredTimer+0x86>
 8005b88:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b8c:	b672      	cpsid	i
 8005b8e:	f383 8811 	msr	BASEPRI, r3
 8005b92:	f3bf 8f6f 	isb	sy
 8005b96:	f3bf 8f4f 	dsb	sy
 8005b9a:	b662      	cpsie	i
 8005b9c:	60fb      	str	r3, [r7, #12]
 8005b9e:	e7fe      	b.n	8005b9e <prvProcessExpiredTimer+0x72>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8005ba0:	697b      	ldr	r3, [r7, #20]
 8005ba2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005ba6:	f023 0301 	bic.w	r3, r3, #1
 8005baa:	b2da      	uxtb	r2, r3
 8005bac:	697b      	ldr	r3, [r7, #20]
 8005bae:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005bb2:	697b      	ldr	r3, [r7, #20]
 8005bb4:	6a1b      	ldr	r3, [r3, #32]
 8005bb6:	6978      	ldr	r0, [r7, #20]
 8005bb8:	4798      	blx	r3
}
 8005bba:	bf00      	nop
 8005bbc:	3718      	adds	r7, #24
 8005bbe:	46bd      	mov	sp, r7
 8005bc0:	bd80      	pop	{r7, pc}
 8005bc2:	bf00      	nop
 8005bc4:	20000c78 	.word	0x20000c78

08005bc8 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8005bc8:	b580      	push	{r7, lr}
 8005bca:	b084      	sub	sp, #16
 8005bcc:	af00      	add	r7, sp, #0
 8005bce:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8005bd0:	f107 0308 	add.w	r3, r7, #8
 8005bd4:	4618      	mov	r0, r3
 8005bd6:	f000 f857 	bl	8005c88 <prvGetNextExpireTime>
 8005bda:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8005bdc:	68bb      	ldr	r3, [r7, #8]
 8005bde:	4619      	mov	r1, r3
 8005be0:	68f8      	ldr	r0, [r7, #12]
 8005be2:	f000 f803 	bl	8005bec <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8005be6:	f000 f8d5 	bl	8005d94 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8005bea:	e7f1      	b.n	8005bd0 <prvTimerTask+0x8>

08005bec <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8005bec:	b580      	push	{r7, lr}
 8005bee:	b084      	sub	sp, #16
 8005bf0:	af00      	add	r7, sp, #0
 8005bf2:	6078      	str	r0, [r7, #4]
 8005bf4:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8005bf6:	f7ff fa3b 	bl	8005070 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8005bfa:	f107 0308 	add.w	r3, r7, #8
 8005bfe:	4618      	mov	r0, r3
 8005c00:	f000 f866 	bl	8005cd0 <prvSampleTimeNow>
 8005c04:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8005c06:	68bb      	ldr	r3, [r7, #8]
 8005c08:	2b00      	cmp	r3, #0
 8005c0a:	d130      	bne.n	8005c6e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8005c0c:	683b      	ldr	r3, [r7, #0]
 8005c0e:	2b00      	cmp	r3, #0
 8005c10:	d10a      	bne.n	8005c28 <prvProcessTimerOrBlockTask+0x3c>
 8005c12:	687a      	ldr	r2, [r7, #4]
 8005c14:	68fb      	ldr	r3, [r7, #12]
 8005c16:	429a      	cmp	r2, r3
 8005c18:	d806      	bhi.n	8005c28 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8005c1a:	f7ff fa37 	bl	800508c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8005c1e:	68f9      	ldr	r1, [r7, #12]
 8005c20:	6878      	ldr	r0, [r7, #4]
 8005c22:	f7ff ff83 	bl	8005b2c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8005c26:	e024      	b.n	8005c72 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8005c28:	683b      	ldr	r3, [r7, #0]
 8005c2a:	2b00      	cmp	r3, #0
 8005c2c:	d008      	beq.n	8005c40 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8005c2e:	4b13      	ldr	r3, [pc, #76]	; (8005c7c <prvProcessTimerOrBlockTask+0x90>)
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	2b00      	cmp	r3, #0
 8005c36:	d101      	bne.n	8005c3c <prvProcessTimerOrBlockTask+0x50>
 8005c38:	2301      	movs	r3, #1
 8005c3a:	e000      	b.n	8005c3e <prvProcessTimerOrBlockTask+0x52>
 8005c3c:	2300      	movs	r3, #0
 8005c3e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8005c40:	4b0f      	ldr	r3, [pc, #60]	; (8005c80 <prvProcessTimerOrBlockTask+0x94>)
 8005c42:	6818      	ldr	r0, [r3, #0]
 8005c44:	687a      	ldr	r2, [r7, #4]
 8005c46:	68fb      	ldr	r3, [r7, #12]
 8005c48:	1ad3      	subs	r3, r2, r3
 8005c4a:	683a      	ldr	r2, [r7, #0]
 8005c4c:	4619      	mov	r1, r3
 8005c4e:	f7fe ff17 	bl	8004a80 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8005c52:	f7ff fa1b 	bl	800508c <xTaskResumeAll>
 8005c56:	4603      	mov	r3, r0
 8005c58:	2b00      	cmp	r3, #0
 8005c5a:	d10a      	bne.n	8005c72 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8005c5c:	4b09      	ldr	r3, [pc, #36]	; (8005c84 <prvProcessTimerOrBlockTask+0x98>)
 8005c5e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005c62:	601a      	str	r2, [r3, #0]
 8005c64:	f3bf 8f4f 	dsb	sy
 8005c68:	f3bf 8f6f 	isb	sy
}
 8005c6c:	e001      	b.n	8005c72 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8005c6e:	f7ff fa0d 	bl	800508c <xTaskResumeAll>
}
 8005c72:	bf00      	nop
 8005c74:	3710      	adds	r7, #16
 8005c76:	46bd      	mov	sp, r7
 8005c78:	bd80      	pop	{r7, pc}
 8005c7a:	bf00      	nop
 8005c7c:	20000c7c 	.word	0x20000c7c
 8005c80:	20000c80 	.word	0x20000c80
 8005c84:	e000ed04 	.word	0xe000ed04

08005c88 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8005c88:	b480      	push	{r7}
 8005c8a:	b085      	sub	sp, #20
 8005c8c:	af00      	add	r7, sp, #0
 8005c8e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8005c90:	4b0e      	ldr	r3, [pc, #56]	; (8005ccc <prvGetNextExpireTime+0x44>)
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	2b00      	cmp	r3, #0
 8005c98:	d101      	bne.n	8005c9e <prvGetNextExpireTime+0x16>
 8005c9a:	2201      	movs	r2, #1
 8005c9c:	e000      	b.n	8005ca0 <prvGetNextExpireTime+0x18>
 8005c9e:	2200      	movs	r2, #0
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	2b00      	cmp	r3, #0
 8005caa:	d105      	bne.n	8005cb8 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005cac:	4b07      	ldr	r3, [pc, #28]	; (8005ccc <prvGetNextExpireTime+0x44>)
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	68db      	ldr	r3, [r3, #12]
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	60fb      	str	r3, [r7, #12]
 8005cb6:	e001      	b.n	8005cbc <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8005cb8:	2300      	movs	r3, #0
 8005cba:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8005cbc:	68fb      	ldr	r3, [r7, #12]
}
 8005cbe:	4618      	mov	r0, r3
 8005cc0:	3714      	adds	r7, #20
 8005cc2:	46bd      	mov	sp, r7
 8005cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cc8:	4770      	bx	lr
 8005cca:	bf00      	nop
 8005ccc:	20000c78 	.word	0x20000c78

08005cd0 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8005cd0:	b580      	push	{r7, lr}
 8005cd2:	b084      	sub	sp, #16
 8005cd4:	af00      	add	r7, sp, #0
 8005cd6:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8005cd8:	f7ff fa76 	bl	80051c8 <xTaskGetTickCount>
 8005cdc:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8005cde:	4b0b      	ldr	r3, [pc, #44]	; (8005d0c <prvSampleTimeNow+0x3c>)
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	68fa      	ldr	r2, [r7, #12]
 8005ce4:	429a      	cmp	r2, r3
 8005ce6:	d205      	bcs.n	8005cf4 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8005ce8:	f000 f936 	bl	8005f58 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	2201      	movs	r2, #1
 8005cf0:	601a      	str	r2, [r3, #0]
 8005cf2:	e002      	b.n	8005cfa <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	2200      	movs	r2, #0
 8005cf8:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8005cfa:	4a04      	ldr	r2, [pc, #16]	; (8005d0c <prvSampleTimeNow+0x3c>)
 8005cfc:	68fb      	ldr	r3, [r7, #12]
 8005cfe:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8005d00:	68fb      	ldr	r3, [r7, #12]
}
 8005d02:	4618      	mov	r0, r3
 8005d04:	3710      	adds	r7, #16
 8005d06:	46bd      	mov	sp, r7
 8005d08:	bd80      	pop	{r7, pc}
 8005d0a:	bf00      	nop
 8005d0c:	20000c88 	.word	0x20000c88

08005d10 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8005d10:	b580      	push	{r7, lr}
 8005d12:	b086      	sub	sp, #24
 8005d14:	af00      	add	r7, sp, #0
 8005d16:	60f8      	str	r0, [r7, #12]
 8005d18:	60b9      	str	r1, [r7, #8]
 8005d1a:	607a      	str	r2, [r7, #4]
 8005d1c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8005d1e:	2300      	movs	r3, #0
 8005d20:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8005d22:	68fb      	ldr	r3, [r7, #12]
 8005d24:	68ba      	ldr	r2, [r7, #8]
 8005d26:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8005d28:	68fb      	ldr	r3, [r7, #12]
 8005d2a:	68fa      	ldr	r2, [r7, #12]
 8005d2c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8005d2e:	68ba      	ldr	r2, [r7, #8]
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	429a      	cmp	r2, r3
 8005d34:	d812      	bhi.n	8005d5c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005d36:	687a      	ldr	r2, [r7, #4]
 8005d38:	683b      	ldr	r3, [r7, #0]
 8005d3a:	1ad2      	subs	r2, r2, r3
 8005d3c:	68fb      	ldr	r3, [r7, #12]
 8005d3e:	699b      	ldr	r3, [r3, #24]
 8005d40:	429a      	cmp	r2, r3
 8005d42:	d302      	bcc.n	8005d4a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8005d44:	2301      	movs	r3, #1
 8005d46:	617b      	str	r3, [r7, #20]
 8005d48:	e01b      	b.n	8005d82 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8005d4a:	4b10      	ldr	r3, [pc, #64]	; (8005d8c <prvInsertTimerInActiveList+0x7c>)
 8005d4c:	681a      	ldr	r2, [r3, #0]
 8005d4e:	68fb      	ldr	r3, [r7, #12]
 8005d50:	3304      	adds	r3, #4
 8005d52:	4619      	mov	r1, r3
 8005d54:	4610      	mov	r0, r2
 8005d56:	f7fe f96e 	bl	8004036 <vListInsert>
 8005d5a:	e012      	b.n	8005d82 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8005d5c:	687a      	ldr	r2, [r7, #4]
 8005d5e:	683b      	ldr	r3, [r7, #0]
 8005d60:	429a      	cmp	r2, r3
 8005d62:	d206      	bcs.n	8005d72 <prvInsertTimerInActiveList+0x62>
 8005d64:	68ba      	ldr	r2, [r7, #8]
 8005d66:	683b      	ldr	r3, [r7, #0]
 8005d68:	429a      	cmp	r2, r3
 8005d6a:	d302      	bcc.n	8005d72 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8005d6c:	2301      	movs	r3, #1
 8005d6e:	617b      	str	r3, [r7, #20]
 8005d70:	e007      	b.n	8005d82 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8005d72:	4b07      	ldr	r3, [pc, #28]	; (8005d90 <prvInsertTimerInActiveList+0x80>)
 8005d74:	681a      	ldr	r2, [r3, #0]
 8005d76:	68fb      	ldr	r3, [r7, #12]
 8005d78:	3304      	adds	r3, #4
 8005d7a:	4619      	mov	r1, r3
 8005d7c:	4610      	mov	r0, r2
 8005d7e:	f7fe f95a 	bl	8004036 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8005d82:	697b      	ldr	r3, [r7, #20]
}
 8005d84:	4618      	mov	r0, r3
 8005d86:	3718      	adds	r7, #24
 8005d88:	46bd      	mov	sp, r7
 8005d8a:	bd80      	pop	{r7, pc}
 8005d8c:	20000c7c 	.word	0x20000c7c
 8005d90:	20000c78 	.word	0x20000c78

08005d94 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8005d94:	b580      	push	{r7, lr}
 8005d96:	b08e      	sub	sp, #56	; 0x38
 8005d98:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8005d9a:	e0cc      	b.n	8005f36 <prvProcessReceivedCommands+0x1a2>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	2b00      	cmp	r3, #0
 8005da0:	da19      	bge.n	8005dd6 <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8005da2:	1d3b      	adds	r3, r7, #4
 8005da4:	3304      	adds	r3, #4
 8005da6:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8005da8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005daa:	2b00      	cmp	r3, #0
 8005dac:	d10b      	bne.n	8005dc6 <prvProcessReceivedCommands+0x32>
 8005dae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005db2:	b672      	cpsid	i
 8005db4:	f383 8811 	msr	BASEPRI, r3
 8005db8:	f3bf 8f6f 	isb	sy
 8005dbc:	f3bf 8f4f 	dsb	sy
 8005dc0:	b662      	cpsie	i
 8005dc2:	61fb      	str	r3, [r7, #28]
 8005dc4:	e7fe      	b.n	8005dc4 <prvProcessReceivedCommands+0x30>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8005dc6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005dcc:	6850      	ldr	r0, [r2, #4]
 8005dce:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005dd0:	6892      	ldr	r2, [r2, #8]
 8005dd2:	4611      	mov	r1, r2
 8005dd4:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	2b00      	cmp	r3, #0
 8005dda:	f2c0 80ab 	blt.w	8005f34 <prvProcessReceivedCommands+0x1a0>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8005dde:	68fb      	ldr	r3, [r7, #12]
 8005de0:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8005de2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005de4:	695b      	ldr	r3, [r3, #20]
 8005de6:	2b00      	cmp	r3, #0
 8005de8:	d004      	beq.n	8005df4 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005dea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005dec:	3304      	adds	r3, #4
 8005dee:	4618      	mov	r0, r3
 8005df0:	f7fe f95a 	bl	80040a8 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8005df4:	463b      	mov	r3, r7
 8005df6:	4618      	mov	r0, r3
 8005df8:	f7ff ff6a 	bl	8005cd0 <prvSampleTimeNow>
 8005dfc:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	2b09      	cmp	r3, #9
 8005e02:	f200 8098 	bhi.w	8005f36 <prvProcessReceivedCommands+0x1a2>
 8005e06:	a201      	add	r2, pc, #4	; (adr r2, 8005e0c <prvProcessReceivedCommands+0x78>)
 8005e08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e0c:	08005e35 	.word	0x08005e35
 8005e10:	08005e35 	.word	0x08005e35
 8005e14:	08005e35 	.word	0x08005e35
 8005e18:	08005eab 	.word	0x08005eab
 8005e1c:	08005ebf 	.word	0x08005ebf
 8005e20:	08005f0b 	.word	0x08005f0b
 8005e24:	08005e35 	.word	0x08005e35
 8005e28:	08005e35 	.word	0x08005e35
 8005e2c:	08005eab 	.word	0x08005eab
 8005e30:	08005ebf 	.word	0x08005ebf
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8005e34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e36:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005e3a:	f043 0301 	orr.w	r3, r3, #1
 8005e3e:	b2da      	uxtb	r2, r3
 8005e40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e42:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8005e46:	68ba      	ldr	r2, [r7, #8]
 8005e48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e4a:	699b      	ldr	r3, [r3, #24]
 8005e4c:	18d1      	adds	r1, r2, r3
 8005e4e:	68bb      	ldr	r3, [r7, #8]
 8005e50:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005e52:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005e54:	f7ff ff5c 	bl	8005d10 <prvInsertTimerInActiveList>
 8005e58:	4603      	mov	r3, r0
 8005e5a:	2b00      	cmp	r3, #0
 8005e5c:	d06b      	beq.n	8005f36 <prvProcessReceivedCommands+0x1a2>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005e5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e60:	6a1b      	ldr	r3, [r3, #32]
 8005e62:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005e64:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8005e66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e68:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005e6c:	f003 0304 	and.w	r3, r3, #4
 8005e70:	2b00      	cmp	r3, #0
 8005e72:	d060      	beq.n	8005f36 <prvProcessReceivedCommands+0x1a2>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8005e74:	68ba      	ldr	r2, [r7, #8]
 8005e76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e78:	699b      	ldr	r3, [r3, #24]
 8005e7a:	441a      	add	r2, r3
 8005e7c:	2300      	movs	r3, #0
 8005e7e:	9300      	str	r3, [sp, #0]
 8005e80:	2300      	movs	r3, #0
 8005e82:	2100      	movs	r1, #0
 8005e84:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005e86:	f7ff fe03 	bl	8005a90 <xTimerGenericCommand>
 8005e8a:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8005e8c:	6a3b      	ldr	r3, [r7, #32]
 8005e8e:	2b00      	cmp	r3, #0
 8005e90:	d151      	bne.n	8005f36 <prvProcessReceivedCommands+0x1a2>
 8005e92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e96:	b672      	cpsid	i
 8005e98:	f383 8811 	msr	BASEPRI, r3
 8005e9c:	f3bf 8f6f 	isb	sy
 8005ea0:	f3bf 8f4f 	dsb	sy
 8005ea4:	b662      	cpsie	i
 8005ea6:	61bb      	str	r3, [r7, #24]
 8005ea8:	e7fe      	b.n	8005ea8 <prvProcessReceivedCommands+0x114>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8005eaa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005eac:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005eb0:	f023 0301 	bic.w	r3, r3, #1
 8005eb4:	b2da      	uxtb	r2, r3
 8005eb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005eb8:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8005ebc:	e03b      	b.n	8005f36 <prvProcessReceivedCommands+0x1a2>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8005ebe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ec0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005ec4:	f043 0301 	orr.w	r3, r3, #1
 8005ec8:	b2da      	uxtb	r2, r3
 8005eca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ecc:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8005ed0:	68ba      	ldr	r2, [r7, #8]
 8005ed2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ed4:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8005ed6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ed8:	699b      	ldr	r3, [r3, #24]
 8005eda:	2b00      	cmp	r3, #0
 8005edc:	d10b      	bne.n	8005ef6 <prvProcessReceivedCommands+0x162>
 8005ede:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ee2:	b672      	cpsid	i
 8005ee4:	f383 8811 	msr	BASEPRI, r3
 8005ee8:	f3bf 8f6f 	isb	sy
 8005eec:	f3bf 8f4f 	dsb	sy
 8005ef0:	b662      	cpsie	i
 8005ef2:	617b      	str	r3, [r7, #20]
 8005ef4:	e7fe      	b.n	8005ef4 <prvProcessReceivedCommands+0x160>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8005ef6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ef8:	699a      	ldr	r2, [r3, #24]
 8005efa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005efc:	18d1      	adds	r1, r2, r3
 8005efe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f00:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005f02:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005f04:	f7ff ff04 	bl	8005d10 <prvInsertTimerInActiveList>
					break;
 8005f08:	e015      	b.n	8005f36 <prvProcessReceivedCommands+0x1a2>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8005f0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f0c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005f10:	f003 0302 	and.w	r3, r3, #2
 8005f14:	2b00      	cmp	r3, #0
 8005f16:	d103      	bne.n	8005f20 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 8005f18:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005f1a:	f000 fbb7 	bl	800668c <vPortFree>
 8005f1e:	e00a      	b.n	8005f36 <prvProcessReceivedCommands+0x1a2>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8005f20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f22:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005f26:	f023 0301 	bic.w	r3, r3, #1
 8005f2a:	b2da      	uxtb	r2, r3
 8005f2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f2e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8005f32:	e000      	b.n	8005f36 <prvProcessReceivedCommands+0x1a2>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8005f34:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8005f36:	4b07      	ldr	r3, [pc, #28]	; (8005f54 <prvProcessReceivedCommands+0x1c0>)
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	1d39      	adds	r1, r7, #4
 8005f3c:	2200      	movs	r2, #0
 8005f3e:	4618      	mov	r0, r3
 8005f40:	f7fe fb84 	bl	800464c <xQueueReceive>
 8005f44:	4603      	mov	r3, r0
 8005f46:	2b00      	cmp	r3, #0
 8005f48:	f47f af28 	bne.w	8005d9c <prvProcessReceivedCommands+0x8>
	}
}
 8005f4c:	bf00      	nop
 8005f4e:	3730      	adds	r7, #48	; 0x30
 8005f50:	46bd      	mov	sp, r7
 8005f52:	bd80      	pop	{r7, pc}
 8005f54:	20000c80 	.word	0x20000c80

08005f58 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8005f58:	b580      	push	{r7, lr}
 8005f5a:	b088      	sub	sp, #32
 8005f5c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8005f5e:	e049      	b.n	8005ff4 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005f60:	4b2e      	ldr	r3, [pc, #184]	; (800601c <prvSwitchTimerLists+0xc4>)
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	68db      	ldr	r3, [r3, #12]
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005f6a:	4b2c      	ldr	r3, [pc, #176]	; (800601c <prvSwitchTimerLists+0xc4>)
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	68db      	ldr	r3, [r3, #12]
 8005f70:	68db      	ldr	r3, [r3, #12]
 8005f72:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005f74:	68fb      	ldr	r3, [r7, #12]
 8005f76:	3304      	adds	r3, #4
 8005f78:	4618      	mov	r0, r3
 8005f7a:	f7fe f895 	bl	80040a8 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005f7e:	68fb      	ldr	r3, [r7, #12]
 8005f80:	6a1b      	ldr	r3, [r3, #32]
 8005f82:	68f8      	ldr	r0, [r7, #12]
 8005f84:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8005f86:	68fb      	ldr	r3, [r7, #12]
 8005f88:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005f8c:	f003 0304 	and.w	r3, r3, #4
 8005f90:	2b00      	cmp	r3, #0
 8005f92:	d02f      	beq.n	8005ff4 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8005f94:	68fb      	ldr	r3, [r7, #12]
 8005f96:	699b      	ldr	r3, [r3, #24]
 8005f98:	693a      	ldr	r2, [r7, #16]
 8005f9a:	4413      	add	r3, r2
 8005f9c:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8005f9e:	68ba      	ldr	r2, [r7, #8]
 8005fa0:	693b      	ldr	r3, [r7, #16]
 8005fa2:	429a      	cmp	r2, r3
 8005fa4:	d90e      	bls.n	8005fc4 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8005fa6:	68fb      	ldr	r3, [r7, #12]
 8005fa8:	68ba      	ldr	r2, [r7, #8]
 8005faa:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8005fac:	68fb      	ldr	r3, [r7, #12]
 8005fae:	68fa      	ldr	r2, [r7, #12]
 8005fb0:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8005fb2:	4b1a      	ldr	r3, [pc, #104]	; (800601c <prvSwitchTimerLists+0xc4>)
 8005fb4:	681a      	ldr	r2, [r3, #0]
 8005fb6:	68fb      	ldr	r3, [r7, #12]
 8005fb8:	3304      	adds	r3, #4
 8005fba:	4619      	mov	r1, r3
 8005fbc:	4610      	mov	r0, r2
 8005fbe:	f7fe f83a 	bl	8004036 <vListInsert>
 8005fc2:	e017      	b.n	8005ff4 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8005fc4:	2300      	movs	r3, #0
 8005fc6:	9300      	str	r3, [sp, #0]
 8005fc8:	2300      	movs	r3, #0
 8005fca:	693a      	ldr	r2, [r7, #16]
 8005fcc:	2100      	movs	r1, #0
 8005fce:	68f8      	ldr	r0, [r7, #12]
 8005fd0:	f7ff fd5e 	bl	8005a90 <xTimerGenericCommand>
 8005fd4:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	2b00      	cmp	r3, #0
 8005fda:	d10b      	bne.n	8005ff4 <prvSwitchTimerLists+0x9c>
 8005fdc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005fe0:	b672      	cpsid	i
 8005fe2:	f383 8811 	msr	BASEPRI, r3
 8005fe6:	f3bf 8f6f 	isb	sy
 8005fea:	f3bf 8f4f 	dsb	sy
 8005fee:	b662      	cpsie	i
 8005ff0:	603b      	str	r3, [r7, #0]
 8005ff2:	e7fe      	b.n	8005ff2 <prvSwitchTimerLists+0x9a>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8005ff4:	4b09      	ldr	r3, [pc, #36]	; (800601c <prvSwitchTimerLists+0xc4>)
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	2b00      	cmp	r3, #0
 8005ffc:	d1b0      	bne.n	8005f60 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8005ffe:	4b07      	ldr	r3, [pc, #28]	; (800601c <prvSwitchTimerLists+0xc4>)
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8006004:	4b06      	ldr	r3, [pc, #24]	; (8006020 <prvSwitchTimerLists+0xc8>)
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	4a04      	ldr	r2, [pc, #16]	; (800601c <prvSwitchTimerLists+0xc4>)
 800600a:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800600c:	4a04      	ldr	r2, [pc, #16]	; (8006020 <prvSwitchTimerLists+0xc8>)
 800600e:	697b      	ldr	r3, [r7, #20]
 8006010:	6013      	str	r3, [r2, #0]
}
 8006012:	bf00      	nop
 8006014:	3718      	adds	r7, #24
 8006016:	46bd      	mov	sp, r7
 8006018:	bd80      	pop	{r7, pc}
 800601a:	bf00      	nop
 800601c:	20000c78 	.word	0x20000c78
 8006020:	20000c7c 	.word	0x20000c7c

08006024 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8006024:	b580      	push	{r7, lr}
 8006026:	b082      	sub	sp, #8
 8006028:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800602a:	f000 f945 	bl	80062b8 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800602e:	4b15      	ldr	r3, [pc, #84]	; (8006084 <prvCheckForValidListAndQueue+0x60>)
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	2b00      	cmp	r3, #0
 8006034:	d120      	bne.n	8006078 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8006036:	4814      	ldr	r0, [pc, #80]	; (8006088 <prvCheckForValidListAndQueue+0x64>)
 8006038:	f7fd ffac 	bl	8003f94 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800603c:	4813      	ldr	r0, [pc, #76]	; (800608c <prvCheckForValidListAndQueue+0x68>)
 800603e:	f7fd ffa9 	bl	8003f94 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8006042:	4b13      	ldr	r3, [pc, #76]	; (8006090 <prvCheckForValidListAndQueue+0x6c>)
 8006044:	4a10      	ldr	r2, [pc, #64]	; (8006088 <prvCheckForValidListAndQueue+0x64>)
 8006046:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8006048:	4b12      	ldr	r3, [pc, #72]	; (8006094 <prvCheckForValidListAndQueue+0x70>)
 800604a:	4a10      	ldr	r2, [pc, #64]	; (800608c <prvCheckForValidListAndQueue+0x68>)
 800604c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800604e:	2300      	movs	r3, #0
 8006050:	9300      	str	r3, [sp, #0]
 8006052:	4b11      	ldr	r3, [pc, #68]	; (8006098 <prvCheckForValidListAndQueue+0x74>)
 8006054:	4a11      	ldr	r2, [pc, #68]	; (800609c <prvCheckForValidListAndQueue+0x78>)
 8006056:	2110      	movs	r1, #16
 8006058:	200a      	movs	r0, #10
 800605a:	f7fe f8b9 	bl	80041d0 <xQueueGenericCreateStatic>
 800605e:	4602      	mov	r2, r0
 8006060:	4b08      	ldr	r3, [pc, #32]	; (8006084 <prvCheckForValidListAndQueue+0x60>)
 8006062:	601a      	str	r2, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8006064:	4b07      	ldr	r3, [pc, #28]	; (8006084 <prvCheckForValidListAndQueue+0x60>)
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	2b00      	cmp	r3, #0
 800606a:	d005      	beq.n	8006078 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800606c:	4b05      	ldr	r3, [pc, #20]	; (8006084 <prvCheckForValidListAndQueue+0x60>)
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	490b      	ldr	r1, [pc, #44]	; (80060a0 <prvCheckForValidListAndQueue+0x7c>)
 8006072:	4618      	mov	r0, r3
 8006074:	f7fe fcdc 	bl	8004a30 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006078:	f000 f950 	bl	800631c <vPortExitCritical>
}
 800607c:	bf00      	nop
 800607e:	46bd      	mov	sp, r7
 8006080:	bd80      	pop	{r7, pc}
 8006082:	bf00      	nop
 8006084:	20000c80 	.word	0x20000c80
 8006088:	20000c50 	.word	0x20000c50
 800608c:	20000c64 	.word	0x20000c64
 8006090:	20000c78 	.word	0x20000c78
 8006094:	20000c7c 	.word	0x20000c7c
 8006098:	20000d2c 	.word	0x20000d2c
 800609c:	20000c8c 	.word	0x20000c8c
 80060a0:	08007744 	.word	0x08007744

080060a4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80060a4:	b480      	push	{r7}
 80060a6:	b085      	sub	sp, #20
 80060a8:	af00      	add	r7, sp, #0
 80060aa:	60f8      	str	r0, [r7, #12]
 80060ac:	60b9      	str	r1, [r7, #8]
 80060ae:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80060b0:	68fb      	ldr	r3, [r7, #12]
 80060b2:	3b04      	subs	r3, #4
 80060b4:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80060b6:	68fb      	ldr	r3, [r7, #12]
 80060b8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80060bc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80060be:	68fb      	ldr	r3, [r7, #12]
 80060c0:	3b04      	subs	r3, #4
 80060c2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80060c4:	68bb      	ldr	r3, [r7, #8]
 80060c6:	f023 0201 	bic.w	r2, r3, #1
 80060ca:	68fb      	ldr	r3, [r7, #12]
 80060cc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80060ce:	68fb      	ldr	r3, [r7, #12]
 80060d0:	3b04      	subs	r3, #4
 80060d2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80060d4:	4a0c      	ldr	r2, [pc, #48]	; (8006108 <pxPortInitialiseStack+0x64>)
 80060d6:	68fb      	ldr	r3, [r7, #12]
 80060d8:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80060da:	68fb      	ldr	r3, [r7, #12]
 80060dc:	3b14      	subs	r3, #20
 80060de:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80060e0:	687a      	ldr	r2, [r7, #4]
 80060e2:	68fb      	ldr	r3, [r7, #12]
 80060e4:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80060e6:	68fb      	ldr	r3, [r7, #12]
 80060e8:	3b04      	subs	r3, #4
 80060ea:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80060ec:	68fb      	ldr	r3, [r7, #12]
 80060ee:	f06f 0202 	mvn.w	r2, #2
 80060f2:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80060f4:	68fb      	ldr	r3, [r7, #12]
 80060f6:	3b20      	subs	r3, #32
 80060f8:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80060fa:	68fb      	ldr	r3, [r7, #12]
}
 80060fc:	4618      	mov	r0, r3
 80060fe:	3714      	adds	r7, #20
 8006100:	46bd      	mov	sp, r7
 8006102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006106:	4770      	bx	lr
 8006108:	0800610d 	.word	0x0800610d

0800610c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800610c:	b480      	push	{r7}
 800610e:	b085      	sub	sp, #20
 8006110:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8006112:	2300      	movs	r3, #0
 8006114:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8006116:	4b13      	ldr	r3, [pc, #76]	; (8006164 <prvTaskExitError+0x58>)
 8006118:	681b      	ldr	r3, [r3, #0]
 800611a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800611e:	d00b      	beq.n	8006138 <prvTaskExitError+0x2c>
 8006120:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006124:	b672      	cpsid	i
 8006126:	f383 8811 	msr	BASEPRI, r3
 800612a:	f3bf 8f6f 	isb	sy
 800612e:	f3bf 8f4f 	dsb	sy
 8006132:	b662      	cpsie	i
 8006134:	60fb      	str	r3, [r7, #12]
 8006136:	e7fe      	b.n	8006136 <prvTaskExitError+0x2a>
 8006138:	f04f 0350 	mov.w	r3, #80	; 0x50
 800613c:	b672      	cpsid	i
 800613e:	f383 8811 	msr	BASEPRI, r3
 8006142:	f3bf 8f6f 	isb	sy
 8006146:	f3bf 8f4f 	dsb	sy
 800614a:	b662      	cpsie	i
 800614c:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800614e:	bf00      	nop
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	2b00      	cmp	r3, #0
 8006154:	d0fc      	beq.n	8006150 <prvTaskExitError+0x44>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8006156:	bf00      	nop
 8006158:	3714      	adds	r7, #20
 800615a:	46bd      	mov	sp, r7
 800615c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006160:	4770      	bx	lr
 8006162:	bf00      	nop
 8006164:	2000000c 	.word	0x2000000c
	...

08006170 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8006170:	4b07      	ldr	r3, [pc, #28]	; (8006190 <pxCurrentTCBConst2>)
 8006172:	6819      	ldr	r1, [r3, #0]
 8006174:	6808      	ldr	r0, [r1, #0]
 8006176:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800617a:	f380 8809 	msr	PSP, r0
 800617e:	f3bf 8f6f 	isb	sy
 8006182:	f04f 0000 	mov.w	r0, #0
 8006186:	f380 8811 	msr	BASEPRI, r0
 800618a:	4770      	bx	lr
 800618c:	f3af 8000 	nop.w

08006190 <pxCurrentTCBConst2>:
 8006190:	20000750 	.word	0x20000750
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8006194:	bf00      	nop
 8006196:	bf00      	nop

08006198 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8006198:	4808      	ldr	r0, [pc, #32]	; (80061bc <prvPortStartFirstTask+0x24>)
 800619a:	6800      	ldr	r0, [r0, #0]
 800619c:	6800      	ldr	r0, [r0, #0]
 800619e:	f380 8808 	msr	MSP, r0
 80061a2:	f04f 0000 	mov.w	r0, #0
 80061a6:	f380 8814 	msr	CONTROL, r0
 80061aa:	b662      	cpsie	i
 80061ac:	b661      	cpsie	f
 80061ae:	f3bf 8f4f 	dsb	sy
 80061b2:	f3bf 8f6f 	isb	sy
 80061b6:	df00      	svc	0
 80061b8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80061ba:	bf00      	nop
 80061bc:	e000ed08 	.word	0xe000ed08

080061c0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80061c0:	b580      	push	{r7, lr}
 80061c2:	b084      	sub	sp, #16
 80061c4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80061c6:	4b36      	ldr	r3, [pc, #216]	; (80062a0 <xPortStartScheduler+0xe0>)
 80061c8:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80061ca:	68fb      	ldr	r3, [r7, #12]
 80061cc:	781b      	ldrb	r3, [r3, #0]
 80061ce:	b2db      	uxtb	r3, r3
 80061d0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80061d2:	68fb      	ldr	r3, [r7, #12]
 80061d4:	22ff      	movs	r2, #255	; 0xff
 80061d6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80061d8:	68fb      	ldr	r3, [r7, #12]
 80061da:	781b      	ldrb	r3, [r3, #0]
 80061dc:	b2db      	uxtb	r3, r3
 80061de:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80061e0:	78fb      	ldrb	r3, [r7, #3]
 80061e2:	b2db      	uxtb	r3, r3
 80061e4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80061e8:	b2da      	uxtb	r2, r3
 80061ea:	4b2e      	ldr	r3, [pc, #184]	; (80062a4 <xPortStartScheduler+0xe4>)
 80061ec:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80061ee:	4b2e      	ldr	r3, [pc, #184]	; (80062a8 <xPortStartScheduler+0xe8>)
 80061f0:	2207      	movs	r2, #7
 80061f2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80061f4:	e009      	b.n	800620a <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 80061f6:	4b2c      	ldr	r3, [pc, #176]	; (80062a8 <xPortStartScheduler+0xe8>)
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	3b01      	subs	r3, #1
 80061fc:	4a2a      	ldr	r2, [pc, #168]	; (80062a8 <xPortStartScheduler+0xe8>)
 80061fe:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8006200:	78fb      	ldrb	r3, [r7, #3]
 8006202:	b2db      	uxtb	r3, r3
 8006204:	005b      	lsls	r3, r3, #1
 8006206:	b2db      	uxtb	r3, r3
 8006208:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800620a:	78fb      	ldrb	r3, [r7, #3]
 800620c:	b2db      	uxtb	r3, r3
 800620e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006212:	2b80      	cmp	r3, #128	; 0x80
 8006214:	d0ef      	beq.n	80061f6 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8006216:	4b24      	ldr	r3, [pc, #144]	; (80062a8 <xPortStartScheduler+0xe8>)
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	f1c3 0307 	rsb	r3, r3, #7
 800621e:	2b04      	cmp	r3, #4
 8006220:	d00b      	beq.n	800623a <xPortStartScheduler+0x7a>
 8006222:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006226:	b672      	cpsid	i
 8006228:	f383 8811 	msr	BASEPRI, r3
 800622c:	f3bf 8f6f 	isb	sy
 8006230:	f3bf 8f4f 	dsb	sy
 8006234:	b662      	cpsie	i
 8006236:	60bb      	str	r3, [r7, #8]
 8006238:	e7fe      	b.n	8006238 <xPortStartScheduler+0x78>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800623a:	4b1b      	ldr	r3, [pc, #108]	; (80062a8 <xPortStartScheduler+0xe8>)
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	021b      	lsls	r3, r3, #8
 8006240:	4a19      	ldr	r2, [pc, #100]	; (80062a8 <xPortStartScheduler+0xe8>)
 8006242:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8006244:	4b18      	ldr	r3, [pc, #96]	; (80062a8 <xPortStartScheduler+0xe8>)
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800624c:	4a16      	ldr	r2, [pc, #88]	; (80062a8 <xPortStartScheduler+0xe8>)
 800624e:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	b2da      	uxtb	r2, r3
 8006254:	68fb      	ldr	r3, [r7, #12]
 8006256:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8006258:	4b14      	ldr	r3, [pc, #80]	; (80062ac <xPortStartScheduler+0xec>)
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	4a13      	ldr	r2, [pc, #76]	; (80062ac <xPortStartScheduler+0xec>)
 800625e:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8006262:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8006264:	4b11      	ldr	r3, [pc, #68]	; (80062ac <xPortStartScheduler+0xec>)
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	4a10      	ldr	r2, [pc, #64]	; (80062ac <xPortStartScheduler+0xec>)
 800626a:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800626e:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8006270:	f000 f8d4 	bl	800641c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8006274:	4b0e      	ldr	r3, [pc, #56]	; (80062b0 <xPortStartScheduler+0xf0>)
 8006276:	2200      	movs	r2, #0
 8006278:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800627a:	f000 f8f3 	bl	8006464 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800627e:	4b0d      	ldr	r3, [pc, #52]	; (80062b4 <xPortStartScheduler+0xf4>)
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	4a0c      	ldr	r2, [pc, #48]	; (80062b4 <xPortStartScheduler+0xf4>)
 8006284:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8006288:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800628a:	f7ff ff85 	bl	8006198 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800628e:	f7ff f865 	bl	800535c <vTaskSwitchContext>
	prvTaskExitError();
 8006292:	f7ff ff3b 	bl	800610c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8006296:	2300      	movs	r3, #0
}
 8006298:	4618      	mov	r0, r3
 800629a:	3710      	adds	r7, #16
 800629c:	46bd      	mov	sp, r7
 800629e:	bd80      	pop	{r7, pc}
 80062a0:	e000e400 	.word	0xe000e400
 80062a4:	20000d7c 	.word	0x20000d7c
 80062a8:	20000d80 	.word	0x20000d80
 80062ac:	e000ed20 	.word	0xe000ed20
 80062b0:	2000000c 	.word	0x2000000c
 80062b4:	e000ef34 	.word	0xe000ef34

080062b8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80062b8:	b480      	push	{r7}
 80062ba:	b083      	sub	sp, #12
 80062bc:	af00      	add	r7, sp, #0
 80062be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062c2:	b672      	cpsid	i
 80062c4:	f383 8811 	msr	BASEPRI, r3
 80062c8:	f3bf 8f6f 	isb	sy
 80062cc:	f3bf 8f4f 	dsb	sy
 80062d0:	b662      	cpsie	i
 80062d2:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80062d4:	4b0f      	ldr	r3, [pc, #60]	; (8006314 <vPortEnterCritical+0x5c>)
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	3301      	adds	r3, #1
 80062da:	4a0e      	ldr	r2, [pc, #56]	; (8006314 <vPortEnterCritical+0x5c>)
 80062dc:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80062de:	4b0d      	ldr	r3, [pc, #52]	; (8006314 <vPortEnterCritical+0x5c>)
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	2b01      	cmp	r3, #1
 80062e4:	d110      	bne.n	8006308 <vPortEnterCritical+0x50>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80062e6:	4b0c      	ldr	r3, [pc, #48]	; (8006318 <vPortEnterCritical+0x60>)
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	b2db      	uxtb	r3, r3
 80062ec:	2b00      	cmp	r3, #0
 80062ee:	d00b      	beq.n	8006308 <vPortEnterCritical+0x50>
 80062f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062f4:	b672      	cpsid	i
 80062f6:	f383 8811 	msr	BASEPRI, r3
 80062fa:	f3bf 8f6f 	isb	sy
 80062fe:	f3bf 8f4f 	dsb	sy
 8006302:	b662      	cpsie	i
 8006304:	603b      	str	r3, [r7, #0]
 8006306:	e7fe      	b.n	8006306 <vPortEnterCritical+0x4e>
	}
}
 8006308:	bf00      	nop
 800630a:	370c      	adds	r7, #12
 800630c:	46bd      	mov	sp, r7
 800630e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006312:	4770      	bx	lr
 8006314:	2000000c 	.word	0x2000000c
 8006318:	e000ed04 	.word	0xe000ed04

0800631c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800631c:	b480      	push	{r7}
 800631e:	b083      	sub	sp, #12
 8006320:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8006322:	4b12      	ldr	r3, [pc, #72]	; (800636c <vPortExitCritical+0x50>)
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	2b00      	cmp	r3, #0
 8006328:	d10b      	bne.n	8006342 <vPortExitCritical+0x26>
 800632a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800632e:	b672      	cpsid	i
 8006330:	f383 8811 	msr	BASEPRI, r3
 8006334:	f3bf 8f6f 	isb	sy
 8006338:	f3bf 8f4f 	dsb	sy
 800633c:	b662      	cpsie	i
 800633e:	607b      	str	r3, [r7, #4]
 8006340:	e7fe      	b.n	8006340 <vPortExitCritical+0x24>
	uxCriticalNesting--;
 8006342:	4b0a      	ldr	r3, [pc, #40]	; (800636c <vPortExitCritical+0x50>)
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	3b01      	subs	r3, #1
 8006348:	4a08      	ldr	r2, [pc, #32]	; (800636c <vPortExitCritical+0x50>)
 800634a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800634c:	4b07      	ldr	r3, [pc, #28]	; (800636c <vPortExitCritical+0x50>)
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	2b00      	cmp	r3, #0
 8006352:	d104      	bne.n	800635e <vPortExitCritical+0x42>
 8006354:	2300      	movs	r3, #0
 8006356:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006358:	683b      	ldr	r3, [r7, #0]
 800635a:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 800635e:	bf00      	nop
 8006360:	370c      	adds	r7, #12
 8006362:	46bd      	mov	sp, r7
 8006364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006368:	4770      	bx	lr
 800636a:	bf00      	nop
 800636c:	2000000c 	.word	0x2000000c

08006370 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8006370:	f3ef 8009 	mrs	r0, PSP
 8006374:	f3bf 8f6f 	isb	sy
 8006378:	4b15      	ldr	r3, [pc, #84]	; (80063d0 <pxCurrentTCBConst>)
 800637a:	681a      	ldr	r2, [r3, #0]
 800637c:	f01e 0f10 	tst.w	lr, #16
 8006380:	bf08      	it	eq
 8006382:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8006386:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800638a:	6010      	str	r0, [r2, #0]
 800638c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8006390:	f04f 0050 	mov.w	r0, #80	; 0x50
 8006394:	b672      	cpsid	i
 8006396:	f380 8811 	msr	BASEPRI, r0
 800639a:	f3bf 8f4f 	dsb	sy
 800639e:	f3bf 8f6f 	isb	sy
 80063a2:	b662      	cpsie	i
 80063a4:	f7fe ffda 	bl	800535c <vTaskSwitchContext>
 80063a8:	f04f 0000 	mov.w	r0, #0
 80063ac:	f380 8811 	msr	BASEPRI, r0
 80063b0:	bc09      	pop	{r0, r3}
 80063b2:	6819      	ldr	r1, [r3, #0]
 80063b4:	6808      	ldr	r0, [r1, #0]
 80063b6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80063ba:	f01e 0f10 	tst.w	lr, #16
 80063be:	bf08      	it	eq
 80063c0:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80063c4:	f380 8809 	msr	PSP, r0
 80063c8:	f3bf 8f6f 	isb	sy
 80063cc:	4770      	bx	lr
 80063ce:	bf00      	nop

080063d0 <pxCurrentTCBConst>:
 80063d0:	20000750 	.word	0x20000750
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80063d4:	bf00      	nop
 80063d6:	bf00      	nop

080063d8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80063d8:	b580      	push	{r7, lr}
 80063da:	b082      	sub	sp, #8
 80063dc:	af00      	add	r7, sp, #0
	__asm volatile
 80063de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063e2:	b672      	cpsid	i
 80063e4:	f383 8811 	msr	BASEPRI, r3
 80063e8:	f3bf 8f6f 	isb	sy
 80063ec:	f3bf 8f4f 	dsb	sy
 80063f0:	b662      	cpsie	i
 80063f2:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80063f4:	f7fe fef8 	bl	80051e8 <xTaskIncrementTick>
 80063f8:	4603      	mov	r3, r0
 80063fa:	2b00      	cmp	r3, #0
 80063fc:	d003      	beq.n	8006406 <SysTick_Handler+0x2e>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80063fe:	4b06      	ldr	r3, [pc, #24]	; (8006418 <SysTick_Handler+0x40>)
 8006400:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006404:	601a      	str	r2, [r3, #0]
 8006406:	2300      	movs	r3, #0
 8006408:	603b      	str	r3, [r7, #0]
	__asm volatile
 800640a:	683b      	ldr	r3, [r7, #0]
 800640c:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 8006410:	bf00      	nop
 8006412:	3708      	adds	r7, #8
 8006414:	46bd      	mov	sp, r7
 8006416:	bd80      	pop	{r7, pc}
 8006418:	e000ed04 	.word	0xe000ed04

0800641c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800641c:	b480      	push	{r7}
 800641e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8006420:	4b0b      	ldr	r3, [pc, #44]	; (8006450 <vPortSetupTimerInterrupt+0x34>)
 8006422:	2200      	movs	r2, #0
 8006424:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8006426:	4b0b      	ldr	r3, [pc, #44]	; (8006454 <vPortSetupTimerInterrupt+0x38>)
 8006428:	2200      	movs	r2, #0
 800642a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800642c:	4b0a      	ldr	r3, [pc, #40]	; (8006458 <vPortSetupTimerInterrupt+0x3c>)
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	4a0a      	ldr	r2, [pc, #40]	; (800645c <vPortSetupTimerInterrupt+0x40>)
 8006432:	fba2 2303 	umull	r2, r3, r2, r3
 8006436:	099b      	lsrs	r3, r3, #6
 8006438:	4a09      	ldr	r2, [pc, #36]	; (8006460 <vPortSetupTimerInterrupt+0x44>)
 800643a:	3b01      	subs	r3, #1
 800643c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800643e:	4b04      	ldr	r3, [pc, #16]	; (8006450 <vPortSetupTimerInterrupt+0x34>)
 8006440:	2207      	movs	r2, #7
 8006442:	601a      	str	r2, [r3, #0]
}
 8006444:	bf00      	nop
 8006446:	46bd      	mov	sp, r7
 8006448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800644c:	4770      	bx	lr
 800644e:	bf00      	nop
 8006450:	e000e010 	.word	0xe000e010
 8006454:	e000e018 	.word	0xe000e018
 8006458:	20000000 	.word	0x20000000
 800645c:	10624dd3 	.word	0x10624dd3
 8006460:	e000e014 	.word	0xe000e014

08006464 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8006464:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8006474 <vPortEnableVFP+0x10>
 8006468:	6801      	ldr	r1, [r0, #0]
 800646a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800646e:	6001      	str	r1, [r0, #0]
 8006470:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8006472:	bf00      	nop
 8006474:	e000ed88 	.word	0xe000ed88

08006478 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8006478:	b480      	push	{r7}
 800647a:	b085      	sub	sp, #20
 800647c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800647e:	f3ef 8305 	mrs	r3, IPSR
 8006482:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8006484:	68fb      	ldr	r3, [r7, #12]
 8006486:	2b0f      	cmp	r3, #15
 8006488:	d915      	bls.n	80064b6 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800648a:	4a18      	ldr	r2, [pc, #96]	; (80064ec <vPortValidateInterruptPriority+0x74>)
 800648c:	68fb      	ldr	r3, [r7, #12]
 800648e:	4413      	add	r3, r2
 8006490:	781b      	ldrb	r3, [r3, #0]
 8006492:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8006494:	4b16      	ldr	r3, [pc, #88]	; (80064f0 <vPortValidateInterruptPriority+0x78>)
 8006496:	781b      	ldrb	r3, [r3, #0]
 8006498:	7afa      	ldrb	r2, [r7, #11]
 800649a:	429a      	cmp	r2, r3
 800649c:	d20b      	bcs.n	80064b6 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800649e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064a2:	b672      	cpsid	i
 80064a4:	f383 8811 	msr	BASEPRI, r3
 80064a8:	f3bf 8f6f 	isb	sy
 80064ac:	f3bf 8f4f 	dsb	sy
 80064b0:	b662      	cpsie	i
 80064b2:	607b      	str	r3, [r7, #4]
 80064b4:	e7fe      	b.n	80064b4 <vPortValidateInterruptPriority+0x3c>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80064b6:	4b0f      	ldr	r3, [pc, #60]	; (80064f4 <vPortValidateInterruptPriority+0x7c>)
 80064b8:	681b      	ldr	r3, [r3, #0]
 80064ba:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80064be:	4b0e      	ldr	r3, [pc, #56]	; (80064f8 <vPortValidateInterruptPriority+0x80>)
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	429a      	cmp	r2, r3
 80064c4:	d90b      	bls.n	80064de <vPortValidateInterruptPriority+0x66>
 80064c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064ca:	b672      	cpsid	i
 80064cc:	f383 8811 	msr	BASEPRI, r3
 80064d0:	f3bf 8f6f 	isb	sy
 80064d4:	f3bf 8f4f 	dsb	sy
 80064d8:	b662      	cpsie	i
 80064da:	603b      	str	r3, [r7, #0]
 80064dc:	e7fe      	b.n	80064dc <vPortValidateInterruptPriority+0x64>
	}
 80064de:	bf00      	nop
 80064e0:	3714      	adds	r7, #20
 80064e2:	46bd      	mov	sp, r7
 80064e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064e8:	4770      	bx	lr
 80064ea:	bf00      	nop
 80064ec:	e000e3f0 	.word	0xe000e3f0
 80064f0:	20000d7c 	.word	0x20000d7c
 80064f4:	e000ed0c 	.word	0xe000ed0c
 80064f8:	20000d80 	.word	0x20000d80

080064fc <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80064fc:	b580      	push	{r7, lr}
 80064fe:	b08a      	sub	sp, #40	; 0x28
 8006500:	af00      	add	r7, sp, #0
 8006502:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8006504:	2300      	movs	r3, #0
 8006506:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8006508:	f7fe fdb2 	bl	8005070 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800650c:	4b5a      	ldr	r3, [pc, #360]	; (8006678 <pvPortMalloc+0x17c>)
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	2b00      	cmp	r3, #0
 8006512:	d101      	bne.n	8006518 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8006514:	f000 f916 	bl	8006744 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8006518:	4b58      	ldr	r3, [pc, #352]	; (800667c <pvPortMalloc+0x180>)
 800651a:	681a      	ldr	r2, [r3, #0]
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	4013      	ands	r3, r2
 8006520:	2b00      	cmp	r3, #0
 8006522:	f040 8090 	bne.w	8006646 <pvPortMalloc+0x14a>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	2b00      	cmp	r3, #0
 800652a:	d01e      	beq.n	800656a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800652c:	2208      	movs	r2, #8
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	4413      	add	r3, r2
 8006532:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	f003 0307 	and.w	r3, r3, #7
 800653a:	2b00      	cmp	r3, #0
 800653c:	d015      	beq.n	800656a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	f023 0307 	bic.w	r3, r3, #7
 8006544:	3308      	adds	r3, #8
 8006546:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	f003 0307 	and.w	r3, r3, #7
 800654e:	2b00      	cmp	r3, #0
 8006550:	d00b      	beq.n	800656a <pvPortMalloc+0x6e>
 8006552:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006556:	b672      	cpsid	i
 8006558:	f383 8811 	msr	BASEPRI, r3
 800655c:	f3bf 8f6f 	isb	sy
 8006560:	f3bf 8f4f 	dsb	sy
 8006564:	b662      	cpsie	i
 8006566:	617b      	str	r3, [r7, #20]
 8006568:	e7fe      	b.n	8006568 <pvPortMalloc+0x6c>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	2b00      	cmp	r3, #0
 800656e:	d06a      	beq.n	8006646 <pvPortMalloc+0x14a>
 8006570:	4b43      	ldr	r3, [pc, #268]	; (8006680 <pvPortMalloc+0x184>)
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	687a      	ldr	r2, [r7, #4]
 8006576:	429a      	cmp	r2, r3
 8006578:	d865      	bhi.n	8006646 <pvPortMalloc+0x14a>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800657a:	4b42      	ldr	r3, [pc, #264]	; (8006684 <pvPortMalloc+0x188>)
 800657c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800657e:	4b41      	ldr	r3, [pc, #260]	; (8006684 <pvPortMalloc+0x188>)
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006584:	e004      	b.n	8006590 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8006586:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006588:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800658a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800658c:	681b      	ldr	r3, [r3, #0]
 800658e:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006590:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006592:	685b      	ldr	r3, [r3, #4]
 8006594:	687a      	ldr	r2, [r7, #4]
 8006596:	429a      	cmp	r2, r3
 8006598:	d903      	bls.n	80065a2 <pvPortMalloc+0xa6>
 800659a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800659c:	681b      	ldr	r3, [r3, #0]
 800659e:	2b00      	cmp	r3, #0
 80065a0:	d1f1      	bne.n	8006586 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80065a2:	4b35      	ldr	r3, [pc, #212]	; (8006678 <pvPortMalloc+0x17c>)
 80065a4:	681b      	ldr	r3, [r3, #0]
 80065a6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80065a8:	429a      	cmp	r2, r3
 80065aa:	d04c      	beq.n	8006646 <pvPortMalloc+0x14a>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80065ac:	6a3b      	ldr	r3, [r7, #32]
 80065ae:	681b      	ldr	r3, [r3, #0]
 80065b0:	2208      	movs	r2, #8
 80065b2:	4413      	add	r3, r2
 80065b4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80065b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065b8:	681a      	ldr	r2, [r3, #0]
 80065ba:	6a3b      	ldr	r3, [r7, #32]
 80065bc:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80065be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065c0:	685a      	ldr	r2, [r3, #4]
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	1ad2      	subs	r2, r2, r3
 80065c6:	2308      	movs	r3, #8
 80065c8:	005b      	lsls	r3, r3, #1
 80065ca:	429a      	cmp	r2, r3
 80065cc:	d920      	bls.n	8006610 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80065ce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	4413      	add	r3, r2
 80065d4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80065d6:	69bb      	ldr	r3, [r7, #24]
 80065d8:	f003 0307 	and.w	r3, r3, #7
 80065dc:	2b00      	cmp	r3, #0
 80065de:	d00b      	beq.n	80065f8 <pvPortMalloc+0xfc>
 80065e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065e4:	b672      	cpsid	i
 80065e6:	f383 8811 	msr	BASEPRI, r3
 80065ea:	f3bf 8f6f 	isb	sy
 80065ee:	f3bf 8f4f 	dsb	sy
 80065f2:	b662      	cpsie	i
 80065f4:	613b      	str	r3, [r7, #16]
 80065f6:	e7fe      	b.n	80065f6 <pvPortMalloc+0xfa>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80065f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065fa:	685a      	ldr	r2, [r3, #4]
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	1ad2      	subs	r2, r2, r3
 8006600:	69bb      	ldr	r3, [r7, #24]
 8006602:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8006604:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006606:	687a      	ldr	r2, [r7, #4]
 8006608:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800660a:	69b8      	ldr	r0, [r7, #24]
 800660c:	f000 f8fc 	bl	8006808 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8006610:	4b1b      	ldr	r3, [pc, #108]	; (8006680 <pvPortMalloc+0x184>)
 8006612:	681a      	ldr	r2, [r3, #0]
 8006614:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006616:	685b      	ldr	r3, [r3, #4]
 8006618:	1ad3      	subs	r3, r2, r3
 800661a:	4a19      	ldr	r2, [pc, #100]	; (8006680 <pvPortMalloc+0x184>)
 800661c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800661e:	4b18      	ldr	r3, [pc, #96]	; (8006680 <pvPortMalloc+0x184>)
 8006620:	681a      	ldr	r2, [r3, #0]
 8006622:	4b19      	ldr	r3, [pc, #100]	; (8006688 <pvPortMalloc+0x18c>)
 8006624:	681b      	ldr	r3, [r3, #0]
 8006626:	429a      	cmp	r2, r3
 8006628:	d203      	bcs.n	8006632 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800662a:	4b15      	ldr	r3, [pc, #84]	; (8006680 <pvPortMalloc+0x184>)
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	4a16      	ldr	r2, [pc, #88]	; (8006688 <pvPortMalloc+0x18c>)
 8006630:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8006632:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006634:	685a      	ldr	r2, [r3, #4]
 8006636:	4b11      	ldr	r3, [pc, #68]	; (800667c <pvPortMalloc+0x180>)
 8006638:	681b      	ldr	r3, [r3, #0]
 800663a:	431a      	orrs	r2, r3
 800663c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800663e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8006640:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006642:	2200      	movs	r2, #0
 8006644:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8006646:	f7fe fd21 	bl	800508c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800664a:	69fb      	ldr	r3, [r7, #28]
 800664c:	f003 0307 	and.w	r3, r3, #7
 8006650:	2b00      	cmp	r3, #0
 8006652:	d00b      	beq.n	800666c <pvPortMalloc+0x170>
 8006654:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006658:	b672      	cpsid	i
 800665a:	f383 8811 	msr	BASEPRI, r3
 800665e:	f3bf 8f6f 	isb	sy
 8006662:	f3bf 8f4f 	dsb	sy
 8006666:	b662      	cpsie	i
 8006668:	60fb      	str	r3, [r7, #12]
 800666a:	e7fe      	b.n	800666a <pvPortMalloc+0x16e>
	return pvReturn;
 800666c:	69fb      	ldr	r3, [r7, #28]
}
 800666e:	4618      	mov	r0, r3
 8006670:	3728      	adds	r7, #40	; 0x28
 8006672:	46bd      	mov	sp, r7
 8006674:	bd80      	pop	{r7, pc}
 8006676:	bf00      	nop
 8006678:	2000498c 	.word	0x2000498c
 800667c:	20004998 	.word	0x20004998
 8006680:	20004990 	.word	0x20004990
 8006684:	20004984 	.word	0x20004984
 8006688:	20004994 	.word	0x20004994

0800668c <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800668c:	b580      	push	{r7, lr}
 800668e:	b086      	sub	sp, #24
 8006690:	af00      	add	r7, sp, #0
 8006692:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	2b00      	cmp	r3, #0
 800669c:	d04a      	beq.n	8006734 <vPortFree+0xa8>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800669e:	2308      	movs	r3, #8
 80066a0:	425b      	negs	r3, r3
 80066a2:	697a      	ldr	r2, [r7, #20]
 80066a4:	4413      	add	r3, r2
 80066a6:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80066a8:	697b      	ldr	r3, [r7, #20]
 80066aa:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80066ac:	693b      	ldr	r3, [r7, #16]
 80066ae:	685a      	ldr	r2, [r3, #4]
 80066b0:	4b22      	ldr	r3, [pc, #136]	; (800673c <vPortFree+0xb0>)
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	4013      	ands	r3, r2
 80066b6:	2b00      	cmp	r3, #0
 80066b8:	d10b      	bne.n	80066d2 <vPortFree+0x46>
 80066ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066be:	b672      	cpsid	i
 80066c0:	f383 8811 	msr	BASEPRI, r3
 80066c4:	f3bf 8f6f 	isb	sy
 80066c8:	f3bf 8f4f 	dsb	sy
 80066cc:	b662      	cpsie	i
 80066ce:	60fb      	str	r3, [r7, #12]
 80066d0:	e7fe      	b.n	80066d0 <vPortFree+0x44>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80066d2:	693b      	ldr	r3, [r7, #16]
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	2b00      	cmp	r3, #0
 80066d8:	d00b      	beq.n	80066f2 <vPortFree+0x66>
 80066da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066de:	b672      	cpsid	i
 80066e0:	f383 8811 	msr	BASEPRI, r3
 80066e4:	f3bf 8f6f 	isb	sy
 80066e8:	f3bf 8f4f 	dsb	sy
 80066ec:	b662      	cpsie	i
 80066ee:	60bb      	str	r3, [r7, #8]
 80066f0:	e7fe      	b.n	80066f0 <vPortFree+0x64>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80066f2:	693b      	ldr	r3, [r7, #16]
 80066f4:	685a      	ldr	r2, [r3, #4]
 80066f6:	4b11      	ldr	r3, [pc, #68]	; (800673c <vPortFree+0xb0>)
 80066f8:	681b      	ldr	r3, [r3, #0]
 80066fa:	4013      	ands	r3, r2
 80066fc:	2b00      	cmp	r3, #0
 80066fe:	d019      	beq.n	8006734 <vPortFree+0xa8>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8006700:	693b      	ldr	r3, [r7, #16]
 8006702:	681b      	ldr	r3, [r3, #0]
 8006704:	2b00      	cmp	r3, #0
 8006706:	d115      	bne.n	8006734 <vPortFree+0xa8>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8006708:	693b      	ldr	r3, [r7, #16]
 800670a:	685a      	ldr	r2, [r3, #4]
 800670c:	4b0b      	ldr	r3, [pc, #44]	; (800673c <vPortFree+0xb0>)
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	43db      	mvns	r3, r3
 8006712:	401a      	ands	r2, r3
 8006714:	693b      	ldr	r3, [r7, #16]
 8006716:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8006718:	f7fe fcaa 	bl	8005070 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800671c:	693b      	ldr	r3, [r7, #16]
 800671e:	685a      	ldr	r2, [r3, #4]
 8006720:	4b07      	ldr	r3, [pc, #28]	; (8006740 <vPortFree+0xb4>)
 8006722:	681b      	ldr	r3, [r3, #0]
 8006724:	4413      	add	r3, r2
 8006726:	4a06      	ldr	r2, [pc, #24]	; (8006740 <vPortFree+0xb4>)
 8006728:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800672a:	6938      	ldr	r0, [r7, #16]
 800672c:	f000 f86c 	bl	8006808 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8006730:	f7fe fcac 	bl	800508c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8006734:	bf00      	nop
 8006736:	3718      	adds	r7, #24
 8006738:	46bd      	mov	sp, r7
 800673a:	bd80      	pop	{r7, pc}
 800673c:	20004998 	.word	0x20004998
 8006740:	20004990 	.word	0x20004990

08006744 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8006744:	b480      	push	{r7}
 8006746:	b085      	sub	sp, #20
 8006748:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800674a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800674e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8006750:	4b27      	ldr	r3, [pc, #156]	; (80067f0 <prvHeapInit+0xac>)
 8006752:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8006754:	68fb      	ldr	r3, [r7, #12]
 8006756:	f003 0307 	and.w	r3, r3, #7
 800675a:	2b00      	cmp	r3, #0
 800675c:	d00c      	beq.n	8006778 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800675e:	68fb      	ldr	r3, [r7, #12]
 8006760:	3307      	adds	r3, #7
 8006762:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006764:	68fb      	ldr	r3, [r7, #12]
 8006766:	f023 0307 	bic.w	r3, r3, #7
 800676a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800676c:	68ba      	ldr	r2, [r7, #8]
 800676e:	68fb      	ldr	r3, [r7, #12]
 8006770:	1ad3      	subs	r3, r2, r3
 8006772:	4a1f      	ldr	r2, [pc, #124]	; (80067f0 <prvHeapInit+0xac>)
 8006774:	4413      	add	r3, r2
 8006776:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8006778:	68fb      	ldr	r3, [r7, #12]
 800677a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800677c:	4a1d      	ldr	r2, [pc, #116]	; (80067f4 <prvHeapInit+0xb0>)
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8006782:	4b1c      	ldr	r3, [pc, #112]	; (80067f4 <prvHeapInit+0xb0>)
 8006784:	2200      	movs	r2, #0
 8006786:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	68ba      	ldr	r2, [r7, #8]
 800678c:	4413      	add	r3, r2
 800678e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8006790:	2208      	movs	r2, #8
 8006792:	68fb      	ldr	r3, [r7, #12]
 8006794:	1a9b      	subs	r3, r3, r2
 8006796:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006798:	68fb      	ldr	r3, [r7, #12]
 800679a:	f023 0307 	bic.w	r3, r3, #7
 800679e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80067a0:	68fb      	ldr	r3, [r7, #12]
 80067a2:	4a15      	ldr	r2, [pc, #84]	; (80067f8 <prvHeapInit+0xb4>)
 80067a4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80067a6:	4b14      	ldr	r3, [pc, #80]	; (80067f8 <prvHeapInit+0xb4>)
 80067a8:	681b      	ldr	r3, [r3, #0]
 80067aa:	2200      	movs	r2, #0
 80067ac:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80067ae:	4b12      	ldr	r3, [pc, #72]	; (80067f8 <prvHeapInit+0xb4>)
 80067b0:	681b      	ldr	r3, [r3, #0]
 80067b2:	2200      	movs	r2, #0
 80067b4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80067ba:	683b      	ldr	r3, [r7, #0]
 80067bc:	68fa      	ldr	r2, [r7, #12]
 80067be:	1ad2      	subs	r2, r2, r3
 80067c0:	683b      	ldr	r3, [r7, #0]
 80067c2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80067c4:	4b0c      	ldr	r3, [pc, #48]	; (80067f8 <prvHeapInit+0xb4>)
 80067c6:	681a      	ldr	r2, [r3, #0]
 80067c8:	683b      	ldr	r3, [r7, #0]
 80067ca:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80067cc:	683b      	ldr	r3, [r7, #0]
 80067ce:	685b      	ldr	r3, [r3, #4]
 80067d0:	4a0a      	ldr	r2, [pc, #40]	; (80067fc <prvHeapInit+0xb8>)
 80067d2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80067d4:	683b      	ldr	r3, [r7, #0]
 80067d6:	685b      	ldr	r3, [r3, #4]
 80067d8:	4a09      	ldr	r2, [pc, #36]	; (8006800 <prvHeapInit+0xbc>)
 80067da:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80067dc:	4b09      	ldr	r3, [pc, #36]	; (8006804 <prvHeapInit+0xc0>)
 80067de:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80067e2:	601a      	str	r2, [r3, #0]
}
 80067e4:	bf00      	nop
 80067e6:	3714      	adds	r7, #20
 80067e8:	46bd      	mov	sp, r7
 80067ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067ee:	4770      	bx	lr
 80067f0:	20000d84 	.word	0x20000d84
 80067f4:	20004984 	.word	0x20004984
 80067f8:	2000498c 	.word	0x2000498c
 80067fc:	20004994 	.word	0x20004994
 8006800:	20004990 	.word	0x20004990
 8006804:	20004998 	.word	0x20004998

08006808 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8006808:	b480      	push	{r7}
 800680a:	b085      	sub	sp, #20
 800680c:	af00      	add	r7, sp, #0
 800680e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8006810:	4b28      	ldr	r3, [pc, #160]	; (80068b4 <prvInsertBlockIntoFreeList+0xac>)
 8006812:	60fb      	str	r3, [r7, #12]
 8006814:	e002      	b.n	800681c <prvInsertBlockIntoFreeList+0x14>
 8006816:	68fb      	ldr	r3, [r7, #12]
 8006818:	681b      	ldr	r3, [r3, #0]
 800681a:	60fb      	str	r3, [r7, #12]
 800681c:	68fb      	ldr	r3, [r7, #12]
 800681e:	681b      	ldr	r3, [r3, #0]
 8006820:	687a      	ldr	r2, [r7, #4]
 8006822:	429a      	cmp	r2, r3
 8006824:	d8f7      	bhi.n	8006816 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8006826:	68fb      	ldr	r3, [r7, #12]
 8006828:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800682a:	68fb      	ldr	r3, [r7, #12]
 800682c:	685b      	ldr	r3, [r3, #4]
 800682e:	68ba      	ldr	r2, [r7, #8]
 8006830:	4413      	add	r3, r2
 8006832:	687a      	ldr	r2, [r7, #4]
 8006834:	429a      	cmp	r2, r3
 8006836:	d108      	bne.n	800684a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8006838:	68fb      	ldr	r3, [r7, #12]
 800683a:	685a      	ldr	r2, [r3, #4]
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	685b      	ldr	r3, [r3, #4]
 8006840:	441a      	add	r2, r3
 8006842:	68fb      	ldr	r3, [r7, #12]
 8006844:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8006846:	68fb      	ldr	r3, [r7, #12]
 8006848:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	685b      	ldr	r3, [r3, #4]
 8006852:	68ba      	ldr	r2, [r7, #8]
 8006854:	441a      	add	r2, r3
 8006856:	68fb      	ldr	r3, [r7, #12]
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	429a      	cmp	r2, r3
 800685c:	d118      	bne.n	8006890 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800685e:	68fb      	ldr	r3, [r7, #12]
 8006860:	681a      	ldr	r2, [r3, #0]
 8006862:	4b15      	ldr	r3, [pc, #84]	; (80068b8 <prvInsertBlockIntoFreeList+0xb0>)
 8006864:	681b      	ldr	r3, [r3, #0]
 8006866:	429a      	cmp	r2, r3
 8006868:	d00d      	beq.n	8006886 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	685a      	ldr	r2, [r3, #4]
 800686e:	68fb      	ldr	r3, [r7, #12]
 8006870:	681b      	ldr	r3, [r3, #0]
 8006872:	685b      	ldr	r3, [r3, #4]
 8006874:	441a      	add	r2, r3
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800687a:	68fb      	ldr	r3, [r7, #12]
 800687c:	681b      	ldr	r3, [r3, #0]
 800687e:	681a      	ldr	r2, [r3, #0]
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	601a      	str	r2, [r3, #0]
 8006884:	e008      	b.n	8006898 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8006886:	4b0c      	ldr	r3, [pc, #48]	; (80068b8 <prvInsertBlockIntoFreeList+0xb0>)
 8006888:	681a      	ldr	r2, [r3, #0]
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	601a      	str	r2, [r3, #0]
 800688e:	e003      	b.n	8006898 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8006890:	68fb      	ldr	r3, [r7, #12]
 8006892:	681a      	ldr	r2, [r3, #0]
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8006898:	68fa      	ldr	r2, [r7, #12]
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	429a      	cmp	r2, r3
 800689e:	d002      	beq.n	80068a6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80068a0:	68fb      	ldr	r3, [r7, #12]
 80068a2:	687a      	ldr	r2, [r7, #4]
 80068a4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80068a6:	bf00      	nop
 80068a8:	3714      	adds	r7, #20
 80068aa:	46bd      	mov	sp, r7
 80068ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068b0:	4770      	bx	lr
 80068b2:	bf00      	nop
 80068b4:	20004984 	.word	0x20004984
 80068b8:	2000498c 	.word	0x2000498c

080068bc <__errno>:
 80068bc:	4b01      	ldr	r3, [pc, #4]	; (80068c4 <__errno+0x8>)
 80068be:	6818      	ldr	r0, [r3, #0]
 80068c0:	4770      	bx	lr
 80068c2:	bf00      	nop
 80068c4:	20000010 	.word	0x20000010

080068c8 <__libc_init_array>:
 80068c8:	b570      	push	{r4, r5, r6, lr}
 80068ca:	4e0d      	ldr	r6, [pc, #52]	; (8006900 <__libc_init_array+0x38>)
 80068cc:	4c0d      	ldr	r4, [pc, #52]	; (8006904 <__libc_init_array+0x3c>)
 80068ce:	1ba4      	subs	r4, r4, r6
 80068d0:	10a4      	asrs	r4, r4, #2
 80068d2:	2500      	movs	r5, #0
 80068d4:	42a5      	cmp	r5, r4
 80068d6:	d109      	bne.n	80068ec <__libc_init_array+0x24>
 80068d8:	4e0b      	ldr	r6, [pc, #44]	; (8006908 <__libc_init_array+0x40>)
 80068da:	4c0c      	ldr	r4, [pc, #48]	; (800690c <__libc_init_array+0x44>)
 80068dc:	f000 ff10 	bl	8007700 <_init>
 80068e0:	1ba4      	subs	r4, r4, r6
 80068e2:	10a4      	asrs	r4, r4, #2
 80068e4:	2500      	movs	r5, #0
 80068e6:	42a5      	cmp	r5, r4
 80068e8:	d105      	bne.n	80068f6 <__libc_init_array+0x2e>
 80068ea:	bd70      	pop	{r4, r5, r6, pc}
 80068ec:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80068f0:	4798      	blx	r3
 80068f2:	3501      	adds	r5, #1
 80068f4:	e7ee      	b.n	80068d4 <__libc_init_array+0xc>
 80068f6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80068fa:	4798      	blx	r3
 80068fc:	3501      	adds	r5, #1
 80068fe:	e7f2      	b.n	80068e6 <__libc_init_array+0x1e>
 8006900:	08007828 	.word	0x08007828
 8006904:	08007828 	.word	0x08007828
 8006908:	08007828 	.word	0x08007828
 800690c:	0800782c 	.word	0x0800782c

08006910 <memcpy>:
 8006910:	b510      	push	{r4, lr}
 8006912:	1e43      	subs	r3, r0, #1
 8006914:	440a      	add	r2, r1
 8006916:	4291      	cmp	r1, r2
 8006918:	d100      	bne.n	800691c <memcpy+0xc>
 800691a:	bd10      	pop	{r4, pc}
 800691c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006920:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006924:	e7f7      	b.n	8006916 <memcpy+0x6>

08006926 <memset>:
 8006926:	4402      	add	r2, r0
 8006928:	4603      	mov	r3, r0
 800692a:	4293      	cmp	r3, r2
 800692c:	d100      	bne.n	8006930 <memset+0xa>
 800692e:	4770      	bx	lr
 8006930:	f803 1b01 	strb.w	r1, [r3], #1
 8006934:	e7f9      	b.n	800692a <memset+0x4>
	...

08006938 <iprintf>:
 8006938:	b40f      	push	{r0, r1, r2, r3}
 800693a:	4b0a      	ldr	r3, [pc, #40]	; (8006964 <iprintf+0x2c>)
 800693c:	b513      	push	{r0, r1, r4, lr}
 800693e:	681c      	ldr	r4, [r3, #0]
 8006940:	b124      	cbz	r4, 800694c <iprintf+0x14>
 8006942:	69a3      	ldr	r3, [r4, #24]
 8006944:	b913      	cbnz	r3, 800694c <iprintf+0x14>
 8006946:	4620      	mov	r0, r4
 8006948:	f000 f9be 	bl	8006cc8 <__sinit>
 800694c:	ab05      	add	r3, sp, #20
 800694e:	9a04      	ldr	r2, [sp, #16]
 8006950:	68a1      	ldr	r1, [r4, #8]
 8006952:	9301      	str	r3, [sp, #4]
 8006954:	4620      	mov	r0, r4
 8006956:	f000 fb77 	bl	8007048 <_vfiprintf_r>
 800695a:	b002      	add	sp, #8
 800695c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006960:	b004      	add	sp, #16
 8006962:	4770      	bx	lr
 8006964:	20000010 	.word	0x20000010

08006968 <__swbuf_r>:
 8006968:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800696a:	460e      	mov	r6, r1
 800696c:	4614      	mov	r4, r2
 800696e:	4605      	mov	r5, r0
 8006970:	b118      	cbz	r0, 800697a <__swbuf_r+0x12>
 8006972:	6983      	ldr	r3, [r0, #24]
 8006974:	b90b      	cbnz	r3, 800697a <__swbuf_r+0x12>
 8006976:	f000 f9a7 	bl	8006cc8 <__sinit>
 800697a:	4b21      	ldr	r3, [pc, #132]	; (8006a00 <__swbuf_r+0x98>)
 800697c:	429c      	cmp	r4, r3
 800697e:	d12a      	bne.n	80069d6 <__swbuf_r+0x6e>
 8006980:	686c      	ldr	r4, [r5, #4]
 8006982:	69a3      	ldr	r3, [r4, #24]
 8006984:	60a3      	str	r3, [r4, #8]
 8006986:	89a3      	ldrh	r3, [r4, #12]
 8006988:	071a      	lsls	r2, r3, #28
 800698a:	d52e      	bpl.n	80069ea <__swbuf_r+0x82>
 800698c:	6923      	ldr	r3, [r4, #16]
 800698e:	b363      	cbz	r3, 80069ea <__swbuf_r+0x82>
 8006990:	6923      	ldr	r3, [r4, #16]
 8006992:	6820      	ldr	r0, [r4, #0]
 8006994:	1ac0      	subs	r0, r0, r3
 8006996:	6963      	ldr	r3, [r4, #20]
 8006998:	b2f6      	uxtb	r6, r6
 800699a:	4283      	cmp	r3, r0
 800699c:	4637      	mov	r7, r6
 800699e:	dc04      	bgt.n	80069aa <__swbuf_r+0x42>
 80069a0:	4621      	mov	r1, r4
 80069a2:	4628      	mov	r0, r5
 80069a4:	f000 f926 	bl	8006bf4 <_fflush_r>
 80069a8:	bb28      	cbnz	r0, 80069f6 <__swbuf_r+0x8e>
 80069aa:	68a3      	ldr	r3, [r4, #8]
 80069ac:	3b01      	subs	r3, #1
 80069ae:	60a3      	str	r3, [r4, #8]
 80069b0:	6823      	ldr	r3, [r4, #0]
 80069b2:	1c5a      	adds	r2, r3, #1
 80069b4:	6022      	str	r2, [r4, #0]
 80069b6:	701e      	strb	r6, [r3, #0]
 80069b8:	6963      	ldr	r3, [r4, #20]
 80069ba:	3001      	adds	r0, #1
 80069bc:	4283      	cmp	r3, r0
 80069be:	d004      	beq.n	80069ca <__swbuf_r+0x62>
 80069c0:	89a3      	ldrh	r3, [r4, #12]
 80069c2:	07db      	lsls	r3, r3, #31
 80069c4:	d519      	bpl.n	80069fa <__swbuf_r+0x92>
 80069c6:	2e0a      	cmp	r6, #10
 80069c8:	d117      	bne.n	80069fa <__swbuf_r+0x92>
 80069ca:	4621      	mov	r1, r4
 80069cc:	4628      	mov	r0, r5
 80069ce:	f000 f911 	bl	8006bf4 <_fflush_r>
 80069d2:	b190      	cbz	r0, 80069fa <__swbuf_r+0x92>
 80069d4:	e00f      	b.n	80069f6 <__swbuf_r+0x8e>
 80069d6:	4b0b      	ldr	r3, [pc, #44]	; (8006a04 <__swbuf_r+0x9c>)
 80069d8:	429c      	cmp	r4, r3
 80069da:	d101      	bne.n	80069e0 <__swbuf_r+0x78>
 80069dc:	68ac      	ldr	r4, [r5, #8]
 80069de:	e7d0      	b.n	8006982 <__swbuf_r+0x1a>
 80069e0:	4b09      	ldr	r3, [pc, #36]	; (8006a08 <__swbuf_r+0xa0>)
 80069e2:	429c      	cmp	r4, r3
 80069e4:	bf08      	it	eq
 80069e6:	68ec      	ldreq	r4, [r5, #12]
 80069e8:	e7cb      	b.n	8006982 <__swbuf_r+0x1a>
 80069ea:	4621      	mov	r1, r4
 80069ec:	4628      	mov	r0, r5
 80069ee:	f000 f80d 	bl	8006a0c <__swsetup_r>
 80069f2:	2800      	cmp	r0, #0
 80069f4:	d0cc      	beq.n	8006990 <__swbuf_r+0x28>
 80069f6:	f04f 37ff 	mov.w	r7, #4294967295
 80069fa:	4638      	mov	r0, r7
 80069fc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80069fe:	bf00      	nop
 8006a00:	080077ac 	.word	0x080077ac
 8006a04:	080077cc 	.word	0x080077cc
 8006a08:	0800778c 	.word	0x0800778c

08006a0c <__swsetup_r>:
 8006a0c:	4b32      	ldr	r3, [pc, #200]	; (8006ad8 <__swsetup_r+0xcc>)
 8006a0e:	b570      	push	{r4, r5, r6, lr}
 8006a10:	681d      	ldr	r5, [r3, #0]
 8006a12:	4606      	mov	r6, r0
 8006a14:	460c      	mov	r4, r1
 8006a16:	b125      	cbz	r5, 8006a22 <__swsetup_r+0x16>
 8006a18:	69ab      	ldr	r3, [r5, #24]
 8006a1a:	b913      	cbnz	r3, 8006a22 <__swsetup_r+0x16>
 8006a1c:	4628      	mov	r0, r5
 8006a1e:	f000 f953 	bl	8006cc8 <__sinit>
 8006a22:	4b2e      	ldr	r3, [pc, #184]	; (8006adc <__swsetup_r+0xd0>)
 8006a24:	429c      	cmp	r4, r3
 8006a26:	d10f      	bne.n	8006a48 <__swsetup_r+0x3c>
 8006a28:	686c      	ldr	r4, [r5, #4]
 8006a2a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006a2e:	b29a      	uxth	r2, r3
 8006a30:	0715      	lsls	r5, r2, #28
 8006a32:	d42c      	bmi.n	8006a8e <__swsetup_r+0x82>
 8006a34:	06d0      	lsls	r0, r2, #27
 8006a36:	d411      	bmi.n	8006a5c <__swsetup_r+0x50>
 8006a38:	2209      	movs	r2, #9
 8006a3a:	6032      	str	r2, [r6, #0]
 8006a3c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006a40:	81a3      	strh	r3, [r4, #12]
 8006a42:	f04f 30ff 	mov.w	r0, #4294967295
 8006a46:	e03e      	b.n	8006ac6 <__swsetup_r+0xba>
 8006a48:	4b25      	ldr	r3, [pc, #148]	; (8006ae0 <__swsetup_r+0xd4>)
 8006a4a:	429c      	cmp	r4, r3
 8006a4c:	d101      	bne.n	8006a52 <__swsetup_r+0x46>
 8006a4e:	68ac      	ldr	r4, [r5, #8]
 8006a50:	e7eb      	b.n	8006a2a <__swsetup_r+0x1e>
 8006a52:	4b24      	ldr	r3, [pc, #144]	; (8006ae4 <__swsetup_r+0xd8>)
 8006a54:	429c      	cmp	r4, r3
 8006a56:	bf08      	it	eq
 8006a58:	68ec      	ldreq	r4, [r5, #12]
 8006a5a:	e7e6      	b.n	8006a2a <__swsetup_r+0x1e>
 8006a5c:	0751      	lsls	r1, r2, #29
 8006a5e:	d512      	bpl.n	8006a86 <__swsetup_r+0x7a>
 8006a60:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006a62:	b141      	cbz	r1, 8006a76 <__swsetup_r+0x6a>
 8006a64:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006a68:	4299      	cmp	r1, r3
 8006a6a:	d002      	beq.n	8006a72 <__swsetup_r+0x66>
 8006a6c:	4630      	mov	r0, r6
 8006a6e:	f000 fa19 	bl	8006ea4 <_free_r>
 8006a72:	2300      	movs	r3, #0
 8006a74:	6363      	str	r3, [r4, #52]	; 0x34
 8006a76:	89a3      	ldrh	r3, [r4, #12]
 8006a78:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8006a7c:	81a3      	strh	r3, [r4, #12]
 8006a7e:	2300      	movs	r3, #0
 8006a80:	6063      	str	r3, [r4, #4]
 8006a82:	6923      	ldr	r3, [r4, #16]
 8006a84:	6023      	str	r3, [r4, #0]
 8006a86:	89a3      	ldrh	r3, [r4, #12]
 8006a88:	f043 0308 	orr.w	r3, r3, #8
 8006a8c:	81a3      	strh	r3, [r4, #12]
 8006a8e:	6923      	ldr	r3, [r4, #16]
 8006a90:	b94b      	cbnz	r3, 8006aa6 <__swsetup_r+0x9a>
 8006a92:	89a3      	ldrh	r3, [r4, #12]
 8006a94:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8006a98:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006a9c:	d003      	beq.n	8006aa6 <__swsetup_r+0x9a>
 8006a9e:	4621      	mov	r1, r4
 8006aa0:	4630      	mov	r0, r6
 8006aa2:	f000 f9bf 	bl	8006e24 <__smakebuf_r>
 8006aa6:	89a2      	ldrh	r2, [r4, #12]
 8006aa8:	f012 0301 	ands.w	r3, r2, #1
 8006aac:	d00c      	beq.n	8006ac8 <__swsetup_r+0xbc>
 8006aae:	2300      	movs	r3, #0
 8006ab0:	60a3      	str	r3, [r4, #8]
 8006ab2:	6963      	ldr	r3, [r4, #20]
 8006ab4:	425b      	negs	r3, r3
 8006ab6:	61a3      	str	r3, [r4, #24]
 8006ab8:	6923      	ldr	r3, [r4, #16]
 8006aba:	b953      	cbnz	r3, 8006ad2 <__swsetup_r+0xc6>
 8006abc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006ac0:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8006ac4:	d1ba      	bne.n	8006a3c <__swsetup_r+0x30>
 8006ac6:	bd70      	pop	{r4, r5, r6, pc}
 8006ac8:	0792      	lsls	r2, r2, #30
 8006aca:	bf58      	it	pl
 8006acc:	6963      	ldrpl	r3, [r4, #20]
 8006ace:	60a3      	str	r3, [r4, #8]
 8006ad0:	e7f2      	b.n	8006ab8 <__swsetup_r+0xac>
 8006ad2:	2000      	movs	r0, #0
 8006ad4:	e7f7      	b.n	8006ac6 <__swsetup_r+0xba>
 8006ad6:	bf00      	nop
 8006ad8:	20000010 	.word	0x20000010
 8006adc:	080077ac 	.word	0x080077ac
 8006ae0:	080077cc 	.word	0x080077cc
 8006ae4:	0800778c 	.word	0x0800778c

08006ae8 <__sflush_r>:
 8006ae8:	898a      	ldrh	r2, [r1, #12]
 8006aea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006aee:	4605      	mov	r5, r0
 8006af0:	0710      	lsls	r0, r2, #28
 8006af2:	460c      	mov	r4, r1
 8006af4:	d458      	bmi.n	8006ba8 <__sflush_r+0xc0>
 8006af6:	684b      	ldr	r3, [r1, #4]
 8006af8:	2b00      	cmp	r3, #0
 8006afa:	dc05      	bgt.n	8006b08 <__sflush_r+0x20>
 8006afc:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8006afe:	2b00      	cmp	r3, #0
 8006b00:	dc02      	bgt.n	8006b08 <__sflush_r+0x20>
 8006b02:	2000      	movs	r0, #0
 8006b04:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006b08:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006b0a:	2e00      	cmp	r6, #0
 8006b0c:	d0f9      	beq.n	8006b02 <__sflush_r+0x1a>
 8006b0e:	2300      	movs	r3, #0
 8006b10:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8006b14:	682f      	ldr	r7, [r5, #0]
 8006b16:	6a21      	ldr	r1, [r4, #32]
 8006b18:	602b      	str	r3, [r5, #0]
 8006b1a:	d032      	beq.n	8006b82 <__sflush_r+0x9a>
 8006b1c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8006b1e:	89a3      	ldrh	r3, [r4, #12]
 8006b20:	075a      	lsls	r2, r3, #29
 8006b22:	d505      	bpl.n	8006b30 <__sflush_r+0x48>
 8006b24:	6863      	ldr	r3, [r4, #4]
 8006b26:	1ac0      	subs	r0, r0, r3
 8006b28:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8006b2a:	b10b      	cbz	r3, 8006b30 <__sflush_r+0x48>
 8006b2c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006b2e:	1ac0      	subs	r0, r0, r3
 8006b30:	2300      	movs	r3, #0
 8006b32:	4602      	mov	r2, r0
 8006b34:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006b36:	6a21      	ldr	r1, [r4, #32]
 8006b38:	4628      	mov	r0, r5
 8006b3a:	47b0      	blx	r6
 8006b3c:	1c43      	adds	r3, r0, #1
 8006b3e:	89a3      	ldrh	r3, [r4, #12]
 8006b40:	d106      	bne.n	8006b50 <__sflush_r+0x68>
 8006b42:	6829      	ldr	r1, [r5, #0]
 8006b44:	291d      	cmp	r1, #29
 8006b46:	d848      	bhi.n	8006bda <__sflush_r+0xf2>
 8006b48:	4a29      	ldr	r2, [pc, #164]	; (8006bf0 <__sflush_r+0x108>)
 8006b4a:	40ca      	lsrs	r2, r1
 8006b4c:	07d6      	lsls	r6, r2, #31
 8006b4e:	d544      	bpl.n	8006bda <__sflush_r+0xf2>
 8006b50:	2200      	movs	r2, #0
 8006b52:	6062      	str	r2, [r4, #4]
 8006b54:	04d9      	lsls	r1, r3, #19
 8006b56:	6922      	ldr	r2, [r4, #16]
 8006b58:	6022      	str	r2, [r4, #0]
 8006b5a:	d504      	bpl.n	8006b66 <__sflush_r+0x7e>
 8006b5c:	1c42      	adds	r2, r0, #1
 8006b5e:	d101      	bne.n	8006b64 <__sflush_r+0x7c>
 8006b60:	682b      	ldr	r3, [r5, #0]
 8006b62:	b903      	cbnz	r3, 8006b66 <__sflush_r+0x7e>
 8006b64:	6560      	str	r0, [r4, #84]	; 0x54
 8006b66:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006b68:	602f      	str	r7, [r5, #0]
 8006b6a:	2900      	cmp	r1, #0
 8006b6c:	d0c9      	beq.n	8006b02 <__sflush_r+0x1a>
 8006b6e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006b72:	4299      	cmp	r1, r3
 8006b74:	d002      	beq.n	8006b7c <__sflush_r+0x94>
 8006b76:	4628      	mov	r0, r5
 8006b78:	f000 f994 	bl	8006ea4 <_free_r>
 8006b7c:	2000      	movs	r0, #0
 8006b7e:	6360      	str	r0, [r4, #52]	; 0x34
 8006b80:	e7c0      	b.n	8006b04 <__sflush_r+0x1c>
 8006b82:	2301      	movs	r3, #1
 8006b84:	4628      	mov	r0, r5
 8006b86:	47b0      	blx	r6
 8006b88:	1c41      	adds	r1, r0, #1
 8006b8a:	d1c8      	bne.n	8006b1e <__sflush_r+0x36>
 8006b8c:	682b      	ldr	r3, [r5, #0]
 8006b8e:	2b00      	cmp	r3, #0
 8006b90:	d0c5      	beq.n	8006b1e <__sflush_r+0x36>
 8006b92:	2b1d      	cmp	r3, #29
 8006b94:	d001      	beq.n	8006b9a <__sflush_r+0xb2>
 8006b96:	2b16      	cmp	r3, #22
 8006b98:	d101      	bne.n	8006b9e <__sflush_r+0xb6>
 8006b9a:	602f      	str	r7, [r5, #0]
 8006b9c:	e7b1      	b.n	8006b02 <__sflush_r+0x1a>
 8006b9e:	89a3      	ldrh	r3, [r4, #12]
 8006ba0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006ba4:	81a3      	strh	r3, [r4, #12]
 8006ba6:	e7ad      	b.n	8006b04 <__sflush_r+0x1c>
 8006ba8:	690f      	ldr	r7, [r1, #16]
 8006baa:	2f00      	cmp	r7, #0
 8006bac:	d0a9      	beq.n	8006b02 <__sflush_r+0x1a>
 8006bae:	0793      	lsls	r3, r2, #30
 8006bb0:	680e      	ldr	r6, [r1, #0]
 8006bb2:	bf08      	it	eq
 8006bb4:	694b      	ldreq	r3, [r1, #20]
 8006bb6:	600f      	str	r7, [r1, #0]
 8006bb8:	bf18      	it	ne
 8006bba:	2300      	movne	r3, #0
 8006bbc:	eba6 0807 	sub.w	r8, r6, r7
 8006bc0:	608b      	str	r3, [r1, #8]
 8006bc2:	f1b8 0f00 	cmp.w	r8, #0
 8006bc6:	dd9c      	ble.n	8006b02 <__sflush_r+0x1a>
 8006bc8:	4643      	mov	r3, r8
 8006bca:	463a      	mov	r2, r7
 8006bcc:	6a21      	ldr	r1, [r4, #32]
 8006bce:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8006bd0:	4628      	mov	r0, r5
 8006bd2:	47b0      	blx	r6
 8006bd4:	2800      	cmp	r0, #0
 8006bd6:	dc06      	bgt.n	8006be6 <__sflush_r+0xfe>
 8006bd8:	89a3      	ldrh	r3, [r4, #12]
 8006bda:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006bde:	81a3      	strh	r3, [r4, #12]
 8006be0:	f04f 30ff 	mov.w	r0, #4294967295
 8006be4:	e78e      	b.n	8006b04 <__sflush_r+0x1c>
 8006be6:	4407      	add	r7, r0
 8006be8:	eba8 0800 	sub.w	r8, r8, r0
 8006bec:	e7e9      	b.n	8006bc2 <__sflush_r+0xda>
 8006bee:	bf00      	nop
 8006bf0:	20400001 	.word	0x20400001

08006bf4 <_fflush_r>:
 8006bf4:	b538      	push	{r3, r4, r5, lr}
 8006bf6:	690b      	ldr	r3, [r1, #16]
 8006bf8:	4605      	mov	r5, r0
 8006bfa:	460c      	mov	r4, r1
 8006bfc:	b1db      	cbz	r3, 8006c36 <_fflush_r+0x42>
 8006bfe:	b118      	cbz	r0, 8006c08 <_fflush_r+0x14>
 8006c00:	6983      	ldr	r3, [r0, #24]
 8006c02:	b90b      	cbnz	r3, 8006c08 <_fflush_r+0x14>
 8006c04:	f000 f860 	bl	8006cc8 <__sinit>
 8006c08:	4b0c      	ldr	r3, [pc, #48]	; (8006c3c <_fflush_r+0x48>)
 8006c0a:	429c      	cmp	r4, r3
 8006c0c:	d109      	bne.n	8006c22 <_fflush_r+0x2e>
 8006c0e:	686c      	ldr	r4, [r5, #4]
 8006c10:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006c14:	b17b      	cbz	r3, 8006c36 <_fflush_r+0x42>
 8006c16:	4621      	mov	r1, r4
 8006c18:	4628      	mov	r0, r5
 8006c1a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006c1e:	f7ff bf63 	b.w	8006ae8 <__sflush_r>
 8006c22:	4b07      	ldr	r3, [pc, #28]	; (8006c40 <_fflush_r+0x4c>)
 8006c24:	429c      	cmp	r4, r3
 8006c26:	d101      	bne.n	8006c2c <_fflush_r+0x38>
 8006c28:	68ac      	ldr	r4, [r5, #8]
 8006c2a:	e7f1      	b.n	8006c10 <_fflush_r+0x1c>
 8006c2c:	4b05      	ldr	r3, [pc, #20]	; (8006c44 <_fflush_r+0x50>)
 8006c2e:	429c      	cmp	r4, r3
 8006c30:	bf08      	it	eq
 8006c32:	68ec      	ldreq	r4, [r5, #12]
 8006c34:	e7ec      	b.n	8006c10 <_fflush_r+0x1c>
 8006c36:	2000      	movs	r0, #0
 8006c38:	bd38      	pop	{r3, r4, r5, pc}
 8006c3a:	bf00      	nop
 8006c3c:	080077ac 	.word	0x080077ac
 8006c40:	080077cc 	.word	0x080077cc
 8006c44:	0800778c 	.word	0x0800778c

08006c48 <std>:
 8006c48:	2300      	movs	r3, #0
 8006c4a:	b510      	push	{r4, lr}
 8006c4c:	4604      	mov	r4, r0
 8006c4e:	e9c0 3300 	strd	r3, r3, [r0]
 8006c52:	6083      	str	r3, [r0, #8]
 8006c54:	8181      	strh	r1, [r0, #12]
 8006c56:	6643      	str	r3, [r0, #100]	; 0x64
 8006c58:	81c2      	strh	r2, [r0, #14]
 8006c5a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006c5e:	6183      	str	r3, [r0, #24]
 8006c60:	4619      	mov	r1, r3
 8006c62:	2208      	movs	r2, #8
 8006c64:	305c      	adds	r0, #92	; 0x5c
 8006c66:	f7ff fe5e 	bl	8006926 <memset>
 8006c6a:	4b05      	ldr	r3, [pc, #20]	; (8006c80 <std+0x38>)
 8006c6c:	6263      	str	r3, [r4, #36]	; 0x24
 8006c6e:	4b05      	ldr	r3, [pc, #20]	; (8006c84 <std+0x3c>)
 8006c70:	62a3      	str	r3, [r4, #40]	; 0x28
 8006c72:	4b05      	ldr	r3, [pc, #20]	; (8006c88 <std+0x40>)
 8006c74:	62e3      	str	r3, [r4, #44]	; 0x2c
 8006c76:	4b05      	ldr	r3, [pc, #20]	; (8006c8c <std+0x44>)
 8006c78:	6224      	str	r4, [r4, #32]
 8006c7a:	6323      	str	r3, [r4, #48]	; 0x30
 8006c7c:	bd10      	pop	{r4, pc}
 8006c7e:	bf00      	nop
 8006c80:	080075a5 	.word	0x080075a5
 8006c84:	080075c7 	.word	0x080075c7
 8006c88:	080075ff 	.word	0x080075ff
 8006c8c:	08007623 	.word	0x08007623

08006c90 <_cleanup_r>:
 8006c90:	4901      	ldr	r1, [pc, #4]	; (8006c98 <_cleanup_r+0x8>)
 8006c92:	f000 b885 	b.w	8006da0 <_fwalk_reent>
 8006c96:	bf00      	nop
 8006c98:	08006bf5 	.word	0x08006bf5

08006c9c <__sfmoreglue>:
 8006c9c:	b570      	push	{r4, r5, r6, lr}
 8006c9e:	1e4a      	subs	r2, r1, #1
 8006ca0:	2568      	movs	r5, #104	; 0x68
 8006ca2:	4355      	muls	r5, r2
 8006ca4:	460e      	mov	r6, r1
 8006ca6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8006caa:	f000 f949 	bl	8006f40 <_malloc_r>
 8006cae:	4604      	mov	r4, r0
 8006cb0:	b140      	cbz	r0, 8006cc4 <__sfmoreglue+0x28>
 8006cb2:	2100      	movs	r1, #0
 8006cb4:	e9c0 1600 	strd	r1, r6, [r0]
 8006cb8:	300c      	adds	r0, #12
 8006cba:	60a0      	str	r0, [r4, #8]
 8006cbc:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8006cc0:	f7ff fe31 	bl	8006926 <memset>
 8006cc4:	4620      	mov	r0, r4
 8006cc6:	bd70      	pop	{r4, r5, r6, pc}

08006cc8 <__sinit>:
 8006cc8:	6983      	ldr	r3, [r0, #24]
 8006cca:	b510      	push	{r4, lr}
 8006ccc:	4604      	mov	r4, r0
 8006cce:	bb33      	cbnz	r3, 8006d1e <__sinit+0x56>
 8006cd0:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8006cd4:	6503      	str	r3, [r0, #80]	; 0x50
 8006cd6:	4b12      	ldr	r3, [pc, #72]	; (8006d20 <__sinit+0x58>)
 8006cd8:	4a12      	ldr	r2, [pc, #72]	; (8006d24 <__sinit+0x5c>)
 8006cda:	681b      	ldr	r3, [r3, #0]
 8006cdc:	6282      	str	r2, [r0, #40]	; 0x28
 8006cde:	4298      	cmp	r0, r3
 8006ce0:	bf04      	itt	eq
 8006ce2:	2301      	moveq	r3, #1
 8006ce4:	6183      	streq	r3, [r0, #24]
 8006ce6:	f000 f81f 	bl	8006d28 <__sfp>
 8006cea:	6060      	str	r0, [r4, #4]
 8006cec:	4620      	mov	r0, r4
 8006cee:	f000 f81b 	bl	8006d28 <__sfp>
 8006cf2:	60a0      	str	r0, [r4, #8]
 8006cf4:	4620      	mov	r0, r4
 8006cf6:	f000 f817 	bl	8006d28 <__sfp>
 8006cfa:	2200      	movs	r2, #0
 8006cfc:	60e0      	str	r0, [r4, #12]
 8006cfe:	2104      	movs	r1, #4
 8006d00:	6860      	ldr	r0, [r4, #4]
 8006d02:	f7ff ffa1 	bl	8006c48 <std>
 8006d06:	2201      	movs	r2, #1
 8006d08:	2109      	movs	r1, #9
 8006d0a:	68a0      	ldr	r0, [r4, #8]
 8006d0c:	f7ff ff9c 	bl	8006c48 <std>
 8006d10:	2202      	movs	r2, #2
 8006d12:	2112      	movs	r1, #18
 8006d14:	68e0      	ldr	r0, [r4, #12]
 8006d16:	f7ff ff97 	bl	8006c48 <std>
 8006d1a:	2301      	movs	r3, #1
 8006d1c:	61a3      	str	r3, [r4, #24]
 8006d1e:	bd10      	pop	{r4, pc}
 8006d20:	08007788 	.word	0x08007788
 8006d24:	08006c91 	.word	0x08006c91

08006d28 <__sfp>:
 8006d28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006d2a:	4b1b      	ldr	r3, [pc, #108]	; (8006d98 <__sfp+0x70>)
 8006d2c:	681e      	ldr	r6, [r3, #0]
 8006d2e:	69b3      	ldr	r3, [r6, #24]
 8006d30:	4607      	mov	r7, r0
 8006d32:	b913      	cbnz	r3, 8006d3a <__sfp+0x12>
 8006d34:	4630      	mov	r0, r6
 8006d36:	f7ff ffc7 	bl	8006cc8 <__sinit>
 8006d3a:	3648      	adds	r6, #72	; 0x48
 8006d3c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8006d40:	3b01      	subs	r3, #1
 8006d42:	d503      	bpl.n	8006d4c <__sfp+0x24>
 8006d44:	6833      	ldr	r3, [r6, #0]
 8006d46:	b133      	cbz	r3, 8006d56 <__sfp+0x2e>
 8006d48:	6836      	ldr	r6, [r6, #0]
 8006d4a:	e7f7      	b.n	8006d3c <__sfp+0x14>
 8006d4c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8006d50:	b16d      	cbz	r5, 8006d6e <__sfp+0x46>
 8006d52:	3468      	adds	r4, #104	; 0x68
 8006d54:	e7f4      	b.n	8006d40 <__sfp+0x18>
 8006d56:	2104      	movs	r1, #4
 8006d58:	4638      	mov	r0, r7
 8006d5a:	f7ff ff9f 	bl	8006c9c <__sfmoreglue>
 8006d5e:	6030      	str	r0, [r6, #0]
 8006d60:	2800      	cmp	r0, #0
 8006d62:	d1f1      	bne.n	8006d48 <__sfp+0x20>
 8006d64:	230c      	movs	r3, #12
 8006d66:	603b      	str	r3, [r7, #0]
 8006d68:	4604      	mov	r4, r0
 8006d6a:	4620      	mov	r0, r4
 8006d6c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006d6e:	4b0b      	ldr	r3, [pc, #44]	; (8006d9c <__sfp+0x74>)
 8006d70:	6665      	str	r5, [r4, #100]	; 0x64
 8006d72:	e9c4 5500 	strd	r5, r5, [r4]
 8006d76:	60a5      	str	r5, [r4, #8]
 8006d78:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8006d7c:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8006d80:	2208      	movs	r2, #8
 8006d82:	4629      	mov	r1, r5
 8006d84:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8006d88:	f7ff fdcd 	bl	8006926 <memset>
 8006d8c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8006d90:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8006d94:	e7e9      	b.n	8006d6a <__sfp+0x42>
 8006d96:	bf00      	nop
 8006d98:	08007788 	.word	0x08007788
 8006d9c:	ffff0001 	.word	0xffff0001

08006da0 <_fwalk_reent>:
 8006da0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006da4:	4680      	mov	r8, r0
 8006da6:	4689      	mov	r9, r1
 8006da8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8006dac:	2600      	movs	r6, #0
 8006dae:	b914      	cbnz	r4, 8006db6 <_fwalk_reent+0x16>
 8006db0:	4630      	mov	r0, r6
 8006db2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006db6:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 8006dba:	3f01      	subs	r7, #1
 8006dbc:	d501      	bpl.n	8006dc2 <_fwalk_reent+0x22>
 8006dbe:	6824      	ldr	r4, [r4, #0]
 8006dc0:	e7f5      	b.n	8006dae <_fwalk_reent+0xe>
 8006dc2:	89ab      	ldrh	r3, [r5, #12]
 8006dc4:	2b01      	cmp	r3, #1
 8006dc6:	d907      	bls.n	8006dd8 <_fwalk_reent+0x38>
 8006dc8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006dcc:	3301      	adds	r3, #1
 8006dce:	d003      	beq.n	8006dd8 <_fwalk_reent+0x38>
 8006dd0:	4629      	mov	r1, r5
 8006dd2:	4640      	mov	r0, r8
 8006dd4:	47c8      	blx	r9
 8006dd6:	4306      	orrs	r6, r0
 8006dd8:	3568      	adds	r5, #104	; 0x68
 8006dda:	e7ee      	b.n	8006dba <_fwalk_reent+0x1a>

08006ddc <__swhatbuf_r>:
 8006ddc:	b570      	push	{r4, r5, r6, lr}
 8006dde:	460e      	mov	r6, r1
 8006de0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006de4:	2900      	cmp	r1, #0
 8006de6:	b096      	sub	sp, #88	; 0x58
 8006de8:	4614      	mov	r4, r2
 8006dea:	461d      	mov	r5, r3
 8006dec:	da07      	bge.n	8006dfe <__swhatbuf_r+0x22>
 8006dee:	2300      	movs	r3, #0
 8006df0:	602b      	str	r3, [r5, #0]
 8006df2:	89b3      	ldrh	r3, [r6, #12]
 8006df4:	061a      	lsls	r2, r3, #24
 8006df6:	d410      	bmi.n	8006e1a <__swhatbuf_r+0x3e>
 8006df8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006dfc:	e00e      	b.n	8006e1c <__swhatbuf_r+0x40>
 8006dfe:	466a      	mov	r2, sp
 8006e00:	f000 fc36 	bl	8007670 <_fstat_r>
 8006e04:	2800      	cmp	r0, #0
 8006e06:	dbf2      	blt.n	8006dee <__swhatbuf_r+0x12>
 8006e08:	9a01      	ldr	r2, [sp, #4]
 8006e0a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8006e0e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8006e12:	425a      	negs	r2, r3
 8006e14:	415a      	adcs	r2, r3
 8006e16:	602a      	str	r2, [r5, #0]
 8006e18:	e7ee      	b.n	8006df8 <__swhatbuf_r+0x1c>
 8006e1a:	2340      	movs	r3, #64	; 0x40
 8006e1c:	2000      	movs	r0, #0
 8006e1e:	6023      	str	r3, [r4, #0]
 8006e20:	b016      	add	sp, #88	; 0x58
 8006e22:	bd70      	pop	{r4, r5, r6, pc}

08006e24 <__smakebuf_r>:
 8006e24:	898b      	ldrh	r3, [r1, #12]
 8006e26:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8006e28:	079d      	lsls	r5, r3, #30
 8006e2a:	4606      	mov	r6, r0
 8006e2c:	460c      	mov	r4, r1
 8006e2e:	d507      	bpl.n	8006e40 <__smakebuf_r+0x1c>
 8006e30:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8006e34:	6023      	str	r3, [r4, #0]
 8006e36:	6123      	str	r3, [r4, #16]
 8006e38:	2301      	movs	r3, #1
 8006e3a:	6163      	str	r3, [r4, #20]
 8006e3c:	b002      	add	sp, #8
 8006e3e:	bd70      	pop	{r4, r5, r6, pc}
 8006e40:	ab01      	add	r3, sp, #4
 8006e42:	466a      	mov	r2, sp
 8006e44:	f7ff ffca 	bl	8006ddc <__swhatbuf_r>
 8006e48:	9900      	ldr	r1, [sp, #0]
 8006e4a:	4605      	mov	r5, r0
 8006e4c:	4630      	mov	r0, r6
 8006e4e:	f000 f877 	bl	8006f40 <_malloc_r>
 8006e52:	b948      	cbnz	r0, 8006e68 <__smakebuf_r+0x44>
 8006e54:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006e58:	059a      	lsls	r2, r3, #22
 8006e5a:	d4ef      	bmi.n	8006e3c <__smakebuf_r+0x18>
 8006e5c:	f023 0303 	bic.w	r3, r3, #3
 8006e60:	f043 0302 	orr.w	r3, r3, #2
 8006e64:	81a3      	strh	r3, [r4, #12]
 8006e66:	e7e3      	b.n	8006e30 <__smakebuf_r+0xc>
 8006e68:	4b0d      	ldr	r3, [pc, #52]	; (8006ea0 <__smakebuf_r+0x7c>)
 8006e6a:	62b3      	str	r3, [r6, #40]	; 0x28
 8006e6c:	89a3      	ldrh	r3, [r4, #12]
 8006e6e:	6020      	str	r0, [r4, #0]
 8006e70:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006e74:	81a3      	strh	r3, [r4, #12]
 8006e76:	9b00      	ldr	r3, [sp, #0]
 8006e78:	6163      	str	r3, [r4, #20]
 8006e7a:	9b01      	ldr	r3, [sp, #4]
 8006e7c:	6120      	str	r0, [r4, #16]
 8006e7e:	b15b      	cbz	r3, 8006e98 <__smakebuf_r+0x74>
 8006e80:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006e84:	4630      	mov	r0, r6
 8006e86:	f000 fc05 	bl	8007694 <_isatty_r>
 8006e8a:	b128      	cbz	r0, 8006e98 <__smakebuf_r+0x74>
 8006e8c:	89a3      	ldrh	r3, [r4, #12]
 8006e8e:	f023 0303 	bic.w	r3, r3, #3
 8006e92:	f043 0301 	orr.w	r3, r3, #1
 8006e96:	81a3      	strh	r3, [r4, #12]
 8006e98:	89a3      	ldrh	r3, [r4, #12]
 8006e9a:	431d      	orrs	r5, r3
 8006e9c:	81a5      	strh	r5, [r4, #12]
 8006e9e:	e7cd      	b.n	8006e3c <__smakebuf_r+0x18>
 8006ea0:	08006c91 	.word	0x08006c91

08006ea4 <_free_r>:
 8006ea4:	b538      	push	{r3, r4, r5, lr}
 8006ea6:	4605      	mov	r5, r0
 8006ea8:	2900      	cmp	r1, #0
 8006eaa:	d045      	beq.n	8006f38 <_free_r+0x94>
 8006eac:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006eb0:	1f0c      	subs	r4, r1, #4
 8006eb2:	2b00      	cmp	r3, #0
 8006eb4:	bfb8      	it	lt
 8006eb6:	18e4      	addlt	r4, r4, r3
 8006eb8:	f000 fc0e 	bl	80076d8 <__malloc_lock>
 8006ebc:	4a1f      	ldr	r2, [pc, #124]	; (8006f3c <_free_r+0x98>)
 8006ebe:	6813      	ldr	r3, [r2, #0]
 8006ec0:	4610      	mov	r0, r2
 8006ec2:	b933      	cbnz	r3, 8006ed2 <_free_r+0x2e>
 8006ec4:	6063      	str	r3, [r4, #4]
 8006ec6:	6014      	str	r4, [r2, #0]
 8006ec8:	4628      	mov	r0, r5
 8006eca:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006ece:	f000 bc04 	b.w	80076da <__malloc_unlock>
 8006ed2:	42a3      	cmp	r3, r4
 8006ed4:	d90c      	bls.n	8006ef0 <_free_r+0x4c>
 8006ed6:	6821      	ldr	r1, [r4, #0]
 8006ed8:	1862      	adds	r2, r4, r1
 8006eda:	4293      	cmp	r3, r2
 8006edc:	bf04      	itt	eq
 8006ede:	681a      	ldreq	r2, [r3, #0]
 8006ee0:	685b      	ldreq	r3, [r3, #4]
 8006ee2:	6063      	str	r3, [r4, #4]
 8006ee4:	bf04      	itt	eq
 8006ee6:	1852      	addeq	r2, r2, r1
 8006ee8:	6022      	streq	r2, [r4, #0]
 8006eea:	6004      	str	r4, [r0, #0]
 8006eec:	e7ec      	b.n	8006ec8 <_free_r+0x24>
 8006eee:	4613      	mov	r3, r2
 8006ef0:	685a      	ldr	r2, [r3, #4]
 8006ef2:	b10a      	cbz	r2, 8006ef8 <_free_r+0x54>
 8006ef4:	42a2      	cmp	r2, r4
 8006ef6:	d9fa      	bls.n	8006eee <_free_r+0x4a>
 8006ef8:	6819      	ldr	r1, [r3, #0]
 8006efa:	1858      	adds	r0, r3, r1
 8006efc:	42a0      	cmp	r0, r4
 8006efe:	d10b      	bne.n	8006f18 <_free_r+0x74>
 8006f00:	6820      	ldr	r0, [r4, #0]
 8006f02:	4401      	add	r1, r0
 8006f04:	1858      	adds	r0, r3, r1
 8006f06:	4282      	cmp	r2, r0
 8006f08:	6019      	str	r1, [r3, #0]
 8006f0a:	d1dd      	bne.n	8006ec8 <_free_r+0x24>
 8006f0c:	6810      	ldr	r0, [r2, #0]
 8006f0e:	6852      	ldr	r2, [r2, #4]
 8006f10:	605a      	str	r2, [r3, #4]
 8006f12:	4401      	add	r1, r0
 8006f14:	6019      	str	r1, [r3, #0]
 8006f16:	e7d7      	b.n	8006ec8 <_free_r+0x24>
 8006f18:	d902      	bls.n	8006f20 <_free_r+0x7c>
 8006f1a:	230c      	movs	r3, #12
 8006f1c:	602b      	str	r3, [r5, #0]
 8006f1e:	e7d3      	b.n	8006ec8 <_free_r+0x24>
 8006f20:	6820      	ldr	r0, [r4, #0]
 8006f22:	1821      	adds	r1, r4, r0
 8006f24:	428a      	cmp	r2, r1
 8006f26:	bf04      	itt	eq
 8006f28:	6811      	ldreq	r1, [r2, #0]
 8006f2a:	6852      	ldreq	r2, [r2, #4]
 8006f2c:	6062      	str	r2, [r4, #4]
 8006f2e:	bf04      	itt	eq
 8006f30:	1809      	addeq	r1, r1, r0
 8006f32:	6021      	streq	r1, [r4, #0]
 8006f34:	605c      	str	r4, [r3, #4]
 8006f36:	e7c7      	b.n	8006ec8 <_free_r+0x24>
 8006f38:	bd38      	pop	{r3, r4, r5, pc}
 8006f3a:	bf00      	nop
 8006f3c:	2000499c 	.word	0x2000499c

08006f40 <_malloc_r>:
 8006f40:	b570      	push	{r4, r5, r6, lr}
 8006f42:	1ccd      	adds	r5, r1, #3
 8006f44:	f025 0503 	bic.w	r5, r5, #3
 8006f48:	3508      	adds	r5, #8
 8006f4a:	2d0c      	cmp	r5, #12
 8006f4c:	bf38      	it	cc
 8006f4e:	250c      	movcc	r5, #12
 8006f50:	2d00      	cmp	r5, #0
 8006f52:	4606      	mov	r6, r0
 8006f54:	db01      	blt.n	8006f5a <_malloc_r+0x1a>
 8006f56:	42a9      	cmp	r1, r5
 8006f58:	d903      	bls.n	8006f62 <_malloc_r+0x22>
 8006f5a:	230c      	movs	r3, #12
 8006f5c:	6033      	str	r3, [r6, #0]
 8006f5e:	2000      	movs	r0, #0
 8006f60:	bd70      	pop	{r4, r5, r6, pc}
 8006f62:	f000 fbb9 	bl	80076d8 <__malloc_lock>
 8006f66:	4a21      	ldr	r2, [pc, #132]	; (8006fec <_malloc_r+0xac>)
 8006f68:	6814      	ldr	r4, [r2, #0]
 8006f6a:	4621      	mov	r1, r4
 8006f6c:	b991      	cbnz	r1, 8006f94 <_malloc_r+0x54>
 8006f6e:	4c20      	ldr	r4, [pc, #128]	; (8006ff0 <_malloc_r+0xb0>)
 8006f70:	6823      	ldr	r3, [r4, #0]
 8006f72:	b91b      	cbnz	r3, 8006f7c <_malloc_r+0x3c>
 8006f74:	4630      	mov	r0, r6
 8006f76:	f000 fb05 	bl	8007584 <_sbrk_r>
 8006f7a:	6020      	str	r0, [r4, #0]
 8006f7c:	4629      	mov	r1, r5
 8006f7e:	4630      	mov	r0, r6
 8006f80:	f000 fb00 	bl	8007584 <_sbrk_r>
 8006f84:	1c43      	adds	r3, r0, #1
 8006f86:	d124      	bne.n	8006fd2 <_malloc_r+0x92>
 8006f88:	230c      	movs	r3, #12
 8006f8a:	6033      	str	r3, [r6, #0]
 8006f8c:	4630      	mov	r0, r6
 8006f8e:	f000 fba4 	bl	80076da <__malloc_unlock>
 8006f92:	e7e4      	b.n	8006f5e <_malloc_r+0x1e>
 8006f94:	680b      	ldr	r3, [r1, #0]
 8006f96:	1b5b      	subs	r3, r3, r5
 8006f98:	d418      	bmi.n	8006fcc <_malloc_r+0x8c>
 8006f9a:	2b0b      	cmp	r3, #11
 8006f9c:	d90f      	bls.n	8006fbe <_malloc_r+0x7e>
 8006f9e:	600b      	str	r3, [r1, #0]
 8006fa0:	50cd      	str	r5, [r1, r3]
 8006fa2:	18cc      	adds	r4, r1, r3
 8006fa4:	4630      	mov	r0, r6
 8006fa6:	f000 fb98 	bl	80076da <__malloc_unlock>
 8006faa:	f104 000b 	add.w	r0, r4, #11
 8006fae:	1d23      	adds	r3, r4, #4
 8006fb0:	f020 0007 	bic.w	r0, r0, #7
 8006fb4:	1ac3      	subs	r3, r0, r3
 8006fb6:	d0d3      	beq.n	8006f60 <_malloc_r+0x20>
 8006fb8:	425a      	negs	r2, r3
 8006fba:	50e2      	str	r2, [r4, r3]
 8006fbc:	e7d0      	b.n	8006f60 <_malloc_r+0x20>
 8006fbe:	428c      	cmp	r4, r1
 8006fc0:	684b      	ldr	r3, [r1, #4]
 8006fc2:	bf16      	itet	ne
 8006fc4:	6063      	strne	r3, [r4, #4]
 8006fc6:	6013      	streq	r3, [r2, #0]
 8006fc8:	460c      	movne	r4, r1
 8006fca:	e7eb      	b.n	8006fa4 <_malloc_r+0x64>
 8006fcc:	460c      	mov	r4, r1
 8006fce:	6849      	ldr	r1, [r1, #4]
 8006fd0:	e7cc      	b.n	8006f6c <_malloc_r+0x2c>
 8006fd2:	1cc4      	adds	r4, r0, #3
 8006fd4:	f024 0403 	bic.w	r4, r4, #3
 8006fd8:	42a0      	cmp	r0, r4
 8006fda:	d005      	beq.n	8006fe8 <_malloc_r+0xa8>
 8006fdc:	1a21      	subs	r1, r4, r0
 8006fde:	4630      	mov	r0, r6
 8006fe0:	f000 fad0 	bl	8007584 <_sbrk_r>
 8006fe4:	3001      	adds	r0, #1
 8006fe6:	d0cf      	beq.n	8006f88 <_malloc_r+0x48>
 8006fe8:	6025      	str	r5, [r4, #0]
 8006fea:	e7db      	b.n	8006fa4 <_malloc_r+0x64>
 8006fec:	2000499c 	.word	0x2000499c
 8006ff0:	200049a0 	.word	0x200049a0

08006ff4 <__sfputc_r>:
 8006ff4:	6893      	ldr	r3, [r2, #8]
 8006ff6:	3b01      	subs	r3, #1
 8006ff8:	2b00      	cmp	r3, #0
 8006ffa:	b410      	push	{r4}
 8006ffc:	6093      	str	r3, [r2, #8]
 8006ffe:	da08      	bge.n	8007012 <__sfputc_r+0x1e>
 8007000:	6994      	ldr	r4, [r2, #24]
 8007002:	42a3      	cmp	r3, r4
 8007004:	db01      	blt.n	800700a <__sfputc_r+0x16>
 8007006:	290a      	cmp	r1, #10
 8007008:	d103      	bne.n	8007012 <__sfputc_r+0x1e>
 800700a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800700e:	f7ff bcab 	b.w	8006968 <__swbuf_r>
 8007012:	6813      	ldr	r3, [r2, #0]
 8007014:	1c58      	adds	r0, r3, #1
 8007016:	6010      	str	r0, [r2, #0]
 8007018:	7019      	strb	r1, [r3, #0]
 800701a:	4608      	mov	r0, r1
 800701c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007020:	4770      	bx	lr

08007022 <__sfputs_r>:
 8007022:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007024:	4606      	mov	r6, r0
 8007026:	460f      	mov	r7, r1
 8007028:	4614      	mov	r4, r2
 800702a:	18d5      	adds	r5, r2, r3
 800702c:	42ac      	cmp	r4, r5
 800702e:	d101      	bne.n	8007034 <__sfputs_r+0x12>
 8007030:	2000      	movs	r0, #0
 8007032:	e007      	b.n	8007044 <__sfputs_r+0x22>
 8007034:	463a      	mov	r2, r7
 8007036:	f814 1b01 	ldrb.w	r1, [r4], #1
 800703a:	4630      	mov	r0, r6
 800703c:	f7ff ffda 	bl	8006ff4 <__sfputc_r>
 8007040:	1c43      	adds	r3, r0, #1
 8007042:	d1f3      	bne.n	800702c <__sfputs_r+0xa>
 8007044:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08007048 <_vfiprintf_r>:
 8007048:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800704c:	460c      	mov	r4, r1
 800704e:	b09d      	sub	sp, #116	; 0x74
 8007050:	4617      	mov	r7, r2
 8007052:	461d      	mov	r5, r3
 8007054:	4606      	mov	r6, r0
 8007056:	b118      	cbz	r0, 8007060 <_vfiprintf_r+0x18>
 8007058:	6983      	ldr	r3, [r0, #24]
 800705a:	b90b      	cbnz	r3, 8007060 <_vfiprintf_r+0x18>
 800705c:	f7ff fe34 	bl	8006cc8 <__sinit>
 8007060:	4b7c      	ldr	r3, [pc, #496]	; (8007254 <_vfiprintf_r+0x20c>)
 8007062:	429c      	cmp	r4, r3
 8007064:	d158      	bne.n	8007118 <_vfiprintf_r+0xd0>
 8007066:	6874      	ldr	r4, [r6, #4]
 8007068:	89a3      	ldrh	r3, [r4, #12]
 800706a:	0718      	lsls	r0, r3, #28
 800706c:	d55e      	bpl.n	800712c <_vfiprintf_r+0xe4>
 800706e:	6923      	ldr	r3, [r4, #16]
 8007070:	2b00      	cmp	r3, #0
 8007072:	d05b      	beq.n	800712c <_vfiprintf_r+0xe4>
 8007074:	2300      	movs	r3, #0
 8007076:	9309      	str	r3, [sp, #36]	; 0x24
 8007078:	2320      	movs	r3, #32
 800707a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800707e:	2330      	movs	r3, #48	; 0x30
 8007080:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007084:	9503      	str	r5, [sp, #12]
 8007086:	f04f 0b01 	mov.w	fp, #1
 800708a:	46b8      	mov	r8, r7
 800708c:	4645      	mov	r5, r8
 800708e:	f815 3b01 	ldrb.w	r3, [r5], #1
 8007092:	b10b      	cbz	r3, 8007098 <_vfiprintf_r+0x50>
 8007094:	2b25      	cmp	r3, #37	; 0x25
 8007096:	d154      	bne.n	8007142 <_vfiprintf_r+0xfa>
 8007098:	ebb8 0a07 	subs.w	sl, r8, r7
 800709c:	d00b      	beq.n	80070b6 <_vfiprintf_r+0x6e>
 800709e:	4653      	mov	r3, sl
 80070a0:	463a      	mov	r2, r7
 80070a2:	4621      	mov	r1, r4
 80070a4:	4630      	mov	r0, r6
 80070a6:	f7ff ffbc 	bl	8007022 <__sfputs_r>
 80070aa:	3001      	adds	r0, #1
 80070ac:	f000 80c2 	beq.w	8007234 <_vfiprintf_r+0x1ec>
 80070b0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80070b2:	4453      	add	r3, sl
 80070b4:	9309      	str	r3, [sp, #36]	; 0x24
 80070b6:	f898 3000 	ldrb.w	r3, [r8]
 80070ba:	2b00      	cmp	r3, #0
 80070bc:	f000 80ba 	beq.w	8007234 <_vfiprintf_r+0x1ec>
 80070c0:	2300      	movs	r3, #0
 80070c2:	f04f 32ff 	mov.w	r2, #4294967295
 80070c6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80070ca:	9304      	str	r3, [sp, #16]
 80070cc:	9307      	str	r3, [sp, #28]
 80070ce:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80070d2:	931a      	str	r3, [sp, #104]	; 0x68
 80070d4:	46a8      	mov	r8, r5
 80070d6:	2205      	movs	r2, #5
 80070d8:	f818 1b01 	ldrb.w	r1, [r8], #1
 80070dc:	485e      	ldr	r0, [pc, #376]	; (8007258 <_vfiprintf_r+0x210>)
 80070de:	f7f9 f897 	bl	8000210 <memchr>
 80070e2:	9b04      	ldr	r3, [sp, #16]
 80070e4:	bb78      	cbnz	r0, 8007146 <_vfiprintf_r+0xfe>
 80070e6:	06d9      	lsls	r1, r3, #27
 80070e8:	bf44      	itt	mi
 80070ea:	2220      	movmi	r2, #32
 80070ec:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80070f0:	071a      	lsls	r2, r3, #28
 80070f2:	bf44      	itt	mi
 80070f4:	222b      	movmi	r2, #43	; 0x2b
 80070f6:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80070fa:	782a      	ldrb	r2, [r5, #0]
 80070fc:	2a2a      	cmp	r2, #42	; 0x2a
 80070fe:	d02a      	beq.n	8007156 <_vfiprintf_r+0x10e>
 8007100:	9a07      	ldr	r2, [sp, #28]
 8007102:	46a8      	mov	r8, r5
 8007104:	2000      	movs	r0, #0
 8007106:	250a      	movs	r5, #10
 8007108:	4641      	mov	r1, r8
 800710a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800710e:	3b30      	subs	r3, #48	; 0x30
 8007110:	2b09      	cmp	r3, #9
 8007112:	d969      	bls.n	80071e8 <_vfiprintf_r+0x1a0>
 8007114:	b360      	cbz	r0, 8007170 <_vfiprintf_r+0x128>
 8007116:	e024      	b.n	8007162 <_vfiprintf_r+0x11a>
 8007118:	4b50      	ldr	r3, [pc, #320]	; (800725c <_vfiprintf_r+0x214>)
 800711a:	429c      	cmp	r4, r3
 800711c:	d101      	bne.n	8007122 <_vfiprintf_r+0xda>
 800711e:	68b4      	ldr	r4, [r6, #8]
 8007120:	e7a2      	b.n	8007068 <_vfiprintf_r+0x20>
 8007122:	4b4f      	ldr	r3, [pc, #316]	; (8007260 <_vfiprintf_r+0x218>)
 8007124:	429c      	cmp	r4, r3
 8007126:	bf08      	it	eq
 8007128:	68f4      	ldreq	r4, [r6, #12]
 800712a:	e79d      	b.n	8007068 <_vfiprintf_r+0x20>
 800712c:	4621      	mov	r1, r4
 800712e:	4630      	mov	r0, r6
 8007130:	f7ff fc6c 	bl	8006a0c <__swsetup_r>
 8007134:	2800      	cmp	r0, #0
 8007136:	d09d      	beq.n	8007074 <_vfiprintf_r+0x2c>
 8007138:	f04f 30ff 	mov.w	r0, #4294967295
 800713c:	b01d      	add	sp, #116	; 0x74
 800713e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007142:	46a8      	mov	r8, r5
 8007144:	e7a2      	b.n	800708c <_vfiprintf_r+0x44>
 8007146:	4a44      	ldr	r2, [pc, #272]	; (8007258 <_vfiprintf_r+0x210>)
 8007148:	1a80      	subs	r0, r0, r2
 800714a:	fa0b f000 	lsl.w	r0, fp, r0
 800714e:	4318      	orrs	r0, r3
 8007150:	9004      	str	r0, [sp, #16]
 8007152:	4645      	mov	r5, r8
 8007154:	e7be      	b.n	80070d4 <_vfiprintf_r+0x8c>
 8007156:	9a03      	ldr	r2, [sp, #12]
 8007158:	1d11      	adds	r1, r2, #4
 800715a:	6812      	ldr	r2, [r2, #0]
 800715c:	9103      	str	r1, [sp, #12]
 800715e:	2a00      	cmp	r2, #0
 8007160:	db01      	blt.n	8007166 <_vfiprintf_r+0x11e>
 8007162:	9207      	str	r2, [sp, #28]
 8007164:	e004      	b.n	8007170 <_vfiprintf_r+0x128>
 8007166:	4252      	negs	r2, r2
 8007168:	f043 0302 	orr.w	r3, r3, #2
 800716c:	9207      	str	r2, [sp, #28]
 800716e:	9304      	str	r3, [sp, #16]
 8007170:	f898 3000 	ldrb.w	r3, [r8]
 8007174:	2b2e      	cmp	r3, #46	; 0x2e
 8007176:	d10e      	bne.n	8007196 <_vfiprintf_r+0x14e>
 8007178:	f898 3001 	ldrb.w	r3, [r8, #1]
 800717c:	2b2a      	cmp	r3, #42	; 0x2a
 800717e:	d138      	bne.n	80071f2 <_vfiprintf_r+0x1aa>
 8007180:	9b03      	ldr	r3, [sp, #12]
 8007182:	1d1a      	adds	r2, r3, #4
 8007184:	681b      	ldr	r3, [r3, #0]
 8007186:	9203      	str	r2, [sp, #12]
 8007188:	2b00      	cmp	r3, #0
 800718a:	bfb8      	it	lt
 800718c:	f04f 33ff 	movlt.w	r3, #4294967295
 8007190:	f108 0802 	add.w	r8, r8, #2
 8007194:	9305      	str	r3, [sp, #20]
 8007196:	4d33      	ldr	r5, [pc, #204]	; (8007264 <_vfiprintf_r+0x21c>)
 8007198:	f898 1000 	ldrb.w	r1, [r8]
 800719c:	2203      	movs	r2, #3
 800719e:	4628      	mov	r0, r5
 80071a0:	f7f9 f836 	bl	8000210 <memchr>
 80071a4:	b140      	cbz	r0, 80071b8 <_vfiprintf_r+0x170>
 80071a6:	2340      	movs	r3, #64	; 0x40
 80071a8:	1b40      	subs	r0, r0, r5
 80071aa:	fa03 f000 	lsl.w	r0, r3, r0
 80071ae:	9b04      	ldr	r3, [sp, #16]
 80071b0:	4303      	orrs	r3, r0
 80071b2:	f108 0801 	add.w	r8, r8, #1
 80071b6:	9304      	str	r3, [sp, #16]
 80071b8:	f898 1000 	ldrb.w	r1, [r8]
 80071bc:	482a      	ldr	r0, [pc, #168]	; (8007268 <_vfiprintf_r+0x220>)
 80071be:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80071c2:	2206      	movs	r2, #6
 80071c4:	f108 0701 	add.w	r7, r8, #1
 80071c8:	f7f9 f822 	bl	8000210 <memchr>
 80071cc:	2800      	cmp	r0, #0
 80071ce:	d037      	beq.n	8007240 <_vfiprintf_r+0x1f8>
 80071d0:	4b26      	ldr	r3, [pc, #152]	; (800726c <_vfiprintf_r+0x224>)
 80071d2:	bb1b      	cbnz	r3, 800721c <_vfiprintf_r+0x1d4>
 80071d4:	9b03      	ldr	r3, [sp, #12]
 80071d6:	3307      	adds	r3, #7
 80071d8:	f023 0307 	bic.w	r3, r3, #7
 80071dc:	3308      	adds	r3, #8
 80071de:	9303      	str	r3, [sp, #12]
 80071e0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80071e2:	444b      	add	r3, r9
 80071e4:	9309      	str	r3, [sp, #36]	; 0x24
 80071e6:	e750      	b.n	800708a <_vfiprintf_r+0x42>
 80071e8:	fb05 3202 	mla	r2, r5, r2, r3
 80071ec:	2001      	movs	r0, #1
 80071ee:	4688      	mov	r8, r1
 80071f0:	e78a      	b.n	8007108 <_vfiprintf_r+0xc0>
 80071f2:	2300      	movs	r3, #0
 80071f4:	f108 0801 	add.w	r8, r8, #1
 80071f8:	9305      	str	r3, [sp, #20]
 80071fa:	4619      	mov	r1, r3
 80071fc:	250a      	movs	r5, #10
 80071fe:	4640      	mov	r0, r8
 8007200:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007204:	3a30      	subs	r2, #48	; 0x30
 8007206:	2a09      	cmp	r2, #9
 8007208:	d903      	bls.n	8007212 <_vfiprintf_r+0x1ca>
 800720a:	2b00      	cmp	r3, #0
 800720c:	d0c3      	beq.n	8007196 <_vfiprintf_r+0x14e>
 800720e:	9105      	str	r1, [sp, #20]
 8007210:	e7c1      	b.n	8007196 <_vfiprintf_r+0x14e>
 8007212:	fb05 2101 	mla	r1, r5, r1, r2
 8007216:	2301      	movs	r3, #1
 8007218:	4680      	mov	r8, r0
 800721a:	e7f0      	b.n	80071fe <_vfiprintf_r+0x1b6>
 800721c:	ab03      	add	r3, sp, #12
 800721e:	9300      	str	r3, [sp, #0]
 8007220:	4622      	mov	r2, r4
 8007222:	4b13      	ldr	r3, [pc, #76]	; (8007270 <_vfiprintf_r+0x228>)
 8007224:	a904      	add	r1, sp, #16
 8007226:	4630      	mov	r0, r6
 8007228:	f3af 8000 	nop.w
 800722c:	f1b0 3fff 	cmp.w	r0, #4294967295
 8007230:	4681      	mov	r9, r0
 8007232:	d1d5      	bne.n	80071e0 <_vfiprintf_r+0x198>
 8007234:	89a3      	ldrh	r3, [r4, #12]
 8007236:	065b      	lsls	r3, r3, #25
 8007238:	f53f af7e 	bmi.w	8007138 <_vfiprintf_r+0xf0>
 800723c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800723e:	e77d      	b.n	800713c <_vfiprintf_r+0xf4>
 8007240:	ab03      	add	r3, sp, #12
 8007242:	9300      	str	r3, [sp, #0]
 8007244:	4622      	mov	r2, r4
 8007246:	4b0a      	ldr	r3, [pc, #40]	; (8007270 <_vfiprintf_r+0x228>)
 8007248:	a904      	add	r1, sp, #16
 800724a:	4630      	mov	r0, r6
 800724c:	f000 f888 	bl	8007360 <_printf_i>
 8007250:	e7ec      	b.n	800722c <_vfiprintf_r+0x1e4>
 8007252:	bf00      	nop
 8007254:	080077ac 	.word	0x080077ac
 8007258:	080077ec 	.word	0x080077ec
 800725c:	080077cc 	.word	0x080077cc
 8007260:	0800778c 	.word	0x0800778c
 8007264:	080077f2 	.word	0x080077f2
 8007268:	080077f6 	.word	0x080077f6
 800726c:	00000000 	.word	0x00000000
 8007270:	08007023 	.word	0x08007023

08007274 <_printf_common>:
 8007274:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007278:	4691      	mov	r9, r2
 800727a:	461f      	mov	r7, r3
 800727c:	688a      	ldr	r2, [r1, #8]
 800727e:	690b      	ldr	r3, [r1, #16]
 8007280:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007284:	4293      	cmp	r3, r2
 8007286:	bfb8      	it	lt
 8007288:	4613      	movlt	r3, r2
 800728a:	f8c9 3000 	str.w	r3, [r9]
 800728e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007292:	4606      	mov	r6, r0
 8007294:	460c      	mov	r4, r1
 8007296:	b112      	cbz	r2, 800729e <_printf_common+0x2a>
 8007298:	3301      	adds	r3, #1
 800729a:	f8c9 3000 	str.w	r3, [r9]
 800729e:	6823      	ldr	r3, [r4, #0]
 80072a0:	0699      	lsls	r1, r3, #26
 80072a2:	bf42      	ittt	mi
 80072a4:	f8d9 3000 	ldrmi.w	r3, [r9]
 80072a8:	3302      	addmi	r3, #2
 80072aa:	f8c9 3000 	strmi.w	r3, [r9]
 80072ae:	6825      	ldr	r5, [r4, #0]
 80072b0:	f015 0506 	ands.w	r5, r5, #6
 80072b4:	d107      	bne.n	80072c6 <_printf_common+0x52>
 80072b6:	f104 0a19 	add.w	sl, r4, #25
 80072ba:	68e3      	ldr	r3, [r4, #12]
 80072bc:	f8d9 2000 	ldr.w	r2, [r9]
 80072c0:	1a9b      	subs	r3, r3, r2
 80072c2:	42ab      	cmp	r3, r5
 80072c4:	dc28      	bgt.n	8007318 <_printf_common+0xa4>
 80072c6:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 80072ca:	6822      	ldr	r2, [r4, #0]
 80072cc:	3300      	adds	r3, #0
 80072ce:	bf18      	it	ne
 80072d0:	2301      	movne	r3, #1
 80072d2:	0692      	lsls	r2, r2, #26
 80072d4:	d42d      	bmi.n	8007332 <_printf_common+0xbe>
 80072d6:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80072da:	4639      	mov	r1, r7
 80072dc:	4630      	mov	r0, r6
 80072de:	47c0      	blx	r8
 80072e0:	3001      	adds	r0, #1
 80072e2:	d020      	beq.n	8007326 <_printf_common+0xb2>
 80072e4:	6823      	ldr	r3, [r4, #0]
 80072e6:	68e5      	ldr	r5, [r4, #12]
 80072e8:	f8d9 2000 	ldr.w	r2, [r9]
 80072ec:	f003 0306 	and.w	r3, r3, #6
 80072f0:	2b04      	cmp	r3, #4
 80072f2:	bf08      	it	eq
 80072f4:	1aad      	subeq	r5, r5, r2
 80072f6:	68a3      	ldr	r3, [r4, #8]
 80072f8:	6922      	ldr	r2, [r4, #16]
 80072fa:	bf0c      	ite	eq
 80072fc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007300:	2500      	movne	r5, #0
 8007302:	4293      	cmp	r3, r2
 8007304:	bfc4      	itt	gt
 8007306:	1a9b      	subgt	r3, r3, r2
 8007308:	18ed      	addgt	r5, r5, r3
 800730a:	f04f 0900 	mov.w	r9, #0
 800730e:	341a      	adds	r4, #26
 8007310:	454d      	cmp	r5, r9
 8007312:	d11a      	bne.n	800734a <_printf_common+0xd6>
 8007314:	2000      	movs	r0, #0
 8007316:	e008      	b.n	800732a <_printf_common+0xb6>
 8007318:	2301      	movs	r3, #1
 800731a:	4652      	mov	r2, sl
 800731c:	4639      	mov	r1, r7
 800731e:	4630      	mov	r0, r6
 8007320:	47c0      	blx	r8
 8007322:	3001      	adds	r0, #1
 8007324:	d103      	bne.n	800732e <_printf_common+0xba>
 8007326:	f04f 30ff 	mov.w	r0, #4294967295
 800732a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800732e:	3501      	adds	r5, #1
 8007330:	e7c3      	b.n	80072ba <_printf_common+0x46>
 8007332:	18e1      	adds	r1, r4, r3
 8007334:	1c5a      	adds	r2, r3, #1
 8007336:	2030      	movs	r0, #48	; 0x30
 8007338:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800733c:	4422      	add	r2, r4
 800733e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007342:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007346:	3302      	adds	r3, #2
 8007348:	e7c5      	b.n	80072d6 <_printf_common+0x62>
 800734a:	2301      	movs	r3, #1
 800734c:	4622      	mov	r2, r4
 800734e:	4639      	mov	r1, r7
 8007350:	4630      	mov	r0, r6
 8007352:	47c0      	blx	r8
 8007354:	3001      	adds	r0, #1
 8007356:	d0e6      	beq.n	8007326 <_printf_common+0xb2>
 8007358:	f109 0901 	add.w	r9, r9, #1
 800735c:	e7d8      	b.n	8007310 <_printf_common+0x9c>
	...

08007360 <_printf_i>:
 8007360:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8007364:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8007368:	460c      	mov	r4, r1
 800736a:	7e09      	ldrb	r1, [r1, #24]
 800736c:	b085      	sub	sp, #20
 800736e:	296e      	cmp	r1, #110	; 0x6e
 8007370:	4617      	mov	r7, r2
 8007372:	4606      	mov	r6, r0
 8007374:	4698      	mov	r8, r3
 8007376:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007378:	f000 80b3 	beq.w	80074e2 <_printf_i+0x182>
 800737c:	d822      	bhi.n	80073c4 <_printf_i+0x64>
 800737e:	2963      	cmp	r1, #99	; 0x63
 8007380:	d036      	beq.n	80073f0 <_printf_i+0x90>
 8007382:	d80a      	bhi.n	800739a <_printf_i+0x3a>
 8007384:	2900      	cmp	r1, #0
 8007386:	f000 80b9 	beq.w	80074fc <_printf_i+0x19c>
 800738a:	2958      	cmp	r1, #88	; 0x58
 800738c:	f000 8083 	beq.w	8007496 <_printf_i+0x136>
 8007390:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007394:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8007398:	e032      	b.n	8007400 <_printf_i+0xa0>
 800739a:	2964      	cmp	r1, #100	; 0x64
 800739c:	d001      	beq.n	80073a2 <_printf_i+0x42>
 800739e:	2969      	cmp	r1, #105	; 0x69
 80073a0:	d1f6      	bne.n	8007390 <_printf_i+0x30>
 80073a2:	6820      	ldr	r0, [r4, #0]
 80073a4:	6813      	ldr	r3, [r2, #0]
 80073a6:	0605      	lsls	r5, r0, #24
 80073a8:	f103 0104 	add.w	r1, r3, #4
 80073ac:	d52a      	bpl.n	8007404 <_printf_i+0xa4>
 80073ae:	681b      	ldr	r3, [r3, #0]
 80073b0:	6011      	str	r1, [r2, #0]
 80073b2:	2b00      	cmp	r3, #0
 80073b4:	da03      	bge.n	80073be <_printf_i+0x5e>
 80073b6:	222d      	movs	r2, #45	; 0x2d
 80073b8:	425b      	negs	r3, r3
 80073ba:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 80073be:	486f      	ldr	r0, [pc, #444]	; (800757c <_printf_i+0x21c>)
 80073c0:	220a      	movs	r2, #10
 80073c2:	e039      	b.n	8007438 <_printf_i+0xd8>
 80073c4:	2973      	cmp	r1, #115	; 0x73
 80073c6:	f000 809d 	beq.w	8007504 <_printf_i+0x1a4>
 80073ca:	d808      	bhi.n	80073de <_printf_i+0x7e>
 80073cc:	296f      	cmp	r1, #111	; 0x6f
 80073ce:	d020      	beq.n	8007412 <_printf_i+0xb2>
 80073d0:	2970      	cmp	r1, #112	; 0x70
 80073d2:	d1dd      	bne.n	8007390 <_printf_i+0x30>
 80073d4:	6823      	ldr	r3, [r4, #0]
 80073d6:	f043 0320 	orr.w	r3, r3, #32
 80073da:	6023      	str	r3, [r4, #0]
 80073dc:	e003      	b.n	80073e6 <_printf_i+0x86>
 80073de:	2975      	cmp	r1, #117	; 0x75
 80073e0:	d017      	beq.n	8007412 <_printf_i+0xb2>
 80073e2:	2978      	cmp	r1, #120	; 0x78
 80073e4:	d1d4      	bne.n	8007390 <_printf_i+0x30>
 80073e6:	2378      	movs	r3, #120	; 0x78
 80073e8:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80073ec:	4864      	ldr	r0, [pc, #400]	; (8007580 <_printf_i+0x220>)
 80073ee:	e055      	b.n	800749c <_printf_i+0x13c>
 80073f0:	6813      	ldr	r3, [r2, #0]
 80073f2:	1d19      	adds	r1, r3, #4
 80073f4:	681b      	ldr	r3, [r3, #0]
 80073f6:	6011      	str	r1, [r2, #0]
 80073f8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80073fc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007400:	2301      	movs	r3, #1
 8007402:	e08c      	b.n	800751e <_printf_i+0x1be>
 8007404:	681b      	ldr	r3, [r3, #0]
 8007406:	6011      	str	r1, [r2, #0]
 8007408:	f010 0f40 	tst.w	r0, #64	; 0x40
 800740c:	bf18      	it	ne
 800740e:	b21b      	sxthne	r3, r3
 8007410:	e7cf      	b.n	80073b2 <_printf_i+0x52>
 8007412:	6813      	ldr	r3, [r2, #0]
 8007414:	6825      	ldr	r5, [r4, #0]
 8007416:	1d18      	adds	r0, r3, #4
 8007418:	6010      	str	r0, [r2, #0]
 800741a:	0628      	lsls	r0, r5, #24
 800741c:	d501      	bpl.n	8007422 <_printf_i+0xc2>
 800741e:	681b      	ldr	r3, [r3, #0]
 8007420:	e002      	b.n	8007428 <_printf_i+0xc8>
 8007422:	0668      	lsls	r0, r5, #25
 8007424:	d5fb      	bpl.n	800741e <_printf_i+0xbe>
 8007426:	881b      	ldrh	r3, [r3, #0]
 8007428:	4854      	ldr	r0, [pc, #336]	; (800757c <_printf_i+0x21c>)
 800742a:	296f      	cmp	r1, #111	; 0x6f
 800742c:	bf14      	ite	ne
 800742e:	220a      	movne	r2, #10
 8007430:	2208      	moveq	r2, #8
 8007432:	2100      	movs	r1, #0
 8007434:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007438:	6865      	ldr	r5, [r4, #4]
 800743a:	60a5      	str	r5, [r4, #8]
 800743c:	2d00      	cmp	r5, #0
 800743e:	f2c0 8095 	blt.w	800756c <_printf_i+0x20c>
 8007442:	6821      	ldr	r1, [r4, #0]
 8007444:	f021 0104 	bic.w	r1, r1, #4
 8007448:	6021      	str	r1, [r4, #0]
 800744a:	2b00      	cmp	r3, #0
 800744c:	d13d      	bne.n	80074ca <_printf_i+0x16a>
 800744e:	2d00      	cmp	r5, #0
 8007450:	f040 808e 	bne.w	8007570 <_printf_i+0x210>
 8007454:	4665      	mov	r5, ip
 8007456:	2a08      	cmp	r2, #8
 8007458:	d10b      	bne.n	8007472 <_printf_i+0x112>
 800745a:	6823      	ldr	r3, [r4, #0]
 800745c:	07db      	lsls	r3, r3, #31
 800745e:	d508      	bpl.n	8007472 <_printf_i+0x112>
 8007460:	6923      	ldr	r3, [r4, #16]
 8007462:	6862      	ldr	r2, [r4, #4]
 8007464:	429a      	cmp	r2, r3
 8007466:	bfde      	ittt	le
 8007468:	2330      	movle	r3, #48	; 0x30
 800746a:	f805 3c01 	strble.w	r3, [r5, #-1]
 800746e:	f105 35ff 	addle.w	r5, r5, #4294967295
 8007472:	ebac 0305 	sub.w	r3, ip, r5
 8007476:	6123      	str	r3, [r4, #16]
 8007478:	f8cd 8000 	str.w	r8, [sp]
 800747c:	463b      	mov	r3, r7
 800747e:	aa03      	add	r2, sp, #12
 8007480:	4621      	mov	r1, r4
 8007482:	4630      	mov	r0, r6
 8007484:	f7ff fef6 	bl	8007274 <_printf_common>
 8007488:	3001      	adds	r0, #1
 800748a:	d14d      	bne.n	8007528 <_printf_i+0x1c8>
 800748c:	f04f 30ff 	mov.w	r0, #4294967295
 8007490:	b005      	add	sp, #20
 8007492:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007496:	4839      	ldr	r0, [pc, #228]	; (800757c <_printf_i+0x21c>)
 8007498:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 800749c:	6813      	ldr	r3, [r2, #0]
 800749e:	6821      	ldr	r1, [r4, #0]
 80074a0:	1d1d      	adds	r5, r3, #4
 80074a2:	681b      	ldr	r3, [r3, #0]
 80074a4:	6015      	str	r5, [r2, #0]
 80074a6:	060a      	lsls	r2, r1, #24
 80074a8:	d50b      	bpl.n	80074c2 <_printf_i+0x162>
 80074aa:	07ca      	lsls	r2, r1, #31
 80074ac:	bf44      	itt	mi
 80074ae:	f041 0120 	orrmi.w	r1, r1, #32
 80074b2:	6021      	strmi	r1, [r4, #0]
 80074b4:	b91b      	cbnz	r3, 80074be <_printf_i+0x15e>
 80074b6:	6822      	ldr	r2, [r4, #0]
 80074b8:	f022 0220 	bic.w	r2, r2, #32
 80074bc:	6022      	str	r2, [r4, #0]
 80074be:	2210      	movs	r2, #16
 80074c0:	e7b7      	b.n	8007432 <_printf_i+0xd2>
 80074c2:	064d      	lsls	r5, r1, #25
 80074c4:	bf48      	it	mi
 80074c6:	b29b      	uxthmi	r3, r3
 80074c8:	e7ef      	b.n	80074aa <_printf_i+0x14a>
 80074ca:	4665      	mov	r5, ip
 80074cc:	fbb3 f1f2 	udiv	r1, r3, r2
 80074d0:	fb02 3311 	mls	r3, r2, r1, r3
 80074d4:	5cc3      	ldrb	r3, [r0, r3]
 80074d6:	f805 3d01 	strb.w	r3, [r5, #-1]!
 80074da:	460b      	mov	r3, r1
 80074dc:	2900      	cmp	r1, #0
 80074de:	d1f5      	bne.n	80074cc <_printf_i+0x16c>
 80074e0:	e7b9      	b.n	8007456 <_printf_i+0xf6>
 80074e2:	6813      	ldr	r3, [r2, #0]
 80074e4:	6825      	ldr	r5, [r4, #0]
 80074e6:	6961      	ldr	r1, [r4, #20]
 80074e8:	1d18      	adds	r0, r3, #4
 80074ea:	6010      	str	r0, [r2, #0]
 80074ec:	0628      	lsls	r0, r5, #24
 80074ee:	681b      	ldr	r3, [r3, #0]
 80074f0:	d501      	bpl.n	80074f6 <_printf_i+0x196>
 80074f2:	6019      	str	r1, [r3, #0]
 80074f4:	e002      	b.n	80074fc <_printf_i+0x19c>
 80074f6:	066a      	lsls	r2, r5, #25
 80074f8:	d5fb      	bpl.n	80074f2 <_printf_i+0x192>
 80074fa:	8019      	strh	r1, [r3, #0]
 80074fc:	2300      	movs	r3, #0
 80074fe:	6123      	str	r3, [r4, #16]
 8007500:	4665      	mov	r5, ip
 8007502:	e7b9      	b.n	8007478 <_printf_i+0x118>
 8007504:	6813      	ldr	r3, [r2, #0]
 8007506:	1d19      	adds	r1, r3, #4
 8007508:	6011      	str	r1, [r2, #0]
 800750a:	681d      	ldr	r5, [r3, #0]
 800750c:	6862      	ldr	r2, [r4, #4]
 800750e:	2100      	movs	r1, #0
 8007510:	4628      	mov	r0, r5
 8007512:	f7f8 fe7d 	bl	8000210 <memchr>
 8007516:	b108      	cbz	r0, 800751c <_printf_i+0x1bc>
 8007518:	1b40      	subs	r0, r0, r5
 800751a:	6060      	str	r0, [r4, #4]
 800751c:	6863      	ldr	r3, [r4, #4]
 800751e:	6123      	str	r3, [r4, #16]
 8007520:	2300      	movs	r3, #0
 8007522:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007526:	e7a7      	b.n	8007478 <_printf_i+0x118>
 8007528:	6923      	ldr	r3, [r4, #16]
 800752a:	462a      	mov	r2, r5
 800752c:	4639      	mov	r1, r7
 800752e:	4630      	mov	r0, r6
 8007530:	47c0      	blx	r8
 8007532:	3001      	adds	r0, #1
 8007534:	d0aa      	beq.n	800748c <_printf_i+0x12c>
 8007536:	6823      	ldr	r3, [r4, #0]
 8007538:	079b      	lsls	r3, r3, #30
 800753a:	d413      	bmi.n	8007564 <_printf_i+0x204>
 800753c:	68e0      	ldr	r0, [r4, #12]
 800753e:	9b03      	ldr	r3, [sp, #12]
 8007540:	4298      	cmp	r0, r3
 8007542:	bfb8      	it	lt
 8007544:	4618      	movlt	r0, r3
 8007546:	e7a3      	b.n	8007490 <_printf_i+0x130>
 8007548:	2301      	movs	r3, #1
 800754a:	464a      	mov	r2, r9
 800754c:	4639      	mov	r1, r7
 800754e:	4630      	mov	r0, r6
 8007550:	47c0      	blx	r8
 8007552:	3001      	adds	r0, #1
 8007554:	d09a      	beq.n	800748c <_printf_i+0x12c>
 8007556:	3501      	adds	r5, #1
 8007558:	68e3      	ldr	r3, [r4, #12]
 800755a:	9a03      	ldr	r2, [sp, #12]
 800755c:	1a9b      	subs	r3, r3, r2
 800755e:	42ab      	cmp	r3, r5
 8007560:	dcf2      	bgt.n	8007548 <_printf_i+0x1e8>
 8007562:	e7eb      	b.n	800753c <_printf_i+0x1dc>
 8007564:	2500      	movs	r5, #0
 8007566:	f104 0919 	add.w	r9, r4, #25
 800756a:	e7f5      	b.n	8007558 <_printf_i+0x1f8>
 800756c:	2b00      	cmp	r3, #0
 800756e:	d1ac      	bne.n	80074ca <_printf_i+0x16a>
 8007570:	7803      	ldrb	r3, [r0, #0]
 8007572:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007576:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800757a:	e76c      	b.n	8007456 <_printf_i+0xf6>
 800757c:	080077fd 	.word	0x080077fd
 8007580:	0800780e 	.word	0x0800780e

08007584 <_sbrk_r>:
 8007584:	b538      	push	{r3, r4, r5, lr}
 8007586:	4c06      	ldr	r4, [pc, #24]	; (80075a0 <_sbrk_r+0x1c>)
 8007588:	2300      	movs	r3, #0
 800758a:	4605      	mov	r5, r0
 800758c:	4608      	mov	r0, r1
 800758e:	6023      	str	r3, [r4, #0]
 8007590:	f7f9 fc22 	bl	8000dd8 <_sbrk>
 8007594:	1c43      	adds	r3, r0, #1
 8007596:	d102      	bne.n	800759e <_sbrk_r+0x1a>
 8007598:	6823      	ldr	r3, [r4, #0]
 800759a:	b103      	cbz	r3, 800759e <_sbrk_r+0x1a>
 800759c:	602b      	str	r3, [r5, #0]
 800759e:	bd38      	pop	{r3, r4, r5, pc}
 80075a0:	20004f08 	.word	0x20004f08

080075a4 <__sread>:
 80075a4:	b510      	push	{r4, lr}
 80075a6:	460c      	mov	r4, r1
 80075a8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80075ac:	f000 f896 	bl	80076dc <_read_r>
 80075b0:	2800      	cmp	r0, #0
 80075b2:	bfab      	itete	ge
 80075b4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80075b6:	89a3      	ldrhlt	r3, [r4, #12]
 80075b8:	181b      	addge	r3, r3, r0
 80075ba:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80075be:	bfac      	ite	ge
 80075c0:	6563      	strge	r3, [r4, #84]	; 0x54
 80075c2:	81a3      	strhlt	r3, [r4, #12]
 80075c4:	bd10      	pop	{r4, pc}

080075c6 <__swrite>:
 80075c6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80075ca:	461f      	mov	r7, r3
 80075cc:	898b      	ldrh	r3, [r1, #12]
 80075ce:	05db      	lsls	r3, r3, #23
 80075d0:	4605      	mov	r5, r0
 80075d2:	460c      	mov	r4, r1
 80075d4:	4616      	mov	r6, r2
 80075d6:	d505      	bpl.n	80075e4 <__swrite+0x1e>
 80075d8:	2302      	movs	r3, #2
 80075da:	2200      	movs	r2, #0
 80075dc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80075e0:	f000 f868 	bl	80076b4 <_lseek_r>
 80075e4:	89a3      	ldrh	r3, [r4, #12]
 80075e6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80075ea:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80075ee:	81a3      	strh	r3, [r4, #12]
 80075f0:	4632      	mov	r2, r6
 80075f2:	463b      	mov	r3, r7
 80075f4:	4628      	mov	r0, r5
 80075f6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80075fa:	f000 b817 	b.w	800762c <_write_r>

080075fe <__sseek>:
 80075fe:	b510      	push	{r4, lr}
 8007600:	460c      	mov	r4, r1
 8007602:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007606:	f000 f855 	bl	80076b4 <_lseek_r>
 800760a:	1c43      	adds	r3, r0, #1
 800760c:	89a3      	ldrh	r3, [r4, #12]
 800760e:	bf15      	itete	ne
 8007610:	6560      	strne	r0, [r4, #84]	; 0x54
 8007612:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8007616:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800761a:	81a3      	strheq	r3, [r4, #12]
 800761c:	bf18      	it	ne
 800761e:	81a3      	strhne	r3, [r4, #12]
 8007620:	bd10      	pop	{r4, pc}

08007622 <__sclose>:
 8007622:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007626:	f000 b813 	b.w	8007650 <_close_r>
	...

0800762c <_write_r>:
 800762c:	b538      	push	{r3, r4, r5, lr}
 800762e:	4c07      	ldr	r4, [pc, #28]	; (800764c <_write_r+0x20>)
 8007630:	4605      	mov	r5, r0
 8007632:	4608      	mov	r0, r1
 8007634:	4611      	mov	r1, r2
 8007636:	2200      	movs	r2, #0
 8007638:	6022      	str	r2, [r4, #0]
 800763a:	461a      	mov	r2, r3
 800763c:	f7f9 f9e8 	bl	8000a10 <_write>
 8007640:	1c43      	adds	r3, r0, #1
 8007642:	d102      	bne.n	800764a <_write_r+0x1e>
 8007644:	6823      	ldr	r3, [r4, #0]
 8007646:	b103      	cbz	r3, 800764a <_write_r+0x1e>
 8007648:	602b      	str	r3, [r5, #0]
 800764a:	bd38      	pop	{r3, r4, r5, pc}
 800764c:	20004f08 	.word	0x20004f08

08007650 <_close_r>:
 8007650:	b538      	push	{r3, r4, r5, lr}
 8007652:	4c06      	ldr	r4, [pc, #24]	; (800766c <_close_r+0x1c>)
 8007654:	2300      	movs	r3, #0
 8007656:	4605      	mov	r5, r0
 8007658:	4608      	mov	r0, r1
 800765a:	6023      	str	r3, [r4, #0]
 800765c:	f7f9 fb87 	bl	8000d6e <_close>
 8007660:	1c43      	adds	r3, r0, #1
 8007662:	d102      	bne.n	800766a <_close_r+0x1a>
 8007664:	6823      	ldr	r3, [r4, #0]
 8007666:	b103      	cbz	r3, 800766a <_close_r+0x1a>
 8007668:	602b      	str	r3, [r5, #0]
 800766a:	bd38      	pop	{r3, r4, r5, pc}
 800766c:	20004f08 	.word	0x20004f08

08007670 <_fstat_r>:
 8007670:	b538      	push	{r3, r4, r5, lr}
 8007672:	4c07      	ldr	r4, [pc, #28]	; (8007690 <_fstat_r+0x20>)
 8007674:	2300      	movs	r3, #0
 8007676:	4605      	mov	r5, r0
 8007678:	4608      	mov	r0, r1
 800767a:	4611      	mov	r1, r2
 800767c:	6023      	str	r3, [r4, #0]
 800767e:	f7f9 fb82 	bl	8000d86 <_fstat>
 8007682:	1c43      	adds	r3, r0, #1
 8007684:	d102      	bne.n	800768c <_fstat_r+0x1c>
 8007686:	6823      	ldr	r3, [r4, #0]
 8007688:	b103      	cbz	r3, 800768c <_fstat_r+0x1c>
 800768a:	602b      	str	r3, [r5, #0]
 800768c:	bd38      	pop	{r3, r4, r5, pc}
 800768e:	bf00      	nop
 8007690:	20004f08 	.word	0x20004f08

08007694 <_isatty_r>:
 8007694:	b538      	push	{r3, r4, r5, lr}
 8007696:	4c06      	ldr	r4, [pc, #24]	; (80076b0 <_isatty_r+0x1c>)
 8007698:	2300      	movs	r3, #0
 800769a:	4605      	mov	r5, r0
 800769c:	4608      	mov	r0, r1
 800769e:	6023      	str	r3, [r4, #0]
 80076a0:	f7f9 fb81 	bl	8000da6 <_isatty>
 80076a4:	1c43      	adds	r3, r0, #1
 80076a6:	d102      	bne.n	80076ae <_isatty_r+0x1a>
 80076a8:	6823      	ldr	r3, [r4, #0]
 80076aa:	b103      	cbz	r3, 80076ae <_isatty_r+0x1a>
 80076ac:	602b      	str	r3, [r5, #0]
 80076ae:	bd38      	pop	{r3, r4, r5, pc}
 80076b0:	20004f08 	.word	0x20004f08

080076b4 <_lseek_r>:
 80076b4:	b538      	push	{r3, r4, r5, lr}
 80076b6:	4c07      	ldr	r4, [pc, #28]	; (80076d4 <_lseek_r+0x20>)
 80076b8:	4605      	mov	r5, r0
 80076ba:	4608      	mov	r0, r1
 80076bc:	4611      	mov	r1, r2
 80076be:	2200      	movs	r2, #0
 80076c0:	6022      	str	r2, [r4, #0]
 80076c2:	461a      	mov	r2, r3
 80076c4:	f7f9 fb7a 	bl	8000dbc <_lseek>
 80076c8:	1c43      	adds	r3, r0, #1
 80076ca:	d102      	bne.n	80076d2 <_lseek_r+0x1e>
 80076cc:	6823      	ldr	r3, [r4, #0]
 80076ce:	b103      	cbz	r3, 80076d2 <_lseek_r+0x1e>
 80076d0:	602b      	str	r3, [r5, #0]
 80076d2:	bd38      	pop	{r3, r4, r5, pc}
 80076d4:	20004f08 	.word	0x20004f08

080076d8 <__malloc_lock>:
 80076d8:	4770      	bx	lr

080076da <__malloc_unlock>:
 80076da:	4770      	bx	lr

080076dc <_read_r>:
 80076dc:	b538      	push	{r3, r4, r5, lr}
 80076de:	4c07      	ldr	r4, [pc, #28]	; (80076fc <_read_r+0x20>)
 80076e0:	4605      	mov	r5, r0
 80076e2:	4608      	mov	r0, r1
 80076e4:	4611      	mov	r1, r2
 80076e6:	2200      	movs	r2, #0
 80076e8:	6022      	str	r2, [r4, #0]
 80076ea:	461a      	mov	r2, r3
 80076ec:	f7f9 fb22 	bl	8000d34 <_read>
 80076f0:	1c43      	adds	r3, r0, #1
 80076f2:	d102      	bne.n	80076fa <_read_r+0x1e>
 80076f4:	6823      	ldr	r3, [r4, #0]
 80076f6:	b103      	cbz	r3, 80076fa <_read_r+0x1e>
 80076f8:	602b      	str	r3, [r5, #0]
 80076fa:	bd38      	pop	{r3, r4, r5, pc}
 80076fc:	20004f08 	.word	0x20004f08

08007700 <_init>:
 8007700:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007702:	bf00      	nop
 8007704:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007706:	bc08      	pop	{r3}
 8007708:	469e      	mov	lr, r3
 800770a:	4770      	bx	lr

0800770c <_fini>:
 800770c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800770e:	bf00      	nop
 8007710:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007712:	bc08      	pop	{r3}
 8007714:	469e      	mov	lr, r3
 8007716:	4770      	bx	lr
