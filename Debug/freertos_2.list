
freertos_2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006ef0  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000fc  080070c0  080070c0  000170c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080071bc  080071bc  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  080071bc  080071bc  000171bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080071c4  080071c4  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080071c4  080071c4  000171c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080071c8  080071c8  000171c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  080071cc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004e98  20000074  08007240  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20004f0c  08007240  00024f0c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001f576  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00003bb3  00000000  00000000  0003f61a  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000018b8  00000000  00000000  000431d0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001730  00000000  00000000  00044a88  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00005167  00000000  00000000  000461b8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000148af  00000000  00000000  0004b31f  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000fd05f  00000000  00000000  0005fbce  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0015cc2d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006de4  00000000  00000000  0015cca8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000074 	.word	0x20000074
 80001ec:	00000000 	.word	0x00000000
 80001f0:	080070a8 	.word	0x080070a8

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000078 	.word	0x20000078
 800020c:	080070a8 	.word	0x080070a8

08000210 <__aeabi_uldivmod>:
 8000210:	b953      	cbnz	r3, 8000228 <__aeabi_uldivmod+0x18>
 8000212:	b94a      	cbnz	r2, 8000228 <__aeabi_uldivmod+0x18>
 8000214:	2900      	cmp	r1, #0
 8000216:	bf08      	it	eq
 8000218:	2800      	cmpeq	r0, #0
 800021a:	bf1c      	itt	ne
 800021c:	f04f 31ff 	movne.w	r1, #4294967295
 8000220:	f04f 30ff 	movne.w	r0, #4294967295
 8000224:	f000 b972 	b.w	800050c <__aeabi_idiv0>
 8000228:	f1ad 0c08 	sub.w	ip, sp, #8
 800022c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000230:	f000 f806 	bl	8000240 <__udivmoddi4>
 8000234:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000238:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800023c:	b004      	add	sp, #16
 800023e:	4770      	bx	lr

08000240 <__udivmoddi4>:
 8000240:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000244:	9e08      	ldr	r6, [sp, #32]
 8000246:	4604      	mov	r4, r0
 8000248:	4688      	mov	r8, r1
 800024a:	2b00      	cmp	r3, #0
 800024c:	d14b      	bne.n	80002e6 <__udivmoddi4+0xa6>
 800024e:	428a      	cmp	r2, r1
 8000250:	4615      	mov	r5, r2
 8000252:	d967      	bls.n	8000324 <__udivmoddi4+0xe4>
 8000254:	fab2 f282 	clz	r2, r2
 8000258:	b14a      	cbz	r2, 800026e <__udivmoddi4+0x2e>
 800025a:	f1c2 0720 	rsb	r7, r2, #32
 800025e:	fa01 f302 	lsl.w	r3, r1, r2
 8000262:	fa20 f707 	lsr.w	r7, r0, r7
 8000266:	4095      	lsls	r5, r2
 8000268:	ea47 0803 	orr.w	r8, r7, r3
 800026c:	4094      	lsls	r4, r2
 800026e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000272:	0c23      	lsrs	r3, r4, #16
 8000274:	fbb8 f7fe 	udiv	r7, r8, lr
 8000278:	fa1f fc85 	uxth.w	ip, r5
 800027c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000280:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000284:	fb07 f10c 	mul.w	r1, r7, ip
 8000288:	4299      	cmp	r1, r3
 800028a:	d909      	bls.n	80002a0 <__udivmoddi4+0x60>
 800028c:	18eb      	adds	r3, r5, r3
 800028e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000292:	f080 811b 	bcs.w	80004cc <__udivmoddi4+0x28c>
 8000296:	4299      	cmp	r1, r3
 8000298:	f240 8118 	bls.w	80004cc <__udivmoddi4+0x28c>
 800029c:	3f02      	subs	r7, #2
 800029e:	442b      	add	r3, r5
 80002a0:	1a5b      	subs	r3, r3, r1
 80002a2:	b2a4      	uxth	r4, r4
 80002a4:	fbb3 f0fe 	udiv	r0, r3, lr
 80002a8:	fb0e 3310 	mls	r3, lr, r0, r3
 80002ac:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002b0:	fb00 fc0c 	mul.w	ip, r0, ip
 80002b4:	45a4      	cmp	ip, r4
 80002b6:	d909      	bls.n	80002cc <__udivmoddi4+0x8c>
 80002b8:	192c      	adds	r4, r5, r4
 80002ba:	f100 33ff 	add.w	r3, r0, #4294967295
 80002be:	f080 8107 	bcs.w	80004d0 <__udivmoddi4+0x290>
 80002c2:	45a4      	cmp	ip, r4
 80002c4:	f240 8104 	bls.w	80004d0 <__udivmoddi4+0x290>
 80002c8:	3802      	subs	r0, #2
 80002ca:	442c      	add	r4, r5
 80002cc:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80002d0:	eba4 040c 	sub.w	r4, r4, ip
 80002d4:	2700      	movs	r7, #0
 80002d6:	b11e      	cbz	r6, 80002e0 <__udivmoddi4+0xa0>
 80002d8:	40d4      	lsrs	r4, r2
 80002da:	2300      	movs	r3, #0
 80002dc:	e9c6 4300 	strd	r4, r3, [r6]
 80002e0:	4639      	mov	r1, r7
 80002e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d909      	bls.n	80002fe <__udivmoddi4+0xbe>
 80002ea:	2e00      	cmp	r6, #0
 80002ec:	f000 80eb 	beq.w	80004c6 <__udivmoddi4+0x286>
 80002f0:	2700      	movs	r7, #0
 80002f2:	e9c6 0100 	strd	r0, r1, [r6]
 80002f6:	4638      	mov	r0, r7
 80002f8:	4639      	mov	r1, r7
 80002fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002fe:	fab3 f783 	clz	r7, r3
 8000302:	2f00      	cmp	r7, #0
 8000304:	d147      	bne.n	8000396 <__udivmoddi4+0x156>
 8000306:	428b      	cmp	r3, r1
 8000308:	d302      	bcc.n	8000310 <__udivmoddi4+0xd0>
 800030a:	4282      	cmp	r2, r0
 800030c:	f200 80fa 	bhi.w	8000504 <__udivmoddi4+0x2c4>
 8000310:	1a84      	subs	r4, r0, r2
 8000312:	eb61 0303 	sbc.w	r3, r1, r3
 8000316:	2001      	movs	r0, #1
 8000318:	4698      	mov	r8, r3
 800031a:	2e00      	cmp	r6, #0
 800031c:	d0e0      	beq.n	80002e0 <__udivmoddi4+0xa0>
 800031e:	e9c6 4800 	strd	r4, r8, [r6]
 8000322:	e7dd      	b.n	80002e0 <__udivmoddi4+0xa0>
 8000324:	b902      	cbnz	r2, 8000328 <__udivmoddi4+0xe8>
 8000326:	deff      	udf	#255	; 0xff
 8000328:	fab2 f282 	clz	r2, r2
 800032c:	2a00      	cmp	r2, #0
 800032e:	f040 808f 	bne.w	8000450 <__udivmoddi4+0x210>
 8000332:	1b49      	subs	r1, r1, r5
 8000334:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000338:	fa1f f885 	uxth.w	r8, r5
 800033c:	2701      	movs	r7, #1
 800033e:	fbb1 fcfe 	udiv	ip, r1, lr
 8000342:	0c23      	lsrs	r3, r4, #16
 8000344:	fb0e 111c 	mls	r1, lr, ip, r1
 8000348:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800034c:	fb08 f10c 	mul.w	r1, r8, ip
 8000350:	4299      	cmp	r1, r3
 8000352:	d907      	bls.n	8000364 <__udivmoddi4+0x124>
 8000354:	18eb      	adds	r3, r5, r3
 8000356:	f10c 30ff 	add.w	r0, ip, #4294967295
 800035a:	d202      	bcs.n	8000362 <__udivmoddi4+0x122>
 800035c:	4299      	cmp	r1, r3
 800035e:	f200 80cd 	bhi.w	80004fc <__udivmoddi4+0x2bc>
 8000362:	4684      	mov	ip, r0
 8000364:	1a59      	subs	r1, r3, r1
 8000366:	b2a3      	uxth	r3, r4
 8000368:	fbb1 f0fe 	udiv	r0, r1, lr
 800036c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000370:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000374:	fb08 f800 	mul.w	r8, r8, r0
 8000378:	45a0      	cmp	r8, r4
 800037a:	d907      	bls.n	800038c <__udivmoddi4+0x14c>
 800037c:	192c      	adds	r4, r5, r4
 800037e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000382:	d202      	bcs.n	800038a <__udivmoddi4+0x14a>
 8000384:	45a0      	cmp	r8, r4
 8000386:	f200 80b6 	bhi.w	80004f6 <__udivmoddi4+0x2b6>
 800038a:	4618      	mov	r0, r3
 800038c:	eba4 0408 	sub.w	r4, r4, r8
 8000390:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000394:	e79f      	b.n	80002d6 <__udivmoddi4+0x96>
 8000396:	f1c7 0c20 	rsb	ip, r7, #32
 800039a:	40bb      	lsls	r3, r7
 800039c:	fa22 fe0c 	lsr.w	lr, r2, ip
 80003a0:	ea4e 0e03 	orr.w	lr, lr, r3
 80003a4:	fa01 f407 	lsl.w	r4, r1, r7
 80003a8:	fa20 f50c 	lsr.w	r5, r0, ip
 80003ac:	fa21 f30c 	lsr.w	r3, r1, ip
 80003b0:	ea4f 481e 	mov.w	r8, lr, lsr #16
 80003b4:	4325      	orrs	r5, r4
 80003b6:	fbb3 f9f8 	udiv	r9, r3, r8
 80003ba:	0c2c      	lsrs	r4, r5, #16
 80003bc:	fb08 3319 	mls	r3, r8, r9, r3
 80003c0:	fa1f fa8e 	uxth.w	sl, lr
 80003c4:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80003c8:	fb09 f40a 	mul.w	r4, r9, sl
 80003cc:	429c      	cmp	r4, r3
 80003ce:	fa02 f207 	lsl.w	r2, r2, r7
 80003d2:	fa00 f107 	lsl.w	r1, r0, r7
 80003d6:	d90b      	bls.n	80003f0 <__udivmoddi4+0x1b0>
 80003d8:	eb1e 0303 	adds.w	r3, lr, r3
 80003dc:	f109 30ff 	add.w	r0, r9, #4294967295
 80003e0:	f080 8087 	bcs.w	80004f2 <__udivmoddi4+0x2b2>
 80003e4:	429c      	cmp	r4, r3
 80003e6:	f240 8084 	bls.w	80004f2 <__udivmoddi4+0x2b2>
 80003ea:	f1a9 0902 	sub.w	r9, r9, #2
 80003ee:	4473      	add	r3, lr
 80003f0:	1b1b      	subs	r3, r3, r4
 80003f2:	b2ad      	uxth	r5, r5
 80003f4:	fbb3 f0f8 	udiv	r0, r3, r8
 80003f8:	fb08 3310 	mls	r3, r8, r0, r3
 80003fc:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000400:	fb00 fa0a 	mul.w	sl, r0, sl
 8000404:	45a2      	cmp	sl, r4
 8000406:	d908      	bls.n	800041a <__udivmoddi4+0x1da>
 8000408:	eb1e 0404 	adds.w	r4, lr, r4
 800040c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000410:	d26b      	bcs.n	80004ea <__udivmoddi4+0x2aa>
 8000412:	45a2      	cmp	sl, r4
 8000414:	d969      	bls.n	80004ea <__udivmoddi4+0x2aa>
 8000416:	3802      	subs	r0, #2
 8000418:	4474      	add	r4, lr
 800041a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800041e:	fba0 8902 	umull	r8, r9, r0, r2
 8000422:	eba4 040a 	sub.w	r4, r4, sl
 8000426:	454c      	cmp	r4, r9
 8000428:	46c2      	mov	sl, r8
 800042a:	464b      	mov	r3, r9
 800042c:	d354      	bcc.n	80004d8 <__udivmoddi4+0x298>
 800042e:	d051      	beq.n	80004d4 <__udivmoddi4+0x294>
 8000430:	2e00      	cmp	r6, #0
 8000432:	d069      	beq.n	8000508 <__udivmoddi4+0x2c8>
 8000434:	ebb1 050a 	subs.w	r5, r1, sl
 8000438:	eb64 0403 	sbc.w	r4, r4, r3
 800043c:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000440:	40fd      	lsrs	r5, r7
 8000442:	40fc      	lsrs	r4, r7
 8000444:	ea4c 0505 	orr.w	r5, ip, r5
 8000448:	e9c6 5400 	strd	r5, r4, [r6]
 800044c:	2700      	movs	r7, #0
 800044e:	e747      	b.n	80002e0 <__udivmoddi4+0xa0>
 8000450:	f1c2 0320 	rsb	r3, r2, #32
 8000454:	fa20 f703 	lsr.w	r7, r0, r3
 8000458:	4095      	lsls	r5, r2
 800045a:	fa01 f002 	lsl.w	r0, r1, r2
 800045e:	fa21 f303 	lsr.w	r3, r1, r3
 8000462:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000466:	4338      	orrs	r0, r7
 8000468:	0c01      	lsrs	r1, r0, #16
 800046a:	fbb3 f7fe 	udiv	r7, r3, lr
 800046e:	fa1f f885 	uxth.w	r8, r5
 8000472:	fb0e 3317 	mls	r3, lr, r7, r3
 8000476:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800047a:	fb07 f308 	mul.w	r3, r7, r8
 800047e:	428b      	cmp	r3, r1
 8000480:	fa04 f402 	lsl.w	r4, r4, r2
 8000484:	d907      	bls.n	8000496 <__udivmoddi4+0x256>
 8000486:	1869      	adds	r1, r5, r1
 8000488:	f107 3cff 	add.w	ip, r7, #4294967295
 800048c:	d22f      	bcs.n	80004ee <__udivmoddi4+0x2ae>
 800048e:	428b      	cmp	r3, r1
 8000490:	d92d      	bls.n	80004ee <__udivmoddi4+0x2ae>
 8000492:	3f02      	subs	r7, #2
 8000494:	4429      	add	r1, r5
 8000496:	1acb      	subs	r3, r1, r3
 8000498:	b281      	uxth	r1, r0
 800049a:	fbb3 f0fe 	udiv	r0, r3, lr
 800049e:	fb0e 3310 	mls	r3, lr, r0, r3
 80004a2:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004a6:	fb00 f308 	mul.w	r3, r0, r8
 80004aa:	428b      	cmp	r3, r1
 80004ac:	d907      	bls.n	80004be <__udivmoddi4+0x27e>
 80004ae:	1869      	adds	r1, r5, r1
 80004b0:	f100 3cff 	add.w	ip, r0, #4294967295
 80004b4:	d217      	bcs.n	80004e6 <__udivmoddi4+0x2a6>
 80004b6:	428b      	cmp	r3, r1
 80004b8:	d915      	bls.n	80004e6 <__udivmoddi4+0x2a6>
 80004ba:	3802      	subs	r0, #2
 80004bc:	4429      	add	r1, r5
 80004be:	1ac9      	subs	r1, r1, r3
 80004c0:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80004c4:	e73b      	b.n	800033e <__udivmoddi4+0xfe>
 80004c6:	4637      	mov	r7, r6
 80004c8:	4630      	mov	r0, r6
 80004ca:	e709      	b.n	80002e0 <__udivmoddi4+0xa0>
 80004cc:	4607      	mov	r7, r0
 80004ce:	e6e7      	b.n	80002a0 <__udivmoddi4+0x60>
 80004d0:	4618      	mov	r0, r3
 80004d2:	e6fb      	b.n	80002cc <__udivmoddi4+0x8c>
 80004d4:	4541      	cmp	r1, r8
 80004d6:	d2ab      	bcs.n	8000430 <__udivmoddi4+0x1f0>
 80004d8:	ebb8 0a02 	subs.w	sl, r8, r2
 80004dc:	eb69 020e 	sbc.w	r2, r9, lr
 80004e0:	3801      	subs	r0, #1
 80004e2:	4613      	mov	r3, r2
 80004e4:	e7a4      	b.n	8000430 <__udivmoddi4+0x1f0>
 80004e6:	4660      	mov	r0, ip
 80004e8:	e7e9      	b.n	80004be <__udivmoddi4+0x27e>
 80004ea:	4618      	mov	r0, r3
 80004ec:	e795      	b.n	800041a <__udivmoddi4+0x1da>
 80004ee:	4667      	mov	r7, ip
 80004f0:	e7d1      	b.n	8000496 <__udivmoddi4+0x256>
 80004f2:	4681      	mov	r9, r0
 80004f4:	e77c      	b.n	80003f0 <__udivmoddi4+0x1b0>
 80004f6:	3802      	subs	r0, #2
 80004f8:	442c      	add	r4, r5
 80004fa:	e747      	b.n	800038c <__udivmoddi4+0x14c>
 80004fc:	f1ac 0c02 	sub.w	ip, ip, #2
 8000500:	442b      	add	r3, r5
 8000502:	e72f      	b.n	8000364 <__udivmoddi4+0x124>
 8000504:	4638      	mov	r0, r7
 8000506:	e708      	b.n	800031a <__udivmoddi4+0xda>
 8000508:	4637      	mov	r7, r6
 800050a:	e6e9      	b.n	80002e0 <__udivmoddi4+0xa0>

0800050c <__aeabi_idiv0>:
 800050c:	4770      	bx	lr
 800050e:	bf00      	nop

08000510 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8000510:	b480      	push	{r7}
 8000512:	b083      	sub	sp, #12
 8000514:	af00      	add	r7, sp, #0
 8000516:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000518:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 800051c:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 8000520:	f003 0301 	and.w	r3, r3, #1
 8000524:	2b00      	cmp	r3, #0
 8000526:	d013      	beq.n	8000550 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8000528:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 800052c:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 8000530:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000534:	2b00      	cmp	r3, #0
 8000536:	d00b      	beq.n	8000550 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8000538:	e000      	b.n	800053c <ITM_SendChar+0x2c>
    {
      __NOP();
 800053a:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 800053c:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000540:	681b      	ldr	r3, [r3, #0]
 8000542:	2b00      	cmp	r3, #0
 8000544:	d0f9      	beq.n	800053a <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8000546:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 800054a:	687a      	ldr	r2, [r7, #4]
 800054c:	b2d2      	uxtb	r2, r2
 800054e:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8000550:	687b      	ldr	r3, [r7, #4]
}
 8000552:	4618      	mov	r0, r3
 8000554:	370c      	adds	r7, #12
 8000556:	46bd      	mov	sp, r7
 8000558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800055c:	4770      	bx	lr
	...

08000560 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000560:	b5b0      	push	{r4, r5, r7, lr}
 8000562:	b082      	sub	sp, #8
 8000564:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000566:	f000 fc7c 	bl	8000e62 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800056a:	f000 f853 	bl	8000614 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800056e:	f000 f945 	bl	80007fc <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8000572:	f000 f8e5 	bl	8000740 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8000576:	f000 f913 	bl	80007a0 <MX_USB_OTG_FS_PCD_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 800057a:	f003 fb6d 	bl	8003c58 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 800057e:	4a1b      	ldr	r2, [pc, #108]	; (80005ec <main+0x8c>)
 8000580:	2100      	movs	r1, #0
 8000582:	481b      	ldr	r0, [pc, #108]	; (80005f0 <main+0x90>)
 8000584:	f003 fbd2 	bl	8003d2c <osThreadNew>
 8000588:	4602      	mov	r2, r0
 800058a:	4b1a      	ldr	r3, [pc, #104]	; (80005f4 <main+0x94>)
 800058c:	601a      	str	r2, [r3, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  strcpy(xTP1.string, "Task 1 is running");
 800058e:	4a1a      	ldr	r2, [pc, #104]	; (80005f8 <main+0x98>)
 8000590:	4b1a      	ldr	r3, [pc, #104]	; (80005fc <main+0x9c>)
 8000592:	4614      	mov	r4, r2
 8000594:	461d      	mov	r5, r3
 8000596:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000598:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800059a:	682b      	ldr	r3, [r5, #0]
 800059c:	8023      	strh	r3, [r4, #0]
  xTP1.period = 1000;
 800059e:	4b16      	ldr	r3, [pc, #88]	; (80005f8 <main+0x98>)
 80005a0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80005a4:	621a      	str	r2, [r3, #32]
  /* Заполнение полей структуры, передаваемой Задаче 2 */
  strcpy(xTP2.string, "Task 2 is running");
 80005a6:	4a16      	ldr	r2, [pc, #88]	; (8000600 <main+0xa0>)
 80005a8:	4b16      	ldr	r3, [pc, #88]	; (8000604 <main+0xa4>)
 80005aa:	4614      	mov	r4, r2
 80005ac:	461d      	mov	r5, r3
 80005ae:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80005b0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80005b2:	682b      	ldr	r3, [r5, #0]
 80005b4:	8023      	strh	r3, [r4, #0]
  xTP2.period = 3000;
 80005b6:	4b12      	ldr	r3, [pc, #72]	; (8000600 <main+0xa0>)
 80005b8:	f640 32b8 	movw	r2, #3000	; 0xbb8
 80005bc:	621a      	str	r2, [r3, #32]
  /* Создание Задачи 1. Передача ей в качестве параметра указателя на структуру xTP1 */
  xTaskCreate( vTask, ( signed char * )"Task1", configMINIMAL_STACK_SIZE, (void*)&xTP1, 1, NULL);
 80005be:	2300      	movs	r3, #0
 80005c0:	9301      	str	r3, [sp, #4]
 80005c2:	2301      	movs	r3, #1
 80005c4:	9300      	str	r3, [sp, #0]
 80005c6:	4b0c      	ldr	r3, [pc, #48]	; (80005f8 <main+0x98>)
 80005c8:	2280      	movs	r2, #128	; 0x80
 80005ca:	490f      	ldr	r1, [pc, #60]	; (8000608 <main+0xa8>)
 80005cc:	480f      	ldr	r0, [pc, #60]	; (800060c <main+0xac>)
 80005ce:	f004 fabf 	bl	8004b50 <xTaskCreate>
  /* Создание Задачи 2. Передача ей указателя на структуру xTP2 */
  xTaskCreate( vTask, ( signed char * )"Task2", configMINIMAL_STACK_SIZE, (void*)&xTP2, 1, NULL );
 80005d2:	2300      	movs	r3, #0
 80005d4:	9301      	str	r3, [sp, #4]
 80005d6:	2301      	movs	r3, #1
 80005d8:	9300      	str	r3, [sp, #0]
 80005da:	4b09      	ldr	r3, [pc, #36]	; (8000600 <main+0xa0>)
 80005dc:	2280      	movs	r2, #128	; 0x80
 80005de:	490c      	ldr	r1, [pc, #48]	; (8000610 <main+0xb0>)
 80005e0:	480a      	ldr	r0, [pc, #40]	; (800060c <main+0xac>)
 80005e2:	f004 fab5 	bl	8004b50 <xTaskCreate>
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 80005e6:	f003 fb6b 	bl	8003cc0 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80005ea:	e7fe      	b.n	80005ea <main+0x8a>
 80005ec:	0800711c 	.word	0x0800711c
 80005f0:	08000a21 	.word	0x08000a21
 80005f4:	200049a4 	.word	0x200049a4
 80005f8:	20004e30 	.word	0x20004e30
 80005fc:	080070cc 	.word	0x080070cc
 8000600:	20004e54 	.word	0x20004e54
 8000604:	080070e0 	.word	0x080070e0
 8000608:	080070f4 	.word	0x080070f4
 800060c:	08000a01 	.word	0x08000a01
 8000610:	080070fc 	.word	0x080070fc

08000614 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000614:	b580      	push	{r7, lr}
 8000616:	b0b4      	sub	sp, #208	; 0xd0
 8000618:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800061a:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 800061e:	2230      	movs	r2, #48	; 0x30
 8000620:	2100      	movs	r1, #0
 8000622:	4618      	mov	r0, r3
 8000624:	f006 f8cf 	bl	80067c6 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000628:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 800062c:	2200      	movs	r2, #0
 800062e:	601a      	str	r2, [r3, #0]
 8000630:	605a      	str	r2, [r3, #4]
 8000632:	609a      	str	r2, [r3, #8]
 8000634:	60da      	str	r2, [r3, #12]
 8000636:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000638:	f107 0308 	add.w	r3, r7, #8
 800063c:	2284      	movs	r2, #132	; 0x84
 800063e:	2100      	movs	r1, #0
 8000640:	4618      	mov	r0, r3
 8000642:	f006 f8c0 	bl	80067c6 <memset>

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000646:	f001 f849 	bl	80016dc <HAL_PWR_EnableBkUpAccess>
  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800064a:	4b3a      	ldr	r3, [pc, #232]	; (8000734 <SystemClock_Config+0x120>)
 800064c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800064e:	4a39      	ldr	r2, [pc, #228]	; (8000734 <SystemClock_Config+0x120>)
 8000650:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000654:	6413      	str	r3, [r2, #64]	; 0x40
 8000656:	4b37      	ldr	r3, [pc, #220]	; (8000734 <SystemClock_Config+0x120>)
 8000658:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800065a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800065e:	607b      	str	r3, [r7, #4]
 8000660:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000662:	4b35      	ldr	r3, [pc, #212]	; (8000738 <SystemClock_Config+0x124>)
 8000664:	681b      	ldr	r3, [r3, #0]
 8000666:	4a34      	ldr	r2, [pc, #208]	; (8000738 <SystemClock_Config+0x124>)
 8000668:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800066c:	6013      	str	r3, [r2, #0]
 800066e:	4b32      	ldr	r3, [pc, #200]	; (8000738 <SystemClock_Config+0x124>)
 8000670:	681b      	ldr	r3, [r3, #0]
 8000672:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000676:	603b      	str	r3, [r7, #0]
 8000678:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800067a:	2301      	movs	r3, #1
 800067c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000680:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000684:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000688:	2302      	movs	r3, #2
 800068a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800068e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000692:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000696:	2304      	movs	r3, #4
 8000698:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
  RCC_OscInitStruct.PLL.PLLN = 216;
 800069c:	23d8      	movs	r3, #216	; 0xd8
 800069e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80006a2:	2302      	movs	r3, #2
 80006a4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLQ = 9;
 80006a8:	2309      	movs	r3, #9
 80006aa:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006ae:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80006b2:	4618      	mov	r0, r3
 80006b4:	f001 f872 	bl	800179c <HAL_RCC_OscConfig>
 80006b8:	4603      	mov	r3, r0
 80006ba:	2b00      	cmp	r3, #0
 80006bc:	d001      	beq.n	80006c2 <SystemClock_Config+0xae>
  {
    Error_Handler();
 80006be:	f000 f9c9 	bl	8000a54 <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80006c2:	f001 f81b 	bl	80016fc <HAL_PWREx_EnableOverDrive>
 80006c6:	4603      	mov	r3, r0
 80006c8:	2b00      	cmp	r3, #0
 80006ca:	d001      	beq.n	80006d0 <SystemClock_Config+0xbc>
  {
    Error_Handler();
 80006cc:	f000 f9c2 	bl	8000a54 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006d0:	230f      	movs	r3, #15
 80006d2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006d6:	2302      	movs	r3, #2
 80006d8:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006dc:	2300      	movs	r3, #0
 80006de:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80006e2:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80006e6:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80006ea:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80006ee:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 80006f2:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 80006f6:	2107      	movs	r1, #7
 80006f8:	4618      	mov	r0, r3
 80006fa:	f001 faf3 	bl	8001ce4 <HAL_RCC_ClockConfig>
 80006fe:	4603      	mov	r3, r0
 8000700:	2b00      	cmp	r3, #0
 8000702:	d001      	beq.n	8000708 <SystemClock_Config+0xf4>
  {
    Error_Handler();
 8000704:	f000 f9a6 	bl	8000a54 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3|RCC_PERIPHCLK_CLK48;
 8000708:	4b0c      	ldr	r3, [pc, #48]	; (800073c <SystemClock_Config+0x128>)
 800070a:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 800070c:	2300      	movs	r3, #0
 800070e:	657b      	str	r3, [r7, #84]	; 0x54
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 8000710:	2300      	movs	r3, #0
 8000712:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000716:	f107 0308 	add.w	r3, r7, #8
 800071a:	4618      	mov	r0, r3
 800071c:	f001 fd0c 	bl	8002138 <HAL_RCCEx_PeriphCLKConfig>
 8000720:	4603      	mov	r3, r0
 8000722:	2b00      	cmp	r3, #0
 8000724:	d001      	beq.n	800072a <SystemClock_Config+0x116>
  {
    Error_Handler();
 8000726:	f000 f995 	bl	8000a54 <Error_Handler>
  }
}
 800072a:	bf00      	nop
 800072c:	37d0      	adds	r7, #208	; 0xd0
 800072e:	46bd      	mov	sp, r7
 8000730:	bd80      	pop	{r7, pc}
 8000732:	bf00      	nop
 8000734:	40023800 	.word	0x40023800
 8000738:	40007000 	.word	0x40007000
 800073c:	00200100 	.word	0x00200100

08000740 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000740:	b580      	push	{r7, lr}
 8000742:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000744:	4b14      	ldr	r3, [pc, #80]	; (8000798 <MX_USART3_UART_Init+0x58>)
 8000746:	4a15      	ldr	r2, [pc, #84]	; (800079c <MX_USART3_UART_Init+0x5c>)
 8000748:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800074a:	4b13      	ldr	r3, [pc, #76]	; (8000798 <MX_USART3_UART_Init+0x58>)
 800074c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000750:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000752:	4b11      	ldr	r3, [pc, #68]	; (8000798 <MX_USART3_UART_Init+0x58>)
 8000754:	2200      	movs	r2, #0
 8000756:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000758:	4b0f      	ldr	r3, [pc, #60]	; (8000798 <MX_USART3_UART_Init+0x58>)
 800075a:	2200      	movs	r2, #0
 800075c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800075e:	4b0e      	ldr	r3, [pc, #56]	; (8000798 <MX_USART3_UART_Init+0x58>)
 8000760:	2200      	movs	r2, #0
 8000762:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000764:	4b0c      	ldr	r3, [pc, #48]	; (8000798 <MX_USART3_UART_Init+0x58>)
 8000766:	220c      	movs	r2, #12
 8000768:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800076a:	4b0b      	ldr	r3, [pc, #44]	; (8000798 <MX_USART3_UART_Init+0x58>)
 800076c:	2200      	movs	r2, #0
 800076e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000770:	4b09      	ldr	r3, [pc, #36]	; (8000798 <MX_USART3_UART_Init+0x58>)
 8000772:	2200      	movs	r2, #0
 8000774:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000776:	4b08      	ldr	r3, [pc, #32]	; (8000798 <MX_USART3_UART_Init+0x58>)
 8000778:	2200      	movs	r2, #0
 800077a:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800077c:	4b06      	ldr	r3, [pc, #24]	; (8000798 <MX_USART3_UART_Init+0x58>)
 800077e:	2200      	movs	r2, #0
 8000780:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000782:	4805      	ldr	r0, [pc, #20]	; (8000798 <MX_USART3_UART_Init+0x58>)
 8000784:	f002 fba8 	bl	8002ed8 <HAL_UART_Init>
 8000788:	4603      	mov	r3, r0
 800078a:	2b00      	cmp	r3, #0
 800078c:	d001      	beq.n	8000792 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 800078e:	f000 f961 	bl	8000a54 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000792:	bf00      	nop
 8000794:	bd80      	pop	{r7, pc}
 8000796:	bf00      	nop
 8000798:	200049a8 	.word	0x200049a8
 800079c:	40004800 	.word	0x40004800

080007a0 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 80007a0:	b580      	push	{r7, lr}
 80007a2:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80007a4:	4b14      	ldr	r3, [pc, #80]	; (80007f8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80007a6:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80007aa:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 80007ac:	4b12      	ldr	r3, [pc, #72]	; (80007f8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80007ae:	2206      	movs	r2, #6
 80007b0:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80007b2:	4b11      	ldr	r3, [pc, #68]	; (80007f8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80007b4:	2202      	movs	r2, #2
 80007b6:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80007b8:	4b0f      	ldr	r3, [pc, #60]	; (80007f8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80007ba:	2200      	movs	r2, #0
 80007bc:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80007be:	4b0e      	ldr	r3, [pc, #56]	; (80007f8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80007c0:	2202      	movs	r2, #2
 80007c2:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 80007c4:	4b0c      	ldr	r3, [pc, #48]	; (80007f8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80007c6:	2201      	movs	r2, #1
 80007c8:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80007ca:	4b0b      	ldr	r3, [pc, #44]	; (80007f8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80007cc:	2200      	movs	r2, #0
 80007ce:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80007d0:	4b09      	ldr	r3, [pc, #36]	; (80007f8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80007d2:	2200      	movs	r2, #0
 80007d4:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 80007d6:	4b08      	ldr	r3, [pc, #32]	; (80007f8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80007d8:	2201      	movs	r2, #1
 80007da:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80007dc:	4b06      	ldr	r3, [pc, #24]	; (80007f8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80007de:	2200      	movs	r2, #0
 80007e0:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80007e2:	4805      	ldr	r0, [pc, #20]	; (80007f8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80007e4:	f000 fe31 	bl	800144a <HAL_PCD_Init>
 80007e8:	4603      	mov	r3, r0
 80007ea:	2b00      	cmp	r3, #0
 80007ec:	d001      	beq.n	80007f2 <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 80007ee:	f000 f931 	bl	8000a54 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 80007f2:	bf00      	nop
 80007f4:	bd80      	pop	{r7, pc}
 80007f6:	bf00      	nop
 80007f8:	20004a2c 	.word	0x20004a2c

080007fc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007fc:	b580      	push	{r7, lr}
 80007fe:	b08c      	sub	sp, #48	; 0x30
 8000800:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000802:	f107 031c 	add.w	r3, r7, #28
 8000806:	2200      	movs	r2, #0
 8000808:	601a      	str	r2, [r3, #0]
 800080a:	605a      	str	r2, [r3, #4]
 800080c:	609a      	str	r2, [r3, #8]
 800080e:	60da      	str	r2, [r3, #12]
 8000810:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000812:	4b67      	ldr	r3, [pc, #412]	; (80009b0 <MX_GPIO_Init+0x1b4>)
 8000814:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000816:	4a66      	ldr	r2, [pc, #408]	; (80009b0 <MX_GPIO_Init+0x1b4>)
 8000818:	f043 0304 	orr.w	r3, r3, #4
 800081c:	6313      	str	r3, [r2, #48]	; 0x30
 800081e:	4b64      	ldr	r3, [pc, #400]	; (80009b0 <MX_GPIO_Init+0x1b4>)
 8000820:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000822:	f003 0304 	and.w	r3, r3, #4
 8000826:	61bb      	str	r3, [r7, #24]
 8000828:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800082a:	4b61      	ldr	r3, [pc, #388]	; (80009b0 <MX_GPIO_Init+0x1b4>)
 800082c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800082e:	4a60      	ldr	r2, [pc, #384]	; (80009b0 <MX_GPIO_Init+0x1b4>)
 8000830:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000834:	6313      	str	r3, [r2, #48]	; 0x30
 8000836:	4b5e      	ldr	r3, [pc, #376]	; (80009b0 <MX_GPIO_Init+0x1b4>)
 8000838:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800083a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800083e:	617b      	str	r3, [r7, #20]
 8000840:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000842:	4b5b      	ldr	r3, [pc, #364]	; (80009b0 <MX_GPIO_Init+0x1b4>)
 8000844:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000846:	4a5a      	ldr	r2, [pc, #360]	; (80009b0 <MX_GPIO_Init+0x1b4>)
 8000848:	f043 0301 	orr.w	r3, r3, #1
 800084c:	6313      	str	r3, [r2, #48]	; 0x30
 800084e:	4b58      	ldr	r3, [pc, #352]	; (80009b0 <MX_GPIO_Init+0x1b4>)
 8000850:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000852:	f003 0301 	and.w	r3, r3, #1
 8000856:	613b      	str	r3, [r7, #16]
 8000858:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800085a:	4b55      	ldr	r3, [pc, #340]	; (80009b0 <MX_GPIO_Init+0x1b4>)
 800085c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800085e:	4a54      	ldr	r2, [pc, #336]	; (80009b0 <MX_GPIO_Init+0x1b4>)
 8000860:	f043 0302 	orr.w	r3, r3, #2
 8000864:	6313      	str	r3, [r2, #48]	; 0x30
 8000866:	4b52      	ldr	r3, [pc, #328]	; (80009b0 <MX_GPIO_Init+0x1b4>)
 8000868:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800086a:	f003 0302 	and.w	r3, r3, #2
 800086e:	60fb      	str	r3, [r7, #12]
 8000870:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000872:	4b4f      	ldr	r3, [pc, #316]	; (80009b0 <MX_GPIO_Init+0x1b4>)
 8000874:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000876:	4a4e      	ldr	r2, [pc, #312]	; (80009b0 <MX_GPIO_Init+0x1b4>)
 8000878:	f043 0308 	orr.w	r3, r3, #8
 800087c:	6313      	str	r3, [r2, #48]	; 0x30
 800087e:	4b4c      	ldr	r3, [pc, #304]	; (80009b0 <MX_GPIO_Init+0x1b4>)
 8000880:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000882:	f003 0308 	and.w	r3, r3, #8
 8000886:	60bb      	str	r3, [r7, #8]
 8000888:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800088a:	4b49      	ldr	r3, [pc, #292]	; (80009b0 <MX_GPIO_Init+0x1b4>)
 800088c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800088e:	4a48      	ldr	r2, [pc, #288]	; (80009b0 <MX_GPIO_Init+0x1b4>)
 8000890:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000894:	6313      	str	r3, [r2, #48]	; 0x30
 8000896:	4b46      	ldr	r3, [pc, #280]	; (80009b0 <MX_GPIO_Init+0x1b4>)
 8000898:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800089a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800089e:	607b      	str	r3, [r7, #4]
 80008a0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 80008a2:	2200      	movs	r2, #0
 80008a4:	f244 0181 	movw	r1, #16513	; 0x4081
 80008a8:	4842      	ldr	r0, [pc, #264]	; (80009b4 <MX_GPIO_Init+0x1b8>)
 80008aa:	f000 fdb5 	bl	8001418 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 80008ae:	2200      	movs	r2, #0
 80008b0:	2140      	movs	r1, #64	; 0x40
 80008b2:	4841      	ldr	r0, [pc, #260]	; (80009b8 <MX_GPIO_Init+0x1bc>)
 80008b4:	f000 fdb0 	bl	8001418 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 80008b8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80008bc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80008be:	4b3f      	ldr	r3, [pc, #252]	; (80009bc <MX_GPIO_Init+0x1c0>)
 80008c0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008c2:	2300      	movs	r3, #0
 80008c4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 80008c6:	f107 031c 	add.w	r3, r7, #28
 80008ca:	4619      	mov	r1, r3
 80008cc:	483c      	ldr	r0, [pc, #240]	; (80009c0 <MX_GPIO_Init+0x1c4>)
 80008ce:	f000 fbf9 	bl	80010c4 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_MDC_Pin RMII_RXD0_Pin RMII_RXD1_Pin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 80008d2:	2332      	movs	r3, #50	; 0x32
 80008d4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008d6:	2302      	movs	r3, #2
 80008d8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008da:	2300      	movs	r3, #0
 80008dc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008de:	2303      	movs	r3, #3
 80008e0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80008e2:	230b      	movs	r3, #11
 80008e4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80008e6:	f107 031c 	add.w	r3, r7, #28
 80008ea:	4619      	mov	r1, r3
 80008ec:	4834      	ldr	r0, [pc, #208]	; (80009c0 <MX_GPIO_Init+0x1c4>)
 80008ee:	f000 fbe9 	bl	80010c4 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_REF_CLK_Pin RMII_MDIO_Pin RMII_CRS_DV_Pin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 80008f2:	2386      	movs	r3, #134	; 0x86
 80008f4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008f6:	2302      	movs	r3, #2
 80008f8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008fa:	2300      	movs	r3, #0
 80008fc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008fe:	2303      	movs	r3, #3
 8000900:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000902:	230b      	movs	r3, #11
 8000904:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000906:	f107 031c 	add.w	r3, r7, #28
 800090a:	4619      	mov	r1, r3
 800090c:	482d      	ldr	r0, [pc, #180]	; (80009c4 <MX_GPIO_Init+0x1c8>)
 800090e:	f000 fbd9 	bl	80010c4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8000912:	f244 0381 	movw	r3, #16513	; 0x4081
 8000916:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000918:	2301      	movs	r3, #1
 800091a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800091c:	2300      	movs	r3, #0
 800091e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000920:	2300      	movs	r3, #0
 8000922:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000924:	f107 031c 	add.w	r3, r7, #28
 8000928:	4619      	mov	r1, r3
 800092a:	4822      	ldr	r0, [pc, #136]	; (80009b4 <MX_GPIO_Init+0x1b8>)
 800092c:	f000 fbca 	bl	80010c4 <HAL_GPIO_Init>

  /*Configure GPIO pin : RMII_TXD1_Pin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8000930:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000934:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000936:	2302      	movs	r3, #2
 8000938:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800093a:	2300      	movs	r3, #0
 800093c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800093e:	2303      	movs	r3, #3
 8000940:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000942:	230b      	movs	r3, #11
 8000944:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8000946:	f107 031c 	add.w	r3, r7, #28
 800094a:	4619      	mov	r1, r3
 800094c:	4819      	ldr	r0, [pc, #100]	; (80009b4 <MX_GPIO_Init+0x1b8>)
 800094e:	f000 fbb9 	bl	80010c4 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000952:	2340      	movs	r3, #64	; 0x40
 8000954:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000956:	2301      	movs	r3, #1
 8000958:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800095a:	2300      	movs	r3, #0
 800095c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800095e:	2300      	movs	r3, #0
 8000960:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000962:	f107 031c 	add.w	r3, r7, #28
 8000966:	4619      	mov	r1, r3
 8000968:	4813      	ldr	r0, [pc, #76]	; (80009b8 <MX_GPIO_Init+0x1bc>)
 800096a:	f000 fbab 	bl	80010c4 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 800096e:	2380      	movs	r3, #128	; 0x80
 8000970:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000972:	2300      	movs	r3, #0
 8000974:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000976:	2300      	movs	r3, #0
 8000978:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800097a:	f107 031c 	add.w	r3, r7, #28
 800097e:	4619      	mov	r1, r3
 8000980:	480d      	ldr	r0, [pc, #52]	; (80009b8 <MX_GPIO_Init+0x1bc>)
 8000982:	f000 fb9f 	bl	80010c4 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_TX_EN_Pin RMII_TXD0_Pin */
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8000986:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800098a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800098c:	2302      	movs	r3, #2
 800098e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000990:	2300      	movs	r3, #0
 8000992:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000994:	2303      	movs	r3, #3
 8000996:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000998:	230b      	movs	r3, #11
 800099a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800099c:	f107 031c 	add.w	r3, r7, #28
 80009a0:	4619      	mov	r1, r3
 80009a2:	4805      	ldr	r0, [pc, #20]	; (80009b8 <MX_GPIO_Init+0x1bc>)
 80009a4:	f000 fb8e 	bl	80010c4 <HAL_GPIO_Init>

}
 80009a8:	bf00      	nop
 80009aa:	3730      	adds	r7, #48	; 0x30
 80009ac:	46bd      	mov	sp, r7
 80009ae:	bd80      	pop	{r7, pc}
 80009b0:	40023800 	.word	0x40023800
 80009b4:	40020400 	.word	0x40020400
 80009b8:	40021800 	.word	0x40021800
 80009bc:	10110000 	.word	0x10110000
 80009c0:	40020800 	.word	0x40020800
 80009c4:	40020000 	.word	0x40020000

080009c8 <_write>:

/* USER CODE BEGIN 4 */
int _write(int file, char *ptr, int len)
{
 80009c8:	b580      	push	{r7, lr}
 80009ca:	b086      	sub	sp, #24
 80009cc:	af00      	add	r7, sp, #0
 80009ce:	60f8      	str	r0, [r7, #12]
 80009d0:	60b9      	str	r1, [r7, #8]
 80009d2:	607a      	str	r2, [r7, #4]
	int DataIdx;
	for(DataIdx=0;DataIdx<len;DataIdx++)
 80009d4:	2300      	movs	r3, #0
 80009d6:	617b      	str	r3, [r7, #20]
 80009d8:	e009      	b.n	80009ee <_write+0x26>
	{
		ITM_SendChar(*ptr++);
 80009da:	68bb      	ldr	r3, [r7, #8]
 80009dc:	1c5a      	adds	r2, r3, #1
 80009de:	60ba      	str	r2, [r7, #8]
 80009e0:	781b      	ldrb	r3, [r3, #0]
 80009e2:	4618      	mov	r0, r3
 80009e4:	f7ff fd94 	bl	8000510 <ITM_SendChar>
	for(DataIdx=0;DataIdx<len;DataIdx++)
 80009e8:	697b      	ldr	r3, [r7, #20]
 80009ea:	3301      	adds	r3, #1
 80009ec:	617b      	str	r3, [r7, #20]
 80009ee:	697a      	ldr	r2, [r7, #20]
 80009f0:	687b      	ldr	r3, [r7, #4]
 80009f2:	429a      	cmp	r2, r3
 80009f4:	dbf1      	blt.n	80009da <_write+0x12>
	}
	return len;
 80009f6:	687b      	ldr	r3, [r7, #4]
}
 80009f8:	4618      	mov	r0, r3
 80009fa:	3718      	adds	r7, #24
 80009fc:	46bd      	mov	sp, r7
 80009fe:	bd80      	pop	{r7, pc}

08000a00 <vTask>:

void vTask( void *pvParameters )
{
 8000a00:	b580      	push	{r7, lr}
 8000a02:	b084      	sub	sp, #16
 8000a04:	af00      	add	r7, sp, #0
 8000a06:	6078      	str	r0, [r7, #4]
	volatile long ul;
	volatile TaskParam *pxTaskParam;
	/* Преобразование типа void* к типу TaskParam* */
	pxTaskParam = (TaskParam *) pvParameters;
 8000a08:	687b      	ldr	r3, [r7, #4]
 8000a0a:	60fb      	str	r3, [r7, #12]
	for( ;; ){
		/* Вывести на экран строку, переданную в качестве параметра при создании задачи */
		puts( (const char*)pxTaskParam->string );
 8000a0c:	68fb      	ldr	r3, [r7, #12]
 8000a0e:	4618      	mov	r0, r3
 8000a10:	f005 ff3e 	bl	8006890 <puts>
		/* Задержка на некоторый период Т2*/
		osDelay(pxTaskParam->period);
 8000a14:	68fb      	ldr	r3, [r7, #12]
 8000a16:	6a1b      	ldr	r3, [r3, #32]
 8000a18:	4618      	mov	r0, r3
 8000a1a:	f003 fa2d 	bl	8003e78 <osDelay>
	for( ;; ){
 8000a1e:	e7f5      	b.n	8000a0c <vTask+0xc>

08000a20 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000a20:	b580      	push	{r7, lr}
 8000a22:	b082      	sub	sp, #8
 8000a24:	af00      	add	r7, sp, #0
 8000a26:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000a28:	2001      	movs	r0, #1
 8000a2a:	f003 fa25 	bl	8003e78 <osDelay>
 8000a2e:	e7fb      	b.n	8000a28 <StartDefaultTask+0x8>

08000a30 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000a30:	b580      	push	{r7, lr}
 8000a32:	b082      	sub	sp, #8
 8000a34:	af00      	add	r7, sp, #0
 8000a36:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8000a38:	687b      	ldr	r3, [r7, #4]
 8000a3a:	681b      	ldr	r3, [r3, #0]
 8000a3c:	4a04      	ldr	r2, [pc, #16]	; (8000a50 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000a3e:	4293      	cmp	r3, r2
 8000a40:	d101      	bne.n	8000a46 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000a42:	f000 fa1b 	bl	8000e7c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000a46:	bf00      	nop
 8000a48:	3708      	adds	r7, #8
 8000a4a:	46bd      	mov	sp, r7
 8000a4c:	bd80      	pop	{r7, pc}
 8000a4e:	bf00      	nop
 8000a50:	40010000 	.word	0x40010000

08000a54 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a54:	b480      	push	{r7}
 8000a56:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a58:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a5a:	e7fe      	b.n	8000a5a <Error_Handler+0x6>

08000a5c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a5c:	b580      	push	{r7, lr}
 8000a5e:	b082      	sub	sp, #8
 8000a60:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000a62:	4b11      	ldr	r3, [pc, #68]	; (8000aa8 <HAL_MspInit+0x4c>)
 8000a64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a66:	4a10      	ldr	r2, [pc, #64]	; (8000aa8 <HAL_MspInit+0x4c>)
 8000a68:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a6c:	6413      	str	r3, [r2, #64]	; 0x40
 8000a6e:	4b0e      	ldr	r3, [pc, #56]	; (8000aa8 <HAL_MspInit+0x4c>)
 8000a70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a72:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a76:	607b      	str	r3, [r7, #4]
 8000a78:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a7a:	4b0b      	ldr	r3, [pc, #44]	; (8000aa8 <HAL_MspInit+0x4c>)
 8000a7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a7e:	4a0a      	ldr	r2, [pc, #40]	; (8000aa8 <HAL_MspInit+0x4c>)
 8000a80:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a84:	6453      	str	r3, [r2, #68]	; 0x44
 8000a86:	4b08      	ldr	r3, [pc, #32]	; (8000aa8 <HAL_MspInit+0x4c>)
 8000a88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a8a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000a8e:	603b      	str	r3, [r7, #0]
 8000a90:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000a92:	2200      	movs	r2, #0
 8000a94:	210f      	movs	r1, #15
 8000a96:	f06f 0001 	mvn.w	r0, #1
 8000a9a:	f000 fae9 	bl	8001070 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a9e:	bf00      	nop
 8000aa0:	3708      	adds	r7, #8
 8000aa2:	46bd      	mov	sp, r7
 8000aa4:	bd80      	pop	{r7, pc}
 8000aa6:	bf00      	nop
 8000aa8:	40023800 	.word	0x40023800

08000aac <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000aac:	b580      	push	{r7, lr}
 8000aae:	b08a      	sub	sp, #40	; 0x28
 8000ab0:	af00      	add	r7, sp, #0
 8000ab2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ab4:	f107 0314 	add.w	r3, r7, #20
 8000ab8:	2200      	movs	r2, #0
 8000aba:	601a      	str	r2, [r3, #0]
 8000abc:	605a      	str	r2, [r3, #4]
 8000abe:	609a      	str	r2, [r3, #8]
 8000ac0:	60da      	str	r2, [r3, #12]
 8000ac2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8000ac4:	687b      	ldr	r3, [r7, #4]
 8000ac6:	681b      	ldr	r3, [r3, #0]
 8000ac8:	4a17      	ldr	r2, [pc, #92]	; (8000b28 <HAL_UART_MspInit+0x7c>)
 8000aca:	4293      	cmp	r3, r2
 8000acc:	d128      	bne.n	8000b20 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000ace:	4b17      	ldr	r3, [pc, #92]	; (8000b2c <HAL_UART_MspInit+0x80>)
 8000ad0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ad2:	4a16      	ldr	r2, [pc, #88]	; (8000b2c <HAL_UART_MspInit+0x80>)
 8000ad4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000ad8:	6413      	str	r3, [r2, #64]	; 0x40
 8000ada:	4b14      	ldr	r3, [pc, #80]	; (8000b2c <HAL_UART_MspInit+0x80>)
 8000adc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ade:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000ae2:	613b      	str	r3, [r7, #16]
 8000ae4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000ae6:	4b11      	ldr	r3, [pc, #68]	; (8000b2c <HAL_UART_MspInit+0x80>)
 8000ae8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aea:	4a10      	ldr	r2, [pc, #64]	; (8000b2c <HAL_UART_MspInit+0x80>)
 8000aec:	f043 0308 	orr.w	r3, r3, #8
 8000af0:	6313      	str	r3, [r2, #48]	; 0x30
 8000af2:	4b0e      	ldr	r3, [pc, #56]	; (8000b2c <HAL_UART_MspInit+0x80>)
 8000af4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000af6:	f003 0308 	and.w	r3, r3, #8
 8000afa:	60fb      	str	r3, [r7, #12]
 8000afc:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8000afe:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000b02:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b04:	2302      	movs	r3, #2
 8000b06:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b08:	2300      	movs	r3, #0
 8000b0a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b0c:	2303      	movs	r3, #3
 8000b0e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000b10:	2307      	movs	r3, #7
 8000b12:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000b14:	f107 0314 	add.w	r3, r7, #20
 8000b18:	4619      	mov	r1, r3
 8000b1a:	4805      	ldr	r0, [pc, #20]	; (8000b30 <HAL_UART_MspInit+0x84>)
 8000b1c:	f000 fad2 	bl	80010c4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000b20:	bf00      	nop
 8000b22:	3728      	adds	r7, #40	; 0x28
 8000b24:	46bd      	mov	sp, r7
 8000b26:	bd80      	pop	{r7, pc}
 8000b28:	40004800 	.word	0x40004800
 8000b2c:	40023800 	.word	0x40023800
 8000b30:	40020c00 	.word	0x40020c00

08000b34 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8000b34:	b580      	push	{r7, lr}
 8000b36:	b08a      	sub	sp, #40	; 0x28
 8000b38:	af00      	add	r7, sp, #0
 8000b3a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b3c:	f107 0314 	add.w	r3, r7, #20
 8000b40:	2200      	movs	r2, #0
 8000b42:	601a      	str	r2, [r3, #0]
 8000b44:	605a      	str	r2, [r3, #4]
 8000b46:	609a      	str	r2, [r3, #8]
 8000b48:	60da      	str	r2, [r3, #12]
 8000b4a:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB_OTG_FS)
 8000b4c:	687b      	ldr	r3, [r7, #4]
 8000b4e:	681b      	ldr	r3, [r3, #0]
 8000b50:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000b54:	d141      	bne.n	8000bda <HAL_PCD_MspInit+0xa6>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b56:	4b23      	ldr	r3, [pc, #140]	; (8000be4 <HAL_PCD_MspInit+0xb0>)
 8000b58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b5a:	4a22      	ldr	r2, [pc, #136]	; (8000be4 <HAL_PCD_MspInit+0xb0>)
 8000b5c:	f043 0301 	orr.w	r3, r3, #1
 8000b60:	6313      	str	r3, [r2, #48]	; 0x30
 8000b62:	4b20      	ldr	r3, [pc, #128]	; (8000be4 <HAL_PCD_MspInit+0xb0>)
 8000b64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b66:	f003 0301 	and.w	r3, r3, #1
 8000b6a:	613b      	str	r3, [r7, #16]
 8000b6c:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8000b6e:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8000b72:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b74:	2302      	movs	r3, #2
 8000b76:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b78:	2300      	movs	r3, #0
 8000b7a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b7c:	2303      	movs	r3, #3
 8000b7e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000b80:	230a      	movs	r3, #10
 8000b82:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b84:	f107 0314 	add.w	r3, r7, #20
 8000b88:	4619      	mov	r1, r3
 8000b8a:	4817      	ldr	r0, [pc, #92]	; (8000be8 <HAL_PCD_MspInit+0xb4>)
 8000b8c:	f000 fa9a 	bl	80010c4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8000b90:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000b94:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b96:	2300      	movs	r3, #0
 8000b98:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b9a:	2300      	movs	r3, #0
 8000b9c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000b9e:	f107 0314 	add.w	r3, r7, #20
 8000ba2:	4619      	mov	r1, r3
 8000ba4:	4810      	ldr	r0, [pc, #64]	; (8000be8 <HAL_PCD_MspInit+0xb4>)
 8000ba6:	f000 fa8d 	bl	80010c4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8000baa:	4b0e      	ldr	r3, [pc, #56]	; (8000be4 <HAL_PCD_MspInit+0xb0>)
 8000bac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000bae:	4a0d      	ldr	r2, [pc, #52]	; (8000be4 <HAL_PCD_MspInit+0xb0>)
 8000bb0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000bb4:	6353      	str	r3, [r2, #52]	; 0x34
 8000bb6:	4b0b      	ldr	r3, [pc, #44]	; (8000be4 <HAL_PCD_MspInit+0xb0>)
 8000bb8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000bba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000bbe:	60fb      	str	r3, [r7, #12]
 8000bc0:	68fb      	ldr	r3, [r7, #12]
 8000bc2:	4b08      	ldr	r3, [pc, #32]	; (8000be4 <HAL_PCD_MspInit+0xb0>)
 8000bc4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000bc6:	4a07      	ldr	r2, [pc, #28]	; (8000be4 <HAL_PCD_MspInit+0xb0>)
 8000bc8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000bcc:	6453      	str	r3, [r2, #68]	; 0x44
 8000bce:	4b05      	ldr	r3, [pc, #20]	; (8000be4 <HAL_PCD_MspInit+0xb0>)
 8000bd0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000bd2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000bd6:	60bb      	str	r3, [r7, #8]
 8000bd8:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8000bda:	bf00      	nop
 8000bdc:	3728      	adds	r7, #40	; 0x28
 8000bde:	46bd      	mov	sp, r7
 8000be0:	bd80      	pop	{r7, pc}
 8000be2:	bf00      	nop
 8000be4:	40023800 	.word	0x40023800
 8000be8:	40020000 	.word	0x40020000

08000bec <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000bec:	b580      	push	{r7, lr}
 8000bee:	b08c      	sub	sp, #48	; 0x30
 8000bf0:	af00      	add	r7, sp, #0
 8000bf2:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000bf4:	2300      	movs	r3, #0
 8000bf6:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000bf8:	2300      	movs	r3, #0
 8000bfa:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority ,0);
 8000bfc:	2200      	movs	r2, #0
 8000bfe:	6879      	ldr	r1, [r7, #4]
 8000c00:	2019      	movs	r0, #25
 8000c02:	f000 fa35 	bl	8001070 <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8000c06:	2019      	movs	r0, #25
 8000c08:	f000 fa4e 	bl	80010a8 <HAL_NVIC_EnableIRQ>
  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8000c0c:	4b1f      	ldr	r3, [pc, #124]	; (8000c8c <HAL_InitTick+0xa0>)
 8000c0e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c10:	4a1e      	ldr	r2, [pc, #120]	; (8000c8c <HAL_InitTick+0xa0>)
 8000c12:	f043 0301 	orr.w	r3, r3, #1
 8000c16:	6453      	str	r3, [r2, #68]	; 0x44
 8000c18:	4b1c      	ldr	r3, [pc, #112]	; (8000c8c <HAL_InitTick+0xa0>)
 8000c1a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c1c:	f003 0301 	and.w	r3, r3, #1
 8000c20:	60fb      	str	r3, [r7, #12]
 8000c22:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000c24:	f107 0210 	add.w	r2, r7, #16
 8000c28:	f107 0314 	add.w	r3, r7, #20
 8000c2c:	4611      	mov	r1, r2
 8000c2e:	4618      	mov	r0, r3
 8000c30:	f001 fa50 	bl	80020d4 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 8000c34:	f001 fa3a 	bl	80020ac <HAL_RCC_GetPCLK2Freq>
 8000c38:	4603      	mov	r3, r0
 8000c3a:	005b      	lsls	r3, r3, #1
 8000c3c:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000c3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000c40:	4a13      	ldr	r2, [pc, #76]	; (8000c90 <HAL_InitTick+0xa4>)
 8000c42:	fba2 2303 	umull	r2, r3, r2, r3
 8000c46:	0c9b      	lsrs	r3, r3, #18
 8000c48:	3b01      	subs	r3, #1
 8000c4a:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8000c4c:	4b11      	ldr	r3, [pc, #68]	; (8000c94 <HAL_InitTick+0xa8>)
 8000c4e:	4a12      	ldr	r2, [pc, #72]	; (8000c98 <HAL_InitTick+0xac>)
 8000c50:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8000c52:	4b10      	ldr	r3, [pc, #64]	; (8000c94 <HAL_InitTick+0xa8>)
 8000c54:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000c58:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8000c5a:	4a0e      	ldr	r2, [pc, #56]	; (8000c94 <HAL_InitTick+0xa8>)
 8000c5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000c5e:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8000c60:	4b0c      	ldr	r3, [pc, #48]	; (8000c94 <HAL_InitTick+0xa8>)
 8000c62:	2200      	movs	r2, #0
 8000c64:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c66:	4b0b      	ldr	r3, [pc, #44]	; (8000c94 <HAL_InitTick+0xa8>)
 8000c68:	2200      	movs	r2, #0
 8000c6a:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8000c6c:	4809      	ldr	r0, [pc, #36]	; (8000c94 <HAL_InitTick+0xa8>)
 8000c6e:	f001 fe53 	bl	8002918 <HAL_TIM_Base_Init>
 8000c72:	4603      	mov	r3, r0
 8000c74:	2b00      	cmp	r3, #0
 8000c76:	d104      	bne.n	8000c82 <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 8000c78:	4806      	ldr	r0, [pc, #24]	; (8000c94 <HAL_InitTick+0xa8>)
 8000c7a:	f001 feaf 	bl	80029dc <HAL_TIM_Base_Start_IT>
 8000c7e:	4603      	mov	r3, r0
 8000c80:	e000      	b.n	8000c84 <HAL_InitTick+0x98>
  }

  /* Return function status */
  return HAL_ERROR;
 8000c82:	2301      	movs	r3, #1
}
 8000c84:	4618      	mov	r0, r3
 8000c86:	3730      	adds	r7, #48	; 0x30
 8000c88:	46bd      	mov	sp, r7
 8000c8a:	bd80      	pop	{r7, pc}
 8000c8c:	40023800 	.word	0x40023800
 8000c90:	431bde83 	.word	0x431bde83
 8000c94:	20004e78 	.word	0x20004e78
 8000c98:	40010000 	.word	0x40010000

08000c9c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c9c:	b480      	push	{r7}
 8000c9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000ca0:	e7fe      	b.n	8000ca0 <NMI_Handler+0x4>

08000ca2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ca2:	b480      	push	{r7}
 8000ca4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ca6:	e7fe      	b.n	8000ca6 <HardFault_Handler+0x4>

08000ca8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ca8:	b480      	push	{r7}
 8000caa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000cac:	e7fe      	b.n	8000cac <MemManage_Handler+0x4>

08000cae <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000cae:	b480      	push	{r7}
 8000cb0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000cb2:	e7fe      	b.n	8000cb2 <BusFault_Handler+0x4>

08000cb4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000cb4:	b480      	push	{r7}
 8000cb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000cb8:	e7fe      	b.n	8000cb8 <UsageFault_Handler+0x4>

08000cba <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000cba:	b480      	push	{r7}
 8000cbc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000cbe:	bf00      	nop
 8000cc0:	46bd      	mov	sp, r7
 8000cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc6:	4770      	bx	lr

08000cc8 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8000cc8:	b580      	push	{r7, lr}
 8000cca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000ccc:	4802      	ldr	r0, [pc, #8]	; (8000cd8 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8000cce:	f001 fefd 	bl	8002acc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8000cd2:	bf00      	nop
 8000cd4:	bd80      	pop	{r7, pc}
 8000cd6:	bf00      	nop
 8000cd8:	20004e78 	.word	0x20004e78

08000cdc <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000cdc:	b580      	push	{r7, lr}
 8000cde:	b086      	sub	sp, #24
 8000ce0:	af00      	add	r7, sp, #0
 8000ce2:	60f8      	str	r0, [r7, #12]
 8000ce4:	60b9      	str	r1, [r7, #8]
 8000ce6:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ce8:	2300      	movs	r3, #0
 8000cea:	617b      	str	r3, [r7, #20]
 8000cec:	e00a      	b.n	8000d04 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000cee:	f3af 8000 	nop.w
 8000cf2:	4601      	mov	r1, r0
 8000cf4:	68bb      	ldr	r3, [r7, #8]
 8000cf6:	1c5a      	adds	r2, r3, #1
 8000cf8:	60ba      	str	r2, [r7, #8]
 8000cfa:	b2ca      	uxtb	r2, r1
 8000cfc:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000cfe:	697b      	ldr	r3, [r7, #20]
 8000d00:	3301      	adds	r3, #1
 8000d02:	617b      	str	r3, [r7, #20]
 8000d04:	697a      	ldr	r2, [r7, #20]
 8000d06:	687b      	ldr	r3, [r7, #4]
 8000d08:	429a      	cmp	r2, r3
 8000d0a:	dbf0      	blt.n	8000cee <_read+0x12>
	}

return len;
 8000d0c:	687b      	ldr	r3, [r7, #4]
}
 8000d0e:	4618      	mov	r0, r3
 8000d10:	3718      	adds	r7, #24
 8000d12:	46bd      	mov	sp, r7
 8000d14:	bd80      	pop	{r7, pc}

08000d16 <_close>:
	}
	return len;
}

int _close(int file)
{
 8000d16:	b480      	push	{r7}
 8000d18:	b083      	sub	sp, #12
 8000d1a:	af00      	add	r7, sp, #0
 8000d1c:	6078      	str	r0, [r7, #4]
	return -1;
 8000d1e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000d22:	4618      	mov	r0, r3
 8000d24:	370c      	adds	r7, #12
 8000d26:	46bd      	mov	sp, r7
 8000d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d2c:	4770      	bx	lr

08000d2e <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000d2e:	b480      	push	{r7}
 8000d30:	b083      	sub	sp, #12
 8000d32:	af00      	add	r7, sp, #0
 8000d34:	6078      	str	r0, [r7, #4]
 8000d36:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000d38:	683b      	ldr	r3, [r7, #0]
 8000d3a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000d3e:	605a      	str	r2, [r3, #4]
	return 0;
 8000d40:	2300      	movs	r3, #0
}
 8000d42:	4618      	mov	r0, r3
 8000d44:	370c      	adds	r7, #12
 8000d46:	46bd      	mov	sp, r7
 8000d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d4c:	4770      	bx	lr

08000d4e <_isatty>:

int _isatty(int file)
{
 8000d4e:	b480      	push	{r7}
 8000d50:	b083      	sub	sp, #12
 8000d52:	af00      	add	r7, sp, #0
 8000d54:	6078      	str	r0, [r7, #4]
	return 1;
 8000d56:	2301      	movs	r3, #1
}
 8000d58:	4618      	mov	r0, r3
 8000d5a:	370c      	adds	r7, #12
 8000d5c:	46bd      	mov	sp, r7
 8000d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d62:	4770      	bx	lr

08000d64 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000d64:	b480      	push	{r7}
 8000d66:	b085      	sub	sp, #20
 8000d68:	af00      	add	r7, sp, #0
 8000d6a:	60f8      	str	r0, [r7, #12]
 8000d6c:	60b9      	str	r1, [r7, #8]
 8000d6e:	607a      	str	r2, [r7, #4]
	return 0;
 8000d70:	2300      	movs	r3, #0
}
 8000d72:	4618      	mov	r0, r3
 8000d74:	3714      	adds	r7, #20
 8000d76:	46bd      	mov	sp, r7
 8000d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d7c:	4770      	bx	lr
	...

08000d80 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000d80:	b580      	push	{r7, lr}
 8000d82:	b086      	sub	sp, #24
 8000d84:	af00      	add	r7, sp, #0
 8000d86:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000d88:	4a14      	ldr	r2, [pc, #80]	; (8000ddc <_sbrk+0x5c>)
 8000d8a:	4b15      	ldr	r3, [pc, #84]	; (8000de0 <_sbrk+0x60>)
 8000d8c:	1ad3      	subs	r3, r2, r3
 8000d8e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000d90:	697b      	ldr	r3, [r7, #20]
 8000d92:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000d94:	4b13      	ldr	r3, [pc, #76]	; (8000de4 <_sbrk+0x64>)
 8000d96:	681b      	ldr	r3, [r3, #0]
 8000d98:	2b00      	cmp	r3, #0
 8000d9a:	d102      	bne.n	8000da2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000d9c:	4b11      	ldr	r3, [pc, #68]	; (8000de4 <_sbrk+0x64>)
 8000d9e:	4a12      	ldr	r2, [pc, #72]	; (8000de8 <_sbrk+0x68>)
 8000da0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000da2:	4b10      	ldr	r3, [pc, #64]	; (8000de4 <_sbrk+0x64>)
 8000da4:	681a      	ldr	r2, [r3, #0]
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	4413      	add	r3, r2
 8000daa:	693a      	ldr	r2, [r7, #16]
 8000dac:	429a      	cmp	r2, r3
 8000dae:	d207      	bcs.n	8000dc0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000db0:	f005 fcd4 	bl	800675c <__errno>
 8000db4:	4602      	mov	r2, r0
 8000db6:	230c      	movs	r3, #12
 8000db8:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8000dba:	f04f 33ff 	mov.w	r3, #4294967295
 8000dbe:	e009      	b.n	8000dd4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000dc0:	4b08      	ldr	r3, [pc, #32]	; (8000de4 <_sbrk+0x64>)
 8000dc2:	681b      	ldr	r3, [r3, #0]
 8000dc4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000dc6:	4b07      	ldr	r3, [pc, #28]	; (8000de4 <_sbrk+0x64>)
 8000dc8:	681a      	ldr	r2, [r3, #0]
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	4413      	add	r3, r2
 8000dce:	4a05      	ldr	r2, [pc, #20]	; (8000de4 <_sbrk+0x64>)
 8000dd0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000dd2:	68fb      	ldr	r3, [r7, #12]
}
 8000dd4:	4618      	mov	r0, r3
 8000dd6:	3718      	adds	r7, #24
 8000dd8:	46bd      	mov	sp, r7
 8000dda:	bd80      	pop	{r7, pc}
 8000ddc:	20050000 	.word	0x20050000
 8000de0:	00000400 	.word	0x00000400
 8000de4:	20000090 	.word	0x20000090
 8000de8:	20004f10 	.word	0x20004f10

08000dec <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000dec:	b480      	push	{r7}
 8000dee:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000df0:	4b06      	ldr	r3, [pc, #24]	; (8000e0c <SystemInit+0x20>)
 8000df2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000df6:	4a05      	ldr	r2, [pc, #20]	; (8000e0c <SystemInit+0x20>)
 8000df8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000dfc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000e00:	bf00      	nop
 8000e02:	46bd      	mov	sp, r7
 8000e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e08:	4770      	bx	lr
 8000e0a:	bf00      	nop
 8000e0c:	e000ed00 	.word	0xe000ed00

08000e10 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000e10:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000e48 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000e14:	480d      	ldr	r0, [pc, #52]	; (8000e4c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000e16:	490e      	ldr	r1, [pc, #56]	; (8000e50 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000e18:	4a0e      	ldr	r2, [pc, #56]	; (8000e54 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000e1a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e1c:	e002      	b.n	8000e24 <LoopCopyDataInit>

08000e1e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e1e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e20:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e22:	3304      	adds	r3, #4

08000e24 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e24:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e26:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e28:	d3f9      	bcc.n	8000e1e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e2a:	4a0b      	ldr	r2, [pc, #44]	; (8000e58 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000e2c:	4c0b      	ldr	r4, [pc, #44]	; (8000e5c <LoopFillZerobss+0x26>)
  movs r3, #0
 8000e2e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e30:	e001      	b.n	8000e36 <LoopFillZerobss>

08000e32 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e32:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e34:	3204      	adds	r2, #4

08000e36 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e36:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e38:	d3fb      	bcc.n	8000e32 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000e3a:	f7ff ffd7 	bl	8000dec <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000e3e:	f005 fc93 	bl	8006768 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000e42:	f7ff fb8d 	bl	8000560 <main>
  bx  lr    
 8000e46:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000e48:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8000e4c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e50:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8000e54:	080071cc 	.word	0x080071cc
  ldr r2, =_sbss
 8000e58:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8000e5c:	20004f0c 	.word	0x20004f0c

08000e60 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000e60:	e7fe      	b.n	8000e60 <ADC_IRQHandler>

08000e62 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e62:	b580      	push	{r7, lr}
 8000e64:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e66:	2003      	movs	r0, #3
 8000e68:	f000 f8f7 	bl	800105a <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000e6c:	2000      	movs	r0, #0
 8000e6e:	f7ff febd 	bl	8000bec <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 8000e72:	f7ff fdf3 	bl	8000a5c <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 8000e76:	2300      	movs	r3, #0
}
 8000e78:	4618      	mov	r0, r3
 8000e7a:	bd80      	pop	{r7, pc}

08000e7c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e7c:	b480      	push	{r7}
 8000e7e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000e80:	4b06      	ldr	r3, [pc, #24]	; (8000e9c <HAL_IncTick+0x20>)
 8000e82:	781b      	ldrb	r3, [r3, #0]
 8000e84:	461a      	mov	r2, r3
 8000e86:	4b06      	ldr	r3, [pc, #24]	; (8000ea0 <HAL_IncTick+0x24>)
 8000e88:	681b      	ldr	r3, [r3, #0]
 8000e8a:	4413      	add	r3, r2
 8000e8c:	4a04      	ldr	r2, [pc, #16]	; (8000ea0 <HAL_IncTick+0x24>)
 8000e8e:	6013      	str	r3, [r2, #0]
}
 8000e90:	bf00      	nop
 8000e92:	46bd      	mov	sp, r7
 8000e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e98:	4770      	bx	lr
 8000e9a:	bf00      	nop
 8000e9c:	20000008 	.word	0x20000008
 8000ea0:	20004ec4 	.word	0x20004ec4

08000ea4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ea4:	b480      	push	{r7}
 8000ea6:	af00      	add	r7, sp, #0
  return uwTick;
 8000ea8:	4b03      	ldr	r3, [pc, #12]	; (8000eb8 <HAL_GetTick+0x14>)
 8000eaa:	681b      	ldr	r3, [r3, #0]
}
 8000eac:	4618      	mov	r0, r3
 8000eae:	46bd      	mov	sp, r7
 8000eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb4:	4770      	bx	lr
 8000eb6:	bf00      	nop
 8000eb8:	20004ec4 	.word	0x20004ec4

08000ebc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000ebc:	b580      	push	{r7, lr}
 8000ebe:	b084      	sub	sp, #16
 8000ec0:	af00      	add	r7, sp, #0
 8000ec2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000ec4:	f7ff ffee 	bl	8000ea4 <HAL_GetTick>
 8000ec8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000ece:	68fb      	ldr	r3, [r7, #12]
 8000ed0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000ed4:	d005      	beq.n	8000ee2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000ed6:	4b09      	ldr	r3, [pc, #36]	; (8000efc <HAL_Delay+0x40>)
 8000ed8:	781b      	ldrb	r3, [r3, #0]
 8000eda:	461a      	mov	r2, r3
 8000edc:	68fb      	ldr	r3, [r7, #12]
 8000ede:	4413      	add	r3, r2
 8000ee0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000ee2:	bf00      	nop
 8000ee4:	f7ff ffde 	bl	8000ea4 <HAL_GetTick>
 8000ee8:	4602      	mov	r2, r0
 8000eea:	68bb      	ldr	r3, [r7, #8]
 8000eec:	1ad3      	subs	r3, r2, r3
 8000eee:	68fa      	ldr	r2, [r7, #12]
 8000ef0:	429a      	cmp	r2, r3
 8000ef2:	d8f7      	bhi.n	8000ee4 <HAL_Delay+0x28>
  {
  }
}
 8000ef4:	bf00      	nop
 8000ef6:	3710      	adds	r7, #16
 8000ef8:	46bd      	mov	sp, r7
 8000efa:	bd80      	pop	{r7, pc}
 8000efc:	20000008 	.word	0x20000008

08000f00 <__NVIC_SetPriorityGrouping>:
{
 8000f00:	b480      	push	{r7}
 8000f02:	b085      	sub	sp, #20
 8000f04:	af00      	add	r7, sp, #0
 8000f06:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	f003 0307 	and.w	r3, r3, #7
 8000f0e:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000f10:	4b0b      	ldr	r3, [pc, #44]	; (8000f40 <__NVIC_SetPriorityGrouping+0x40>)
 8000f12:	68db      	ldr	r3, [r3, #12]
 8000f14:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000f16:	68ba      	ldr	r2, [r7, #8]
 8000f18:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000f1c:	4013      	ands	r3, r2
 8000f1e:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000f20:	68fb      	ldr	r3, [r7, #12]
 8000f22:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000f24:	68bb      	ldr	r3, [r7, #8]
 8000f26:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8000f28:	4b06      	ldr	r3, [pc, #24]	; (8000f44 <__NVIC_SetPriorityGrouping+0x44>)
 8000f2a:	4313      	orrs	r3, r2
 8000f2c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000f2e:	4a04      	ldr	r2, [pc, #16]	; (8000f40 <__NVIC_SetPriorityGrouping+0x40>)
 8000f30:	68bb      	ldr	r3, [r7, #8]
 8000f32:	60d3      	str	r3, [r2, #12]
}
 8000f34:	bf00      	nop
 8000f36:	3714      	adds	r7, #20
 8000f38:	46bd      	mov	sp, r7
 8000f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f3e:	4770      	bx	lr
 8000f40:	e000ed00 	.word	0xe000ed00
 8000f44:	05fa0000 	.word	0x05fa0000

08000f48 <__NVIC_GetPriorityGrouping>:
{
 8000f48:	b480      	push	{r7}
 8000f4a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000f4c:	4b04      	ldr	r3, [pc, #16]	; (8000f60 <__NVIC_GetPriorityGrouping+0x18>)
 8000f4e:	68db      	ldr	r3, [r3, #12]
 8000f50:	0a1b      	lsrs	r3, r3, #8
 8000f52:	f003 0307 	and.w	r3, r3, #7
}
 8000f56:	4618      	mov	r0, r3
 8000f58:	46bd      	mov	sp, r7
 8000f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f5e:	4770      	bx	lr
 8000f60:	e000ed00 	.word	0xe000ed00

08000f64 <__NVIC_EnableIRQ>:
{
 8000f64:	b480      	push	{r7}
 8000f66:	b083      	sub	sp, #12
 8000f68:	af00      	add	r7, sp, #0
 8000f6a:	4603      	mov	r3, r0
 8000f6c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f72:	2b00      	cmp	r3, #0
 8000f74:	db0b      	blt.n	8000f8e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000f76:	79fb      	ldrb	r3, [r7, #7]
 8000f78:	f003 021f 	and.w	r2, r3, #31
 8000f7c:	4907      	ldr	r1, [pc, #28]	; (8000f9c <__NVIC_EnableIRQ+0x38>)
 8000f7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f82:	095b      	lsrs	r3, r3, #5
 8000f84:	2001      	movs	r0, #1
 8000f86:	fa00 f202 	lsl.w	r2, r0, r2
 8000f8a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8000f8e:	bf00      	nop
 8000f90:	370c      	adds	r7, #12
 8000f92:	46bd      	mov	sp, r7
 8000f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f98:	4770      	bx	lr
 8000f9a:	bf00      	nop
 8000f9c:	e000e100 	.word	0xe000e100

08000fa0 <__NVIC_SetPriority>:
{
 8000fa0:	b480      	push	{r7}
 8000fa2:	b083      	sub	sp, #12
 8000fa4:	af00      	add	r7, sp, #0
 8000fa6:	4603      	mov	r3, r0
 8000fa8:	6039      	str	r1, [r7, #0]
 8000faa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000fac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fb0:	2b00      	cmp	r3, #0
 8000fb2:	db0a      	blt.n	8000fca <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fb4:	683b      	ldr	r3, [r7, #0]
 8000fb6:	b2da      	uxtb	r2, r3
 8000fb8:	490c      	ldr	r1, [pc, #48]	; (8000fec <__NVIC_SetPriority+0x4c>)
 8000fba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fbe:	0112      	lsls	r2, r2, #4
 8000fc0:	b2d2      	uxtb	r2, r2
 8000fc2:	440b      	add	r3, r1
 8000fc4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8000fc8:	e00a      	b.n	8000fe0 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fca:	683b      	ldr	r3, [r7, #0]
 8000fcc:	b2da      	uxtb	r2, r3
 8000fce:	4908      	ldr	r1, [pc, #32]	; (8000ff0 <__NVIC_SetPriority+0x50>)
 8000fd0:	79fb      	ldrb	r3, [r7, #7]
 8000fd2:	f003 030f 	and.w	r3, r3, #15
 8000fd6:	3b04      	subs	r3, #4
 8000fd8:	0112      	lsls	r2, r2, #4
 8000fda:	b2d2      	uxtb	r2, r2
 8000fdc:	440b      	add	r3, r1
 8000fde:	761a      	strb	r2, [r3, #24]
}
 8000fe0:	bf00      	nop
 8000fe2:	370c      	adds	r7, #12
 8000fe4:	46bd      	mov	sp, r7
 8000fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fea:	4770      	bx	lr
 8000fec:	e000e100 	.word	0xe000e100
 8000ff0:	e000ed00 	.word	0xe000ed00

08000ff4 <NVIC_EncodePriority>:
{
 8000ff4:	b480      	push	{r7}
 8000ff6:	b089      	sub	sp, #36	; 0x24
 8000ff8:	af00      	add	r7, sp, #0
 8000ffa:	60f8      	str	r0, [r7, #12]
 8000ffc:	60b9      	str	r1, [r7, #8]
 8000ffe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001000:	68fb      	ldr	r3, [r7, #12]
 8001002:	f003 0307 	and.w	r3, r3, #7
 8001006:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001008:	69fb      	ldr	r3, [r7, #28]
 800100a:	f1c3 0307 	rsb	r3, r3, #7
 800100e:	2b04      	cmp	r3, #4
 8001010:	bf28      	it	cs
 8001012:	2304      	movcs	r3, #4
 8001014:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001016:	69fb      	ldr	r3, [r7, #28]
 8001018:	3304      	adds	r3, #4
 800101a:	2b06      	cmp	r3, #6
 800101c:	d902      	bls.n	8001024 <NVIC_EncodePriority+0x30>
 800101e:	69fb      	ldr	r3, [r7, #28]
 8001020:	3b03      	subs	r3, #3
 8001022:	e000      	b.n	8001026 <NVIC_EncodePriority+0x32>
 8001024:	2300      	movs	r3, #0
 8001026:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001028:	f04f 32ff 	mov.w	r2, #4294967295
 800102c:	69bb      	ldr	r3, [r7, #24]
 800102e:	fa02 f303 	lsl.w	r3, r2, r3
 8001032:	43da      	mvns	r2, r3
 8001034:	68bb      	ldr	r3, [r7, #8]
 8001036:	401a      	ands	r2, r3
 8001038:	697b      	ldr	r3, [r7, #20]
 800103a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800103c:	f04f 31ff 	mov.w	r1, #4294967295
 8001040:	697b      	ldr	r3, [r7, #20]
 8001042:	fa01 f303 	lsl.w	r3, r1, r3
 8001046:	43d9      	mvns	r1, r3
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800104c:	4313      	orrs	r3, r2
}
 800104e:	4618      	mov	r0, r3
 8001050:	3724      	adds	r7, #36	; 0x24
 8001052:	46bd      	mov	sp, r7
 8001054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001058:	4770      	bx	lr

0800105a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800105a:	b580      	push	{r7, lr}
 800105c:	b082      	sub	sp, #8
 800105e:	af00      	add	r7, sp, #0
 8001060:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001062:	6878      	ldr	r0, [r7, #4]
 8001064:	f7ff ff4c 	bl	8000f00 <__NVIC_SetPriorityGrouping>
}
 8001068:	bf00      	nop
 800106a:	3708      	adds	r7, #8
 800106c:	46bd      	mov	sp, r7
 800106e:	bd80      	pop	{r7, pc}

08001070 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001070:	b580      	push	{r7, lr}
 8001072:	b086      	sub	sp, #24
 8001074:	af00      	add	r7, sp, #0
 8001076:	4603      	mov	r3, r0
 8001078:	60b9      	str	r1, [r7, #8]
 800107a:	607a      	str	r2, [r7, #4]
 800107c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800107e:	2300      	movs	r3, #0
 8001080:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001082:	f7ff ff61 	bl	8000f48 <__NVIC_GetPriorityGrouping>
 8001086:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001088:	687a      	ldr	r2, [r7, #4]
 800108a:	68b9      	ldr	r1, [r7, #8]
 800108c:	6978      	ldr	r0, [r7, #20]
 800108e:	f7ff ffb1 	bl	8000ff4 <NVIC_EncodePriority>
 8001092:	4602      	mov	r2, r0
 8001094:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001098:	4611      	mov	r1, r2
 800109a:	4618      	mov	r0, r3
 800109c:	f7ff ff80 	bl	8000fa0 <__NVIC_SetPriority>
}
 80010a0:	bf00      	nop
 80010a2:	3718      	adds	r7, #24
 80010a4:	46bd      	mov	sp, r7
 80010a6:	bd80      	pop	{r7, pc}

080010a8 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80010a8:	b580      	push	{r7, lr}
 80010aa:	b082      	sub	sp, #8
 80010ac:	af00      	add	r7, sp, #0
 80010ae:	4603      	mov	r3, r0
 80010b0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80010b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010b6:	4618      	mov	r0, r3
 80010b8:	f7ff ff54 	bl	8000f64 <__NVIC_EnableIRQ>
}
 80010bc:	bf00      	nop
 80010be:	3708      	adds	r7, #8
 80010c0:	46bd      	mov	sp, r7
 80010c2:	bd80      	pop	{r7, pc}

080010c4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80010c4:	b480      	push	{r7}
 80010c6:	b089      	sub	sp, #36	; 0x24
 80010c8:	af00      	add	r7, sp, #0
 80010ca:	6078      	str	r0, [r7, #4]
 80010cc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 80010ce:	2300      	movs	r3, #0
 80010d0:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 80010d2:	2300      	movs	r3, #0
 80010d4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 80010d6:	2300      	movs	r3, #0
 80010d8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 80010da:	2300      	movs	r3, #0
 80010dc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 80010de:	2300      	movs	r3, #0
 80010e0:	61fb      	str	r3, [r7, #28]
 80010e2:	e175      	b.n	80013d0 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 80010e4:	2201      	movs	r2, #1
 80010e6:	69fb      	ldr	r3, [r7, #28]
 80010e8:	fa02 f303 	lsl.w	r3, r2, r3
 80010ec:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80010ee:	683b      	ldr	r3, [r7, #0]
 80010f0:	681b      	ldr	r3, [r3, #0]
 80010f2:	697a      	ldr	r2, [r7, #20]
 80010f4:	4013      	ands	r3, r2
 80010f6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80010f8:	693a      	ldr	r2, [r7, #16]
 80010fa:	697b      	ldr	r3, [r7, #20]
 80010fc:	429a      	cmp	r2, r3
 80010fe:	f040 8164 	bne.w	80013ca <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001102:	683b      	ldr	r3, [r7, #0]
 8001104:	685b      	ldr	r3, [r3, #4]
 8001106:	2b01      	cmp	r3, #1
 8001108:	d00b      	beq.n	8001122 <HAL_GPIO_Init+0x5e>
 800110a:	683b      	ldr	r3, [r7, #0]
 800110c:	685b      	ldr	r3, [r3, #4]
 800110e:	2b02      	cmp	r3, #2
 8001110:	d007      	beq.n	8001122 <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001112:	683b      	ldr	r3, [r7, #0]
 8001114:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001116:	2b11      	cmp	r3, #17
 8001118:	d003      	beq.n	8001122 <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800111a:	683b      	ldr	r3, [r7, #0]
 800111c:	685b      	ldr	r3, [r3, #4]
 800111e:	2b12      	cmp	r3, #18
 8001120:	d130      	bne.n	8001184 <HAL_GPIO_Init+0xc0>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	689b      	ldr	r3, [r3, #8]
 8001126:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8001128:	69fb      	ldr	r3, [r7, #28]
 800112a:	005b      	lsls	r3, r3, #1
 800112c:	2203      	movs	r2, #3
 800112e:	fa02 f303 	lsl.w	r3, r2, r3
 8001132:	43db      	mvns	r3, r3
 8001134:	69ba      	ldr	r2, [r7, #24]
 8001136:	4013      	ands	r3, r2
 8001138:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 800113a:	683b      	ldr	r3, [r7, #0]
 800113c:	68da      	ldr	r2, [r3, #12]
 800113e:	69fb      	ldr	r3, [r7, #28]
 8001140:	005b      	lsls	r3, r3, #1
 8001142:	fa02 f303 	lsl.w	r3, r2, r3
 8001146:	69ba      	ldr	r2, [r7, #24]
 8001148:	4313      	orrs	r3, r2
 800114a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	69ba      	ldr	r2, [r7, #24]
 8001150:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	685b      	ldr	r3, [r3, #4]
 8001156:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001158:	2201      	movs	r2, #1
 800115a:	69fb      	ldr	r3, [r7, #28]
 800115c:	fa02 f303 	lsl.w	r3, r2, r3
 8001160:	43db      	mvns	r3, r3
 8001162:	69ba      	ldr	r2, [r7, #24]
 8001164:	4013      	ands	r3, r2
 8001166:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8001168:	683b      	ldr	r3, [r7, #0]
 800116a:	685b      	ldr	r3, [r3, #4]
 800116c:	091b      	lsrs	r3, r3, #4
 800116e:	f003 0201 	and.w	r2, r3, #1
 8001172:	69fb      	ldr	r3, [r7, #28]
 8001174:	fa02 f303 	lsl.w	r3, r2, r3
 8001178:	69ba      	ldr	r2, [r7, #24]
 800117a:	4313      	orrs	r3, r2
 800117c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	69ba      	ldr	r2, [r7, #24]
 8001182:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	68db      	ldr	r3, [r3, #12]
 8001188:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 800118a:	69fb      	ldr	r3, [r7, #28]
 800118c:	005b      	lsls	r3, r3, #1
 800118e:	2203      	movs	r2, #3
 8001190:	fa02 f303 	lsl.w	r3, r2, r3
 8001194:	43db      	mvns	r3, r3
 8001196:	69ba      	ldr	r2, [r7, #24]
 8001198:	4013      	ands	r3, r2
 800119a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 800119c:	683b      	ldr	r3, [r7, #0]
 800119e:	689a      	ldr	r2, [r3, #8]
 80011a0:	69fb      	ldr	r3, [r7, #28]
 80011a2:	005b      	lsls	r3, r3, #1
 80011a4:	fa02 f303 	lsl.w	r3, r2, r3
 80011a8:	69ba      	ldr	r2, [r7, #24]
 80011aa:	4313      	orrs	r3, r2
 80011ac:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	69ba      	ldr	r2, [r7, #24]
 80011b2:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80011b4:	683b      	ldr	r3, [r7, #0]
 80011b6:	685b      	ldr	r3, [r3, #4]
 80011b8:	2b02      	cmp	r3, #2
 80011ba:	d003      	beq.n	80011c4 <HAL_GPIO_Init+0x100>
 80011bc:	683b      	ldr	r3, [r7, #0]
 80011be:	685b      	ldr	r3, [r3, #4]
 80011c0:	2b12      	cmp	r3, #18
 80011c2:	d123      	bne.n	800120c <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 80011c4:	69fb      	ldr	r3, [r7, #28]
 80011c6:	08da      	lsrs	r2, r3, #3
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	3208      	adds	r2, #8
 80011cc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80011d0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80011d2:	69fb      	ldr	r3, [r7, #28]
 80011d4:	f003 0307 	and.w	r3, r3, #7
 80011d8:	009b      	lsls	r3, r3, #2
 80011da:	220f      	movs	r2, #15
 80011dc:	fa02 f303 	lsl.w	r3, r2, r3
 80011e0:	43db      	mvns	r3, r3
 80011e2:	69ba      	ldr	r2, [r7, #24]
 80011e4:	4013      	ands	r3, r2
 80011e6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 80011e8:	683b      	ldr	r3, [r7, #0]
 80011ea:	691a      	ldr	r2, [r3, #16]
 80011ec:	69fb      	ldr	r3, [r7, #28]
 80011ee:	f003 0307 	and.w	r3, r3, #7
 80011f2:	009b      	lsls	r3, r3, #2
 80011f4:	fa02 f303 	lsl.w	r3, r2, r3
 80011f8:	69ba      	ldr	r2, [r7, #24]
 80011fa:	4313      	orrs	r3, r2
 80011fc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 80011fe:	69fb      	ldr	r3, [r7, #28]
 8001200:	08da      	lsrs	r2, r3, #3
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	3208      	adds	r2, #8
 8001206:	69b9      	ldr	r1, [r7, #24]
 8001208:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8001212:	69fb      	ldr	r3, [r7, #28]
 8001214:	005b      	lsls	r3, r3, #1
 8001216:	2203      	movs	r2, #3
 8001218:	fa02 f303 	lsl.w	r3, r2, r3
 800121c:	43db      	mvns	r3, r3
 800121e:	69ba      	ldr	r2, [r7, #24]
 8001220:	4013      	ands	r3, r2
 8001222:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8001224:	683b      	ldr	r3, [r7, #0]
 8001226:	685b      	ldr	r3, [r3, #4]
 8001228:	f003 0203 	and.w	r2, r3, #3
 800122c:	69fb      	ldr	r3, [r7, #28]
 800122e:	005b      	lsls	r3, r3, #1
 8001230:	fa02 f303 	lsl.w	r3, r2, r3
 8001234:	69ba      	ldr	r2, [r7, #24]
 8001236:	4313      	orrs	r3, r2
 8001238:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	69ba      	ldr	r2, [r7, #24]
 800123e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001240:	683b      	ldr	r3, [r7, #0]
 8001242:	685b      	ldr	r3, [r3, #4]
 8001244:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001248:	2b00      	cmp	r3, #0
 800124a:	f000 80be 	beq.w	80013ca <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800124e:	4b65      	ldr	r3, [pc, #404]	; (80013e4 <HAL_GPIO_Init+0x320>)
 8001250:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001252:	4a64      	ldr	r2, [pc, #400]	; (80013e4 <HAL_GPIO_Init+0x320>)
 8001254:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001258:	6453      	str	r3, [r2, #68]	; 0x44
 800125a:	4b62      	ldr	r3, [pc, #392]	; (80013e4 <HAL_GPIO_Init+0x320>)
 800125c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800125e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001262:	60fb      	str	r3, [r7, #12]
 8001264:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8001266:	4a60      	ldr	r2, [pc, #384]	; (80013e8 <HAL_GPIO_Init+0x324>)
 8001268:	69fb      	ldr	r3, [r7, #28]
 800126a:	089b      	lsrs	r3, r3, #2
 800126c:	3302      	adds	r3, #2
 800126e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001272:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8001274:	69fb      	ldr	r3, [r7, #28]
 8001276:	f003 0303 	and.w	r3, r3, #3
 800127a:	009b      	lsls	r3, r3, #2
 800127c:	220f      	movs	r2, #15
 800127e:	fa02 f303 	lsl.w	r3, r2, r3
 8001282:	43db      	mvns	r3, r3
 8001284:	69ba      	ldr	r2, [r7, #24]
 8001286:	4013      	ands	r3, r2
 8001288:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	4a57      	ldr	r2, [pc, #348]	; (80013ec <HAL_GPIO_Init+0x328>)
 800128e:	4293      	cmp	r3, r2
 8001290:	d037      	beq.n	8001302 <HAL_GPIO_Init+0x23e>
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	4a56      	ldr	r2, [pc, #344]	; (80013f0 <HAL_GPIO_Init+0x32c>)
 8001296:	4293      	cmp	r3, r2
 8001298:	d031      	beq.n	80012fe <HAL_GPIO_Init+0x23a>
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	4a55      	ldr	r2, [pc, #340]	; (80013f4 <HAL_GPIO_Init+0x330>)
 800129e:	4293      	cmp	r3, r2
 80012a0:	d02b      	beq.n	80012fa <HAL_GPIO_Init+0x236>
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	4a54      	ldr	r2, [pc, #336]	; (80013f8 <HAL_GPIO_Init+0x334>)
 80012a6:	4293      	cmp	r3, r2
 80012a8:	d025      	beq.n	80012f6 <HAL_GPIO_Init+0x232>
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	4a53      	ldr	r2, [pc, #332]	; (80013fc <HAL_GPIO_Init+0x338>)
 80012ae:	4293      	cmp	r3, r2
 80012b0:	d01f      	beq.n	80012f2 <HAL_GPIO_Init+0x22e>
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	4a52      	ldr	r2, [pc, #328]	; (8001400 <HAL_GPIO_Init+0x33c>)
 80012b6:	4293      	cmp	r3, r2
 80012b8:	d019      	beq.n	80012ee <HAL_GPIO_Init+0x22a>
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	4a51      	ldr	r2, [pc, #324]	; (8001404 <HAL_GPIO_Init+0x340>)
 80012be:	4293      	cmp	r3, r2
 80012c0:	d013      	beq.n	80012ea <HAL_GPIO_Init+0x226>
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	4a50      	ldr	r2, [pc, #320]	; (8001408 <HAL_GPIO_Init+0x344>)
 80012c6:	4293      	cmp	r3, r2
 80012c8:	d00d      	beq.n	80012e6 <HAL_GPIO_Init+0x222>
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	4a4f      	ldr	r2, [pc, #316]	; (800140c <HAL_GPIO_Init+0x348>)
 80012ce:	4293      	cmp	r3, r2
 80012d0:	d007      	beq.n	80012e2 <HAL_GPIO_Init+0x21e>
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	4a4e      	ldr	r2, [pc, #312]	; (8001410 <HAL_GPIO_Init+0x34c>)
 80012d6:	4293      	cmp	r3, r2
 80012d8:	d101      	bne.n	80012de <HAL_GPIO_Init+0x21a>
 80012da:	2309      	movs	r3, #9
 80012dc:	e012      	b.n	8001304 <HAL_GPIO_Init+0x240>
 80012de:	230a      	movs	r3, #10
 80012e0:	e010      	b.n	8001304 <HAL_GPIO_Init+0x240>
 80012e2:	2308      	movs	r3, #8
 80012e4:	e00e      	b.n	8001304 <HAL_GPIO_Init+0x240>
 80012e6:	2307      	movs	r3, #7
 80012e8:	e00c      	b.n	8001304 <HAL_GPIO_Init+0x240>
 80012ea:	2306      	movs	r3, #6
 80012ec:	e00a      	b.n	8001304 <HAL_GPIO_Init+0x240>
 80012ee:	2305      	movs	r3, #5
 80012f0:	e008      	b.n	8001304 <HAL_GPIO_Init+0x240>
 80012f2:	2304      	movs	r3, #4
 80012f4:	e006      	b.n	8001304 <HAL_GPIO_Init+0x240>
 80012f6:	2303      	movs	r3, #3
 80012f8:	e004      	b.n	8001304 <HAL_GPIO_Init+0x240>
 80012fa:	2302      	movs	r3, #2
 80012fc:	e002      	b.n	8001304 <HAL_GPIO_Init+0x240>
 80012fe:	2301      	movs	r3, #1
 8001300:	e000      	b.n	8001304 <HAL_GPIO_Init+0x240>
 8001302:	2300      	movs	r3, #0
 8001304:	69fa      	ldr	r2, [r7, #28]
 8001306:	f002 0203 	and.w	r2, r2, #3
 800130a:	0092      	lsls	r2, r2, #2
 800130c:	4093      	lsls	r3, r2
 800130e:	69ba      	ldr	r2, [r7, #24]
 8001310:	4313      	orrs	r3, r2
 8001312:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8001314:	4934      	ldr	r1, [pc, #208]	; (80013e8 <HAL_GPIO_Init+0x324>)
 8001316:	69fb      	ldr	r3, [r7, #28]
 8001318:	089b      	lsrs	r3, r3, #2
 800131a:	3302      	adds	r3, #2
 800131c:	69ba      	ldr	r2, [r7, #24]
 800131e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001322:	4b3c      	ldr	r3, [pc, #240]	; (8001414 <HAL_GPIO_Init+0x350>)
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001328:	693b      	ldr	r3, [r7, #16]
 800132a:	43db      	mvns	r3, r3
 800132c:	69ba      	ldr	r2, [r7, #24]
 800132e:	4013      	ands	r3, r2
 8001330:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001332:	683b      	ldr	r3, [r7, #0]
 8001334:	685b      	ldr	r3, [r3, #4]
 8001336:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800133a:	2b00      	cmp	r3, #0
 800133c:	d003      	beq.n	8001346 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800133e:	69ba      	ldr	r2, [r7, #24]
 8001340:	693b      	ldr	r3, [r7, #16]
 8001342:	4313      	orrs	r3, r2
 8001344:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001346:	4a33      	ldr	r2, [pc, #204]	; (8001414 <HAL_GPIO_Init+0x350>)
 8001348:	69bb      	ldr	r3, [r7, #24]
 800134a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800134c:	4b31      	ldr	r3, [pc, #196]	; (8001414 <HAL_GPIO_Init+0x350>)
 800134e:	685b      	ldr	r3, [r3, #4]
 8001350:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001352:	693b      	ldr	r3, [r7, #16]
 8001354:	43db      	mvns	r3, r3
 8001356:	69ba      	ldr	r2, [r7, #24]
 8001358:	4013      	ands	r3, r2
 800135a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800135c:	683b      	ldr	r3, [r7, #0]
 800135e:	685b      	ldr	r3, [r3, #4]
 8001360:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001364:	2b00      	cmp	r3, #0
 8001366:	d003      	beq.n	8001370 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001368:	69ba      	ldr	r2, [r7, #24]
 800136a:	693b      	ldr	r3, [r7, #16]
 800136c:	4313      	orrs	r3, r2
 800136e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001370:	4a28      	ldr	r2, [pc, #160]	; (8001414 <HAL_GPIO_Init+0x350>)
 8001372:	69bb      	ldr	r3, [r7, #24]
 8001374:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001376:	4b27      	ldr	r3, [pc, #156]	; (8001414 <HAL_GPIO_Init+0x350>)
 8001378:	689b      	ldr	r3, [r3, #8]
 800137a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800137c:	693b      	ldr	r3, [r7, #16]
 800137e:	43db      	mvns	r3, r3
 8001380:	69ba      	ldr	r2, [r7, #24]
 8001382:	4013      	ands	r3, r2
 8001384:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001386:	683b      	ldr	r3, [r7, #0]
 8001388:	685b      	ldr	r3, [r3, #4]
 800138a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800138e:	2b00      	cmp	r3, #0
 8001390:	d003      	beq.n	800139a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001392:	69ba      	ldr	r2, [r7, #24]
 8001394:	693b      	ldr	r3, [r7, #16]
 8001396:	4313      	orrs	r3, r2
 8001398:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800139a:	4a1e      	ldr	r2, [pc, #120]	; (8001414 <HAL_GPIO_Init+0x350>)
 800139c:	69bb      	ldr	r3, [r7, #24]
 800139e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80013a0:	4b1c      	ldr	r3, [pc, #112]	; (8001414 <HAL_GPIO_Init+0x350>)
 80013a2:	68db      	ldr	r3, [r3, #12]
 80013a4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80013a6:	693b      	ldr	r3, [r7, #16]
 80013a8:	43db      	mvns	r3, r3
 80013aa:	69ba      	ldr	r2, [r7, #24]
 80013ac:	4013      	ands	r3, r2
 80013ae:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80013b0:	683b      	ldr	r3, [r7, #0]
 80013b2:	685b      	ldr	r3, [r3, #4]
 80013b4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80013b8:	2b00      	cmp	r3, #0
 80013ba:	d003      	beq.n	80013c4 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80013bc:	69ba      	ldr	r2, [r7, #24]
 80013be:	693b      	ldr	r3, [r7, #16]
 80013c0:	4313      	orrs	r3, r2
 80013c2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80013c4:	4a13      	ldr	r2, [pc, #76]	; (8001414 <HAL_GPIO_Init+0x350>)
 80013c6:	69bb      	ldr	r3, [r7, #24]
 80013c8:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 80013ca:	69fb      	ldr	r3, [r7, #28]
 80013cc:	3301      	adds	r3, #1
 80013ce:	61fb      	str	r3, [r7, #28]
 80013d0:	69fb      	ldr	r3, [r7, #28]
 80013d2:	2b0f      	cmp	r3, #15
 80013d4:	f67f ae86 	bls.w	80010e4 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 80013d8:	bf00      	nop
 80013da:	3724      	adds	r7, #36	; 0x24
 80013dc:	46bd      	mov	sp, r7
 80013de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e2:	4770      	bx	lr
 80013e4:	40023800 	.word	0x40023800
 80013e8:	40013800 	.word	0x40013800
 80013ec:	40020000 	.word	0x40020000
 80013f0:	40020400 	.word	0x40020400
 80013f4:	40020800 	.word	0x40020800
 80013f8:	40020c00 	.word	0x40020c00
 80013fc:	40021000 	.word	0x40021000
 8001400:	40021400 	.word	0x40021400
 8001404:	40021800 	.word	0x40021800
 8001408:	40021c00 	.word	0x40021c00
 800140c:	40022000 	.word	0x40022000
 8001410:	40022400 	.word	0x40022400
 8001414:	40013c00 	.word	0x40013c00

08001418 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001418:	b480      	push	{r7}
 800141a:	b083      	sub	sp, #12
 800141c:	af00      	add	r7, sp, #0
 800141e:	6078      	str	r0, [r7, #4]
 8001420:	460b      	mov	r3, r1
 8001422:	807b      	strh	r3, [r7, #2]
 8001424:	4613      	mov	r3, r2
 8001426:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001428:	787b      	ldrb	r3, [r7, #1]
 800142a:	2b00      	cmp	r3, #0
 800142c:	d003      	beq.n	8001436 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800142e:	887a      	ldrh	r2, [r7, #2]
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8001434:	e003      	b.n	800143e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8001436:	887b      	ldrh	r3, [r7, #2]
 8001438:	041a      	lsls	r2, r3, #16
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	619a      	str	r2, [r3, #24]
}
 800143e:	bf00      	nop
 8001440:	370c      	adds	r7, #12
 8001442:	46bd      	mov	sp, r7
 8001444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001448:	4770      	bx	lr

0800144a <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800144a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800144c:	b08f      	sub	sp, #60	; 0x3c
 800144e:	af0a      	add	r7, sp, #40	; 0x28
 8001450:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	2b00      	cmp	r3, #0
 8001456:	d101      	bne.n	800145c <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001458:	2301      	movs	r3, #1
 800145a:	e116      	b.n	800168a <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8001468:	b2db      	uxtb	r3, r3
 800146a:	2b00      	cmp	r3, #0
 800146c:	d106      	bne.n	800147c <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	2200      	movs	r2, #0
 8001472:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001476:	6878      	ldr	r0, [r7, #4]
 8001478:	f7ff fb5c 	bl	8000b34 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	2203      	movs	r2, #3
 8001480:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8001484:	68bb      	ldr	r3, [r7, #8]
 8001486:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001488:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800148c:	2b00      	cmp	r3, #0
 800148e:	d102      	bne.n	8001496 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	2200      	movs	r2, #0
 8001494:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	4618      	mov	r0, r3
 800149c:	f002 f974 	bl	8003788 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	603b      	str	r3, [r7, #0]
 80014a6:	687e      	ldr	r6, [r7, #4]
 80014a8:	466d      	mov	r5, sp
 80014aa:	f106 0410 	add.w	r4, r6, #16
 80014ae:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80014b0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80014b2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80014b4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80014b6:	e894 0003 	ldmia.w	r4, {r0, r1}
 80014ba:	e885 0003 	stmia.w	r5, {r0, r1}
 80014be:	1d33      	adds	r3, r6, #4
 80014c0:	cb0e      	ldmia	r3, {r1, r2, r3}
 80014c2:	6838      	ldr	r0, [r7, #0]
 80014c4:	f002 f908 	bl	80036d8 <USB_CoreInit>
 80014c8:	4603      	mov	r3, r0
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	d005      	beq.n	80014da <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	2202      	movs	r2, #2
 80014d2:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 80014d6:	2301      	movs	r3, #1
 80014d8:	e0d7      	b.n	800168a <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	2100      	movs	r1, #0
 80014e0:	4618      	mov	r0, r3
 80014e2:	f002 f962 	bl	80037aa <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80014e6:	2300      	movs	r3, #0
 80014e8:	73fb      	strb	r3, [r7, #15]
 80014ea:	e04a      	b.n	8001582 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80014ec:	7bfa      	ldrb	r2, [r7, #15]
 80014ee:	6879      	ldr	r1, [r7, #4]
 80014f0:	4613      	mov	r3, r2
 80014f2:	00db      	lsls	r3, r3, #3
 80014f4:	1a9b      	subs	r3, r3, r2
 80014f6:	009b      	lsls	r3, r3, #2
 80014f8:	440b      	add	r3, r1
 80014fa:	333d      	adds	r3, #61	; 0x3d
 80014fc:	2201      	movs	r2, #1
 80014fe:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001500:	7bfa      	ldrb	r2, [r7, #15]
 8001502:	6879      	ldr	r1, [r7, #4]
 8001504:	4613      	mov	r3, r2
 8001506:	00db      	lsls	r3, r3, #3
 8001508:	1a9b      	subs	r3, r3, r2
 800150a:	009b      	lsls	r3, r3, #2
 800150c:	440b      	add	r3, r1
 800150e:	333c      	adds	r3, #60	; 0x3c
 8001510:	7bfa      	ldrb	r2, [r7, #15]
 8001512:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001514:	7bfa      	ldrb	r2, [r7, #15]
 8001516:	7bfb      	ldrb	r3, [r7, #15]
 8001518:	b298      	uxth	r0, r3
 800151a:	6879      	ldr	r1, [r7, #4]
 800151c:	4613      	mov	r3, r2
 800151e:	00db      	lsls	r3, r3, #3
 8001520:	1a9b      	subs	r3, r3, r2
 8001522:	009b      	lsls	r3, r3, #2
 8001524:	440b      	add	r3, r1
 8001526:	3342      	adds	r3, #66	; 0x42
 8001528:	4602      	mov	r2, r0
 800152a:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800152c:	7bfa      	ldrb	r2, [r7, #15]
 800152e:	6879      	ldr	r1, [r7, #4]
 8001530:	4613      	mov	r3, r2
 8001532:	00db      	lsls	r3, r3, #3
 8001534:	1a9b      	subs	r3, r3, r2
 8001536:	009b      	lsls	r3, r3, #2
 8001538:	440b      	add	r3, r1
 800153a:	333f      	adds	r3, #63	; 0x3f
 800153c:	2200      	movs	r2, #0
 800153e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001540:	7bfa      	ldrb	r2, [r7, #15]
 8001542:	6879      	ldr	r1, [r7, #4]
 8001544:	4613      	mov	r3, r2
 8001546:	00db      	lsls	r3, r3, #3
 8001548:	1a9b      	subs	r3, r3, r2
 800154a:	009b      	lsls	r3, r3, #2
 800154c:	440b      	add	r3, r1
 800154e:	3344      	adds	r3, #68	; 0x44
 8001550:	2200      	movs	r2, #0
 8001552:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001554:	7bfa      	ldrb	r2, [r7, #15]
 8001556:	6879      	ldr	r1, [r7, #4]
 8001558:	4613      	mov	r3, r2
 800155a:	00db      	lsls	r3, r3, #3
 800155c:	1a9b      	subs	r3, r3, r2
 800155e:	009b      	lsls	r3, r3, #2
 8001560:	440b      	add	r3, r1
 8001562:	3348      	adds	r3, #72	; 0x48
 8001564:	2200      	movs	r2, #0
 8001566:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001568:	7bfa      	ldrb	r2, [r7, #15]
 800156a:	6879      	ldr	r1, [r7, #4]
 800156c:	4613      	mov	r3, r2
 800156e:	00db      	lsls	r3, r3, #3
 8001570:	1a9b      	subs	r3, r3, r2
 8001572:	009b      	lsls	r3, r3, #2
 8001574:	440b      	add	r3, r1
 8001576:	3350      	adds	r3, #80	; 0x50
 8001578:	2200      	movs	r2, #0
 800157a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800157c:	7bfb      	ldrb	r3, [r7, #15]
 800157e:	3301      	adds	r3, #1
 8001580:	73fb      	strb	r3, [r7, #15]
 8001582:	7bfa      	ldrb	r2, [r7, #15]
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	685b      	ldr	r3, [r3, #4]
 8001588:	429a      	cmp	r2, r3
 800158a:	d3af      	bcc.n	80014ec <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800158c:	2300      	movs	r3, #0
 800158e:	73fb      	strb	r3, [r7, #15]
 8001590:	e044      	b.n	800161c <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001592:	7bfa      	ldrb	r2, [r7, #15]
 8001594:	6879      	ldr	r1, [r7, #4]
 8001596:	4613      	mov	r3, r2
 8001598:	00db      	lsls	r3, r3, #3
 800159a:	1a9b      	subs	r3, r3, r2
 800159c:	009b      	lsls	r3, r3, #2
 800159e:	440b      	add	r3, r1
 80015a0:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 80015a4:	2200      	movs	r2, #0
 80015a6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80015a8:	7bfa      	ldrb	r2, [r7, #15]
 80015aa:	6879      	ldr	r1, [r7, #4]
 80015ac:	4613      	mov	r3, r2
 80015ae:	00db      	lsls	r3, r3, #3
 80015b0:	1a9b      	subs	r3, r3, r2
 80015b2:	009b      	lsls	r3, r3, #2
 80015b4:	440b      	add	r3, r1
 80015b6:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 80015ba:	7bfa      	ldrb	r2, [r7, #15]
 80015bc:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80015be:	7bfa      	ldrb	r2, [r7, #15]
 80015c0:	6879      	ldr	r1, [r7, #4]
 80015c2:	4613      	mov	r3, r2
 80015c4:	00db      	lsls	r3, r3, #3
 80015c6:	1a9b      	subs	r3, r3, r2
 80015c8:	009b      	lsls	r3, r3, #2
 80015ca:	440b      	add	r3, r1
 80015cc:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 80015d0:	2200      	movs	r2, #0
 80015d2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80015d4:	7bfa      	ldrb	r2, [r7, #15]
 80015d6:	6879      	ldr	r1, [r7, #4]
 80015d8:	4613      	mov	r3, r2
 80015da:	00db      	lsls	r3, r3, #3
 80015dc:	1a9b      	subs	r3, r3, r2
 80015de:	009b      	lsls	r3, r3, #2
 80015e0:	440b      	add	r3, r1
 80015e2:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80015e6:	2200      	movs	r2, #0
 80015e8:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80015ea:	7bfa      	ldrb	r2, [r7, #15]
 80015ec:	6879      	ldr	r1, [r7, #4]
 80015ee:	4613      	mov	r3, r2
 80015f0:	00db      	lsls	r3, r3, #3
 80015f2:	1a9b      	subs	r3, r3, r2
 80015f4:	009b      	lsls	r3, r3, #2
 80015f6:	440b      	add	r3, r1
 80015f8:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80015fc:	2200      	movs	r2, #0
 80015fe:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001600:	7bfa      	ldrb	r2, [r7, #15]
 8001602:	6879      	ldr	r1, [r7, #4]
 8001604:	4613      	mov	r3, r2
 8001606:	00db      	lsls	r3, r3, #3
 8001608:	1a9b      	subs	r3, r3, r2
 800160a:	009b      	lsls	r3, r3, #2
 800160c:	440b      	add	r3, r1
 800160e:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8001612:	2200      	movs	r2, #0
 8001614:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001616:	7bfb      	ldrb	r3, [r7, #15]
 8001618:	3301      	adds	r3, #1
 800161a:	73fb      	strb	r3, [r7, #15]
 800161c:	7bfa      	ldrb	r2, [r7, #15]
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	685b      	ldr	r3, [r3, #4]
 8001622:	429a      	cmp	r2, r3
 8001624:	d3b5      	bcc.n	8001592 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	603b      	str	r3, [r7, #0]
 800162c:	687e      	ldr	r6, [r7, #4]
 800162e:	466d      	mov	r5, sp
 8001630:	f106 0410 	add.w	r4, r6, #16
 8001634:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001636:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001638:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800163a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800163c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001640:	e885 0003 	stmia.w	r5, {r0, r1}
 8001644:	1d33      	adds	r3, r6, #4
 8001646:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001648:	6838      	ldr	r0, [r7, #0]
 800164a:	f002 f8d9 	bl	8003800 <USB_DevInit>
 800164e:	4603      	mov	r3, r0
 8001650:	2b00      	cmp	r3, #0
 8001652:	d005      	beq.n	8001660 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	2202      	movs	r2, #2
 8001658:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 800165c:	2301      	movs	r3, #1
 800165e:	e014      	b.n	800168a <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	2200      	movs	r2, #0
 8001664:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	2201      	movs	r2, #1
 800166c:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001674:	2b01      	cmp	r3, #1
 8001676:	d102      	bne.n	800167e <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8001678:	6878      	ldr	r0, [r7, #4]
 800167a:	f000 f80b 	bl	8001694 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	4618      	mov	r0, r3
 8001684:	f002 fa8b 	bl	8003b9e <USB_DevDisconnect>

  return HAL_OK;
 8001688:	2300      	movs	r3, #0
}
 800168a:	4618      	mov	r0, r3
 800168c:	3714      	adds	r7, #20
 800168e:	46bd      	mov	sp, r7
 8001690:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08001694 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8001694:	b480      	push	{r7}
 8001696:	b085      	sub	sp, #20
 8001698:	af00      	add	r7, sp, #0
 800169a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	2201      	movs	r2, #1
 80016a6:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	2200      	movs	r2, #0
 80016ae:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 80016b2:	68fb      	ldr	r3, [r7, #12]
 80016b4:	699b      	ldr	r3, [r3, #24]
 80016b6:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80016ba:	68fb      	ldr	r3, [r7, #12]
 80016bc:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 80016be:	68fb      	ldr	r3, [r7, #12]
 80016c0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80016c2:	4b05      	ldr	r3, [pc, #20]	; (80016d8 <HAL_PCDEx_ActivateLPM+0x44>)
 80016c4:	4313      	orrs	r3, r2
 80016c6:	68fa      	ldr	r2, [r7, #12]
 80016c8:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 80016ca:	2300      	movs	r3, #0
}
 80016cc:	4618      	mov	r0, r3
 80016ce:	3714      	adds	r7, #20
 80016d0:	46bd      	mov	sp, r7
 80016d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d6:	4770      	bx	lr
 80016d8:	10000003 	.word	0x10000003

080016dc <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80016dc:	b480      	push	{r7}
 80016de:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80016e0:	4b05      	ldr	r3, [pc, #20]	; (80016f8 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	4a04      	ldr	r2, [pc, #16]	; (80016f8 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80016e6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80016ea:	6013      	str	r3, [r2, #0]
}
 80016ec:	bf00      	nop
 80016ee:	46bd      	mov	sp, r7
 80016f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f4:	4770      	bx	lr
 80016f6:	bf00      	nop
 80016f8:	40007000 	.word	0x40007000

080016fc <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80016fc:	b580      	push	{r7, lr}
 80016fe:	b082      	sub	sp, #8
 8001700:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8001702:	2300      	movs	r3, #0
 8001704:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8001706:	4b23      	ldr	r3, [pc, #140]	; (8001794 <HAL_PWREx_EnableOverDrive+0x98>)
 8001708:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800170a:	4a22      	ldr	r2, [pc, #136]	; (8001794 <HAL_PWREx_EnableOverDrive+0x98>)
 800170c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001710:	6413      	str	r3, [r2, #64]	; 0x40
 8001712:	4b20      	ldr	r3, [pc, #128]	; (8001794 <HAL_PWREx_EnableOverDrive+0x98>)
 8001714:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001716:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800171a:	603b      	str	r3, [r7, #0]
 800171c:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800171e:	4b1e      	ldr	r3, [pc, #120]	; (8001798 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	4a1d      	ldr	r2, [pc, #116]	; (8001798 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001724:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001728:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800172a:	f7ff fbbb 	bl	8000ea4 <HAL_GetTick>
 800172e:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001730:	e009      	b.n	8001746 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001732:	f7ff fbb7 	bl	8000ea4 <HAL_GetTick>
 8001736:	4602      	mov	r2, r0
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	1ad3      	subs	r3, r2, r3
 800173c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001740:	d901      	bls.n	8001746 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8001742:	2303      	movs	r3, #3
 8001744:	e022      	b.n	800178c <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001746:	4b14      	ldr	r3, [pc, #80]	; (8001798 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001748:	685b      	ldr	r3, [r3, #4]
 800174a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800174e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001752:	d1ee      	bne.n	8001732 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8001754:	4b10      	ldr	r3, [pc, #64]	; (8001798 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	4a0f      	ldr	r2, [pc, #60]	; (8001798 <HAL_PWREx_EnableOverDrive+0x9c>)
 800175a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800175e:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001760:	f7ff fba0 	bl	8000ea4 <HAL_GetTick>
 8001764:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001766:	e009      	b.n	800177c <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001768:	f7ff fb9c 	bl	8000ea4 <HAL_GetTick>
 800176c:	4602      	mov	r2, r0
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	1ad3      	subs	r3, r2, r3
 8001772:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001776:	d901      	bls.n	800177c <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8001778:	2303      	movs	r3, #3
 800177a:	e007      	b.n	800178c <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800177c:	4b06      	ldr	r3, [pc, #24]	; (8001798 <HAL_PWREx_EnableOverDrive+0x9c>)
 800177e:	685b      	ldr	r3, [r3, #4]
 8001780:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001784:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8001788:	d1ee      	bne.n	8001768 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 800178a:	2300      	movs	r3, #0
}
 800178c:	4618      	mov	r0, r3
 800178e:	3708      	adds	r7, #8
 8001790:	46bd      	mov	sp, r7
 8001792:	bd80      	pop	{r7, pc}
 8001794:	40023800 	.word	0x40023800
 8001798:	40007000 	.word	0x40007000

0800179c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800179c:	b580      	push	{r7, lr}
 800179e:	b086      	sub	sp, #24
 80017a0:	af00      	add	r7, sp, #0
 80017a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 80017a4:	2300      	movs	r3, #0
 80017a6:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	d101      	bne.n	80017b2 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 80017ae:	2301      	movs	r3, #1
 80017b0:	e291      	b.n	8001cd6 <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	f003 0301 	and.w	r3, r3, #1
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	f000 8087 	beq.w	80018ce <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80017c0:	4b96      	ldr	r3, [pc, #600]	; (8001a1c <HAL_RCC_OscConfig+0x280>)
 80017c2:	689b      	ldr	r3, [r3, #8]
 80017c4:	f003 030c 	and.w	r3, r3, #12
 80017c8:	2b04      	cmp	r3, #4
 80017ca:	d00c      	beq.n	80017e6 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80017cc:	4b93      	ldr	r3, [pc, #588]	; (8001a1c <HAL_RCC_OscConfig+0x280>)
 80017ce:	689b      	ldr	r3, [r3, #8]
 80017d0:	f003 030c 	and.w	r3, r3, #12
 80017d4:	2b08      	cmp	r3, #8
 80017d6:	d112      	bne.n	80017fe <HAL_RCC_OscConfig+0x62>
 80017d8:	4b90      	ldr	r3, [pc, #576]	; (8001a1c <HAL_RCC_OscConfig+0x280>)
 80017da:	685b      	ldr	r3, [r3, #4]
 80017dc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80017e0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80017e4:	d10b      	bne.n	80017fe <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80017e6:	4b8d      	ldr	r3, [pc, #564]	; (8001a1c <HAL_RCC_OscConfig+0x280>)
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	d06c      	beq.n	80018cc <HAL_RCC_OscConfig+0x130>
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	685b      	ldr	r3, [r3, #4]
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	d168      	bne.n	80018cc <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80017fa:	2301      	movs	r3, #1
 80017fc:	e26b      	b.n	8001cd6 <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	685b      	ldr	r3, [r3, #4]
 8001802:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001806:	d106      	bne.n	8001816 <HAL_RCC_OscConfig+0x7a>
 8001808:	4b84      	ldr	r3, [pc, #528]	; (8001a1c <HAL_RCC_OscConfig+0x280>)
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	4a83      	ldr	r2, [pc, #524]	; (8001a1c <HAL_RCC_OscConfig+0x280>)
 800180e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001812:	6013      	str	r3, [r2, #0]
 8001814:	e02e      	b.n	8001874 <HAL_RCC_OscConfig+0xd8>
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	685b      	ldr	r3, [r3, #4]
 800181a:	2b00      	cmp	r3, #0
 800181c:	d10c      	bne.n	8001838 <HAL_RCC_OscConfig+0x9c>
 800181e:	4b7f      	ldr	r3, [pc, #508]	; (8001a1c <HAL_RCC_OscConfig+0x280>)
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	4a7e      	ldr	r2, [pc, #504]	; (8001a1c <HAL_RCC_OscConfig+0x280>)
 8001824:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001828:	6013      	str	r3, [r2, #0]
 800182a:	4b7c      	ldr	r3, [pc, #496]	; (8001a1c <HAL_RCC_OscConfig+0x280>)
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	4a7b      	ldr	r2, [pc, #492]	; (8001a1c <HAL_RCC_OscConfig+0x280>)
 8001830:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001834:	6013      	str	r3, [r2, #0]
 8001836:	e01d      	b.n	8001874 <HAL_RCC_OscConfig+0xd8>
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	685b      	ldr	r3, [r3, #4]
 800183c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001840:	d10c      	bne.n	800185c <HAL_RCC_OscConfig+0xc0>
 8001842:	4b76      	ldr	r3, [pc, #472]	; (8001a1c <HAL_RCC_OscConfig+0x280>)
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	4a75      	ldr	r2, [pc, #468]	; (8001a1c <HAL_RCC_OscConfig+0x280>)
 8001848:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800184c:	6013      	str	r3, [r2, #0]
 800184e:	4b73      	ldr	r3, [pc, #460]	; (8001a1c <HAL_RCC_OscConfig+0x280>)
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	4a72      	ldr	r2, [pc, #456]	; (8001a1c <HAL_RCC_OscConfig+0x280>)
 8001854:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001858:	6013      	str	r3, [r2, #0]
 800185a:	e00b      	b.n	8001874 <HAL_RCC_OscConfig+0xd8>
 800185c:	4b6f      	ldr	r3, [pc, #444]	; (8001a1c <HAL_RCC_OscConfig+0x280>)
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	4a6e      	ldr	r2, [pc, #440]	; (8001a1c <HAL_RCC_OscConfig+0x280>)
 8001862:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001866:	6013      	str	r3, [r2, #0]
 8001868:	4b6c      	ldr	r3, [pc, #432]	; (8001a1c <HAL_RCC_OscConfig+0x280>)
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	4a6b      	ldr	r2, [pc, #428]	; (8001a1c <HAL_RCC_OscConfig+0x280>)
 800186e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001872:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	685b      	ldr	r3, [r3, #4]
 8001878:	2b00      	cmp	r3, #0
 800187a:	d013      	beq.n	80018a4 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800187c:	f7ff fb12 	bl	8000ea4 <HAL_GetTick>
 8001880:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001882:	e008      	b.n	8001896 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001884:	f7ff fb0e 	bl	8000ea4 <HAL_GetTick>
 8001888:	4602      	mov	r2, r0
 800188a:	693b      	ldr	r3, [r7, #16]
 800188c:	1ad3      	subs	r3, r2, r3
 800188e:	2b64      	cmp	r3, #100	; 0x64
 8001890:	d901      	bls.n	8001896 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001892:	2303      	movs	r3, #3
 8001894:	e21f      	b.n	8001cd6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001896:	4b61      	ldr	r3, [pc, #388]	; (8001a1c <HAL_RCC_OscConfig+0x280>)
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d0f0      	beq.n	8001884 <HAL_RCC_OscConfig+0xe8>
 80018a2:	e014      	b.n	80018ce <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018a4:	f7ff fafe 	bl	8000ea4 <HAL_GetTick>
 80018a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80018aa:	e008      	b.n	80018be <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80018ac:	f7ff fafa 	bl	8000ea4 <HAL_GetTick>
 80018b0:	4602      	mov	r2, r0
 80018b2:	693b      	ldr	r3, [r7, #16]
 80018b4:	1ad3      	subs	r3, r2, r3
 80018b6:	2b64      	cmp	r3, #100	; 0x64
 80018b8:	d901      	bls.n	80018be <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80018ba:	2303      	movs	r3, #3
 80018bc:	e20b      	b.n	8001cd6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80018be:	4b57      	ldr	r3, [pc, #348]	; (8001a1c <HAL_RCC_OscConfig+0x280>)
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	d1f0      	bne.n	80018ac <HAL_RCC_OscConfig+0x110>
 80018ca:	e000      	b.n	80018ce <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80018cc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	f003 0302 	and.w	r3, r3, #2
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	d069      	beq.n	80019ae <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80018da:	4b50      	ldr	r3, [pc, #320]	; (8001a1c <HAL_RCC_OscConfig+0x280>)
 80018dc:	689b      	ldr	r3, [r3, #8]
 80018de:	f003 030c 	and.w	r3, r3, #12
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	d00b      	beq.n	80018fe <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80018e6:	4b4d      	ldr	r3, [pc, #308]	; (8001a1c <HAL_RCC_OscConfig+0x280>)
 80018e8:	689b      	ldr	r3, [r3, #8]
 80018ea:	f003 030c 	and.w	r3, r3, #12
 80018ee:	2b08      	cmp	r3, #8
 80018f0:	d11c      	bne.n	800192c <HAL_RCC_OscConfig+0x190>
 80018f2:	4b4a      	ldr	r3, [pc, #296]	; (8001a1c <HAL_RCC_OscConfig+0x280>)
 80018f4:	685b      	ldr	r3, [r3, #4]
 80018f6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	d116      	bne.n	800192c <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80018fe:	4b47      	ldr	r3, [pc, #284]	; (8001a1c <HAL_RCC_OscConfig+0x280>)
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	f003 0302 	and.w	r3, r3, #2
 8001906:	2b00      	cmp	r3, #0
 8001908:	d005      	beq.n	8001916 <HAL_RCC_OscConfig+0x17a>
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	68db      	ldr	r3, [r3, #12]
 800190e:	2b01      	cmp	r3, #1
 8001910:	d001      	beq.n	8001916 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8001912:	2301      	movs	r3, #1
 8001914:	e1df      	b.n	8001cd6 <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001916:	4b41      	ldr	r3, [pc, #260]	; (8001a1c <HAL_RCC_OscConfig+0x280>)
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	691b      	ldr	r3, [r3, #16]
 8001922:	00db      	lsls	r3, r3, #3
 8001924:	493d      	ldr	r1, [pc, #244]	; (8001a1c <HAL_RCC_OscConfig+0x280>)
 8001926:	4313      	orrs	r3, r2
 8001928:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800192a:	e040      	b.n	80019ae <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	68db      	ldr	r3, [r3, #12]
 8001930:	2b00      	cmp	r3, #0
 8001932:	d023      	beq.n	800197c <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001934:	4b39      	ldr	r3, [pc, #228]	; (8001a1c <HAL_RCC_OscConfig+0x280>)
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	4a38      	ldr	r2, [pc, #224]	; (8001a1c <HAL_RCC_OscConfig+0x280>)
 800193a:	f043 0301 	orr.w	r3, r3, #1
 800193e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001940:	f7ff fab0 	bl	8000ea4 <HAL_GetTick>
 8001944:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001946:	e008      	b.n	800195a <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001948:	f7ff faac 	bl	8000ea4 <HAL_GetTick>
 800194c:	4602      	mov	r2, r0
 800194e:	693b      	ldr	r3, [r7, #16]
 8001950:	1ad3      	subs	r3, r2, r3
 8001952:	2b02      	cmp	r3, #2
 8001954:	d901      	bls.n	800195a <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8001956:	2303      	movs	r3, #3
 8001958:	e1bd      	b.n	8001cd6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800195a:	4b30      	ldr	r3, [pc, #192]	; (8001a1c <HAL_RCC_OscConfig+0x280>)
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	f003 0302 	and.w	r3, r3, #2
 8001962:	2b00      	cmp	r3, #0
 8001964:	d0f0      	beq.n	8001948 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001966:	4b2d      	ldr	r3, [pc, #180]	; (8001a1c <HAL_RCC_OscConfig+0x280>)
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	691b      	ldr	r3, [r3, #16]
 8001972:	00db      	lsls	r3, r3, #3
 8001974:	4929      	ldr	r1, [pc, #164]	; (8001a1c <HAL_RCC_OscConfig+0x280>)
 8001976:	4313      	orrs	r3, r2
 8001978:	600b      	str	r3, [r1, #0]
 800197a:	e018      	b.n	80019ae <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800197c:	4b27      	ldr	r3, [pc, #156]	; (8001a1c <HAL_RCC_OscConfig+0x280>)
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	4a26      	ldr	r2, [pc, #152]	; (8001a1c <HAL_RCC_OscConfig+0x280>)
 8001982:	f023 0301 	bic.w	r3, r3, #1
 8001986:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001988:	f7ff fa8c 	bl	8000ea4 <HAL_GetTick>
 800198c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800198e:	e008      	b.n	80019a2 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001990:	f7ff fa88 	bl	8000ea4 <HAL_GetTick>
 8001994:	4602      	mov	r2, r0
 8001996:	693b      	ldr	r3, [r7, #16]
 8001998:	1ad3      	subs	r3, r2, r3
 800199a:	2b02      	cmp	r3, #2
 800199c:	d901      	bls.n	80019a2 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800199e:	2303      	movs	r3, #3
 80019a0:	e199      	b.n	8001cd6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80019a2:	4b1e      	ldr	r3, [pc, #120]	; (8001a1c <HAL_RCC_OscConfig+0x280>)
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	f003 0302 	and.w	r3, r3, #2
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	d1f0      	bne.n	8001990 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	f003 0308 	and.w	r3, r3, #8
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	d038      	beq.n	8001a2c <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	695b      	ldr	r3, [r3, #20]
 80019be:	2b00      	cmp	r3, #0
 80019c0:	d019      	beq.n	80019f6 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80019c2:	4b16      	ldr	r3, [pc, #88]	; (8001a1c <HAL_RCC_OscConfig+0x280>)
 80019c4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80019c6:	4a15      	ldr	r2, [pc, #84]	; (8001a1c <HAL_RCC_OscConfig+0x280>)
 80019c8:	f043 0301 	orr.w	r3, r3, #1
 80019cc:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80019ce:	f7ff fa69 	bl	8000ea4 <HAL_GetTick>
 80019d2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80019d4:	e008      	b.n	80019e8 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80019d6:	f7ff fa65 	bl	8000ea4 <HAL_GetTick>
 80019da:	4602      	mov	r2, r0
 80019dc:	693b      	ldr	r3, [r7, #16]
 80019de:	1ad3      	subs	r3, r2, r3
 80019e0:	2b02      	cmp	r3, #2
 80019e2:	d901      	bls.n	80019e8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80019e4:	2303      	movs	r3, #3
 80019e6:	e176      	b.n	8001cd6 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80019e8:	4b0c      	ldr	r3, [pc, #48]	; (8001a1c <HAL_RCC_OscConfig+0x280>)
 80019ea:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80019ec:	f003 0302 	and.w	r3, r3, #2
 80019f0:	2b00      	cmp	r3, #0
 80019f2:	d0f0      	beq.n	80019d6 <HAL_RCC_OscConfig+0x23a>
 80019f4:	e01a      	b.n	8001a2c <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80019f6:	4b09      	ldr	r3, [pc, #36]	; (8001a1c <HAL_RCC_OscConfig+0x280>)
 80019f8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80019fa:	4a08      	ldr	r2, [pc, #32]	; (8001a1c <HAL_RCC_OscConfig+0x280>)
 80019fc:	f023 0301 	bic.w	r3, r3, #1
 8001a00:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a02:	f7ff fa4f 	bl	8000ea4 <HAL_GetTick>
 8001a06:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001a08:	e00a      	b.n	8001a20 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001a0a:	f7ff fa4b 	bl	8000ea4 <HAL_GetTick>
 8001a0e:	4602      	mov	r2, r0
 8001a10:	693b      	ldr	r3, [r7, #16]
 8001a12:	1ad3      	subs	r3, r2, r3
 8001a14:	2b02      	cmp	r3, #2
 8001a16:	d903      	bls.n	8001a20 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8001a18:	2303      	movs	r3, #3
 8001a1a:	e15c      	b.n	8001cd6 <HAL_RCC_OscConfig+0x53a>
 8001a1c:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001a20:	4b91      	ldr	r3, [pc, #580]	; (8001c68 <HAL_RCC_OscConfig+0x4cc>)
 8001a22:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001a24:	f003 0302 	and.w	r3, r3, #2
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	d1ee      	bne.n	8001a0a <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	f003 0304 	and.w	r3, r3, #4
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	f000 80a4 	beq.w	8001b82 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001a3a:	4b8b      	ldr	r3, [pc, #556]	; (8001c68 <HAL_RCC_OscConfig+0x4cc>)
 8001a3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a3e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	d10d      	bne.n	8001a62 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8001a46:	4b88      	ldr	r3, [pc, #544]	; (8001c68 <HAL_RCC_OscConfig+0x4cc>)
 8001a48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a4a:	4a87      	ldr	r2, [pc, #540]	; (8001c68 <HAL_RCC_OscConfig+0x4cc>)
 8001a4c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001a50:	6413      	str	r3, [r2, #64]	; 0x40
 8001a52:	4b85      	ldr	r3, [pc, #532]	; (8001c68 <HAL_RCC_OscConfig+0x4cc>)
 8001a54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a56:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a5a:	60bb      	str	r3, [r7, #8]
 8001a5c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001a5e:	2301      	movs	r3, #1
 8001a60:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001a62:	4b82      	ldr	r3, [pc, #520]	; (8001c6c <HAL_RCC_OscConfig+0x4d0>)
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d118      	bne.n	8001aa0 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8001a6e:	4b7f      	ldr	r3, [pc, #508]	; (8001c6c <HAL_RCC_OscConfig+0x4d0>)
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	4a7e      	ldr	r2, [pc, #504]	; (8001c6c <HAL_RCC_OscConfig+0x4d0>)
 8001a74:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001a78:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001a7a:	f7ff fa13 	bl	8000ea4 <HAL_GetTick>
 8001a7e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001a80:	e008      	b.n	8001a94 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001a82:	f7ff fa0f 	bl	8000ea4 <HAL_GetTick>
 8001a86:	4602      	mov	r2, r0
 8001a88:	693b      	ldr	r3, [r7, #16]
 8001a8a:	1ad3      	subs	r3, r2, r3
 8001a8c:	2b64      	cmp	r3, #100	; 0x64
 8001a8e:	d901      	bls.n	8001a94 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8001a90:	2303      	movs	r3, #3
 8001a92:	e120      	b.n	8001cd6 <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001a94:	4b75      	ldr	r3, [pc, #468]	; (8001c6c <HAL_RCC_OscConfig+0x4d0>)
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a9c:	2b00      	cmp	r3, #0
 8001a9e:	d0f0      	beq.n	8001a82 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	689b      	ldr	r3, [r3, #8]
 8001aa4:	2b01      	cmp	r3, #1
 8001aa6:	d106      	bne.n	8001ab6 <HAL_RCC_OscConfig+0x31a>
 8001aa8:	4b6f      	ldr	r3, [pc, #444]	; (8001c68 <HAL_RCC_OscConfig+0x4cc>)
 8001aaa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001aac:	4a6e      	ldr	r2, [pc, #440]	; (8001c68 <HAL_RCC_OscConfig+0x4cc>)
 8001aae:	f043 0301 	orr.w	r3, r3, #1
 8001ab2:	6713      	str	r3, [r2, #112]	; 0x70
 8001ab4:	e02d      	b.n	8001b12 <HAL_RCC_OscConfig+0x376>
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	689b      	ldr	r3, [r3, #8]
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	d10c      	bne.n	8001ad8 <HAL_RCC_OscConfig+0x33c>
 8001abe:	4b6a      	ldr	r3, [pc, #424]	; (8001c68 <HAL_RCC_OscConfig+0x4cc>)
 8001ac0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ac2:	4a69      	ldr	r2, [pc, #420]	; (8001c68 <HAL_RCC_OscConfig+0x4cc>)
 8001ac4:	f023 0301 	bic.w	r3, r3, #1
 8001ac8:	6713      	str	r3, [r2, #112]	; 0x70
 8001aca:	4b67      	ldr	r3, [pc, #412]	; (8001c68 <HAL_RCC_OscConfig+0x4cc>)
 8001acc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ace:	4a66      	ldr	r2, [pc, #408]	; (8001c68 <HAL_RCC_OscConfig+0x4cc>)
 8001ad0:	f023 0304 	bic.w	r3, r3, #4
 8001ad4:	6713      	str	r3, [r2, #112]	; 0x70
 8001ad6:	e01c      	b.n	8001b12 <HAL_RCC_OscConfig+0x376>
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	689b      	ldr	r3, [r3, #8]
 8001adc:	2b05      	cmp	r3, #5
 8001ade:	d10c      	bne.n	8001afa <HAL_RCC_OscConfig+0x35e>
 8001ae0:	4b61      	ldr	r3, [pc, #388]	; (8001c68 <HAL_RCC_OscConfig+0x4cc>)
 8001ae2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ae4:	4a60      	ldr	r2, [pc, #384]	; (8001c68 <HAL_RCC_OscConfig+0x4cc>)
 8001ae6:	f043 0304 	orr.w	r3, r3, #4
 8001aea:	6713      	str	r3, [r2, #112]	; 0x70
 8001aec:	4b5e      	ldr	r3, [pc, #376]	; (8001c68 <HAL_RCC_OscConfig+0x4cc>)
 8001aee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001af0:	4a5d      	ldr	r2, [pc, #372]	; (8001c68 <HAL_RCC_OscConfig+0x4cc>)
 8001af2:	f043 0301 	orr.w	r3, r3, #1
 8001af6:	6713      	str	r3, [r2, #112]	; 0x70
 8001af8:	e00b      	b.n	8001b12 <HAL_RCC_OscConfig+0x376>
 8001afa:	4b5b      	ldr	r3, [pc, #364]	; (8001c68 <HAL_RCC_OscConfig+0x4cc>)
 8001afc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001afe:	4a5a      	ldr	r2, [pc, #360]	; (8001c68 <HAL_RCC_OscConfig+0x4cc>)
 8001b00:	f023 0301 	bic.w	r3, r3, #1
 8001b04:	6713      	str	r3, [r2, #112]	; 0x70
 8001b06:	4b58      	ldr	r3, [pc, #352]	; (8001c68 <HAL_RCC_OscConfig+0x4cc>)
 8001b08:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b0a:	4a57      	ldr	r2, [pc, #348]	; (8001c68 <HAL_RCC_OscConfig+0x4cc>)
 8001b0c:	f023 0304 	bic.w	r3, r3, #4
 8001b10:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	689b      	ldr	r3, [r3, #8]
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	d015      	beq.n	8001b46 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b1a:	f7ff f9c3 	bl	8000ea4 <HAL_GetTick>
 8001b1e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001b20:	e00a      	b.n	8001b38 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001b22:	f7ff f9bf 	bl	8000ea4 <HAL_GetTick>
 8001b26:	4602      	mov	r2, r0
 8001b28:	693b      	ldr	r3, [r7, #16]
 8001b2a:	1ad3      	subs	r3, r2, r3
 8001b2c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b30:	4293      	cmp	r3, r2
 8001b32:	d901      	bls.n	8001b38 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8001b34:	2303      	movs	r3, #3
 8001b36:	e0ce      	b.n	8001cd6 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001b38:	4b4b      	ldr	r3, [pc, #300]	; (8001c68 <HAL_RCC_OscConfig+0x4cc>)
 8001b3a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b3c:	f003 0302 	and.w	r3, r3, #2
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	d0ee      	beq.n	8001b22 <HAL_RCC_OscConfig+0x386>
 8001b44:	e014      	b.n	8001b70 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b46:	f7ff f9ad 	bl	8000ea4 <HAL_GetTick>
 8001b4a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001b4c:	e00a      	b.n	8001b64 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001b4e:	f7ff f9a9 	bl	8000ea4 <HAL_GetTick>
 8001b52:	4602      	mov	r2, r0
 8001b54:	693b      	ldr	r3, [r7, #16]
 8001b56:	1ad3      	subs	r3, r2, r3
 8001b58:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b5c:	4293      	cmp	r3, r2
 8001b5e:	d901      	bls.n	8001b64 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8001b60:	2303      	movs	r3, #3
 8001b62:	e0b8      	b.n	8001cd6 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001b64:	4b40      	ldr	r3, [pc, #256]	; (8001c68 <HAL_RCC_OscConfig+0x4cc>)
 8001b66:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b68:	f003 0302 	and.w	r3, r3, #2
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	d1ee      	bne.n	8001b4e <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001b70:	7dfb      	ldrb	r3, [r7, #23]
 8001b72:	2b01      	cmp	r3, #1
 8001b74:	d105      	bne.n	8001b82 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001b76:	4b3c      	ldr	r3, [pc, #240]	; (8001c68 <HAL_RCC_OscConfig+0x4cc>)
 8001b78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b7a:	4a3b      	ldr	r2, [pc, #236]	; (8001c68 <HAL_RCC_OscConfig+0x4cc>)
 8001b7c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001b80:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	699b      	ldr	r3, [r3, #24]
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	f000 80a4 	beq.w	8001cd4 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001b8c:	4b36      	ldr	r3, [pc, #216]	; (8001c68 <HAL_RCC_OscConfig+0x4cc>)
 8001b8e:	689b      	ldr	r3, [r3, #8]
 8001b90:	f003 030c 	and.w	r3, r3, #12
 8001b94:	2b08      	cmp	r3, #8
 8001b96:	d06b      	beq.n	8001c70 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	699b      	ldr	r3, [r3, #24]
 8001b9c:	2b02      	cmp	r3, #2
 8001b9e:	d149      	bne.n	8001c34 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001ba0:	4b31      	ldr	r3, [pc, #196]	; (8001c68 <HAL_RCC_OscConfig+0x4cc>)
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	4a30      	ldr	r2, [pc, #192]	; (8001c68 <HAL_RCC_OscConfig+0x4cc>)
 8001ba6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001baa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001bac:	f7ff f97a 	bl	8000ea4 <HAL_GetTick>
 8001bb0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001bb2:	e008      	b.n	8001bc6 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001bb4:	f7ff f976 	bl	8000ea4 <HAL_GetTick>
 8001bb8:	4602      	mov	r2, r0
 8001bba:	693b      	ldr	r3, [r7, #16]
 8001bbc:	1ad3      	subs	r3, r2, r3
 8001bbe:	2b02      	cmp	r3, #2
 8001bc0:	d901      	bls.n	8001bc6 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8001bc2:	2303      	movs	r3, #3
 8001bc4:	e087      	b.n	8001cd6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001bc6:	4b28      	ldr	r3, [pc, #160]	; (8001c68 <HAL_RCC_OscConfig+0x4cc>)
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	d1f0      	bne.n	8001bb4 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	69da      	ldr	r2, [r3, #28]
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	6a1b      	ldr	r3, [r3, #32]
 8001bda:	431a      	orrs	r2, r3
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001be0:	019b      	lsls	r3, r3, #6
 8001be2:	431a      	orrs	r2, r3
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001be8:	085b      	lsrs	r3, r3, #1
 8001bea:	3b01      	subs	r3, #1
 8001bec:	041b      	lsls	r3, r3, #16
 8001bee:	431a      	orrs	r2, r3
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001bf4:	061b      	lsls	r3, r3, #24
 8001bf6:	4313      	orrs	r3, r2
 8001bf8:	4a1b      	ldr	r2, [pc, #108]	; (8001c68 <HAL_RCC_OscConfig+0x4cc>)
 8001bfa:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8001bfe:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001c00:	4b19      	ldr	r3, [pc, #100]	; (8001c68 <HAL_RCC_OscConfig+0x4cc>)
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	4a18      	ldr	r2, [pc, #96]	; (8001c68 <HAL_RCC_OscConfig+0x4cc>)
 8001c06:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001c0a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c0c:	f7ff f94a 	bl	8000ea4 <HAL_GetTick>
 8001c10:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001c12:	e008      	b.n	8001c26 <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c14:	f7ff f946 	bl	8000ea4 <HAL_GetTick>
 8001c18:	4602      	mov	r2, r0
 8001c1a:	693b      	ldr	r3, [r7, #16]
 8001c1c:	1ad3      	subs	r3, r2, r3
 8001c1e:	2b02      	cmp	r3, #2
 8001c20:	d901      	bls.n	8001c26 <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 8001c22:	2303      	movs	r3, #3
 8001c24:	e057      	b.n	8001cd6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001c26:	4b10      	ldr	r3, [pc, #64]	; (8001c68 <HAL_RCC_OscConfig+0x4cc>)
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	d0f0      	beq.n	8001c14 <HAL_RCC_OscConfig+0x478>
 8001c32:	e04f      	b.n	8001cd4 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c34:	4b0c      	ldr	r3, [pc, #48]	; (8001c68 <HAL_RCC_OscConfig+0x4cc>)
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	4a0b      	ldr	r2, [pc, #44]	; (8001c68 <HAL_RCC_OscConfig+0x4cc>)
 8001c3a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001c3e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c40:	f7ff f930 	bl	8000ea4 <HAL_GetTick>
 8001c44:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001c46:	e008      	b.n	8001c5a <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c48:	f7ff f92c 	bl	8000ea4 <HAL_GetTick>
 8001c4c:	4602      	mov	r2, r0
 8001c4e:	693b      	ldr	r3, [r7, #16]
 8001c50:	1ad3      	subs	r3, r2, r3
 8001c52:	2b02      	cmp	r3, #2
 8001c54:	d901      	bls.n	8001c5a <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 8001c56:	2303      	movs	r3, #3
 8001c58:	e03d      	b.n	8001cd6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001c5a:	4b03      	ldr	r3, [pc, #12]	; (8001c68 <HAL_RCC_OscConfig+0x4cc>)
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d1f0      	bne.n	8001c48 <HAL_RCC_OscConfig+0x4ac>
 8001c66:	e035      	b.n	8001cd4 <HAL_RCC_OscConfig+0x538>
 8001c68:	40023800 	.word	0x40023800
 8001c6c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8001c70:	4b1b      	ldr	r3, [pc, #108]	; (8001ce0 <HAL_RCC_OscConfig+0x544>)
 8001c72:	685b      	ldr	r3, [r3, #4]
 8001c74:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	699b      	ldr	r3, [r3, #24]
 8001c7a:	2b01      	cmp	r3, #1
 8001c7c:	d028      	beq.n	8001cd0 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001c7e:	68fb      	ldr	r3, [r7, #12]
 8001c80:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001c88:	429a      	cmp	r2, r3
 8001c8a:	d121      	bne.n	8001cd0 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001c8c:	68fb      	ldr	r3, [r7, #12]
 8001c8e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001c96:	429a      	cmp	r2, r3
 8001c98:	d11a      	bne.n	8001cd0 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001c9a:	68fa      	ldr	r2, [r7, #12]
 8001c9c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001ca0:	4013      	ands	r3, r2
 8001ca2:	687a      	ldr	r2, [r7, #4]
 8001ca4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001ca6:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001ca8:	4293      	cmp	r3, r2
 8001caa:	d111      	bne.n	8001cd0 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8001cac:	68fb      	ldr	r3, [r7, #12]
 8001cae:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001cb6:	085b      	lsrs	r3, r3, #1
 8001cb8:	3b01      	subs	r3, #1
 8001cba:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001cbc:	429a      	cmp	r2, r3
 8001cbe:	d107      	bne.n	8001cd0 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001cc0:	68fb      	ldr	r3, [r7, #12]
 8001cc2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001cca:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8001ccc:	429a      	cmp	r2, r3
 8001cce:	d001      	beq.n	8001cd4 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8001cd0:	2301      	movs	r3, #1
 8001cd2:	e000      	b.n	8001cd6 <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8001cd4:	2300      	movs	r3, #0
}
 8001cd6:	4618      	mov	r0, r3
 8001cd8:	3718      	adds	r7, #24
 8001cda:	46bd      	mov	sp, r7
 8001cdc:	bd80      	pop	{r7, pc}
 8001cde:	bf00      	nop
 8001ce0:	40023800 	.word	0x40023800

08001ce4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001ce4:	b580      	push	{r7, lr}
 8001ce6:	b084      	sub	sp, #16
 8001ce8:	af00      	add	r7, sp, #0
 8001cea:	6078      	str	r0, [r7, #4]
 8001cec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8001cee:	2300      	movs	r3, #0
 8001cf0:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	2b00      	cmp	r3, #0
 8001cf6:	d101      	bne.n	8001cfc <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001cf8:	2301      	movs	r3, #1
 8001cfa:	e0d0      	b.n	8001e9e <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001cfc:	4b6a      	ldr	r3, [pc, #424]	; (8001ea8 <HAL_RCC_ClockConfig+0x1c4>)
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	f003 030f 	and.w	r3, r3, #15
 8001d04:	683a      	ldr	r2, [r7, #0]
 8001d06:	429a      	cmp	r2, r3
 8001d08:	d910      	bls.n	8001d2c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d0a:	4b67      	ldr	r3, [pc, #412]	; (8001ea8 <HAL_RCC_ClockConfig+0x1c4>)
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	f023 020f 	bic.w	r2, r3, #15
 8001d12:	4965      	ldr	r1, [pc, #404]	; (8001ea8 <HAL_RCC_ClockConfig+0x1c4>)
 8001d14:	683b      	ldr	r3, [r7, #0]
 8001d16:	4313      	orrs	r3, r2
 8001d18:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d1a:	4b63      	ldr	r3, [pc, #396]	; (8001ea8 <HAL_RCC_ClockConfig+0x1c4>)
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	f003 030f 	and.w	r3, r3, #15
 8001d22:	683a      	ldr	r2, [r7, #0]
 8001d24:	429a      	cmp	r2, r3
 8001d26:	d001      	beq.n	8001d2c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001d28:	2301      	movs	r3, #1
 8001d2a:	e0b8      	b.n	8001e9e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	f003 0302 	and.w	r3, r3, #2
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	d020      	beq.n	8001d7a <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	f003 0304 	and.w	r3, r3, #4
 8001d40:	2b00      	cmp	r3, #0
 8001d42:	d005      	beq.n	8001d50 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001d44:	4b59      	ldr	r3, [pc, #356]	; (8001eac <HAL_RCC_ClockConfig+0x1c8>)
 8001d46:	689b      	ldr	r3, [r3, #8]
 8001d48:	4a58      	ldr	r2, [pc, #352]	; (8001eac <HAL_RCC_ClockConfig+0x1c8>)
 8001d4a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001d4e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	f003 0308 	and.w	r3, r3, #8
 8001d58:	2b00      	cmp	r3, #0
 8001d5a:	d005      	beq.n	8001d68 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001d5c:	4b53      	ldr	r3, [pc, #332]	; (8001eac <HAL_RCC_ClockConfig+0x1c8>)
 8001d5e:	689b      	ldr	r3, [r3, #8]
 8001d60:	4a52      	ldr	r2, [pc, #328]	; (8001eac <HAL_RCC_ClockConfig+0x1c8>)
 8001d62:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001d66:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001d68:	4b50      	ldr	r3, [pc, #320]	; (8001eac <HAL_RCC_ClockConfig+0x1c8>)
 8001d6a:	689b      	ldr	r3, [r3, #8]
 8001d6c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	689b      	ldr	r3, [r3, #8]
 8001d74:	494d      	ldr	r1, [pc, #308]	; (8001eac <HAL_RCC_ClockConfig+0x1c8>)
 8001d76:	4313      	orrs	r3, r2
 8001d78:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	f003 0301 	and.w	r3, r3, #1
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d040      	beq.n	8001e08 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	685b      	ldr	r3, [r3, #4]
 8001d8a:	2b01      	cmp	r3, #1
 8001d8c:	d107      	bne.n	8001d9e <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d8e:	4b47      	ldr	r3, [pc, #284]	; (8001eac <HAL_RCC_ClockConfig+0x1c8>)
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	d115      	bne.n	8001dc6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8001d9a:	2301      	movs	r3, #1
 8001d9c:	e07f      	b.n	8001e9e <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	685b      	ldr	r3, [r3, #4]
 8001da2:	2b02      	cmp	r3, #2
 8001da4:	d107      	bne.n	8001db6 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001da6:	4b41      	ldr	r3, [pc, #260]	; (8001eac <HAL_RCC_ClockConfig+0x1c8>)
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d109      	bne.n	8001dc6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8001db2:	2301      	movs	r3, #1
 8001db4:	e073      	b.n	8001e9e <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001db6:	4b3d      	ldr	r3, [pc, #244]	; (8001eac <HAL_RCC_ClockConfig+0x1c8>)
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	f003 0302 	and.w	r3, r3, #2
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d101      	bne.n	8001dc6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8001dc2:	2301      	movs	r3, #1
 8001dc4:	e06b      	b.n	8001e9e <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001dc6:	4b39      	ldr	r3, [pc, #228]	; (8001eac <HAL_RCC_ClockConfig+0x1c8>)
 8001dc8:	689b      	ldr	r3, [r3, #8]
 8001dca:	f023 0203 	bic.w	r2, r3, #3
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	685b      	ldr	r3, [r3, #4]
 8001dd2:	4936      	ldr	r1, [pc, #216]	; (8001eac <HAL_RCC_ClockConfig+0x1c8>)
 8001dd4:	4313      	orrs	r3, r2
 8001dd6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001dd8:	f7ff f864 	bl	8000ea4 <HAL_GetTick>
 8001ddc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001dde:	e00a      	b.n	8001df6 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001de0:	f7ff f860 	bl	8000ea4 <HAL_GetTick>
 8001de4:	4602      	mov	r2, r0
 8001de6:	68fb      	ldr	r3, [r7, #12]
 8001de8:	1ad3      	subs	r3, r2, r3
 8001dea:	f241 3288 	movw	r2, #5000	; 0x1388
 8001dee:	4293      	cmp	r3, r2
 8001df0:	d901      	bls.n	8001df6 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8001df2:	2303      	movs	r3, #3
 8001df4:	e053      	b.n	8001e9e <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001df6:	4b2d      	ldr	r3, [pc, #180]	; (8001eac <HAL_RCC_ClockConfig+0x1c8>)
 8001df8:	689b      	ldr	r3, [r3, #8]
 8001dfa:	f003 020c 	and.w	r2, r3, #12
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	685b      	ldr	r3, [r3, #4]
 8001e02:	009b      	lsls	r3, r3, #2
 8001e04:	429a      	cmp	r2, r3
 8001e06:	d1eb      	bne.n	8001de0 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001e08:	4b27      	ldr	r3, [pc, #156]	; (8001ea8 <HAL_RCC_ClockConfig+0x1c4>)
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	f003 030f 	and.w	r3, r3, #15
 8001e10:	683a      	ldr	r2, [r7, #0]
 8001e12:	429a      	cmp	r2, r3
 8001e14:	d210      	bcs.n	8001e38 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e16:	4b24      	ldr	r3, [pc, #144]	; (8001ea8 <HAL_RCC_ClockConfig+0x1c4>)
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	f023 020f 	bic.w	r2, r3, #15
 8001e1e:	4922      	ldr	r1, [pc, #136]	; (8001ea8 <HAL_RCC_ClockConfig+0x1c4>)
 8001e20:	683b      	ldr	r3, [r7, #0]
 8001e22:	4313      	orrs	r3, r2
 8001e24:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e26:	4b20      	ldr	r3, [pc, #128]	; (8001ea8 <HAL_RCC_ClockConfig+0x1c4>)
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	f003 030f 	and.w	r3, r3, #15
 8001e2e:	683a      	ldr	r2, [r7, #0]
 8001e30:	429a      	cmp	r2, r3
 8001e32:	d001      	beq.n	8001e38 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8001e34:	2301      	movs	r3, #1
 8001e36:	e032      	b.n	8001e9e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	f003 0304 	and.w	r3, r3, #4
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	d008      	beq.n	8001e56 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001e44:	4b19      	ldr	r3, [pc, #100]	; (8001eac <HAL_RCC_ClockConfig+0x1c8>)
 8001e46:	689b      	ldr	r3, [r3, #8]
 8001e48:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	68db      	ldr	r3, [r3, #12]
 8001e50:	4916      	ldr	r1, [pc, #88]	; (8001eac <HAL_RCC_ClockConfig+0x1c8>)
 8001e52:	4313      	orrs	r3, r2
 8001e54:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	f003 0308 	and.w	r3, r3, #8
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d009      	beq.n	8001e76 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001e62:	4b12      	ldr	r3, [pc, #72]	; (8001eac <HAL_RCC_ClockConfig+0x1c8>)
 8001e64:	689b      	ldr	r3, [r3, #8]
 8001e66:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	691b      	ldr	r3, [r3, #16]
 8001e6e:	00db      	lsls	r3, r3, #3
 8001e70:	490e      	ldr	r1, [pc, #56]	; (8001eac <HAL_RCC_ClockConfig+0x1c8>)
 8001e72:	4313      	orrs	r3, r2
 8001e74:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001e76:	f000 f821 	bl	8001ebc <HAL_RCC_GetSysClockFreq>
 8001e7a:	4601      	mov	r1, r0
 8001e7c:	4b0b      	ldr	r3, [pc, #44]	; (8001eac <HAL_RCC_ClockConfig+0x1c8>)
 8001e7e:	689b      	ldr	r3, [r3, #8]
 8001e80:	091b      	lsrs	r3, r3, #4
 8001e82:	f003 030f 	and.w	r3, r3, #15
 8001e86:	4a0a      	ldr	r2, [pc, #40]	; (8001eb0 <HAL_RCC_ClockConfig+0x1cc>)
 8001e88:	5cd3      	ldrb	r3, [r2, r3]
 8001e8a:	fa21 f303 	lsr.w	r3, r1, r3
 8001e8e:	4a09      	ldr	r2, [pc, #36]	; (8001eb4 <HAL_RCC_ClockConfig+0x1d0>)
 8001e90:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001e92:	4b09      	ldr	r3, [pc, #36]	; (8001eb8 <HAL_RCC_ClockConfig+0x1d4>)
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	4618      	mov	r0, r3
 8001e98:	f7fe fea8 	bl	8000bec <HAL_InitTick>

  return HAL_OK;
 8001e9c:	2300      	movs	r3, #0
}
 8001e9e:	4618      	mov	r0, r3
 8001ea0:	3710      	adds	r7, #16
 8001ea2:	46bd      	mov	sp, r7
 8001ea4:	bd80      	pop	{r7, pc}
 8001ea6:	bf00      	nop
 8001ea8:	40023c00 	.word	0x40023c00
 8001eac:	40023800 	.word	0x40023800
 8001eb0:	08007140 	.word	0x08007140
 8001eb4:	20000000 	.word	0x20000000
 8001eb8:	20000004 	.word	0x20000004

08001ebc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001ebc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001ebe:	b085      	sub	sp, #20
 8001ec0:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8001ec2:	2300      	movs	r3, #0
 8001ec4:	607b      	str	r3, [r7, #4]
 8001ec6:	2300      	movs	r3, #0
 8001ec8:	60fb      	str	r3, [r7, #12]
 8001eca:	2300      	movs	r3, #0
 8001ecc:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0;
 8001ece:	2300      	movs	r3, #0
 8001ed0:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001ed2:	4b63      	ldr	r3, [pc, #396]	; (8002060 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001ed4:	689b      	ldr	r3, [r3, #8]
 8001ed6:	f003 030c 	and.w	r3, r3, #12
 8001eda:	2b04      	cmp	r3, #4
 8001edc:	d007      	beq.n	8001eee <HAL_RCC_GetSysClockFreq+0x32>
 8001ede:	2b08      	cmp	r3, #8
 8001ee0:	d008      	beq.n	8001ef4 <HAL_RCC_GetSysClockFreq+0x38>
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	f040 80b4 	bne.w	8002050 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001ee8:	4b5e      	ldr	r3, [pc, #376]	; (8002064 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8001eea:	60bb      	str	r3, [r7, #8]
      break;
 8001eec:	e0b3      	b.n	8002056 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001eee:	4b5e      	ldr	r3, [pc, #376]	; (8002068 <HAL_RCC_GetSysClockFreq+0x1ac>)
 8001ef0:	60bb      	str	r3, [r7, #8]
      break;
 8001ef2:	e0b0      	b.n	8002056 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001ef4:	4b5a      	ldr	r3, [pc, #360]	; (8002060 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001ef6:	685b      	ldr	r3, [r3, #4]
 8001ef8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001efc:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8001efe:	4b58      	ldr	r3, [pc, #352]	; (8002060 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001f00:	685b      	ldr	r3, [r3, #4]
 8001f02:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d04a      	beq.n	8001fa0 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001f0a:	4b55      	ldr	r3, [pc, #340]	; (8002060 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001f0c:	685b      	ldr	r3, [r3, #4]
 8001f0e:	099b      	lsrs	r3, r3, #6
 8001f10:	f04f 0400 	mov.w	r4, #0
 8001f14:	f240 11ff 	movw	r1, #511	; 0x1ff
 8001f18:	f04f 0200 	mov.w	r2, #0
 8001f1c:	ea03 0501 	and.w	r5, r3, r1
 8001f20:	ea04 0602 	and.w	r6, r4, r2
 8001f24:	4629      	mov	r1, r5
 8001f26:	4632      	mov	r2, r6
 8001f28:	f04f 0300 	mov.w	r3, #0
 8001f2c:	f04f 0400 	mov.w	r4, #0
 8001f30:	0154      	lsls	r4, r2, #5
 8001f32:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001f36:	014b      	lsls	r3, r1, #5
 8001f38:	4619      	mov	r1, r3
 8001f3a:	4622      	mov	r2, r4
 8001f3c:	1b49      	subs	r1, r1, r5
 8001f3e:	eb62 0206 	sbc.w	r2, r2, r6
 8001f42:	f04f 0300 	mov.w	r3, #0
 8001f46:	f04f 0400 	mov.w	r4, #0
 8001f4a:	0194      	lsls	r4, r2, #6
 8001f4c:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8001f50:	018b      	lsls	r3, r1, #6
 8001f52:	1a5b      	subs	r3, r3, r1
 8001f54:	eb64 0402 	sbc.w	r4, r4, r2
 8001f58:	f04f 0100 	mov.w	r1, #0
 8001f5c:	f04f 0200 	mov.w	r2, #0
 8001f60:	00e2      	lsls	r2, r4, #3
 8001f62:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8001f66:	00d9      	lsls	r1, r3, #3
 8001f68:	460b      	mov	r3, r1
 8001f6a:	4614      	mov	r4, r2
 8001f6c:	195b      	adds	r3, r3, r5
 8001f6e:	eb44 0406 	adc.w	r4, r4, r6
 8001f72:	f04f 0100 	mov.w	r1, #0
 8001f76:	f04f 0200 	mov.w	r2, #0
 8001f7a:	0262      	lsls	r2, r4, #9
 8001f7c:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8001f80:	0259      	lsls	r1, r3, #9
 8001f82:	460b      	mov	r3, r1
 8001f84:	4614      	mov	r4, r2
 8001f86:	4618      	mov	r0, r3
 8001f88:	4621      	mov	r1, r4
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	f04f 0400 	mov.w	r4, #0
 8001f90:	461a      	mov	r2, r3
 8001f92:	4623      	mov	r3, r4
 8001f94:	f7fe f93c 	bl	8000210 <__aeabi_uldivmod>
 8001f98:	4603      	mov	r3, r0
 8001f9a:	460c      	mov	r4, r1
 8001f9c:	60fb      	str	r3, [r7, #12]
 8001f9e:	e049      	b.n	8002034 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001fa0:	4b2f      	ldr	r3, [pc, #188]	; (8002060 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001fa2:	685b      	ldr	r3, [r3, #4]
 8001fa4:	099b      	lsrs	r3, r3, #6
 8001fa6:	f04f 0400 	mov.w	r4, #0
 8001faa:	f240 11ff 	movw	r1, #511	; 0x1ff
 8001fae:	f04f 0200 	mov.w	r2, #0
 8001fb2:	ea03 0501 	and.w	r5, r3, r1
 8001fb6:	ea04 0602 	and.w	r6, r4, r2
 8001fba:	4629      	mov	r1, r5
 8001fbc:	4632      	mov	r2, r6
 8001fbe:	f04f 0300 	mov.w	r3, #0
 8001fc2:	f04f 0400 	mov.w	r4, #0
 8001fc6:	0154      	lsls	r4, r2, #5
 8001fc8:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001fcc:	014b      	lsls	r3, r1, #5
 8001fce:	4619      	mov	r1, r3
 8001fd0:	4622      	mov	r2, r4
 8001fd2:	1b49      	subs	r1, r1, r5
 8001fd4:	eb62 0206 	sbc.w	r2, r2, r6
 8001fd8:	f04f 0300 	mov.w	r3, #0
 8001fdc:	f04f 0400 	mov.w	r4, #0
 8001fe0:	0194      	lsls	r4, r2, #6
 8001fe2:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8001fe6:	018b      	lsls	r3, r1, #6
 8001fe8:	1a5b      	subs	r3, r3, r1
 8001fea:	eb64 0402 	sbc.w	r4, r4, r2
 8001fee:	f04f 0100 	mov.w	r1, #0
 8001ff2:	f04f 0200 	mov.w	r2, #0
 8001ff6:	00e2      	lsls	r2, r4, #3
 8001ff8:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8001ffc:	00d9      	lsls	r1, r3, #3
 8001ffe:	460b      	mov	r3, r1
 8002000:	4614      	mov	r4, r2
 8002002:	195b      	adds	r3, r3, r5
 8002004:	eb44 0406 	adc.w	r4, r4, r6
 8002008:	f04f 0100 	mov.w	r1, #0
 800200c:	f04f 0200 	mov.w	r2, #0
 8002010:	02a2      	lsls	r2, r4, #10
 8002012:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8002016:	0299      	lsls	r1, r3, #10
 8002018:	460b      	mov	r3, r1
 800201a:	4614      	mov	r4, r2
 800201c:	4618      	mov	r0, r3
 800201e:	4621      	mov	r1, r4
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	f04f 0400 	mov.w	r4, #0
 8002026:	461a      	mov	r2, r3
 8002028:	4623      	mov	r3, r4
 800202a:	f7fe f8f1 	bl	8000210 <__aeabi_uldivmod>
 800202e:	4603      	mov	r3, r0
 8002030:	460c      	mov	r4, r1
 8002032:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8002034:	4b0a      	ldr	r3, [pc, #40]	; (8002060 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002036:	685b      	ldr	r3, [r3, #4]
 8002038:	0c1b      	lsrs	r3, r3, #16
 800203a:	f003 0303 	and.w	r3, r3, #3
 800203e:	3301      	adds	r3, #1
 8002040:	005b      	lsls	r3, r3, #1
 8002042:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 8002044:	68fa      	ldr	r2, [r7, #12]
 8002046:	683b      	ldr	r3, [r7, #0]
 8002048:	fbb2 f3f3 	udiv	r3, r2, r3
 800204c:	60bb      	str	r3, [r7, #8]
      break;
 800204e:	e002      	b.n	8002056 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002050:	4b04      	ldr	r3, [pc, #16]	; (8002064 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8002052:	60bb      	str	r3, [r7, #8]
      break;
 8002054:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002056:	68bb      	ldr	r3, [r7, #8]
}
 8002058:	4618      	mov	r0, r3
 800205a:	3714      	adds	r7, #20
 800205c:	46bd      	mov	sp, r7
 800205e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002060:	40023800 	.word	0x40023800
 8002064:	00f42400 	.word	0x00f42400
 8002068:	007a1200 	.word	0x007a1200

0800206c <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800206c:	b480      	push	{r7}
 800206e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002070:	4b03      	ldr	r3, [pc, #12]	; (8002080 <HAL_RCC_GetHCLKFreq+0x14>)
 8002072:	681b      	ldr	r3, [r3, #0]
}
 8002074:	4618      	mov	r0, r3
 8002076:	46bd      	mov	sp, r7
 8002078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800207c:	4770      	bx	lr
 800207e:	bf00      	nop
 8002080:	20000000 	.word	0x20000000

08002084 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002084:	b580      	push	{r7, lr}
 8002086:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002088:	f7ff fff0 	bl	800206c <HAL_RCC_GetHCLKFreq>
 800208c:	4601      	mov	r1, r0
 800208e:	4b05      	ldr	r3, [pc, #20]	; (80020a4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002090:	689b      	ldr	r3, [r3, #8]
 8002092:	0a9b      	lsrs	r3, r3, #10
 8002094:	f003 0307 	and.w	r3, r3, #7
 8002098:	4a03      	ldr	r2, [pc, #12]	; (80020a8 <HAL_RCC_GetPCLK1Freq+0x24>)
 800209a:	5cd3      	ldrb	r3, [r2, r3]
 800209c:	fa21 f303 	lsr.w	r3, r1, r3
}
 80020a0:	4618      	mov	r0, r3
 80020a2:	bd80      	pop	{r7, pc}
 80020a4:	40023800 	.word	0x40023800
 80020a8:	08007150 	.word	0x08007150

080020ac <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80020ac:	b580      	push	{r7, lr}
 80020ae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80020b0:	f7ff ffdc 	bl	800206c <HAL_RCC_GetHCLKFreq>
 80020b4:	4601      	mov	r1, r0
 80020b6:	4b05      	ldr	r3, [pc, #20]	; (80020cc <HAL_RCC_GetPCLK2Freq+0x20>)
 80020b8:	689b      	ldr	r3, [r3, #8]
 80020ba:	0b5b      	lsrs	r3, r3, #13
 80020bc:	f003 0307 	and.w	r3, r3, #7
 80020c0:	4a03      	ldr	r2, [pc, #12]	; (80020d0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80020c2:	5cd3      	ldrb	r3, [r2, r3]
 80020c4:	fa21 f303 	lsr.w	r3, r1, r3
}
 80020c8:	4618      	mov	r0, r3
 80020ca:	bd80      	pop	{r7, pc}
 80020cc:	40023800 	.word	0x40023800
 80020d0:	08007150 	.word	0x08007150

080020d4 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80020d4:	b480      	push	{r7}
 80020d6:	b083      	sub	sp, #12
 80020d8:	af00      	add	r7, sp, #0
 80020da:	6078      	str	r0, [r7, #4]
 80020dc:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	220f      	movs	r2, #15
 80020e2:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80020e4:	4b12      	ldr	r3, [pc, #72]	; (8002130 <HAL_RCC_GetClockConfig+0x5c>)
 80020e6:	689b      	ldr	r3, [r3, #8]
 80020e8:	f003 0203 	and.w	r2, r3, #3
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80020f0:	4b0f      	ldr	r3, [pc, #60]	; (8002130 <HAL_RCC_GetClockConfig+0x5c>)
 80020f2:	689b      	ldr	r3, [r3, #8]
 80020f4:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80020fc:	4b0c      	ldr	r3, [pc, #48]	; (8002130 <HAL_RCC_GetClockConfig+0x5c>)
 80020fe:	689b      	ldr	r3, [r3, #8]
 8002100:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8002108:	4b09      	ldr	r3, [pc, #36]	; (8002130 <HAL_RCC_GetClockConfig+0x5c>)
 800210a:	689b      	ldr	r3, [r3, #8]
 800210c:	08db      	lsrs	r3, r3, #3
 800210e:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8002116:	4b07      	ldr	r3, [pc, #28]	; (8002134 <HAL_RCC_GetClockConfig+0x60>)
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	f003 020f 	and.w	r2, r3, #15
 800211e:	683b      	ldr	r3, [r7, #0]
 8002120:	601a      	str	r2, [r3, #0]
}
 8002122:	bf00      	nop
 8002124:	370c      	adds	r7, #12
 8002126:	46bd      	mov	sp, r7
 8002128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800212c:	4770      	bx	lr
 800212e:	bf00      	nop
 8002130:	40023800 	.word	0x40023800
 8002134:	40023c00 	.word	0x40023c00

08002138 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002138:	b580      	push	{r7, lr}
 800213a:	b088      	sub	sp, #32
 800213c:	af00      	add	r7, sp, #0
 800213e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8002140:	2300      	movs	r3, #0
 8002142:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8002144:	2300      	movs	r3, #0
 8002146:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8002148:	2300      	movs	r3, #0
 800214a:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 800214c:	2300      	movs	r3, #0
 800214e:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8002150:	2300      	movs	r3, #0
 8002152:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	f003 0301 	and.w	r3, r3, #1
 800215c:	2b00      	cmp	r3, #0
 800215e:	d012      	beq.n	8002186 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002160:	4b69      	ldr	r3, [pc, #420]	; (8002308 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002162:	689b      	ldr	r3, [r3, #8]
 8002164:	4a68      	ldr	r2, [pc, #416]	; (8002308 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002166:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800216a:	6093      	str	r3, [r2, #8]
 800216c:	4b66      	ldr	r3, [pc, #408]	; (8002308 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800216e:	689a      	ldr	r2, [r3, #8]
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002174:	4964      	ldr	r1, [pc, #400]	; (8002308 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002176:	4313      	orrs	r3, r2
 8002178:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800217e:	2b00      	cmp	r3, #0
 8002180:	d101      	bne.n	8002186 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8002182:	2301      	movs	r3, #1
 8002184:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800218e:	2b00      	cmp	r3, #0
 8002190:	d017      	beq.n	80021c2 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002192:	4b5d      	ldr	r3, [pc, #372]	; (8002308 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002194:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002198:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80021a0:	4959      	ldr	r1, [pc, #356]	; (8002308 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80021a2:	4313      	orrs	r3, r2
 80021a4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80021ac:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80021b0:	d101      	bne.n	80021b6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 80021b2:	2301      	movs	r3, #1
 80021b4:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d101      	bne.n	80021c2 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 80021be:	2301      	movs	r3, #1
 80021c0:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d017      	beq.n	80021fe <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80021ce:	4b4e      	ldr	r3, [pc, #312]	; (8002308 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80021d0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80021d4:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021dc:	494a      	ldr	r1, [pc, #296]	; (8002308 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80021de:	4313      	orrs	r3, r2
 80021e0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021e8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80021ec:	d101      	bne.n	80021f2 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 80021ee:	2301      	movs	r3, #1
 80021f0:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d101      	bne.n	80021fe <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 80021fa:	2301      	movs	r3, #1
 80021fc:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002206:	2b00      	cmp	r3, #0
 8002208:	d001      	beq.n	800220e <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 800220a:	2301      	movs	r3, #1
 800220c:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	f003 0320 	and.w	r3, r3, #32
 8002216:	2b00      	cmp	r3, #0
 8002218:	f000 808b 	beq.w	8002332 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800221c:	4b3a      	ldr	r3, [pc, #232]	; (8002308 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800221e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002220:	4a39      	ldr	r2, [pc, #228]	; (8002308 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002222:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002226:	6413      	str	r3, [r2, #64]	; 0x40
 8002228:	4b37      	ldr	r3, [pc, #220]	; (8002308 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800222a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800222c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002230:	60bb      	str	r3, [r7, #8]
 8002232:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8002234:	4b35      	ldr	r3, [pc, #212]	; (800230c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	4a34      	ldr	r2, [pc, #208]	; (800230c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800223a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800223e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002240:	f7fe fe30 	bl	8000ea4 <HAL_GetTick>
 8002244:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8002246:	e008      	b.n	800225a <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002248:	f7fe fe2c 	bl	8000ea4 <HAL_GetTick>
 800224c:	4602      	mov	r2, r0
 800224e:	697b      	ldr	r3, [r7, #20]
 8002250:	1ad3      	subs	r3, r2, r3
 8002252:	2b64      	cmp	r3, #100	; 0x64
 8002254:	d901      	bls.n	800225a <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8002256:	2303      	movs	r3, #3
 8002258:	e357      	b.n	800290a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800225a:	4b2c      	ldr	r3, [pc, #176]	; (800230c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002262:	2b00      	cmp	r3, #0
 8002264:	d0f0      	beq.n	8002248 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002266:	4b28      	ldr	r3, [pc, #160]	; (8002308 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002268:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800226a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800226e:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002270:	693b      	ldr	r3, [r7, #16]
 8002272:	2b00      	cmp	r3, #0
 8002274:	d035      	beq.n	80022e2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800227a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800227e:	693a      	ldr	r2, [r7, #16]
 8002280:	429a      	cmp	r2, r3
 8002282:	d02e      	beq.n	80022e2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002284:	4b20      	ldr	r3, [pc, #128]	; (8002308 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002286:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002288:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800228c:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800228e:	4b1e      	ldr	r3, [pc, #120]	; (8002308 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002290:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002292:	4a1d      	ldr	r2, [pc, #116]	; (8002308 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002294:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002298:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 800229a:	4b1b      	ldr	r3, [pc, #108]	; (8002308 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800229c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800229e:	4a1a      	ldr	r2, [pc, #104]	; (8002308 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80022a0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80022a4:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 80022a6:	4a18      	ldr	r2, [pc, #96]	; (8002308 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80022a8:	693b      	ldr	r3, [r7, #16]
 80022aa:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80022ac:	4b16      	ldr	r3, [pc, #88]	; (8002308 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80022ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80022b0:	f003 0301 	and.w	r3, r3, #1
 80022b4:	2b01      	cmp	r3, #1
 80022b6:	d114      	bne.n	80022e2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022b8:	f7fe fdf4 	bl	8000ea4 <HAL_GetTick>
 80022bc:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80022be:	e00a      	b.n	80022d6 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80022c0:	f7fe fdf0 	bl	8000ea4 <HAL_GetTick>
 80022c4:	4602      	mov	r2, r0
 80022c6:	697b      	ldr	r3, [r7, #20]
 80022c8:	1ad3      	subs	r3, r2, r3
 80022ca:	f241 3288 	movw	r2, #5000	; 0x1388
 80022ce:	4293      	cmp	r3, r2
 80022d0:	d901      	bls.n	80022d6 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 80022d2:	2303      	movs	r3, #3
 80022d4:	e319      	b.n	800290a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80022d6:	4b0c      	ldr	r3, [pc, #48]	; (8002308 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80022d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80022da:	f003 0302 	and.w	r3, r3, #2
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d0ee      	beq.n	80022c0 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022e6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80022ea:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80022ee:	d111      	bne.n	8002314 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 80022f0:	4b05      	ldr	r3, [pc, #20]	; (8002308 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80022f2:	689b      	ldr	r3, [r3, #8]
 80022f4:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80022fc:	4b04      	ldr	r3, [pc, #16]	; (8002310 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80022fe:	400b      	ands	r3, r1
 8002300:	4901      	ldr	r1, [pc, #4]	; (8002308 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002302:	4313      	orrs	r3, r2
 8002304:	608b      	str	r3, [r1, #8]
 8002306:	e00b      	b.n	8002320 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8002308:	40023800 	.word	0x40023800
 800230c:	40007000 	.word	0x40007000
 8002310:	0ffffcff 	.word	0x0ffffcff
 8002314:	4bb1      	ldr	r3, [pc, #708]	; (80025dc <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002316:	689b      	ldr	r3, [r3, #8]
 8002318:	4ab0      	ldr	r2, [pc, #704]	; (80025dc <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800231a:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800231e:	6093      	str	r3, [r2, #8]
 8002320:	4bae      	ldr	r3, [pc, #696]	; (80025dc <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002322:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002328:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800232c:	49ab      	ldr	r1, [pc, #684]	; (80025dc <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800232e:	4313      	orrs	r3, r2
 8002330:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	f003 0310 	and.w	r3, r3, #16
 800233a:	2b00      	cmp	r3, #0
 800233c:	d010      	beq.n	8002360 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800233e:	4ba7      	ldr	r3, [pc, #668]	; (80025dc <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002340:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002344:	4aa5      	ldr	r2, [pc, #660]	; (80025dc <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002346:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800234a:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800234e:	4ba3      	ldr	r3, [pc, #652]	; (80025dc <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002350:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002358:	49a0      	ldr	r1, [pc, #640]	; (80025dc <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800235a:	4313      	orrs	r3, r2
 800235c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002368:	2b00      	cmp	r3, #0
 800236a:	d00a      	beq.n	8002382 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800236c:	4b9b      	ldr	r3, [pc, #620]	; (80025dc <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800236e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002372:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800237a:	4998      	ldr	r1, [pc, #608]	; (80025dc <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800237c:	4313      	orrs	r3, r2
 800237e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800238a:	2b00      	cmp	r3, #0
 800238c:	d00a      	beq.n	80023a4 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800238e:	4b93      	ldr	r3, [pc, #588]	; (80025dc <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002390:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002394:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800239c:	498f      	ldr	r1, [pc, #572]	; (80025dc <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800239e:	4313      	orrs	r3, r2
 80023a0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	d00a      	beq.n	80023c6 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80023b0:	4b8a      	ldr	r3, [pc, #552]	; (80025dc <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80023b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80023b6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80023be:	4987      	ldr	r1, [pc, #540]	; (80025dc <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80023c0:	4313      	orrs	r3, r2
 80023c2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d00a      	beq.n	80023e8 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80023d2:	4b82      	ldr	r3, [pc, #520]	; (80025dc <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80023d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80023d8:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80023e0:	497e      	ldr	r1, [pc, #504]	; (80025dc <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80023e2:	4313      	orrs	r3, r2
 80023e4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d00a      	beq.n	800240a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80023f4:	4b79      	ldr	r3, [pc, #484]	; (80025dc <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80023f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80023fa:	f023 0203 	bic.w	r2, r3, #3
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002402:	4976      	ldr	r1, [pc, #472]	; (80025dc <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002404:	4313      	orrs	r3, r2
 8002406:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002412:	2b00      	cmp	r3, #0
 8002414:	d00a      	beq.n	800242c <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002416:	4b71      	ldr	r3, [pc, #452]	; (80025dc <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002418:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800241c:	f023 020c 	bic.w	r2, r3, #12
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002424:	496d      	ldr	r1, [pc, #436]	; (80025dc <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002426:	4313      	orrs	r3, r2
 8002428:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002434:	2b00      	cmp	r3, #0
 8002436:	d00a      	beq.n	800244e <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002438:	4b68      	ldr	r3, [pc, #416]	; (80025dc <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800243a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800243e:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002446:	4965      	ldr	r1, [pc, #404]	; (80025dc <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002448:	4313      	orrs	r3, r2
 800244a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002456:	2b00      	cmp	r3, #0
 8002458:	d00a      	beq.n	8002470 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800245a:	4b60      	ldr	r3, [pc, #384]	; (80025dc <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800245c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002460:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002468:	495c      	ldr	r1, [pc, #368]	; (80025dc <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800246a:	4313      	orrs	r3, r2
 800246c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002478:	2b00      	cmp	r3, #0
 800247a:	d00a      	beq.n	8002492 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800247c:	4b57      	ldr	r3, [pc, #348]	; (80025dc <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800247e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002482:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800248a:	4954      	ldr	r1, [pc, #336]	; (80025dc <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800248c:	4313      	orrs	r3, r2
 800248e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800249a:	2b00      	cmp	r3, #0
 800249c:	d00a      	beq.n	80024b4 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 800249e:	4b4f      	ldr	r3, [pc, #316]	; (80025dc <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80024a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80024a4:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80024ac:	494b      	ldr	r1, [pc, #300]	; (80025dc <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80024ae:	4313      	orrs	r3, r2
 80024b0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d00a      	beq.n	80024d6 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 80024c0:	4b46      	ldr	r3, [pc, #280]	; (80025dc <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80024c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80024c6:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80024ce:	4943      	ldr	r1, [pc, #268]	; (80025dc <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80024d0:	4313      	orrs	r3, r2
 80024d2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d00a      	beq.n	80024f8 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 80024e2:	4b3e      	ldr	r3, [pc, #248]	; (80025dc <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80024e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80024e8:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80024f0:	493a      	ldr	r1, [pc, #232]	; (80025dc <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80024f2:	4313      	orrs	r3, r2
 80024f4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002500:	2b00      	cmp	r3, #0
 8002502:	d00a      	beq.n	800251a <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8002504:	4b35      	ldr	r3, [pc, #212]	; (80025dc <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002506:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800250a:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002512:	4932      	ldr	r1, [pc, #200]	; (80025dc <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002514:	4313      	orrs	r3, r2
 8002516:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002522:	2b00      	cmp	r3, #0
 8002524:	d011      	beq.n	800254a <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8002526:	4b2d      	ldr	r3, [pc, #180]	; (80025dc <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002528:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800252c:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002534:	4929      	ldr	r1, [pc, #164]	; (80025dc <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002536:	4313      	orrs	r3, r2
 8002538:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002540:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002544:	d101      	bne.n	800254a <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8002546:	2301      	movs	r3, #1
 8002548:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	f003 0308 	and.w	r3, r3, #8
 8002552:	2b00      	cmp	r3, #0
 8002554:	d001      	beq.n	800255a <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8002556:	2301      	movs	r3, #1
 8002558:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002562:	2b00      	cmp	r3, #0
 8002564:	d00a      	beq.n	800257c <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002566:	4b1d      	ldr	r3, [pc, #116]	; (80025dc <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002568:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800256c:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002574:	4919      	ldr	r1, [pc, #100]	; (80025dc <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002576:	4313      	orrs	r3, r2
 8002578:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002584:	2b00      	cmp	r3, #0
 8002586:	d00b      	beq.n	80025a0 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002588:	4b14      	ldr	r3, [pc, #80]	; (80025dc <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800258a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800258e:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002598:	4910      	ldr	r1, [pc, #64]	; (80025dc <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800259a:	4313      	orrs	r3, r2
 800259c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80025a0:	69fb      	ldr	r3, [r7, #28]
 80025a2:	2b01      	cmp	r3, #1
 80025a4:	d006      	beq.n	80025b4 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	f000 80d9 	beq.w	8002766 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80025b4:	4b09      	ldr	r3, [pc, #36]	; (80025dc <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	4a08      	ldr	r2, [pc, #32]	; (80025dc <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80025ba:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80025be:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80025c0:	f7fe fc70 	bl	8000ea4 <HAL_GetTick>
 80025c4:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80025c6:	e00b      	b.n	80025e0 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80025c8:	f7fe fc6c 	bl	8000ea4 <HAL_GetTick>
 80025cc:	4602      	mov	r2, r0
 80025ce:	697b      	ldr	r3, [r7, #20]
 80025d0:	1ad3      	subs	r3, r2, r3
 80025d2:	2b64      	cmp	r3, #100	; 0x64
 80025d4:	d904      	bls.n	80025e0 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80025d6:	2303      	movs	r3, #3
 80025d8:	e197      	b.n	800290a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 80025da:	bf00      	nop
 80025dc:	40023800 	.word	0x40023800
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80025e0:	4b6c      	ldr	r3, [pc, #432]	; (8002794 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	d1ed      	bne.n	80025c8 <HAL_RCCEx_PeriphCLKConfig+0x490>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	f003 0301 	and.w	r3, r3, #1
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	d021      	beq.n	800263c <HAL_RCCEx_PeriphCLKConfig+0x504>
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d11d      	bne.n	800263c <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8002600:	4b64      	ldr	r3, [pc, #400]	; (8002794 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002602:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002606:	0c1b      	lsrs	r3, r3, #16
 8002608:	f003 0303 	and.w	r3, r3, #3
 800260c:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800260e:	4b61      	ldr	r3, [pc, #388]	; (8002794 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002610:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002614:	0e1b      	lsrs	r3, r3, #24
 8002616:	f003 030f 	and.w	r3, r3, #15
 800261a:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	685b      	ldr	r3, [r3, #4]
 8002620:	019a      	lsls	r2, r3, #6
 8002622:	693b      	ldr	r3, [r7, #16]
 8002624:	041b      	lsls	r3, r3, #16
 8002626:	431a      	orrs	r2, r3
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	061b      	lsls	r3, r3, #24
 800262c:	431a      	orrs	r2, r3
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	689b      	ldr	r3, [r3, #8]
 8002632:	071b      	lsls	r3, r3, #28
 8002634:	4957      	ldr	r1, [pc, #348]	; (8002794 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002636:	4313      	orrs	r3, r2
 8002638:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002644:	2b00      	cmp	r3, #0
 8002646:	d004      	beq.n	8002652 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800264c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002650:	d00a      	beq.n	8002668 <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800265a:	2b00      	cmp	r3, #0
 800265c:	d02e      	beq.n	80026bc <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002662:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002666:	d129      	bne.n	80026bc <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8002668:	4b4a      	ldr	r3, [pc, #296]	; (8002794 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800266a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800266e:	0c1b      	lsrs	r3, r3, #16
 8002670:	f003 0303 	and.w	r3, r3, #3
 8002674:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002676:	4b47      	ldr	r3, [pc, #284]	; (8002794 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002678:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800267c:	0f1b      	lsrs	r3, r3, #28
 800267e:	f003 0307 	and.w	r3, r3, #7
 8002682:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	685b      	ldr	r3, [r3, #4]
 8002688:	019a      	lsls	r2, r3, #6
 800268a:	693b      	ldr	r3, [r7, #16]
 800268c:	041b      	lsls	r3, r3, #16
 800268e:	431a      	orrs	r2, r3
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	68db      	ldr	r3, [r3, #12]
 8002694:	061b      	lsls	r3, r3, #24
 8002696:	431a      	orrs	r2, r3
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	071b      	lsls	r3, r3, #28
 800269c:	493d      	ldr	r1, [pc, #244]	; (8002794 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800269e:	4313      	orrs	r3, r2
 80026a0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80026a4:	4b3b      	ldr	r3, [pc, #236]	; (8002794 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80026a6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80026aa:	f023 021f 	bic.w	r2, r3, #31
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026b2:	3b01      	subs	r3, #1
 80026b4:	4937      	ldr	r1, [pc, #220]	; (8002794 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80026b6:	4313      	orrs	r3, r2
 80026b8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d01d      	beq.n	8002704 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80026c8:	4b32      	ldr	r3, [pc, #200]	; (8002794 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80026ca:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80026ce:	0e1b      	lsrs	r3, r3, #24
 80026d0:	f003 030f 	and.w	r3, r3, #15
 80026d4:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80026d6:	4b2f      	ldr	r3, [pc, #188]	; (8002794 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80026d8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80026dc:	0f1b      	lsrs	r3, r3, #28
 80026de:	f003 0307 	and.w	r3, r3, #7
 80026e2:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	685b      	ldr	r3, [r3, #4]
 80026e8:	019a      	lsls	r2, r3, #6
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	691b      	ldr	r3, [r3, #16]
 80026ee:	041b      	lsls	r3, r3, #16
 80026f0:	431a      	orrs	r2, r3
 80026f2:	693b      	ldr	r3, [r7, #16]
 80026f4:	061b      	lsls	r3, r3, #24
 80026f6:	431a      	orrs	r2, r3
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	071b      	lsls	r3, r3, #28
 80026fc:	4925      	ldr	r1, [pc, #148]	; (8002794 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80026fe:	4313      	orrs	r3, r2
 8002700:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800270c:	2b00      	cmp	r3, #0
 800270e:	d011      	beq.n	8002734 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	685b      	ldr	r3, [r3, #4]
 8002714:	019a      	lsls	r2, r3, #6
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	691b      	ldr	r3, [r3, #16]
 800271a:	041b      	lsls	r3, r3, #16
 800271c:	431a      	orrs	r2, r3
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	68db      	ldr	r3, [r3, #12]
 8002722:	061b      	lsls	r3, r3, #24
 8002724:	431a      	orrs	r2, r3
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	689b      	ldr	r3, [r3, #8]
 800272a:	071b      	lsls	r3, r3, #28
 800272c:	4919      	ldr	r1, [pc, #100]	; (8002794 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800272e:	4313      	orrs	r3, r2
 8002730:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8002734:	4b17      	ldr	r3, [pc, #92]	; (8002794 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	4a16      	ldr	r2, [pc, #88]	; (8002794 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800273a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800273e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002740:	f7fe fbb0 	bl	8000ea4 <HAL_GetTick>
 8002744:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002746:	e008      	b.n	800275a <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002748:	f7fe fbac 	bl	8000ea4 <HAL_GetTick>
 800274c:	4602      	mov	r2, r0
 800274e:	697b      	ldr	r3, [r7, #20]
 8002750:	1ad3      	subs	r3, r2, r3
 8002752:	2b64      	cmp	r3, #100	; 0x64
 8002754:	d901      	bls.n	800275a <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002756:	2303      	movs	r3, #3
 8002758:	e0d7      	b.n	800290a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800275a:	4b0e      	ldr	r3, [pc, #56]	; (8002794 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002762:	2b00      	cmp	r3, #0
 8002764:	d0f0      	beq.n	8002748 <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8002766:	69bb      	ldr	r3, [r7, #24]
 8002768:	2b01      	cmp	r3, #1
 800276a:	f040 80cd 	bne.w	8002908 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800276e:	4b09      	ldr	r3, [pc, #36]	; (8002794 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	4a08      	ldr	r2, [pc, #32]	; (8002794 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002774:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002778:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800277a:	f7fe fb93 	bl	8000ea4 <HAL_GetTick>
 800277e:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002780:	e00a      	b.n	8002798 <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8002782:	f7fe fb8f 	bl	8000ea4 <HAL_GetTick>
 8002786:	4602      	mov	r2, r0
 8002788:	697b      	ldr	r3, [r7, #20]
 800278a:	1ad3      	subs	r3, r2, r3
 800278c:	2b64      	cmp	r3, #100	; 0x64
 800278e:	d903      	bls.n	8002798 <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002790:	2303      	movs	r3, #3
 8002792:	e0ba      	b.n	800290a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 8002794:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002798:	4b5e      	ldr	r3, [pc, #376]	; (8002914 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80027a0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80027a4:	d0ed      	beq.n	8002782 <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d003      	beq.n	80027ba <HAL_RCCEx_PeriphCLKConfig+0x682>
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d009      	beq.n	80027ce <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d02e      	beq.n	8002824 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d12a      	bne.n	8002824 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80027ce:	4b51      	ldr	r3, [pc, #324]	; (8002914 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80027d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80027d4:	0c1b      	lsrs	r3, r3, #16
 80027d6:	f003 0303 	and.w	r3, r3, #3
 80027da:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80027dc:	4b4d      	ldr	r3, [pc, #308]	; (8002914 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80027de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80027e2:	0f1b      	lsrs	r3, r3, #28
 80027e4:	f003 0307 	and.w	r3, r3, #7
 80027e8:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	695b      	ldr	r3, [r3, #20]
 80027ee:	019a      	lsls	r2, r3, #6
 80027f0:	693b      	ldr	r3, [r7, #16]
 80027f2:	041b      	lsls	r3, r3, #16
 80027f4:	431a      	orrs	r2, r3
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	699b      	ldr	r3, [r3, #24]
 80027fa:	061b      	lsls	r3, r3, #24
 80027fc:	431a      	orrs	r2, r3
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	071b      	lsls	r3, r3, #28
 8002802:	4944      	ldr	r1, [pc, #272]	; (8002914 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002804:	4313      	orrs	r3, r2
 8002806:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800280a:	4b42      	ldr	r3, [pc, #264]	; (8002914 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800280c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002810:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002818:	3b01      	subs	r3, #1
 800281a:	021b      	lsls	r3, r3, #8
 800281c:	493d      	ldr	r1, [pc, #244]	; (8002914 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800281e:	4313      	orrs	r3, r2
 8002820:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800282c:	2b00      	cmp	r3, #0
 800282e:	d022      	beq.n	8002876 <HAL_RCCEx_PeriphCLKConfig+0x73e>
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002834:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002838:	d11d      	bne.n	8002876 <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800283a:	4b36      	ldr	r3, [pc, #216]	; (8002914 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800283c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002840:	0e1b      	lsrs	r3, r3, #24
 8002842:	f003 030f 	and.w	r3, r3, #15
 8002846:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8002848:	4b32      	ldr	r3, [pc, #200]	; (8002914 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800284a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800284e:	0f1b      	lsrs	r3, r3, #28
 8002850:	f003 0307 	and.w	r3, r3, #7
 8002854:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	695b      	ldr	r3, [r3, #20]
 800285a:	019a      	lsls	r2, r3, #6
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	6a1b      	ldr	r3, [r3, #32]
 8002860:	041b      	lsls	r3, r3, #16
 8002862:	431a      	orrs	r2, r3
 8002864:	693b      	ldr	r3, [r7, #16]
 8002866:	061b      	lsls	r3, r3, #24
 8002868:	431a      	orrs	r2, r3
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	071b      	lsls	r3, r3, #28
 800286e:	4929      	ldr	r1, [pc, #164]	; (8002914 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002870:	4313      	orrs	r3, r2
 8002872:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	f003 0308 	and.w	r3, r3, #8
 800287e:	2b00      	cmp	r3, #0
 8002880:	d028      	beq.n	80028d4 <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8002882:	4b24      	ldr	r3, [pc, #144]	; (8002914 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002884:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002888:	0e1b      	lsrs	r3, r3, #24
 800288a:	f003 030f 	and.w	r3, r3, #15
 800288e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8002890:	4b20      	ldr	r3, [pc, #128]	; (8002914 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002892:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002896:	0c1b      	lsrs	r3, r3, #16
 8002898:	f003 0303 	and.w	r3, r3, #3
 800289c:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	695b      	ldr	r3, [r3, #20]
 80028a2:	019a      	lsls	r2, r3, #6
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	041b      	lsls	r3, r3, #16
 80028a8:	431a      	orrs	r2, r3
 80028aa:	693b      	ldr	r3, [r7, #16]
 80028ac:	061b      	lsls	r3, r3, #24
 80028ae:	431a      	orrs	r2, r3
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	69db      	ldr	r3, [r3, #28]
 80028b4:	071b      	lsls	r3, r3, #28
 80028b6:	4917      	ldr	r1, [pc, #92]	; (8002914 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80028b8:	4313      	orrs	r3, r2
 80028ba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 80028be:	4b15      	ldr	r3, [pc, #84]	; (8002914 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80028c0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80028c4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028cc:	4911      	ldr	r1, [pc, #68]	; (8002914 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80028ce:	4313      	orrs	r3, r2
 80028d0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80028d4:	4b0f      	ldr	r3, [pc, #60]	; (8002914 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	4a0e      	ldr	r2, [pc, #56]	; (8002914 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80028da:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80028de:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80028e0:	f7fe fae0 	bl	8000ea4 <HAL_GetTick>
 80028e4:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80028e6:	e008      	b.n	80028fa <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80028e8:	f7fe fadc 	bl	8000ea4 <HAL_GetTick>
 80028ec:	4602      	mov	r2, r0
 80028ee:	697b      	ldr	r3, [r7, #20]
 80028f0:	1ad3      	subs	r3, r2, r3
 80028f2:	2b64      	cmp	r3, #100	; 0x64
 80028f4:	d901      	bls.n	80028fa <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80028f6:	2303      	movs	r3, #3
 80028f8:	e007      	b.n	800290a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80028fa:	4b06      	ldr	r3, [pc, #24]	; (8002914 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002902:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002906:	d1ef      	bne.n	80028e8 <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 8002908:	2300      	movs	r3, #0
}
 800290a:	4618      	mov	r0, r3
 800290c:	3720      	adds	r7, #32
 800290e:	46bd      	mov	sp, r7
 8002910:	bd80      	pop	{r7, pc}
 8002912:	bf00      	nop
 8002914:	40023800 	.word	0x40023800

08002918 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002918:	b580      	push	{r7, lr}
 800291a:	b082      	sub	sp, #8
 800291c:	af00      	add	r7, sp, #0
 800291e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	2b00      	cmp	r3, #0
 8002924:	d101      	bne.n	800292a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002926:	2301      	movs	r3, #1
 8002928:	e049      	b.n	80029be <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002930:	b2db      	uxtb	r3, r3
 8002932:	2b00      	cmp	r3, #0
 8002934:	d106      	bne.n	8002944 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	2200      	movs	r2, #0
 800293a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800293e:	6878      	ldr	r0, [r7, #4]
 8002940:	f000 f841 	bl	80029c6 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	2202      	movs	r2, #2
 8002948:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	681a      	ldr	r2, [r3, #0]
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	3304      	adds	r3, #4
 8002954:	4619      	mov	r1, r3
 8002956:	4610      	mov	r0, r2
 8002958:	f000 fa00 	bl	8002d5c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	2201      	movs	r2, #1
 8002960:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	2201      	movs	r2, #1
 8002968:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	2201      	movs	r2, #1
 8002970:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	2201      	movs	r2, #1
 8002978:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	2201      	movs	r2, #1
 8002980:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	2201      	movs	r2, #1
 8002988:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	2201      	movs	r2, #1
 8002990:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	2201      	movs	r2, #1
 8002998:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	2201      	movs	r2, #1
 80029a0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	2201      	movs	r2, #1
 80029a8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	2201      	movs	r2, #1
 80029b0:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	2201      	movs	r2, #1
 80029b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80029bc:	2300      	movs	r3, #0
}
 80029be:	4618      	mov	r0, r3
 80029c0:	3708      	adds	r7, #8
 80029c2:	46bd      	mov	sp, r7
 80029c4:	bd80      	pop	{r7, pc}

080029c6 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80029c6:	b480      	push	{r7}
 80029c8:	b083      	sub	sp, #12
 80029ca:	af00      	add	r7, sp, #0
 80029cc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80029ce:	bf00      	nop
 80029d0:	370c      	adds	r7, #12
 80029d2:	46bd      	mov	sp, r7
 80029d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029d8:	4770      	bx	lr
	...

080029dc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80029dc:	b480      	push	{r7}
 80029de:	b085      	sub	sp, #20
 80029e0:	af00      	add	r7, sp, #0
 80029e2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80029ea:	b2db      	uxtb	r3, r3
 80029ec:	2b01      	cmp	r3, #1
 80029ee:	d001      	beq.n	80029f4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80029f0:	2301      	movs	r3, #1
 80029f2:	e054      	b.n	8002a9e <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	2202      	movs	r2, #2
 80029f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	68da      	ldr	r2, [r3, #12]
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	f042 0201 	orr.w	r2, r2, #1
 8002a0a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	4a26      	ldr	r2, [pc, #152]	; (8002aac <HAL_TIM_Base_Start_IT+0xd0>)
 8002a12:	4293      	cmp	r3, r2
 8002a14:	d022      	beq.n	8002a5c <HAL_TIM_Base_Start_IT+0x80>
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002a1e:	d01d      	beq.n	8002a5c <HAL_TIM_Base_Start_IT+0x80>
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	4a22      	ldr	r2, [pc, #136]	; (8002ab0 <HAL_TIM_Base_Start_IT+0xd4>)
 8002a26:	4293      	cmp	r3, r2
 8002a28:	d018      	beq.n	8002a5c <HAL_TIM_Base_Start_IT+0x80>
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	4a21      	ldr	r2, [pc, #132]	; (8002ab4 <HAL_TIM_Base_Start_IT+0xd8>)
 8002a30:	4293      	cmp	r3, r2
 8002a32:	d013      	beq.n	8002a5c <HAL_TIM_Base_Start_IT+0x80>
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	4a1f      	ldr	r2, [pc, #124]	; (8002ab8 <HAL_TIM_Base_Start_IT+0xdc>)
 8002a3a:	4293      	cmp	r3, r2
 8002a3c:	d00e      	beq.n	8002a5c <HAL_TIM_Base_Start_IT+0x80>
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	4a1e      	ldr	r2, [pc, #120]	; (8002abc <HAL_TIM_Base_Start_IT+0xe0>)
 8002a44:	4293      	cmp	r3, r2
 8002a46:	d009      	beq.n	8002a5c <HAL_TIM_Base_Start_IT+0x80>
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	4a1c      	ldr	r2, [pc, #112]	; (8002ac0 <HAL_TIM_Base_Start_IT+0xe4>)
 8002a4e:	4293      	cmp	r3, r2
 8002a50:	d004      	beq.n	8002a5c <HAL_TIM_Base_Start_IT+0x80>
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	4a1b      	ldr	r2, [pc, #108]	; (8002ac4 <HAL_TIM_Base_Start_IT+0xe8>)
 8002a58:	4293      	cmp	r3, r2
 8002a5a:	d115      	bne.n	8002a88 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	689a      	ldr	r2, [r3, #8]
 8002a62:	4b19      	ldr	r3, [pc, #100]	; (8002ac8 <HAL_TIM_Base_Start_IT+0xec>)
 8002a64:	4013      	ands	r3, r2
 8002a66:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	2b06      	cmp	r3, #6
 8002a6c:	d015      	beq.n	8002a9a <HAL_TIM_Base_Start_IT+0xbe>
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002a74:	d011      	beq.n	8002a9a <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	681a      	ldr	r2, [r3, #0]
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	f042 0201 	orr.w	r2, r2, #1
 8002a84:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002a86:	e008      	b.n	8002a9a <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	681a      	ldr	r2, [r3, #0]
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	f042 0201 	orr.w	r2, r2, #1
 8002a96:	601a      	str	r2, [r3, #0]
 8002a98:	e000      	b.n	8002a9c <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002a9a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8002a9c:	2300      	movs	r3, #0
}
 8002a9e:	4618      	mov	r0, r3
 8002aa0:	3714      	adds	r7, #20
 8002aa2:	46bd      	mov	sp, r7
 8002aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aa8:	4770      	bx	lr
 8002aaa:	bf00      	nop
 8002aac:	40010000 	.word	0x40010000
 8002ab0:	40000400 	.word	0x40000400
 8002ab4:	40000800 	.word	0x40000800
 8002ab8:	40000c00 	.word	0x40000c00
 8002abc:	40010400 	.word	0x40010400
 8002ac0:	40014000 	.word	0x40014000
 8002ac4:	40001800 	.word	0x40001800
 8002ac8:	00010007 	.word	0x00010007

08002acc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002acc:	b580      	push	{r7, lr}
 8002ace:	b082      	sub	sp, #8
 8002ad0:	af00      	add	r7, sp, #0
 8002ad2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	691b      	ldr	r3, [r3, #16]
 8002ada:	f003 0302 	and.w	r3, r3, #2
 8002ade:	2b02      	cmp	r3, #2
 8002ae0:	d122      	bne.n	8002b28 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	68db      	ldr	r3, [r3, #12]
 8002ae8:	f003 0302 	and.w	r3, r3, #2
 8002aec:	2b02      	cmp	r3, #2
 8002aee:	d11b      	bne.n	8002b28 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	f06f 0202 	mvn.w	r2, #2
 8002af8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	2201      	movs	r2, #1
 8002afe:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	699b      	ldr	r3, [r3, #24]
 8002b06:	f003 0303 	and.w	r3, r3, #3
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d003      	beq.n	8002b16 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002b0e:	6878      	ldr	r0, [r7, #4]
 8002b10:	f000 f905 	bl	8002d1e <HAL_TIM_IC_CaptureCallback>
 8002b14:	e005      	b.n	8002b22 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002b16:	6878      	ldr	r0, [r7, #4]
 8002b18:	f000 f8f7 	bl	8002d0a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002b1c:	6878      	ldr	r0, [r7, #4]
 8002b1e:	f000 f908 	bl	8002d32 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	2200      	movs	r2, #0
 8002b26:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	691b      	ldr	r3, [r3, #16]
 8002b2e:	f003 0304 	and.w	r3, r3, #4
 8002b32:	2b04      	cmp	r3, #4
 8002b34:	d122      	bne.n	8002b7c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	68db      	ldr	r3, [r3, #12]
 8002b3c:	f003 0304 	and.w	r3, r3, #4
 8002b40:	2b04      	cmp	r3, #4
 8002b42:	d11b      	bne.n	8002b7c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	f06f 0204 	mvn.w	r2, #4
 8002b4c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	2202      	movs	r2, #2
 8002b52:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	699b      	ldr	r3, [r3, #24]
 8002b5a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d003      	beq.n	8002b6a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002b62:	6878      	ldr	r0, [r7, #4]
 8002b64:	f000 f8db 	bl	8002d1e <HAL_TIM_IC_CaptureCallback>
 8002b68:	e005      	b.n	8002b76 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002b6a:	6878      	ldr	r0, [r7, #4]
 8002b6c:	f000 f8cd 	bl	8002d0a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002b70:	6878      	ldr	r0, [r7, #4]
 8002b72:	f000 f8de 	bl	8002d32 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	2200      	movs	r2, #0
 8002b7a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	691b      	ldr	r3, [r3, #16]
 8002b82:	f003 0308 	and.w	r3, r3, #8
 8002b86:	2b08      	cmp	r3, #8
 8002b88:	d122      	bne.n	8002bd0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	68db      	ldr	r3, [r3, #12]
 8002b90:	f003 0308 	and.w	r3, r3, #8
 8002b94:	2b08      	cmp	r3, #8
 8002b96:	d11b      	bne.n	8002bd0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	f06f 0208 	mvn.w	r2, #8
 8002ba0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	2204      	movs	r2, #4
 8002ba6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	69db      	ldr	r3, [r3, #28]
 8002bae:	f003 0303 	and.w	r3, r3, #3
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d003      	beq.n	8002bbe <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002bb6:	6878      	ldr	r0, [r7, #4]
 8002bb8:	f000 f8b1 	bl	8002d1e <HAL_TIM_IC_CaptureCallback>
 8002bbc:	e005      	b.n	8002bca <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002bbe:	6878      	ldr	r0, [r7, #4]
 8002bc0:	f000 f8a3 	bl	8002d0a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002bc4:	6878      	ldr	r0, [r7, #4]
 8002bc6:	f000 f8b4 	bl	8002d32 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	2200      	movs	r2, #0
 8002bce:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	691b      	ldr	r3, [r3, #16]
 8002bd6:	f003 0310 	and.w	r3, r3, #16
 8002bda:	2b10      	cmp	r3, #16
 8002bdc:	d122      	bne.n	8002c24 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	68db      	ldr	r3, [r3, #12]
 8002be4:	f003 0310 	and.w	r3, r3, #16
 8002be8:	2b10      	cmp	r3, #16
 8002bea:	d11b      	bne.n	8002c24 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	f06f 0210 	mvn.w	r2, #16
 8002bf4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	2208      	movs	r2, #8
 8002bfa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	69db      	ldr	r3, [r3, #28]
 8002c02:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d003      	beq.n	8002c12 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002c0a:	6878      	ldr	r0, [r7, #4]
 8002c0c:	f000 f887 	bl	8002d1e <HAL_TIM_IC_CaptureCallback>
 8002c10:	e005      	b.n	8002c1e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002c12:	6878      	ldr	r0, [r7, #4]
 8002c14:	f000 f879 	bl	8002d0a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002c18:	6878      	ldr	r0, [r7, #4]
 8002c1a:	f000 f88a 	bl	8002d32 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	2200      	movs	r2, #0
 8002c22:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	691b      	ldr	r3, [r3, #16]
 8002c2a:	f003 0301 	and.w	r3, r3, #1
 8002c2e:	2b01      	cmp	r3, #1
 8002c30:	d10e      	bne.n	8002c50 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	68db      	ldr	r3, [r3, #12]
 8002c38:	f003 0301 	and.w	r3, r3, #1
 8002c3c:	2b01      	cmp	r3, #1
 8002c3e:	d107      	bne.n	8002c50 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	f06f 0201 	mvn.w	r2, #1
 8002c48:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002c4a:	6878      	ldr	r0, [r7, #4]
 8002c4c:	f7fd fef0 	bl	8000a30 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	691b      	ldr	r3, [r3, #16]
 8002c56:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c5a:	2b80      	cmp	r3, #128	; 0x80
 8002c5c:	d10e      	bne.n	8002c7c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	68db      	ldr	r3, [r3, #12]
 8002c64:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c68:	2b80      	cmp	r3, #128	; 0x80
 8002c6a:	d107      	bne.n	8002c7c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002c74:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002c76:	6878      	ldr	r0, [r7, #4]
 8002c78:	f000 f91a 	bl	8002eb0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	691b      	ldr	r3, [r3, #16]
 8002c82:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c86:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002c8a:	d10e      	bne.n	8002caa <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	68db      	ldr	r3, [r3, #12]
 8002c92:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c96:	2b80      	cmp	r3, #128	; 0x80
 8002c98:	d107      	bne.n	8002caa <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8002ca2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8002ca4:	6878      	ldr	r0, [r7, #4]
 8002ca6:	f000 f90d 	bl	8002ec4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	691b      	ldr	r3, [r3, #16]
 8002cb0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002cb4:	2b40      	cmp	r3, #64	; 0x40
 8002cb6:	d10e      	bne.n	8002cd6 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	68db      	ldr	r3, [r3, #12]
 8002cbe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002cc2:	2b40      	cmp	r3, #64	; 0x40
 8002cc4:	d107      	bne.n	8002cd6 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002cce:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002cd0:	6878      	ldr	r0, [r7, #4]
 8002cd2:	f000 f838 	bl	8002d46 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	691b      	ldr	r3, [r3, #16]
 8002cdc:	f003 0320 	and.w	r3, r3, #32
 8002ce0:	2b20      	cmp	r3, #32
 8002ce2:	d10e      	bne.n	8002d02 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	68db      	ldr	r3, [r3, #12]
 8002cea:	f003 0320 	and.w	r3, r3, #32
 8002cee:	2b20      	cmp	r3, #32
 8002cf0:	d107      	bne.n	8002d02 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	f06f 0220 	mvn.w	r2, #32
 8002cfa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002cfc:	6878      	ldr	r0, [r7, #4]
 8002cfe:	f000 f8cd 	bl	8002e9c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002d02:	bf00      	nop
 8002d04:	3708      	adds	r7, #8
 8002d06:	46bd      	mov	sp, r7
 8002d08:	bd80      	pop	{r7, pc}

08002d0a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002d0a:	b480      	push	{r7}
 8002d0c:	b083      	sub	sp, #12
 8002d0e:	af00      	add	r7, sp, #0
 8002d10:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002d12:	bf00      	nop
 8002d14:	370c      	adds	r7, #12
 8002d16:	46bd      	mov	sp, r7
 8002d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d1c:	4770      	bx	lr

08002d1e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002d1e:	b480      	push	{r7}
 8002d20:	b083      	sub	sp, #12
 8002d22:	af00      	add	r7, sp, #0
 8002d24:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002d26:	bf00      	nop
 8002d28:	370c      	adds	r7, #12
 8002d2a:	46bd      	mov	sp, r7
 8002d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d30:	4770      	bx	lr

08002d32 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002d32:	b480      	push	{r7}
 8002d34:	b083      	sub	sp, #12
 8002d36:	af00      	add	r7, sp, #0
 8002d38:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002d3a:	bf00      	nop
 8002d3c:	370c      	adds	r7, #12
 8002d3e:	46bd      	mov	sp, r7
 8002d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d44:	4770      	bx	lr

08002d46 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002d46:	b480      	push	{r7}
 8002d48:	b083      	sub	sp, #12
 8002d4a:	af00      	add	r7, sp, #0
 8002d4c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002d4e:	bf00      	nop
 8002d50:	370c      	adds	r7, #12
 8002d52:	46bd      	mov	sp, r7
 8002d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d58:	4770      	bx	lr
	...

08002d5c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002d5c:	b480      	push	{r7}
 8002d5e:	b085      	sub	sp, #20
 8002d60:	af00      	add	r7, sp, #0
 8002d62:	6078      	str	r0, [r7, #4]
 8002d64:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	4a40      	ldr	r2, [pc, #256]	; (8002e70 <TIM_Base_SetConfig+0x114>)
 8002d70:	4293      	cmp	r3, r2
 8002d72:	d013      	beq.n	8002d9c <TIM_Base_SetConfig+0x40>
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002d7a:	d00f      	beq.n	8002d9c <TIM_Base_SetConfig+0x40>
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	4a3d      	ldr	r2, [pc, #244]	; (8002e74 <TIM_Base_SetConfig+0x118>)
 8002d80:	4293      	cmp	r3, r2
 8002d82:	d00b      	beq.n	8002d9c <TIM_Base_SetConfig+0x40>
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	4a3c      	ldr	r2, [pc, #240]	; (8002e78 <TIM_Base_SetConfig+0x11c>)
 8002d88:	4293      	cmp	r3, r2
 8002d8a:	d007      	beq.n	8002d9c <TIM_Base_SetConfig+0x40>
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	4a3b      	ldr	r2, [pc, #236]	; (8002e7c <TIM_Base_SetConfig+0x120>)
 8002d90:	4293      	cmp	r3, r2
 8002d92:	d003      	beq.n	8002d9c <TIM_Base_SetConfig+0x40>
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	4a3a      	ldr	r2, [pc, #232]	; (8002e80 <TIM_Base_SetConfig+0x124>)
 8002d98:	4293      	cmp	r3, r2
 8002d9a:	d108      	bne.n	8002dae <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002da2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002da4:	683b      	ldr	r3, [r7, #0]
 8002da6:	685b      	ldr	r3, [r3, #4]
 8002da8:	68fa      	ldr	r2, [r7, #12]
 8002daa:	4313      	orrs	r3, r2
 8002dac:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	4a2f      	ldr	r2, [pc, #188]	; (8002e70 <TIM_Base_SetConfig+0x114>)
 8002db2:	4293      	cmp	r3, r2
 8002db4:	d02b      	beq.n	8002e0e <TIM_Base_SetConfig+0xb2>
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002dbc:	d027      	beq.n	8002e0e <TIM_Base_SetConfig+0xb2>
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	4a2c      	ldr	r2, [pc, #176]	; (8002e74 <TIM_Base_SetConfig+0x118>)
 8002dc2:	4293      	cmp	r3, r2
 8002dc4:	d023      	beq.n	8002e0e <TIM_Base_SetConfig+0xb2>
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	4a2b      	ldr	r2, [pc, #172]	; (8002e78 <TIM_Base_SetConfig+0x11c>)
 8002dca:	4293      	cmp	r3, r2
 8002dcc:	d01f      	beq.n	8002e0e <TIM_Base_SetConfig+0xb2>
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	4a2a      	ldr	r2, [pc, #168]	; (8002e7c <TIM_Base_SetConfig+0x120>)
 8002dd2:	4293      	cmp	r3, r2
 8002dd4:	d01b      	beq.n	8002e0e <TIM_Base_SetConfig+0xb2>
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	4a29      	ldr	r2, [pc, #164]	; (8002e80 <TIM_Base_SetConfig+0x124>)
 8002dda:	4293      	cmp	r3, r2
 8002ddc:	d017      	beq.n	8002e0e <TIM_Base_SetConfig+0xb2>
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	4a28      	ldr	r2, [pc, #160]	; (8002e84 <TIM_Base_SetConfig+0x128>)
 8002de2:	4293      	cmp	r3, r2
 8002de4:	d013      	beq.n	8002e0e <TIM_Base_SetConfig+0xb2>
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	4a27      	ldr	r2, [pc, #156]	; (8002e88 <TIM_Base_SetConfig+0x12c>)
 8002dea:	4293      	cmp	r3, r2
 8002dec:	d00f      	beq.n	8002e0e <TIM_Base_SetConfig+0xb2>
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	4a26      	ldr	r2, [pc, #152]	; (8002e8c <TIM_Base_SetConfig+0x130>)
 8002df2:	4293      	cmp	r3, r2
 8002df4:	d00b      	beq.n	8002e0e <TIM_Base_SetConfig+0xb2>
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	4a25      	ldr	r2, [pc, #148]	; (8002e90 <TIM_Base_SetConfig+0x134>)
 8002dfa:	4293      	cmp	r3, r2
 8002dfc:	d007      	beq.n	8002e0e <TIM_Base_SetConfig+0xb2>
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	4a24      	ldr	r2, [pc, #144]	; (8002e94 <TIM_Base_SetConfig+0x138>)
 8002e02:	4293      	cmp	r3, r2
 8002e04:	d003      	beq.n	8002e0e <TIM_Base_SetConfig+0xb2>
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	4a23      	ldr	r2, [pc, #140]	; (8002e98 <TIM_Base_SetConfig+0x13c>)
 8002e0a:	4293      	cmp	r3, r2
 8002e0c:	d108      	bne.n	8002e20 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002e14:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002e16:	683b      	ldr	r3, [r7, #0]
 8002e18:	68db      	ldr	r3, [r3, #12]
 8002e1a:	68fa      	ldr	r2, [r7, #12]
 8002e1c:	4313      	orrs	r3, r2
 8002e1e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002e26:	683b      	ldr	r3, [r7, #0]
 8002e28:	695b      	ldr	r3, [r3, #20]
 8002e2a:	4313      	orrs	r3, r2
 8002e2c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	68fa      	ldr	r2, [r7, #12]
 8002e32:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002e34:	683b      	ldr	r3, [r7, #0]
 8002e36:	689a      	ldr	r2, [r3, #8]
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002e3c:	683b      	ldr	r3, [r7, #0]
 8002e3e:	681a      	ldr	r2, [r3, #0]
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	4a0a      	ldr	r2, [pc, #40]	; (8002e70 <TIM_Base_SetConfig+0x114>)
 8002e48:	4293      	cmp	r3, r2
 8002e4a:	d003      	beq.n	8002e54 <TIM_Base_SetConfig+0xf8>
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	4a0c      	ldr	r2, [pc, #48]	; (8002e80 <TIM_Base_SetConfig+0x124>)
 8002e50:	4293      	cmp	r3, r2
 8002e52:	d103      	bne.n	8002e5c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002e54:	683b      	ldr	r3, [r7, #0]
 8002e56:	691a      	ldr	r2, [r3, #16]
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	2201      	movs	r2, #1
 8002e60:	615a      	str	r2, [r3, #20]
}
 8002e62:	bf00      	nop
 8002e64:	3714      	adds	r7, #20
 8002e66:	46bd      	mov	sp, r7
 8002e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e6c:	4770      	bx	lr
 8002e6e:	bf00      	nop
 8002e70:	40010000 	.word	0x40010000
 8002e74:	40000400 	.word	0x40000400
 8002e78:	40000800 	.word	0x40000800
 8002e7c:	40000c00 	.word	0x40000c00
 8002e80:	40010400 	.word	0x40010400
 8002e84:	40014000 	.word	0x40014000
 8002e88:	40014400 	.word	0x40014400
 8002e8c:	40014800 	.word	0x40014800
 8002e90:	40001800 	.word	0x40001800
 8002e94:	40001c00 	.word	0x40001c00
 8002e98:	40002000 	.word	0x40002000

08002e9c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002e9c:	b480      	push	{r7}
 8002e9e:	b083      	sub	sp, #12
 8002ea0:	af00      	add	r7, sp, #0
 8002ea2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002ea4:	bf00      	nop
 8002ea6:	370c      	adds	r7, #12
 8002ea8:	46bd      	mov	sp, r7
 8002eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eae:	4770      	bx	lr

08002eb0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002eb0:	b480      	push	{r7}
 8002eb2:	b083      	sub	sp, #12
 8002eb4:	af00      	add	r7, sp, #0
 8002eb6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002eb8:	bf00      	nop
 8002eba:	370c      	adds	r7, #12
 8002ebc:	46bd      	mov	sp, r7
 8002ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ec2:	4770      	bx	lr

08002ec4 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8002ec4:	b480      	push	{r7}
 8002ec6:	b083      	sub	sp, #12
 8002ec8:	af00      	add	r7, sp, #0
 8002eca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8002ecc:	bf00      	nop
 8002ece:	370c      	adds	r7, #12
 8002ed0:	46bd      	mov	sp, r7
 8002ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ed6:	4770      	bx	lr

08002ed8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002ed8:	b580      	push	{r7, lr}
 8002eda:	b082      	sub	sp, #8
 8002edc:	af00      	add	r7, sp, #0
 8002ede:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d101      	bne.n	8002eea <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002ee6:	2301      	movs	r3, #1
 8002ee8:	e040      	b.n	8002f6c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d106      	bne.n	8002f00 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	2200      	movs	r2, #0
 8002ef6:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002efa:	6878      	ldr	r0, [r7, #4]
 8002efc:	f7fd fdd6 	bl	8000aac <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	2224      	movs	r2, #36	; 0x24
 8002f04:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	681a      	ldr	r2, [r3, #0]
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	f022 0201 	bic.w	r2, r2, #1
 8002f14:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002f16:	6878      	ldr	r0, [r7, #4]
 8002f18:	f000 f82c 	bl	8002f74 <UART_SetConfig>
 8002f1c:	4603      	mov	r3, r0
 8002f1e:	2b01      	cmp	r3, #1
 8002f20:	d101      	bne.n	8002f26 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8002f22:	2301      	movs	r3, #1
 8002f24:	e022      	b.n	8002f6c <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d002      	beq.n	8002f34 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8002f2e:	6878      	ldr	r0, [r7, #4]
 8002f30:	f000 fa80 	bl	8003434 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	685a      	ldr	r2, [r3, #4]
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002f42:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	689a      	ldr	r2, [r3, #8]
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002f52:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	681a      	ldr	r2, [r3, #0]
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	f042 0201 	orr.w	r2, r2, #1
 8002f62:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002f64:	6878      	ldr	r0, [r7, #4]
 8002f66:	f000 fb07 	bl	8003578 <UART_CheckIdleState>
 8002f6a:	4603      	mov	r3, r0
}
 8002f6c:	4618      	mov	r0, r3
 8002f6e:	3708      	adds	r7, #8
 8002f70:	46bd      	mov	sp, r7
 8002f72:	bd80      	pop	{r7, pc}

08002f74 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002f74:	b580      	push	{r7, lr}
 8002f76:	b088      	sub	sp, #32
 8002f78:	af00      	add	r7, sp, #0
 8002f7a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002f7c:	2300      	movs	r3, #0
 8002f7e:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	689a      	ldr	r2, [r3, #8]
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	691b      	ldr	r3, [r3, #16]
 8002f88:	431a      	orrs	r2, r3
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	695b      	ldr	r3, [r3, #20]
 8002f8e:	431a      	orrs	r2, r3
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	69db      	ldr	r3, [r3, #28]
 8002f94:	4313      	orrs	r3, r2
 8002f96:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	681a      	ldr	r2, [r3, #0]
 8002f9e:	4bb1      	ldr	r3, [pc, #708]	; (8003264 <UART_SetConfig+0x2f0>)
 8002fa0:	4013      	ands	r3, r2
 8002fa2:	687a      	ldr	r2, [r7, #4]
 8002fa4:	6812      	ldr	r2, [r2, #0]
 8002fa6:	6979      	ldr	r1, [r7, #20]
 8002fa8:	430b      	orrs	r3, r1
 8002faa:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	685b      	ldr	r3, [r3, #4]
 8002fb2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	68da      	ldr	r2, [r3, #12]
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	430a      	orrs	r2, r1
 8002fc0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	699b      	ldr	r3, [r3, #24]
 8002fc6:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	6a1b      	ldr	r3, [r3, #32]
 8002fcc:	697a      	ldr	r2, [r7, #20]
 8002fce:	4313      	orrs	r3, r2
 8002fd0:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	689b      	ldr	r3, [r3, #8]
 8002fd8:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	697a      	ldr	r2, [r7, #20]
 8002fe2:	430a      	orrs	r2, r1
 8002fe4:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	4a9f      	ldr	r2, [pc, #636]	; (8003268 <UART_SetConfig+0x2f4>)
 8002fec:	4293      	cmp	r3, r2
 8002fee:	d121      	bne.n	8003034 <UART_SetConfig+0xc0>
 8002ff0:	4b9e      	ldr	r3, [pc, #632]	; (800326c <UART_SetConfig+0x2f8>)
 8002ff2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ff6:	f003 0303 	and.w	r3, r3, #3
 8002ffa:	2b03      	cmp	r3, #3
 8002ffc:	d816      	bhi.n	800302c <UART_SetConfig+0xb8>
 8002ffe:	a201      	add	r2, pc, #4	; (adr r2, 8003004 <UART_SetConfig+0x90>)
 8003000:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003004:	08003015 	.word	0x08003015
 8003008:	08003021 	.word	0x08003021
 800300c:	0800301b 	.word	0x0800301b
 8003010:	08003027 	.word	0x08003027
 8003014:	2301      	movs	r3, #1
 8003016:	77fb      	strb	r3, [r7, #31]
 8003018:	e151      	b.n	80032be <UART_SetConfig+0x34a>
 800301a:	2302      	movs	r3, #2
 800301c:	77fb      	strb	r3, [r7, #31]
 800301e:	e14e      	b.n	80032be <UART_SetConfig+0x34a>
 8003020:	2304      	movs	r3, #4
 8003022:	77fb      	strb	r3, [r7, #31]
 8003024:	e14b      	b.n	80032be <UART_SetConfig+0x34a>
 8003026:	2308      	movs	r3, #8
 8003028:	77fb      	strb	r3, [r7, #31]
 800302a:	e148      	b.n	80032be <UART_SetConfig+0x34a>
 800302c:	2310      	movs	r3, #16
 800302e:	77fb      	strb	r3, [r7, #31]
 8003030:	bf00      	nop
 8003032:	e144      	b.n	80032be <UART_SetConfig+0x34a>
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	4a8d      	ldr	r2, [pc, #564]	; (8003270 <UART_SetConfig+0x2fc>)
 800303a:	4293      	cmp	r3, r2
 800303c:	d134      	bne.n	80030a8 <UART_SetConfig+0x134>
 800303e:	4b8b      	ldr	r3, [pc, #556]	; (800326c <UART_SetConfig+0x2f8>)
 8003040:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003044:	f003 030c 	and.w	r3, r3, #12
 8003048:	2b0c      	cmp	r3, #12
 800304a:	d829      	bhi.n	80030a0 <UART_SetConfig+0x12c>
 800304c:	a201      	add	r2, pc, #4	; (adr r2, 8003054 <UART_SetConfig+0xe0>)
 800304e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003052:	bf00      	nop
 8003054:	08003089 	.word	0x08003089
 8003058:	080030a1 	.word	0x080030a1
 800305c:	080030a1 	.word	0x080030a1
 8003060:	080030a1 	.word	0x080030a1
 8003064:	08003095 	.word	0x08003095
 8003068:	080030a1 	.word	0x080030a1
 800306c:	080030a1 	.word	0x080030a1
 8003070:	080030a1 	.word	0x080030a1
 8003074:	0800308f 	.word	0x0800308f
 8003078:	080030a1 	.word	0x080030a1
 800307c:	080030a1 	.word	0x080030a1
 8003080:	080030a1 	.word	0x080030a1
 8003084:	0800309b 	.word	0x0800309b
 8003088:	2300      	movs	r3, #0
 800308a:	77fb      	strb	r3, [r7, #31]
 800308c:	e117      	b.n	80032be <UART_SetConfig+0x34a>
 800308e:	2302      	movs	r3, #2
 8003090:	77fb      	strb	r3, [r7, #31]
 8003092:	e114      	b.n	80032be <UART_SetConfig+0x34a>
 8003094:	2304      	movs	r3, #4
 8003096:	77fb      	strb	r3, [r7, #31]
 8003098:	e111      	b.n	80032be <UART_SetConfig+0x34a>
 800309a:	2308      	movs	r3, #8
 800309c:	77fb      	strb	r3, [r7, #31]
 800309e:	e10e      	b.n	80032be <UART_SetConfig+0x34a>
 80030a0:	2310      	movs	r3, #16
 80030a2:	77fb      	strb	r3, [r7, #31]
 80030a4:	bf00      	nop
 80030a6:	e10a      	b.n	80032be <UART_SetConfig+0x34a>
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	4a71      	ldr	r2, [pc, #452]	; (8003274 <UART_SetConfig+0x300>)
 80030ae:	4293      	cmp	r3, r2
 80030b0:	d120      	bne.n	80030f4 <UART_SetConfig+0x180>
 80030b2:	4b6e      	ldr	r3, [pc, #440]	; (800326c <UART_SetConfig+0x2f8>)
 80030b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80030b8:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80030bc:	2b10      	cmp	r3, #16
 80030be:	d00f      	beq.n	80030e0 <UART_SetConfig+0x16c>
 80030c0:	2b10      	cmp	r3, #16
 80030c2:	d802      	bhi.n	80030ca <UART_SetConfig+0x156>
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	d005      	beq.n	80030d4 <UART_SetConfig+0x160>
 80030c8:	e010      	b.n	80030ec <UART_SetConfig+0x178>
 80030ca:	2b20      	cmp	r3, #32
 80030cc:	d005      	beq.n	80030da <UART_SetConfig+0x166>
 80030ce:	2b30      	cmp	r3, #48	; 0x30
 80030d0:	d009      	beq.n	80030e6 <UART_SetConfig+0x172>
 80030d2:	e00b      	b.n	80030ec <UART_SetConfig+0x178>
 80030d4:	2300      	movs	r3, #0
 80030d6:	77fb      	strb	r3, [r7, #31]
 80030d8:	e0f1      	b.n	80032be <UART_SetConfig+0x34a>
 80030da:	2302      	movs	r3, #2
 80030dc:	77fb      	strb	r3, [r7, #31]
 80030de:	e0ee      	b.n	80032be <UART_SetConfig+0x34a>
 80030e0:	2304      	movs	r3, #4
 80030e2:	77fb      	strb	r3, [r7, #31]
 80030e4:	e0eb      	b.n	80032be <UART_SetConfig+0x34a>
 80030e6:	2308      	movs	r3, #8
 80030e8:	77fb      	strb	r3, [r7, #31]
 80030ea:	e0e8      	b.n	80032be <UART_SetConfig+0x34a>
 80030ec:	2310      	movs	r3, #16
 80030ee:	77fb      	strb	r3, [r7, #31]
 80030f0:	bf00      	nop
 80030f2:	e0e4      	b.n	80032be <UART_SetConfig+0x34a>
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	4a5f      	ldr	r2, [pc, #380]	; (8003278 <UART_SetConfig+0x304>)
 80030fa:	4293      	cmp	r3, r2
 80030fc:	d120      	bne.n	8003140 <UART_SetConfig+0x1cc>
 80030fe:	4b5b      	ldr	r3, [pc, #364]	; (800326c <UART_SetConfig+0x2f8>)
 8003100:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003104:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8003108:	2b40      	cmp	r3, #64	; 0x40
 800310a:	d00f      	beq.n	800312c <UART_SetConfig+0x1b8>
 800310c:	2b40      	cmp	r3, #64	; 0x40
 800310e:	d802      	bhi.n	8003116 <UART_SetConfig+0x1a2>
 8003110:	2b00      	cmp	r3, #0
 8003112:	d005      	beq.n	8003120 <UART_SetConfig+0x1ac>
 8003114:	e010      	b.n	8003138 <UART_SetConfig+0x1c4>
 8003116:	2b80      	cmp	r3, #128	; 0x80
 8003118:	d005      	beq.n	8003126 <UART_SetConfig+0x1b2>
 800311a:	2bc0      	cmp	r3, #192	; 0xc0
 800311c:	d009      	beq.n	8003132 <UART_SetConfig+0x1be>
 800311e:	e00b      	b.n	8003138 <UART_SetConfig+0x1c4>
 8003120:	2300      	movs	r3, #0
 8003122:	77fb      	strb	r3, [r7, #31]
 8003124:	e0cb      	b.n	80032be <UART_SetConfig+0x34a>
 8003126:	2302      	movs	r3, #2
 8003128:	77fb      	strb	r3, [r7, #31]
 800312a:	e0c8      	b.n	80032be <UART_SetConfig+0x34a>
 800312c:	2304      	movs	r3, #4
 800312e:	77fb      	strb	r3, [r7, #31]
 8003130:	e0c5      	b.n	80032be <UART_SetConfig+0x34a>
 8003132:	2308      	movs	r3, #8
 8003134:	77fb      	strb	r3, [r7, #31]
 8003136:	e0c2      	b.n	80032be <UART_SetConfig+0x34a>
 8003138:	2310      	movs	r3, #16
 800313a:	77fb      	strb	r3, [r7, #31]
 800313c:	bf00      	nop
 800313e:	e0be      	b.n	80032be <UART_SetConfig+0x34a>
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	4a4d      	ldr	r2, [pc, #308]	; (800327c <UART_SetConfig+0x308>)
 8003146:	4293      	cmp	r3, r2
 8003148:	d124      	bne.n	8003194 <UART_SetConfig+0x220>
 800314a:	4b48      	ldr	r3, [pc, #288]	; (800326c <UART_SetConfig+0x2f8>)
 800314c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003150:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003154:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003158:	d012      	beq.n	8003180 <UART_SetConfig+0x20c>
 800315a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800315e:	d802      	bhi.n	8003166 <UART_SetConfig+0x1f2>
 8003160:	2b00      	cmp	r3, #0
 8003162:	d007      	beq.n	8003174 <UART_SetConfig+0x200>
 8003164:	e012      	b.n	800318c <UART_SetConfig+0x218>
 8003166:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800316a:	d006      	beq.n	800317a <UART_SetConfig+0x206>
 800316c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003170:	d009      	beq.n	8003186 <UART_SetConfig+0x212>
 8003172:	e00b      	b.n	800318c <UART_SetConfig+0x218>
 8003174:	2300      	movs	r3, #0
 8003176:	77fb      	strb	r3, [r7, #31]
 8003178:	e0a1      	b.n	80032be <UART_SetConfig+0x34a>
 800317a:	2302      	movs	r3, #2
 800317c:	77fb      	strb	r3, [r7, #31]
 800317e:	e09e      	b.n	80032be <UART_SetConfig+0x34a>
 8003180:	2304      	movs	r3, #4
 8003182:	77fb      	strb	r3, [r7, #31]
 8003184:	e09b      	b.n	80032be <UART_SetConfig+0x34a>
 8003186:	2308      	movs	r3, #8
 8003188:	77fb      	strb	r3, [r7, #31]
 800318a:	e098      	b.n	80032be <UART_SetConfig+0x34a>
 800318c:	2310      	movs	r3, #16
 800318e:	77fb      	strb	r3, [r7, #31]
 8003190:	bf00      	nop
 8003192:	e094      	b.n	80032be <UART_SetConfig+0x34a>
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	4a39      	ldr	r2, [pc, #228]	; (8003280 <UART_SetConfig+0x30c>)
 800319a:	4293      	cmp	r3, r2
 800319c:	d124      	bne.n	80031e8 <UART_SetConfig+0x274>
 800319e:	4b33      	ldr	r3, [pc, #204]	; (800326c <UART_SetConfig+0x2f8>)
 80031a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80031a4:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80031a8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80031ac:	d012      	beq.n	80031d4 <UART_SetConfig+0x260>
 80031ae:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80031b2:	d802      	bhi.n	80031ba <UART_SetConfig+0x246>
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	d007      	beq.n	80031c8 <UART_SetConfig+0x254>
 80031b8:	e012      	b.n	80031e0 <UART_SetConfig+0x26c>
 80031ba:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80031be:	d006      	beq.n	80031ce <UART_SetConfig+0x25a>
 80031c0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80031c4:	d009      	beq.n	80031da <UART_SetConfig+0x266>
 80031c6:	e00b      	b.n	80031e0 <UART_SetConfig+0x26c>
 80031c8:	2301      	movs	r3, #1
 80031ca:	77fb      	strb	r3, [r7, #31]
 80031cc:	e077      	b.n	80032be <UART_SetConfig+0x34a>
 80031ce:	2302      	movs	r3, #2
 80031d0:	77fb      	strb	r3, [r7, #31]
 80031d2:	e074      	b.n	80032be <UART_SetConfig+0x34a>
 80031d4:	2304      	movs	r3, #4
 80031d6:	77fb      	strb	r3, [r7, #31]
 80031d8:	e071      	b.n	80032be <UART_SetConfig+0x34a>
 80031da:	2308      	movs	r3, #8
 80031dc:	77fb      	strb	r3, [r7, #31]
 80031de:	e06e      	b.n	80032be <UART_SetConfig+0x34a>
 80031e0:	2310      	movs	r3, #16
 80031e2:	77fb      	strb	r3, [r7, #31]
 80031e4:	bf00      	nop
 80031e6:	e06a      	b.n	80032be <UART_SetConfig+0x34a>
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	4a25      	ldr	r2, [pc, #148]	; (8003284 <UART_SetConfig+0x310>)
 80031ee:	4293      	cmp	r3, r2
 80031f0:	d124      	bne.n	800323c <UART_SetConfig+0x2c8>
 80031f2:	4b1e      	ldr	r3, [pc, #120]	; (800326c <UART_SetConfig+0x2f8>)
 80031f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80031f8:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 80031fc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003200:	d012      	beq.n	8003228 <UART_SetConfig+0x2b4>
 8003202:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003206:	d802      	bhi.n	800320e <UART_SetConfig+0x29a>
 8003208:	2b00      	cmp	r3, #0
 800320a:	d007      	beq.n	800321c <UART_SetConfig+0x2a8>
 800320c:	e012      	b.n	8003234 <UART_SetConfig+0x2c0>
 800320e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003212:	d006      	beq.n	8003222 <UART_SetConfig+0x2ae>
 8003214:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003218:	d009      	beq.n	800322e <UART_SetConfig+0x2ba>
 800321a:	e00b      	b.n	8003234 <UART_SetConfig+0x2c0>
 800321c:	2300      	movs	r3, #0
 800321e:	77fb      	strb	r3, [r7, #31]
 8003220:	e04d      	b.n	80032be <UART_SetConfig+0x34a>
 8003222:	2302      	movs	r3, #2
 8003224:	77fb      	strb	r3, [r7, #31]
 8003226:	e04a      	b.n	80032be <UART_SetConfig+0x34a>
 8003228:	2304      	movs	r3, #4
 800322a:	77fb      	strb	r3, [r7, #31]
 800322c:	e047      	b.n	80032be <UART_SetConfig+0x34a>
 800322e:	2308      	movs	r3, #8
 8003230:	77fb      	strb	r3, [r7, #31]
 8003232:	e044      	b.n	80032be <UART_SetConfig+0x34a>
 8003234:	2310      	movs	r3, #16
 8003236:	77fb      	strb	r3, [r7, #31]
 8003238:	bf00      	nop
 800323a:	e040      	b.n	80032be <UART_SetConfig+0x34a>
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	4a11      	ldr	r2, [pc, #68]	; (8003288 <UART_SetConfig+0x314>)
 8003242:	4293      	cmp	r3, r2
 8003244:	d139      	bne.n	80032ba <UART_SetConfig+0x346>
 8003246:	4b09      	ldr	r3, [pc, #36]	; (800326c <UART_SetConfig+0x2f8>)
 8003248:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800324c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8003250:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003254:	d027      	beq.n	80032a6 <UART_SetConfig+0x332>
 8003256:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800325a:	d817      	bhi.n	800328c <UART_SetConfig+0x318>
 800325c:	2b00      	cmp	r3, #0
 800325e:	d01c      	beq.n	800329a <UART_SetConfig+0x326>
 8003260:	e027      	b.n	80032b2 <UART_SetConfig+0x33e>
 8003262:	bf00      	nop
 8003264:	efff69f3 	.word	0xefff69f3
 8003268:	40011000 	.word	0x40011000
 800326c:	40023800 	.word	0x40023800
 8003270:	40004400 	.word	0x40004400
 8003274:	40004800 	.word	0x40004800
 8003278:	40004c00 	.word	0x40004c00
 800327c:	40005000 	.word	0x40005000
 8003280:	40011400 	.word	0x40011400
 8003284:	40007800 	.word	0x40007800
 8003288:	40007c00 	.word	0x40007c00
 800328c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003290:	d006      	beq.n	80032a0 <UART_SetConfig+0x32c>
 8003292:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8003296:	d009      	beq.n	80032ac <UART_SetConfig+0x338>
 8003298:	e00b      	b.n	80032b2 <UART_SetConfig+0x33e>
 800329a:	2300      	movs	r3, #0
 800329c:	77fb      	strb	r3, [r7, #31]
 800329e:	e00e      	b.n	80032be <UART_SetConfig+0x34a>
 80032a0:	2302      	movs	r3, #2
 80032a2:	77fb      	strb	r3, [r7, #31]
 80032a4:	e00b      	b.n	80032be <UART_SetConfig+0x34a>
 80032a6:	2304      	movs	r3, #4
 80032a8:	77fb      	strb	r3, [r7, #31]
 80032aa:	e008      	b.n	80032be <UART_SetConfig+0x34a>
 80032ac:	2308      	movs	r3, #8
 80032ae:	77fb      	strb	r3, [r7, #31]
 80032b0:	e005      	b.n	80032be <UART_SetConfig+0x34a>
 80032b2:	2310      	movs	r3, #16
 80032b4:	77fb      	strb	r3, [r7, #31]
 80032b6:	bf00      	nop
 80032b8:	e001      	b.n	80032be <UART_SetConfig+0x34a>
 80032ba:	2310      	movs	r3, #16
 80032bc:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	69db      	ldr	r3, [r3, #28]
 80032c2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80032c6:	d15b      	bne.n	8003380 <UART_SetConfig+0x40c>
  {
    switch (clocksource)
 80032c8:	7ffb      	ldrb	r3, [r7, #31]
 80032ca:	2b08      	cmp	r3, #8
 80032cc:	d827      	bhi.n	800331e <UART_SetConfig+0x3aa>
 80032ce:	a201      	add	r2, pc, #4	; (adr r2, 80032d4 <UART_SetConfig+0x360>)
 80032d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80032d4:	080032f9 	.word	0x080032f9
 80032d8:	08003301 	.word	0x08003301
 80032dc:	08003309 	.word	0x08003309
 80032e0:	0800331f 	.word	0x0800331f
 80032e4:	0800330f 	.word	0x0800330f
 80032e8:	0800331f 	.word	0x0800331f
 80032ec:	0800331f 	.word	0x0800331f
 80032f0:	0800331f 	.word	0x0800331f
 80032f4:	08003317 	.word	0x08003317
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80032f8:	f7fe fec4 	bl	8002084 <HAL_RCC_GetPCLK1Freq>
 80032fc:	61b8      	str	r0, [r7, #24]
        break;
 80032fe:	e013      	b.n	8003328 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003300:	f7fe fed4 	bl	80020ac <HAL_RCC_GetPCLK2Freq>
 8003304:	61b8      	str	r0, [r7, #24]
        break;
 8003306:	e00f      	b.n	8003328 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003308:	4b49      	ldr	r3, [pc, #292]	; (8003430 <UART_SetConfig+0x4bc>)
 800330a:	61bb      	str	r3, [r7, #24]
        break;
 800330c:	e00c      	b.n	8003328 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800330e:	f7fe fdd5 	bl	8001ebc <HAL_RCC_GetSysClockFreq>
 8003312:	61b8      	str	r0, [r7, #24]
        break;
 8003314:	e008      	b.n	8003328 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003316:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800331a:	61bb      	str	r3, [r7, #24]
        break;
 800331c:	e004      	b.n	8003328 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 800331e:	2300      	movs	r3, #0
 8003320:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003322:	2301      	movs	r3, #1
 8003324:	77bb      	strb	r3, [r7, #30]
        break;
 8003326:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003328:	69bb      	ldr	r3, [r7, #24]
 800332a:	2b00      	cmp	r3, #0
 800332c:	d074      	beq.n	8003418 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800332e:	69bb      	ldr	r3, [r7, #24]
 8003330:	005a      	lsls	r2, r3, #1
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	685b      	ldr	r3, [r3, #4]
 8003336:	085b      	lsrs	r3, r3, #1
 8003338:	441a      	add	r2, r3
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	685b      	ldr	r3, [r3, #4]
 800333e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003342:	b29b      	uxth	r3, r3
 8003344:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003346:	693b      	ldr	r3, [r7, #16]
 8003348:	2b0f      	cmp	r3, #15
 800334a:	d916      	bls.n	800337a <UART_SetConfig+0x406>
 800334c:	693b      	ldr	r3, [r7, #16]
 800334e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003352:	d212      	bcs.n	800337a <UART_SetConfig+0x406>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003354:	693b      	ldr	r3, [r7, #16]
 8003356:	b29b      	uxth	r3, r3
 8003358:	f023 030f 	bic.w	r3, r3, #15
 800335c:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800335e:	693b      	ldr	r3, [r7, #16]
 8003360:	085b      	lsrs	r3, r3, #1
 8003362:	b29b      	uxth	r3, r3
 8003364:	f003 0307 	and.w	r3, r3, #7
 8003368:	b29a      	uxth	r2, r3
 800336a:	89fb      	ldrh	r3, [r7, #14]
 800336c:	4313      	orrs	r3, r2
 800336e:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	89fa      	ldrh	r2, [r7, #14]
 8003376:	60da      	str	r2, [r3, #12]
 8003378:	e04e      	b.n	8003418 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 800337a:	2301      	movs	r3, #1
 800337c:	77bb      	strb	r3, [r7, #30]
 800337e:	e04b      	b.n	8003418 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003380:	7ffb      	ldrb	r3, [r7, #31]
 8003382:	2b08      	cmp	r3, #8
 8003384:	d827      	bhi.n	80033d6 <UART_SetConfig+0x462>
 8003386:	a201      	add	r2, pc, #4	; (adr r2, 800338c <UART_SetConfig+0x418>)
 8003388:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800338c:	080033b1 	.word	0x080033b1
 8003390:	080033b9 	.word	0x080033b9
 8003394:	080033c1 	.word	0x080033c1
 8003398:	080033d7 	.word	0x080033d7
 800339c:	080033c7 	.word	0x080033c7
 80033a0:	080033d7 	.word	0x080033d7
 80033a4:	080033d7 	.word	0x080033d7
 80033a8:	080033d7 	.word	0x080033d7
 80033ac:	080033cf 	.word	0x080033cf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80033b0:	f7fe fe68 	bl	8002084 <HAL_RCC_GetPCLK1Freq>
 80033b4:	61b8      	str	r0, [r7, #24]
        break;
 80033b6:	e013      	b.n	80033e0 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80033b8:	f7fe fe78 	bl	80020ac <HAL_RCC_GetPCLK2Freq>
 80033bc:	61b8      	str	r0, [r7, #24]
        break;
 80033be:	e00f      	b.n	80033e0 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80033c0:	4b1b      	ldr	r3, [pc, #108]	; (8003430 <UART_SetConfig+0x4bc>)
 80033c2:	61bb      	str	r3, [r7, #24]
        break;
 80033c4:	e00c      	b.n	80033e0 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80033c6:	f7fe fd79 	bl	8001ebc <HAL_RCC_GetSysClockFreq>
 80033ca:	61b8      	str	r0, [r7, #24]
        break;
 80033cc:	e008      	b.n	80033e0 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80033ce:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80033d2:	61bb      	str	r3, [r7, #24]
        break;
 80033d4:	e004      	b.n	80033e0 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 80033d6:	2300      	movs	r3, #0
 80033d8:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80033da:	2301      	movs	r3, #1
 80033dc:	77bb      	strb	r3, [r7, #30]
        break;
 80033de:	bf00      	nop
    }

    if (pclk != 0U)
 80033e0:	69bb      	ldr	r3, [r7, #24]
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d018      	beq.n	8003418 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	685b      	ldr	r3, [r3, #4]
 80033ea:	085a      	lsrs	r2, r3, #1
 80033ec:	69bb      	ldr	r3, [r7, #24]
 80033ee:	441a      	add	r2, r3
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	685b      	ldr	r3, [r3, #4]
 80033f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80033f8:	b29b      	uxth	r3, r3
 80033fa:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80033fc:	693b      	ldr	r3, [r7, #16]
 80033fe:	2b0f      	cmp	r3, #15
 8003400:	d908      	bls.n	8003414 <UART_SetConfig+0x4a0>
 8003402:	693b      	ldr	r3, [r7, #16]
 8003404:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003408:	d204      	bcs.n	8003414 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = usartdiv;
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	693a      	ldr	r2, [r7, #16]
 8003410:	60da      	str	r2, [r3, #12]
 8003412:	e001      	b.n	8003418 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8003414:	2301      	movs	r3, #1
 8003416:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	2200      	movs	r2, #0
 800341c:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	2200      	movs	r2, #0
 8003422:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8003424:	7fbb      	ldrb	r3, [r7, #30]
}
 8003426:	4618      	mov	r0, r3
 8003428:	3720      	adds	r7, #32
 800342a:	46bd      	mov	sp, r7
 800342c:	bd80      	pop	{r7, pc}
 800342e:	bf00      	nop
 8003430:	00f42400 	.word	0x00f42400

08003434 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003434:	b480      	push	{r7}
 8003436:	b083      	sub	sp, #12
 8003438:	af00      	add	r7, sp, #0
 800343a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003440:	f003 0301 	and.w	r3, r3, #1
 8003444:	2b00      	cmp	r3, #0
 8003446:	d00a      	beq.n	800345e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	685b      	ldr	r3, [r3, #4]
 800344e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	430a      	orrs	r2, r1
 800345c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003462:	f003 0302 	and.w	r3, r3, #2
 8003466:	2b00      	cmp	r3, #0
 8003468:	d00a      	beq.n	8003480 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	685b      	ldr	r3, [r3, #4]
 8003470:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	430a      	orrs	r2, r1
 800347e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003484:	f003 0304 	and.w	r3, r3, #4
 8003488:	2b00      	cmp	r3, #0
 800348a:	d00a      	beq.n	80034a2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	685b      	ldr	r3, [r3, #4]
 8003492:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	430a      	orrs	r2, r1
 80034a0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034a6:	f003 0308 	and.w	r3, r3, #8
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d00a      	beq.n	80034c4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	685b      	ldr	r3, [r3, #4]
 80034b4:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	430a      	orrs	r2, r1
 80034c2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034c8:	f003 0310 	and.w	r3, r3, #16
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d00a      	beq.n	80034e6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	689b      	ldr	r3, [r3, #8]
 80034d6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	430a      	orrs	r2, r1
 80034e4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034ea:	f003 0320 	and.w	r3, r3, #32
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d00a      	beq.n	8003508 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	689b      	ldr	r3, [r3, #8]
 80034f8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	430a      	orrs	r2, r1
 8003506:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800350c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003510:	2b00      	cmp	r3, #0
 8003512:	d01a      	beq.n	800354a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	685b      	ldr	r3, [r3, #4]
 800351a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	430a      	orrs	r2, r1
 8003528:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800352e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003532:	d10a      	bne.n	800354a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	685b      	ldr	r3, [r3, #4]
 800353a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	430a      	orrs	r2, r1
 8003548:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800354e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003552:	2b00      	cmp	r3, #0
 8003554:	d00a      	beq.n	800356c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	685b      	ldr	r3, [r3, #4]
 800355c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	430a      	orrs	r2, r1
 800356a:	605a      	str	r2, [r3, #4]
  }
}
 800356c:	bf00      	nop
 800356e:	370c      	adds	r7, #12
 8003570:	46bd      	mov	sp, r7
 8003572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003576:	4770      	bx	lr

08003578 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003578:	b580      	push	{r7, lr}
 800357a:	b086      	sub	sp, #24
 800357c:	af02      	add	r7, sp, #8
 800357e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	2200      	movs	r2, #0
 8003584:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003588:	f7fd fc8c 	bl	8000ea4 <HAL_GetTick>
 800358c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	f003 0308 	and.w	r3, r3, #8
 8003598:	2b08      	cmp	r3, #8
 800359a:	d10e      	bne.n	80035ba <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800359c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80035a0:	9300      	str	r3, [sp, #0]
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	2200      	movs	r2, #0
 80035a6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80035aa:	6878      	ldr	r0, [r7, #4]
 80035ac:	f000 f817 	bl	80035de <UART_WaitOnFlagUntilTimeout>
 80035b0:	4603      	mov	r3, r0
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d001      	beq.n	80035ba <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80035b6:	2303      	movs	r3, #3
 80035b8:	e00d      	b.n	80035d6 <UART_CheckIdleState+0x5e>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	2220      	movs	r2, #32
 80035be:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	2220      	movs	r2, #32
 80035c4:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	2200      	movs	r2, #0
 80035ca:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	2200      	movs	r2, #0
 80035d0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 80035d4:	2300      	movs	r3, #0
}
 80035d6:	4618      	mov	r0, r3
 80035d8:	3710      	adds	r7, #16
 80035da:	46bd      	mov	sp, r7
 80035dc:	bd80      	pop	{r7, pc}

080035de <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80035de:	b580      	push	{r7, lr}
 80035e0:	b084      	sub	sp, #16
 80035e2:	af00      	add	r7, sp, #0
 80035e4:	60f8      	str	r0, [r7, #12]
 80035e6:	60b9      	str	r1, [r7, #8]
 80035e8:	603b      	str	r3, [r7, #0]
 80035ea:	4613      	mov	r3, r2
 80035ec:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80035ee:	e05e      	b.n	80036ae <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80035f0:	69bb      	ldr	r3, [r7, #24]
 80035f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80035f6:	d05a      	beq.n	80036ae <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80035f8:	f7fd fc54 	bl	8000ea4 <HAL_GetTick>
 80035fc:	4602      	mov	r2, r0
 80035fe:	683b      	ldr	r3, [r7, #0]
 8003600:	1ad3      	subs	r3, r2, r3
 8003602:	69ba      	ldr	r2, [r7, #24]
 8003604:	429a      	cmp	r2, r3
 8003606:	d302      	bcc.n	800360e <UART_WaitOnFlagUntilTimeout+0x30>
 8003608:	69bb      	ldr	r3, [r7, #24]
 800360a:	2b00      	cmp	r3, #0
 800360c:	d11b      	bne.n	8003646 <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	681a      	ldr	r2, [r3, #0]
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800361c:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	689a      	ldr	r2, [r3, #8]
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	f022 0201 	bic.w	r2, r2, #1
 800362c:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	2220      	movs	r2, #32
 8003632:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	2220      	movs	r2, #32
 8003638:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	2200      	movs	r2, #0
 800363e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8003642:	2303      	movs	r3, #3
 8003644:	e043      	b.n	80036ce <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	f003 0304 	and.w	r3, r3, #4
 8003650:	2b00      	cmp	r3, #0
 8003652:	d02c      	beq.n	80036ae <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	69db      	ldr	r3, [r3, #28]
 800365a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800365e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003662:	d124      	bne.n	80036ae <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800366c:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	681a      	ldr	r2, [r3, #0]
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800367c:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	689a      	ldr	r2, [r3, #8]
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	f022 0201 	bic.w	r2, r2, #1
 800368c:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	2220      	movs	r2, #32
 8003692:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	2220      	movs	r2, #32
 8003698:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	2220      	movs	r2, #32
 800369e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	2200      	movs	r2, #0
 80036a6:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 80036aa:	2303      	movs	r3, #3
 80036ac:	e00f      	b.n	80036ce <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	69da      	ldr	r2, [r3, #28]
 80036b4:	68bb      	ldr	r3, [r7, #8]
 80036b6:	4013      	ands	r3, r2
 80036b8:	68ba      	ldr	r2, [r7, #8]
 80036ba:	429a      	cmp	r2, r3
 80036bc:	bf0c      	ite	eq
 80036be:	2301      	moveq	r3, #1
 80036c0:	2300      	movne	r3, #0
 80036c2:	b2db      	uxtb	r3, r3
 80036c4:	461a      	mov	r2, r3
 80036c6:	79fb      	ldrb	r3, [r7, #7]
 80036c8:	429a      	cmp	r2, r3
 80036ca:	d091      	beq.n	80035f0 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80036cc:	2300      	movs	r3, #0
}
 80036ce:	4618      	mov	r0, r3
 80036d0:	3710      	adds	r7, #16
 80036d2:	46bd      	mov	sp, r7
 80036d4:	bd80      	pop	{r7, pc}
	...

080036d8 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80036d8:	b084      	sub	sp, #16
 80036da:	b580      	push	{r7, lr}
 80036dc:	b084      	sub	sp, #16
 80036de:	af00      	add	r7, sp, #0
 80036e0:	6078      	str	r0, [r7, #4]
 80036e2:	f107 001c 	add.w	r0, r7, #28
 80036e6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80036ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036ec:	2b01      	cmp	r3, #1
 80036ee:	d120      	bne.n	8003732 <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036f4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	68da      	ldr	r2, [r3, #12]
 8003700:	4b20      	ldr	r3, [pc, #128]	; (8003784 <USB_CoreInit+0xac>)
 8003702:	4013      	ands	r3, r2
 8003704:	687a      	ldr	r2, [r7, #4]
 8003706:	60d3      	str	r3, [r2, #12]
    /* Select ULPI Interface */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	68db      	ldr	r3, [r3, #12]
 800370c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8003714:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003716:	2b01      	cmp	r3, #1
 8003718:	d105      	bne.n	8003726 <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	68db      	ldr	r3, [r3, #12]
 800371e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 8003726:	6878      	ldr	r0, [r7, #4]
 8003728:	f000 fa5a 	bl	8003be0 <USB_CoreReset>
 800372c:	4603      	mov	r3, r0
 800372e:	73fb      	strb	r3, [r7, #15]
 8003730:	e010      	b.n	8003754 <USB_CoreInit+0x7c>
  }
#endif
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	68db      	ldr	r3, [r3, #12]
 8003736:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800373e:	6878      	ldr	r0, [r7, #4]
 8003740:	f000 fa4e 	bl	8003be0 <USB_CoreReset>
 8003744:	4603      	mov	r3, r0
 8003746:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800374c:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 8003754:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003756:	2b01      	cmp	r3, #1
 8003758:	d10b      	bne.n	8003772 <USB_CoreInit+0x9a>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	689b      	ldr	r3, [r3, #8]
 800375e:	f043 0206 	orr.w	r2, r3, #6
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	689b      	ldr	r3, [r3, #8]
 800376a:	f043 0220 	orr.w	r2, r3, #32
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8003772:	7bfb      	ldrb	r3, [r7, #15]
}
 8003774:	4618      	mov	r0, r3
 8003776:	3710      	adds	r7, #16
 8003778:	46bd      	mov	sp, r7
 800377a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800377e:	b004      	add	sp, #16
 8003780:	4770      	bx	lr
 8003782:	bf00      	nop
 8003784:	ffbdffbf 	.word	0xffbdffbf

08003788 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8003788:	b480      	push	{r7}
 800378a:	b083      	sub	sp, #12
 800378c:	af00      	add	r7, sp, #0
 800378e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	689b      	ldr	r3, [r3, #8]
 8003794:	f023 0201 	bic.w	r2, r3, #1
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800379c:	2300      	movs	r3, #0
}
 800379e:	4618      	mov	r0, r3
 80037a0:	370c      	adds	r7, #12
 80037a2:	46bd      	mov	sp, r7
 80037a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037a8:	4770      	bx	lr

080037aa <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80037aa:	b580      	push	{r7, lr}
 80037ac:	b082      	sub	sp, #8
 80037ae:	af00      	add	r7, sp, #0
 80037b0:	6078      	str	r0, [r7, #4]
 80037b2:	460b      	mov	r3, r1
 80037b4:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	68db      	ldr	r3, [r3, #12]
 80037ba:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80037c2:	78fb      	ldrb	r3, [r7, #3]
 80037c4:	2b01      	cmp	r3, #1
 80037c6:	d106      	bne.n	80037d6 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	68db      	ldr	r3, [r3, #12]
 80037cc:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	60da      	str	r2, [r3, #12]
 80037d4:	e00b      	b.n	80037ee <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 80037d6:	78fb      	ldrb	r3, [r7, #3]
 80037d8:	2b00      	cmp	r3, #0
 80037da:	d106      	bne.n	80037ea <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	68db      	ldr	r3, [r3, #12]
 80037e0:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	60da      	str	r2, [r3, #12]
 80037e8:	e001      	b.n	80037ee <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 80037ea:	2301      	movs	r3, #1
 80037ec:	e003      	b.n	80037f6 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 80037ee:	2032      	movs	r0, #50	; 0x32
 80037f0:	f7fd fb64 	bl	8000ebc <HAL_Delay>

  return HAL_OK;
 80037f4:	2300      	movs	r3, #0
}
 80037f6:	4618      	mov	r0, r3
 80037f8:	3708      	adds	r7, #8
 80037fa:	46bd      	mov	sp, r7
 80037fc:	bd80      	pop	{r7, pc}
	...

08003800 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003800:	b084      	sub	sp, #16
 8003802:	b580      	push	{r7, lr}
 8003804:	b086      	sub	sp, #24
 8003806:	af00      	add	r7, sp, #0
 8003808:	6078      	str	r0, [r7, #4]
 800380a:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800380e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8003812:	2300      	movs	r3, #0
 8003814:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800381a:	2300      	movs	r3, #0
 800381c:	613b      	str	r3, [r7, #16]
 800381e:	e009      	b.n	8003834 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8003820:	687a      	ldr	r2, [r7, #4]
 8003822:	693b      	ldr	r3, [r7, #16]
 8003824:	3340      	adds	r3, #64	; 0x40
 8003826:	009b      	lsls	r3, r3, #2
 8003828:	4413      	add	r3, r2
 800382a:	2200      	movs	r2, #0
 800382c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800382e:	693b      	ldr	r3, [r7, #16]
 8003830:	3301      	adds	r3, #1
 8003832:	613b      	str	r3, [r7, #16]
 8003834:	693b      	ldr	r3, [r7, #16]
 8003836:	2b0e      	cmp	r3, #14
 8003838:	d9f2      	bls.n	8003820 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800383a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800383c:	2b00      	cmp	r3, #0
 800383e:	d11c      	bne.n	800387a <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003846:	685b      	ldr	r3, [r3, #4]
 8003848:	68fa      	ldr	r2, [r7, #12]
 800384a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800384e:	f043 0302 	orr.w	r3, r3, #2
 8003852:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003858:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	601a      	str	r2, [r3, #0]
 8003878:	e005      	b.n	8003886 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800387e:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800388c:	461a      	mov	r2, r3
 800388e:	2300      	movs	r3, #0
 8003890:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003898:	4619      	mov	r1, r3
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80038a0:	461a      	mov	r2, r3
 80038a2:	680b      	ldr	r3, [r1, #0]
 80038a4:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80038a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80038a8:	2b01      	cmp	r3, #1
 80038aa:	d10c      	bne.n	80038c6 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80038ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d104      	bne.n	80038bc <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80038b2:	2100      	movs	r1, #0
 80038b4:	6878      	ldr	r0, [r7, #4]
 80038b6:	f000 f959 	bl	8003b6c <USB_SetDevSpeed>
 80038ba:	e018      	b.n	80038ee <USB_DevInit+0xee>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80038bc:	2101      	movs	r1, #1
 80038be:	6878      	ldr	r0, [r7, #4]
 80038c0:	f000 f954 	bl	8003b6c <USB_SetDevSpeed>
 80038c4:	e013      	b.n	80038ee <USB_DevInit+0xee>
    }
  }
  else if (cfg.phy_itface == USB_OTG_HS_EMBEDDED_PHY)
 80038c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80038c8:	2b03      	cmp	r3, #3
 80038ca:	d10c      	bne.n	80038e6 <USB_DevInit+0xe6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80038cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d104      	bne.n	80038dc <USB_DevInit+0xdc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80038d2:	2100      	movs	r1, #0
 80038d4:	6878      	ldr	r0, [r7, #4]
 80038d6:	f000 f949 	bl	8003b6c <USB_SetDevSpeed>
 80038da:	e008      	b.n	80038ee <USB_DevInit+0xee>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80038dc:	2101      	movs	r1, #1
 80038de:	6878      	ldr	r0, [r7, #4]
 80038e0:	f000 f944 	bl	8003b6c <USB_SetDevSpeed>
 80038e4:	e003      	b.n	80038ee <USB_DevInit+0xee>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80038e6:	2103      	movs	r1, #3
 80038e8:	6878      	ldr	r0, [r7, #4]
 80038ea:	f000 f93f 	bl	8003b6c <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80038ee:	2110      	movs	r1, #16
 80038f0:	6878      	ldr	r0, [r7, #4]
 80038f2:	f000 f8f3 	bl	8003adc <USB_FlushTxFifo>
 80038f6:	4603      	mov	r3, r0
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	d001      	beq.n	8003900 <USB_DevInit+0x100>
  {
    ret = HAL_ERROR;
 80038fc:	2301      	movs	r3, #1
 80038fe:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8003900:	6878      	ldr	r0, [r7, #4]
 8003902:	f000 f911 	bl	8003b28 <USB_FlushRxFifo>
 8003906:	4603      	mov	r3, r0
 8003908:	2b00      	cmp	r3, #0
 800390a:	d001      	beq.n	8003910 <USB_DevInit+0x110>
  {
    ret = HAL_ERROR;
 800390c:	2301      	movs	r3, #1
 800390e:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003916:	461a      	mov	r2, r3
 8003918:	2300      	movs	r3, #0
 800391a:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003922:	461a      	mov	r2, r3
 8003924:	2300      	movs	r3, #0
 8003926:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800392e:	461a      	mov	r2, r3
 8003930:	2300      	movs	r3, #0
 8003932:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003934:	2300      	movs	r3, #0
 8003936:	613b      	str	r3, [r7, #16]
 8003938:	e043      	b.n	80039c2 <USB_DevInit+0x1c2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800393a:	693b      	ldr	r3, [r7, #16]
 800393c:	015a      	lsls	r2, r3, #5
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	4413      	add	r3, r2
 8003942:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800394c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003950:	d118      	bne.n	8003984 <USB_DevInit+0x184>
    {
      if (i == 0U)
 8003952:	693b      	ldr	r3, [r7, #16]
 8003954:	2b00      	cmp	r3, #0
 8003956:	d10a      	bne.n	800396e <USB_DevInit+0x16e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8003958:	693b      	ldr	r3, [r7, #16]
 800395a:	015a      	lsls	r2, r3, #5
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	4413      	add	r3, r2
 8003960:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003964:	461a      	mov	r2, r3
 8003966:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800396a:	6013      	str	r3, [r2, #0]
 800396c:	e013      	b.n	8003996 <USB_DevInit+0x196>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800396e:	693b      	ldr	r3, [r7, #16]
 8003970:	015a      	lsls	r2, r3, #5
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	4413      	add	r3, r2
 8003976:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800397a:	461a      	mov	r2, r3
 800397c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8003980:	6013      	str	r3, [r2, #0]
 8003982:	e008      	b.n	8003996 <USB_DevInit+0x196>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8003984:	693b      	ldr	r3, [r7, #16]
 8003986:	015a      	lsls	r2, r3, #5
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	4413      	add	r3, r2
 800398c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003990:	461a      	mov	r2, r3
 8003992:	2300      	movs	r3, #0
 8003994:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8003996:	693b      	ldr	r3, [r7, #16]
 8003998:	015a      	lsls	r2, r3, #5
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	4413      	add	r3, r2
 800399e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80039a2:	461a      	mov	r2, r3
 80039a4:	2300      	movs	r3, #0
 80039a6:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80039a8:	693b      	ldr	r3, [r7, #16]
 80039aa:	015a      	lsls	r2, r3, #5
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	4413      	add	r3, r2
 80039b0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80039b4:	461a      	mov	r2, r3
 80039b6:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80039ba:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80039bc:	693b      	ldr	r3, [r7, #16]
 80039be:	3301      	adds	r3, #1
 80039c0:	613b      	str	r3, [r7, #16]
 80039c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039c4:	693a      	ldr	r2, [r7, #16]
 80039c6:	429a      	cmp	r2, r3
 80039c8:	d3b7      	bcc.n	800393a <USB_DevInit+0x13a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80039ca:	2300      	movs	r3, #0
 80039cc:	613b      	str	r3, [r7, #16]
 80039ce:	e043      	b.n	8003a58 <USB_DevInit+0x258>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80039d0:	693b      	ldr	r3, [r7, #16]
 80039d2:	015a      	lsls	r2, r3, #5
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	4413      	add	r3, r2
 80039d8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80039e2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80039e6:	d118      	bne.n	8003a1a <USB_DevInit+0x21a>
    {
      if (i == 0U)
 80039e8:	693b      	ldr	r3, [r7, #16]
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d10a      	bne.n	8003a04 <USB_DevInit+0x204>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80039ee:	693b      	ldr	r3, [r7, #16]
 80039f0:	015a      	lsls	r2, r3, #5
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	4413      	add	r3, r2
 80039f6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80039fa:	461a      	mov	r2, r3
 80039fc:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8003a00:	6013      	str	r3, [r2, #0]
 8003a02:	e013      	b.n	8003a2c <USB_DevInit+0x22c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8003a04:	693b      	ldr	r3, [r7, #16]
 8003a06:	015a      	lsls	r2, r3, #5
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	4413      	add	r3, r2
 8003a0c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003a10:	461a      	mov	r2, r3
 8003a12:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8003a16:	6013      	str	r3, [r2, #0]
 8003a18:	e008      	b.n	8003a2c <USB_DevInit+0x22c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8003a1a:	693b      	ldr	r3, [r7, #16]
 8003a1c:	015a      	lsls	r2, r3, #5
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	4413      	add	r3, r2
 8003a22:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003a26:	461a      	mov	r2, r3
 8003a28:	2300      	movs	r3, #0
 8003a2a:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8003a2c:	693b      	ldr	r3, [r7, #16]
 8003a2e:	015a      	lsls	r2, r3, #5
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	4413      	add	r3, r2
 8003a34:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003a38:	461a      	mov	r2, r3
 8003a3a:	2300      	movs	r3, #0
 8003a3c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8003a3e:	693b      	ldr	r3, [r7, #16]
 8003a40:	015a      	lsls	r2, r3, #5
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	4413      	add	r3, r2
 8003a46:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003a4a:	461a      	mov	r2, r3
 8003a4c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003a50:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003a52:	693b      	ldr	r3, [r7, #16]
 8003a54:	3301      	adds	r3, #1
 8003a56:	613b      	str	r3, [r7, #16]
 8003a58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a5a:	693a      	ldr	r2, [r7, #16]
 8003a5c:	429a      	cmp	r2, r3
 8003a5e:	d3b7      	bcc.n	80039d0 <USB_DevInit+0x1d0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003a66:	691b      	ldr	r3, [r3, #16]
 8003a68:	68fa      	ldr	r2, [r7, #12]
 8003a6a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003a6e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003a72:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	2200      	movs	r2, #0
 8003a78:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8003a80:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8003a82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	d105      	bne.n	8003a94 <USB_DevInit+0x294>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	699b      	ldr	r3, [r3, #24]
 8003a8c:	f043 0210 	orr.w	r2, r3, #16
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	699a      	ldr	r2, [r3, #24]
 8003a98:	4b0e      	ldr	r3, [pc, #56]	; (8003ad4 <USB_DevInit+0x2d4>)
 8003a9a:	4313      	orrs	r3, r2
 8003a9c:	687a      	ldr	r2, [r7, #4]
 8003a9e:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8003aa0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d005      	beq.n	8003ab2 <USB_DevInit+0x2b2>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	699b      	ldr	r3, [r3, #24]
 8003aaa:	f043 0208 	orr.w	r2, r3, #8
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8003ab2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003ab4:	2b01      	cmp	r3, #1
 8003ab6:	d105      	bne.n	8003ac4 <USB_DevInit+0x2c4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	699a      	ldr	r2, [r3, #24]
 8003abc:	4b06      	ldr	r3, [pc, #24]	; (8003ad8 <USB_DevInit+0x2d8>)
 8003abe:	4313      	orrs	r3, r2
 8003ac0:	687a      	ldr	r2, [r7, #4]
 8003ac2:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8003ac4:	7dfb      	ldrb	r3, [r7, #23]
}
 8003ac6:	4618      	mov	r0, r3
 8003ac8:	3718      	adds	r7, #24
 8003aca:	46bd      	mov	sp, r7
 8003acc:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003ad0:	b004      	add	sp, #16
 8003ad2:	4770      	bx	lr
 8003ad4:	803c3800 	.word	0x803c3800
 8003ad8:	40000004 	.word	0x40000004

08003adc <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8003adc:	b480      	push	{r7}
 8003ade:	b085      	sub	sp, #20
 8003ae0:	af00      	add	r7, sp, #0
 8003ae2:	6078      	str	r0, [r7, #4]
 8003ae4:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 8003ae6:	2300      	movs	r3, #0
 8003ae8:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8003aea:	683b      	ldr	r3, [r7, #0]
 8003aec:	019b      	lsls	r3, r3, #6
 8003aee:	f043 0220 	orr.w	r2, r3, #32
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	3301      	adds	r3, #1
 8003afa:	60fb      	str	r3, [r7, #12]
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	4a09      	ldr	r2, [pc, #36]	; (8003b24 <USB_FlushTxFifo+0x48>)
 8003b00:	4293      	cmp	r3, r2
 8003b02:	d901      	bls.n	8003b08 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8003b04:	2303      	movs	r3, #3
 8003b06:	e006      	b.n	8003b16 <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	691b      	ldr	r3, [r3, #16]
 8003b0c:	f003 0320 	and.w	r3, r3, #32
 8003b10:	2b20      	cmp	r3, #32
 8003b12:	d0f0      	beq.n	8003af6 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8003b14:	2300      	movs	r3, #0
}
 8003b16:	4618      	mov	r0, r3
 8003b18:	3714      	adds	r7, #20
 8003b1a:	46bd      	mov	sp, r7
 8003b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b20:	4770      	bx	lr
 8003b22:	bf00      	nop
 8003b24:	00030d40 	.word	0x00030d40

08003b28 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8003b28:	b480      	push	{r7}
 8003b2a:	b085      	sub	sp, #20
 8003b2c:	af00      	add	r7, sp, #0
 8003b2e:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8003b30:	2300      	movs	r3, #0
 8003b32:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	2210      	movs	r2, #16
 8003b38:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	3301      	adds	r3, #1
 8003b3e:	60fb      	str	r3, [r7, #12]
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	4a09      	ldr	r2, [pc, #36]	; (8003b68 <USB_FlushRxFifo+0x40>)
 8003b44:	4293      	cmp	r3, r2
 8003b46:	d901      	bls.n	8003b4c <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8003b48:	2303      	movs	r3, #3
 8003b4a:	e006      	b.n	8003b5a <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	691b      	ldr	r3, [r3, #16]
 8003b50:	f003 0310 	and.w	r3, r3, #16
 8003b54:	2b10      	cmp	r3, #16
 8003b56:	d0f0      	beq.n	8003b3a <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8003b58:	2300      	movs	r3, #0
}
 8003b5a:	4618      	mov	r0, r3
 8003b5c:	3714      	adds	r7, #20
 8003b5e:	46bd      	mov	sp, r7
 8003b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b64:	4770      	bx	lr
 8003b66:	bf00      	nop
 8003b68:	00030d40 	.word	0x00030d40

08003b6c <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8003b6c:	b480      	push	{r7}
 8003b6e:	b085      	sub	sp, #20
 8003b70:	af00      	add	r7, sp, #0
 8003b72:	6078      	str	r0, [r7, #4]
 8003b74:	460b      	mov	r3, r1
 8003b76:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003b82:	681a      	ldr	r2, [r3, #0]
 8003b84:	78fb      	ldrb	r3, [r7, #3]
 8003b86:	68f9      	ldr	r1, [r7, #12]
 8003b88:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003b8c:	4313      	orrs	r3, r2
 8003b8e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8003b90:	2300      	movs	r3, #0
}
 8003b92:	4618      	mov	r0, r3
 8003b94:	3714      	adds	r7, #20
 8003b96:	46bd      	mov	sp, r7
 8003b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b9c:	4770      	bx	lr

08003b9e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8003b9e:	b480      	push	{r7}
 8003ba0:	b085      	sub	sp, #20
 8003ba2:	af00      	add	r7, sp, #0
 8003ba4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	68fa      	ldr	r2, [r7, #12]
 8003bb4:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8003bb8:	f023 0303 	bic.w	r3, r3, #3
 8003bbc:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003bc4:	685b      	ldr	r3, [r3, #4]
 8003bc6:	68fa      	ldr	r2, [r7, #12]
 8003bc8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003bcc:	f043 0302 	orr.w	r3, r3, #2
 8003bd0:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8003bd2:	2300      	movs	r3, #0
}
 8003bd4:	4618      	mov	r0, r3
 8003bd6:	3714      	adds	r7, #20
 8003bd8:	46bd      	mov	sp, r7
 8003bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bde:	4770      	bx	lr

08003be0 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8003be0:	b480      	push	{r7}
 8003be2:	b085      	sub	sp, #20
 8003be4:	af00      	add	r7, sp, #0
 8003be6:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8003be8:	2300      	movs	r3, #0
 8003bea:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	3301      	adds	r3, #1
 8003bf0:	60fb      	str	r3, [r7, #12]
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	4a13      	ldr	r2, [pc, #76]	; (8003c44 <USB_CoreReset+0x64>)
 8003bf6:	4293      	cmp	r3, r2
 8003bf8:	d901      	bls.n	8003bfe <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8003bfa:	2303      	movs	r3, #3
 8003bfc:	e01b      	b.n	8003c36 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	691b      	ldr	r3, [r3, #16]
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	daf2      	bge.n	8003bec <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8003c06:	2300      	movs	r3, #0
 8003c08:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	691b      	ldr	r3, [r3, #16]
 8003c0e:	f043 0201 	orr.w	r2, r3, #1
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	3301      	adds	r3, #1
 8003c1a:	60fb      	str	r3, [r7, #12]
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	4a09      	ldr	r2, [pc, #36]	; (8003c44 <USB_CoreReset+0x64>)
 8003c20:	4293      	cmp	r3, r2
 8003c22:	d901      	bls.n	8003c28 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8003c24:	2303      	movs	r3, #3
 8003c26:	e006      	b.n	8003c36 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	691b      	ldr	r3, [r3, #16]
 8003c2c:	f003 0301 	and.w	r3, r3, #1
 8003c30:	2b01      	cmp	r3, #1
 8003c32:	d0f0      	beq.n	8003c16 <USB_CoreReset+0x36>

  return HAL_OK;
 8003c34:	2300      	movs	r3, #0
}
 8003c36:	4618      	mov	r0, r3
 8003c38:	3714      	adds	r7, #20
 8003c3a:	46bd      	mov	sp, r7
 8003c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c40:	4770      	bx	lr
 8003c42:	bf00      	nop
 8003c44:	00030d40 	.word	0x00030d40

08003c48 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8003c48:	b480      	push	{r7}
 8003c4a:	af00      	add	r7, sp, #0
  * The issue was logged under:https://github.com/ARM-software/CMSIS-FreeRTOS/issues/35
  * until it is correctly fixed, the code below is commented
  */
/*    NVIC_SetPriority (SVCall_IRQn, 0U); */
#endif
}
 8003c4c:	bf00      	nop
 8003c4e:	46bd      	mov	sp, r7
 8003c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c54:	4770      	bx	lr
	...

08003c58 <osKernelInitialize>:

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8003c58:	b480      	push	{r7}
 8003c5a:	b085      	sub	sp, #20
 8003c5c:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003c5e:	f3ef 8305 	mrs	r3, IPSR
 8003c62:	60bb      	str	r3, [r7, #8]
  return(result);
 8003c64:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d10f      	bne.n	8003c8a <osKernelInitialize+0x32>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003c6a:	f3ef 8310 	mrs	r3, PRIMASK
 8003c6e:	607b      	str	r3, [r7, #4]
  return(result);
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d105      	bne.n	8003c82 <osKernelInitialize+0x2a>
 */
__STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8003c76:	f3ef 8311 	mrs	r3, BASEPRI
 8003c7a:	603b      	str	r3, [r7, #0]
  return(result);
 8003c7c:	683b      	ldr	r3, [r7, #0]
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d007      	beq.n	8003c92 <osKernelInitialize+0x3a>
 8003c82:	4b0e      	ldr	r3, [pc, #56]	; (8003cbc <osKernelInitialize+0x64>)
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	2b02      	cmp	r3, #2
 8003c88:	d103      	bne.n	8003c92 <osKernelInitialize+0x3a>
    stat = osErrorISR;
 8003c8a:	f06f 0305 	mvn.w	r3, #5
 8003c8e:	60fb      	str	r3, [r7, #12]
 8003c90:	e00c      	b.n	8003cac <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 8003c92:	4b0a      	ldr	r3, [pc, #40]	; (8003cbc <osKernelInitialize+0x64>)
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d105      	bne.n	8003ca6 <osKernelInitialize+0x4e>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8003c9a:	4b08      	ldr	r3, [pc, #32]	; (8003cbc <osKernelInitialize+0x64>)
 8003c9c:	2201      	movs	r2, #1
 8003c9e:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8003ca0:	2300      	movs	r3, #0
 8003ca2:	60fb      	str	r3, [r7, #12]
 8003ca4:	e002      	b.n	8003cac <osKernelInitialize+0x54>
    } else {
      stat = osError;
 8003ca6:	f04f 33ff 	mov.w	r3, #4294967295
 8003caa:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8003cac:	68fb      	ldr	r3, [r7, #12]
}
 8003cae:	4618      	mov	r0, r3
 8003cb0:	3714      	adds	r7, #20
 8003cb2:	46bd      	mov	sp, r7
 8003cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cb8:	4770      	bx	lr
 8003cba:	bf00      	nop
 8003cbc:	20000094 	.word	0x20000094

08003cc0 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8003cc0:	b580      	push	{r7, lr}
 8003cc2:	b084      	sub	sp, #16
 8003cc4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003cc6:	f3ef 8305 	mrs	r3, IPSR
 8003cca:	60bb      	str	r3, [r7, #8]
  return(result);
 8003ccc:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d10f      	bne.n	8003cf2 <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003cd2:	f3ef 8310 	mrs	r3, PRIMASK
 8003cd6:	607b      	str	r3, [r7, #4]
  return(result);
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d105      	bne.n	8003cea <osKernelStart+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8003cde:	f3ef 8311 	mrs	r3, BASEPRI
 8003ce2:	603b      	str	r3, [r7, #0]
  return(result);
 8003ce4:	683b      	ldr	r3, [r7, #0]
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d007      	beq.n	8003cfa <osKernelStart+0x3a>
 8003cea:	4b0f      	ldr	r3, [pc, #60]	; (8003d28 <osKernelStart+0x68>)
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	2b02      	cmp	r3, #2
 8003cf0:	d103      	bne.n	8003cfa <osKernelStart+0x3a>
    stat = osErrorISR;
 8003cf2:	f06f 0305 	mvn.w	r3, #5
 8003cf6:	60fb      	str	r3, [r7, #12]
 8003cf8:	e010      	b.n	8003d1c <osKernelStart+0x5c>
  }
  else {
    if (KernelState == osKernelReady) {
 8003cfa:	4b0b      	ldr	r3, [pc, #44]	; (8003d28 <osKernelStart+0x68>)
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	2b01      	cmp	r3, #1
 8003d00:	d109      	bne.n	8003d16 <osKernelStart+0x56>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8003d02:	f7ff ffa1 	bl	8003c48 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8003d06:	4b08      	ldr	r3, [pc, #32]	; (8003d28 <osKernelStart+0x68>)
 8003d08:	2202      	movs	r2, #2
 8003d0a:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8003d0c:	f001 f89c 	bl	8004e48 <vTaskStartScheduler>
      stat = osOK;
 8003d10:	2300      	movs	r3, #0
 8003d12:	60fb      	str	r3, [r7, #12]
 8003d14:	e002      	b.n	8003d1c <osKernelStart+0x5c>
    } else {
      stat = osError;
 8003d16:	f04f 33ff 	mov.w	r3, #4294967295
 8003d1a:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8003d1c:	68fb      	ldr	r3, [r7, #12]
}
 8003d1e:	4618      	mov	r0, r3
 8003d20:	3710      	adds	r7, #16
 8003d22:	46bd      	mov	sp, r7
 8003d24:	bd80      	pop	{r7, pc}
 8003d26:	bf00      	nop
 8003d28:	20000094 	.word	0x20000094

08003d2c <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8003d2c:	b580      	push	{r7, lr}
 8003d2e:	b090      	sub	sp, #64	; 0x40
 8003d30:	af04      	add	r7, sp, #16
 8003d32:	60f8      	str	r0, [r7, #12]
 8003d34:	60b9      	str	r1, [r7, #8]
 8003d36:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8003d38:	2300      	movs	r3, #0
 8003d3a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003d3c:	f3ef 8305 	mrs	r3, IPSR
 8003d40:	61fb      	str	r3, [r7, #28]
  return(result);
 8003d42:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	f040 808f 	bne.w	8003e68 <osThreadNew+0x13c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003d4a:	f3ef 8310 	mrs	r3, PRIMASK
 8003d4e:	61bb      	str	r3, [r7, #24]
  return(result);
 8003d50:	69bb      	ldr	r3, [r7, #24]
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d105      	bne.n	8003d62 <osThreadNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8003d56:	f3ef 8311 	mrs	r3, BASEPRI
 8003d5a:	617b      	str	r3, [r7, #20]
  return(result);
 8003d5c:	697b      	ldr	r3, [r7, #20]
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	d003      	beq.n	8003d6a <osThreadNew+0x3e>
 8003d62:	4b44      	ldr	r3, [pc, #272]	; (8003e74 <osThreadNew+0x148>)
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	2b02      	cmp	r3, #2
 8003d68:	d07e      	beq.n	8003e68 <osThreadNew+0x13c>
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	d07b      	beq.n	8003e68 <osThreadNew+0x13c>
    stack = configMINIMAL_STACK_SIZE;
 8003d70:	2380      	movs	r3, #128	; 0x80
 8003d72:	62bb      	str	r3, [r7, #40]	; 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 8003d74:	2318      	movs	r3, #24
 8003d76:	627b      	str	r3, [r7, #36]	; 0x24

    name = NULL;
 8003d78:	2300      	movs	r3, #0
 8003d7a:	62fb      	str	r3, [r7, #44]	; 0x2c
    mem  = -1;
 8003d7c:	f04f 33ff 	mov.w	r3, #4294967295
 8003d80:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	d045      	beq.n	8003e14 <osThreadNew+0xe8>
      if (attr->name != NULL) {
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	d002      	beq.n	8003d96 <osThreadNew+0x6a>
        name = attr->name;
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (attr->priority != osPriorityNone) {
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	699b      	ldr	r3, [r3, #24]
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d002      	beq.n	8003da4 <osThreadNew+0x78>
        prio = (UBaseType_t)attr->priority;
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	699b      	ldr	r3, [r3, #24]
 8003da2:	627b      	str	r3, [r7, #36]	; 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8003da4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d008      	beq.n	8003dbc <osThreadNew+0x90>
 8003daa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dac:	2b38      	cmp	r3, #56	; 0x38
 8003dae:	d805      	bhi.n	8003dbc <osThreadNew+0x90>
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	685b      	ldr	r3, [r3, #4]
 8003db4:	f003 0301 	and.w	r3, r3, #1
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	d001      	beq.n	8003dc0 <osThreadNew+0x94>
        return (NULL);
 8003dbc:	2300      	movs	r3, #0
 8003dbe:	e054      	b.n	8003e6a <osThreadNew+0x13e>
      }

      if (attr->stack_size > 0U) {
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	695b      	ldr	r3, [r3, #20]
 8003dc4:	2b00      	cmp	r3, #0
 8003dc6:	d003      	beq.n	8003dd0 <osThreadNew+0xa4>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	695b      	ldr	r3, [r3, #20]
 8003dcc:	089b      	lsrs	r3, r3, #2
 8003dce:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	689b      	ldr	r3, [r3, #8]
 8003dd4:	2b00      	cmp	r3, #0
 8003dd6:	d00e      	beq.n	8003df6 <osThreadNew+0xca>
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	68db      	ldr	r3, [r3, #12]
 8003ddc:	2b5b      	cmp	r3, #91	; 0x5b
 8003dde:	d90a      	bls.n	8003df6 <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8003de4:	2b00      	cmp	r3, #0
 8003de6:	d006      	beq.n	8003df6 <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	695b      	ldr	r3, [r3, #20]
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	d002      	beq.n	8003df6 <osThreadNew+0xca>
        mem = 1;
 8003df0:	2301      	movs	r3, #1
 8003df2:	623b      	str	r3, [r7, #32]
 8003df4:	e010      	b.n	8003e18 <osThreadNew+0xec>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	689b      	ldr	r3, [r3, #8]
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	d10c      	bne.n	8003e18 <osThreadNew+0xec>
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	68db      	ldr	r3, [r3, #12]
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	d108      	bne.n	8003e18 <osThreadNew+0xec>
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	691b      	ldr	r3, [r3, #16]
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d104      	bne.n	8003e18 <osThreadNew+0xec>
          mem = 0;
 8003e0e:	2300      	movs	r3, #0
 8003e10:	623b      	str	r3, [r7, #32]
 8003e12:	e001      	b.n	8003e18 <osThreadNew+0xec>
        }
      }
    }
    else {
      mem = 0;
 8003e14:	2300      	movs	r3, #0
 8003e16:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 8003e18:	6a3b      	ldr	r3, [r7, #32]
 8003e1a:	2b01      	cmp	r3, #1
 8003e1c:	d110      	bne.n	8003e40 <osThreadNew+0x114>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 8003e22:	687a      	ldr	r2, [r7, #4]
 8003e24:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8003e26:	9202      	str	r2, [sp, #8]
 8003e28:	9301      	str	r3, [sp, #4]
 8003e2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e2c:	9300      	str	r3, [sp, #0]
 8003e2e:	68bb      	ldr	r3, [r7, #8]
 8003e30:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003e32:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003e34:	68f8      	ldr	r0, [r7, #12]
 8003e36:	f000 fe2b 	bl	8004a90 <xTaskCreateStatic>
 8003e3a:	4603      	mov	r3, r0
 8003e3c:	613b      	str	r3, [r7, #16]
 8003e3e:	e013      	b.n	8003e68 <osThreadNew+0x13c>
    }
    else {
      if (mem == 0) {
 8003e40:	6a3b      	ldr	r3, [r7, #32]
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d110      	bne.n	8003e68 <osThreadNew+0x13c>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8003e46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e48:	b29a      	uxth	r2, r3
 8003e4a:	f107 0310 	add.w	r3, r7, #16
 8003e4e:	9301      	str	r3, [sp, #4]
 8003e50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e52:	9300      	str	r3, [sp, #0]
 8003e54:	68bb      	ldr	r3, [r7, #8]
 8003e56:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003e58:	68f8      	ldr	r0, [r7, #12]
 8003e5a:	f000 fe79 	bl	8004b50 <xTaskCreate>
 8003e5e:	4603      	mov	r3, r0
 8003e60:	2b01      	cmp	r3, #1
 8003e62:	d001      	beq.n	8003e68 <osThreadNew+0x13c>
          hTask = NULL;
 8003e64:	2300      	movs	r3, #0
 8003e66:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 8003e68:	693b      	ldr	r3, [r7, #16]
}
 8003e6a:	4618      	mov	r0, r3
 8003e6c:	3730      	adds	r7, #48	; 0x30
 8003e6e:	46bd      	mov	sp, r7
 8003e70:	bd80      	pop	{r7, pc}
 8003e72:	bf00      	nop
 8003e74:	20000094 	.word	0x20000094

08003e78 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 8003e78:	b580      	push	{r7, lr}
 8003e7a:	b086      	sub	sp, #24
 8003e7c:	af00      	add	r7, sp, #0
 8003e7e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003e80:	f3ef 8305 	mrs	r3, IPSR
 8003e84:	613b      	str	r3, [r7, #16]
  return(result);
 8003e86:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003e88:	2b00      	cmp	r3, #0
 8003e8a:	d10f      	bne.n	8003eac <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003e8c:	f3ef 8310 	mrs	r3, PRIMASK
 8003e90:	60fb      	str	r3, [r7, #12]
  return(result);
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	2b00      	cmp	r3, #0
 8003e96:	d105      	bne.n	8003ea4 <osDelay+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8003e98:	f3ef 8311 	mrs	r3, BASEPRI
 8003e9c:	60bb      	str	r3, [r7, #8]
  return(result);
 8003e9e:	68bb      	ldr	r3, [r7, #8]
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	d007      	beq.n	8003eb4 <osDelay+0x3c>
 8003ea4:	4b0a      	ldr	r3, [pc, #40]	; (8003ed0 <osDelay+0x58>)
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	2b02      	cmp	r3, #2
 8003eaa:	d103      	bne.n	8003eb4 <osDelay+0x3c>
    stat = osErrorISR;
 8003eac:	f06f 0305 	mvn.w	r3, #5
 8003eb0:	617b      	str	r3, [r7, #20]
 8003eb2:	e007      	b.n	8003ec4 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 8003eb4:	2300      	movs	r3, #0
 8003eb6:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	d002      	beq.n	8003ec4 <osDelay+0x4c>
      vTaskDelay(ticks);
 8003ebe:	6878      	ldr	r0, [r7, #4]
 8003ec0:	f000 ff8c 	bl	8004ddc <vTaskDelay>
    }
  }

  return (stat);
 8003ec4:	697b      	ldr	r3, [r7, #20]
}
 8003ec6:	4618      	mov	r0, r3
 8003ec8:	3718      	adds	r7, #24
 8003eca:	46bd      	mov	sp, r7
 8003ecc:	bd80      	pop	{r7, pc}
 8003ece:	bf00      	nop
 8003ed0:	20000094 	.word	0x20000094

08003ed4 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8003ed4:	b480      	push	{r7}
 8003ed6:	b085      	sub	sp, #20
 8003ed8:	af00      	add	r7, sp, #0
 8003eda:	60f8      	str	r0, [r7, #12]
 8003edc:	60b9      	str	r1, [r7, #8]
 8003ede:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	4a07      	ldr	r2, [pc, #28]	; (8003f00 <vApplicationGetIdleTaskMemory+0x2c>)
 8003ee4:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8003ee6:	68bb      	ldr	r3, [r7, #8]
 8003ee8:	4a06      	ldr	r2, [pc, #24]	; (8003f04 <vApplicationGetIdleTaskMemory+0x30>)
 8003eea:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	2280      	movs	r2, #128	; 0x80
 8003ef0:	601a      	str	r2, [r3, #0]
}
 8003ef2:	bf00      	nop
 8003ef4:	3714      	adds	r7, #20
 8003ef6:	46bd      	mov	sp, r7
 8003ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003efc:	4770      	bx	lr
 8003efe:	bf00      	nop
 8003f00:	20000098 	.word	0x20000098
 8003f04:	200000f4 	.word	0x200000f4

08003f08 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8003f08:	b480      	push	{r7}
 8003f0a:	b085      	sub	sp, #20
 8003f0c:	af00      	add	r7, sp, #0
 8003f0e:	60f8      	str	r0, [r7, #12]
 8003f10:	60b9      	str	r1, [r7, #8]
 8003f12:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	4a07      	ldr	r2, [pc, #28]	; (8003f34 <vApplicationGetTimerTaskMemory+0x2c>)
 8003f18:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8003f1a:	68bb      	ldr	r3, [r7, #8]
 8003f1c:	4a06      	ldr	r2, [pc, #24]	; (8003f38 <vApplicationGetTimerTaskMemory+0x30>)
 8003f1e:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003f26:	601a      	str	r2, [r3, #0]
}
 8003f28:	bf00      	nop
 8003f2a:	3714      	adds	r7, #20
 8003f2c:	46bd      	mov	sp, r7
 8003f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f32:	4770      	bx	lr
 8003f34:	200002f4 	.word	0x200002f4
 8003f38:	20000350 	.word	0x20000350

08003f3c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8003f3c:	b480      	push	{r7}
 8003f3e:	b083      	sub	sp, #12
 8003f40:	af00      	add	r7, sp, #0
 8003f42:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	f103 0208 	add.w	r2, r3, #8
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	f04f 32ff 	mov.w	r2, #4294967295
 8003f54:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	f103 0208 	add.w	r2, r3, #8
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	f103 0208 	add.w	r2, r3, #8
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	2200      	movs	r2, #0
 8003f6e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8003f70:	bf00      	nop
 8003f72:	370c      	adds	r7, #12
 8003f74:	46bd      	mov	sp, r7
 8003f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f7a:	4770      	bx	lr

08003f7c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8003f7c:	b480      	push	{r7}
 8003f7e:	b083      	sub	sp, #12
 8003f80:	af00      	add	r7, sp, #0
 8003f82:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	2200      	movs	r2, #0
 8003f88:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8003f8a:	bf00      	nop
 8003f8c:	370c      	adds	r7, #12
 8003f8e:	46bd      	mov	sp, r7
 8003f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f94:	4770      	bx	lr

08003f96 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003f96:	b480      	push	{r7}
 8003f98:	b085      	sub	sp, #20
 8003f9a:	af00      	add	r7, sp, #0
 8003f9c:	6078      	str	r0, [r7, #4]
 8003f9e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	685b      	ldr	r3, [r3, #4]
 8003fa4:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8003fa6:	683b      	ldr	r3, [r7, #0]
 8003fa8:	68fa      	ldr	r2, [r7, #12]
 8003faa:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	689a      	ldr	r2, [r3, #8]
 8003fb0:	683b      	ldr	r3, [r7, #0]
 8003fb2:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	689b      	ldr	r3, [r3, #8]
 8003fb8:	683a      	ldr	r2, [r7, #0]
 8003fba:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	683a      	ldr	r2, [r7, #0]
 8003fc0:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8003fc2:	683b      	ldr	r3, [r7, #0]
 8003fc4:	687a      	ldr	r2, [r7, #4]
 8003fc6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	1c5a      	adds	r2, r3, #1
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	601a      	str	r2, [r3, #0]
}
 8003fd2:	bf00      	nop
 8003fd4:	3714      	adds	r7, #20
 8003fd6:	46bd      	mov	sp, r7
 8003fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fdc:	4770      	bx	lr

08003fde <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003fde:	b480      	push	{r7}
 8003fe0:	b085      	sub	sp, #20
 8003fe2:	af00      	add	r7, sp, #0
 8003fe4:	6078      	str	r0, [r7, #4]
 8003fe6:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8003fe8:	683b      	ldr	r3, [r7, #0]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8003fee:	68bb      	ldr	r3, [r7, #8]
 8003ff0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ff4:	d103      	bne.n	8003ffe <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	691b      	ldr	r3, [r3, #16]
 8003ffa:	60fb      	str	r3, [r7, #12]
 8003ffc:	e00c      	b.n	8004018 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	3308      	adds	r3, #8
 8004002:	60fb      	str	r3, [r7, #12]
 8004004:	e002      	b.n	800400c <vListInsert+0x2e>
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	685b      	ldr	r3, [r3, #4]
 800400a:	60fb      	str	r3, [r7, #12]
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	685b      	ldr	r3, [r3, #4]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	68ba      	ldr	r2, [r7, #8]
 8004014:	429a      	cmp	r2, r3
 8004016:	d2f6      	bcs.n	8004006 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	685a      	ldr	r2, [r3, #4]
 800401c:	683b      	ldr	r3, [r7, #0]
 800401e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8004020:	683b      	ldr	r3, [r7, #0]
 8004022:	685b      	ldr	r3, [r3, #4]
 8004024:	683a      	ldr	r2, [r7, #0]
 8004026:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8004028:	683b      	ldr	r3, [r7, #0]
 800402a:	68fa      	ldr	r2, [r7, #12]
 800402c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	683a      	ldr	r2, [r7, #0]
 8004032:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8004034:	683b      	ldr	r3, [r7, #0]
 8004036:	687a      	ldr	r2, [r7, #4]
 8004038:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	1c5a      	adds	r2, r3, #1
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	601a      	str	r2, [r3, #0]
}
 8004044:	bf00      	nop
 8004046:	3714      	adds	r7, #20
 8004048:	46bd      	mov	sp, r7
 800404a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800404e:	4770      	bx	lr

08004050 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8004050:	b480      	push	{r7}
 8004052:	b085      	sub	sp, #20
 8004054:	af00      	add	r7, sp, #0
 8004056:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	691b      	ldr	r3, [r3, #16]
 800405c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	685b      	ldr	r3, [r3, #4]
 8004062:	687a      	ldr	r2, [r7, #4]
 8004064:	6892      	ldr	r2, [r2, #8]
 8004066:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	689b      	ldr	r3, [r3, #8]
 800406c:	687a      	ldr	r2, [r7, #4]
 800406e:	6852      	ldr	r2, [r2, #4]
 8004070:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	685b      	ldr	r3, [r3, #4]
 8004076:	687a      	ldr	r2, [r7, #4]
 8004078:	429a      	cmp	r2, r3
 800407a:	d103      	bne.n	8004084 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	689a      	ldr	r2, [r3, #8]
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	2200      	movs	r2, #0
 8004088:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	1e5a      	subs	r2, r3, #1
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	681b      	ldr	r3, [r3, #0]
}
 8004098:	4618      	mov	r0, r3
 800409a:	3714      	adds	r7, #20
 800409c:	46bd      	mov	sp, r7
 800409e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040a2:	4770      	bx	lr

080040a4 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80040a4:	b580      	push	{r7, lr}
 80040a6:	b084      	sub	sp, #16
 80040a8:	af00      	add	r7, sp, #0
 80040aa:	6078      	str	r0, [r7, #4]
 80040ac:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	2b00      	cmp	r3, #0
 80040b6:	d10b      	bne.n	80040d0 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80040b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80040bc:	b672      	cpsid	i
 80040be:	f383 8811 	msr	BASEPRI, r3
 80040c2:	f3bf 8f6f 	isb	sy
 80040c6:	f3bf 8f4f 	dsb	sy
 80040ca:	b662      	cpsie	i
 80040cc:	60bb      	str	r3, [r7, #8]
 80040ce:	e7fe      	b.n	80040ce <xQueueGenericReset+0x2a>

	taskENTER_CRITICAL();
 80040d0:	f002 f842 	bl	8006158 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	681a      	ldr	r2, [r3, #0]
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80040dc:	68f9      	ldr	r1, [r7, #12]
 80040de:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80040e0:	fb01 f303 	mul.w	r3, r1, r3
 80040e4:	441a      	add	r2, r3
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	2200      	movs	r2, #0
 80040ee:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	681a      	ldr	r2, [r3, #0]
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	681a      	ldr	r2, [r3, #0]
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004100:	3b01      	subs	r3, #1
 8004102:	68f9      	ldr	r1, [r7, #12]
 8004104:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8004106:	fb01 f303 	mul.w	r3, r1, r3
 800410a:	441a      	add	r2, r3
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	22ff      	movs	r2, #255	; 0xff
 8004114:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	22ff      	movs	r2, #255	; 0xff
 800411c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8004120:	683b      	ldr	r3, [r7, #0]
 8004122:	2b00      	cmp	r3, #0
 8004124:	d114      	bne.n	8004150 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	691b      	ldr	r3, [r3, #16]
 800412a:	2b00      	cmp	r3, #0
 800412c:	d01a      	beq.n	8004164 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	3310      	adds	r3, #16
 8004132:	4618      	mov	r0, r3
 8004134:	f001 f916 	bl	8005364 <xTaskRemoveFromEventList>
 8004138:	4603      	mov	r3, r0
 800413a:	2b00      	cmp	r3, #0
 800413c:	d012      	beq.n	8004164 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800413e:	4b0d      	ldr	r3, [pc, #52]	; (8004174 <xQueueGenericReset+0xd0>)
 8004140:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004144:	601a      	str	r2, [r3, #0]
 8004146:	f3bf 8f4f 	dsb	sy
 800414a:	f3bf 8f6f 	isb	sy
 800414e:	e009      	b.n	8004164 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	3310      	adds	r3, #16
 8004154:	4618      	mov	r0, r3
 8004156:	f7ff fef1 	bl	8003f3c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	3324      	adds	r3, #36	; 0x24
 800415e:	4618      	mov	r0, r3
 8004160:	f7ff feec 	bl	8003f3c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8004164:	f002 f82a 	bl	80061bc <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8004168:	2301      	movs	r3, #1
}
 800416a:	4618      	mov	r0, r3
 800416c:	3710      	adds	r7, #16
 800416e:	46bd      	mov	sp, r7
 8004170:	bd80      	pop	{r7, pc}
 8004172:	bf00      	nop
 8004174:	e000ed04 	.word	0xe000ed04

08004178 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8004178:	b580      	push	{r7, lr}
 800417a:	b08e      	sub	sp, #56	; 0x38
 800417c:	af02      	add	r7, sp, #8
 800417e:	60f8      	str	r0, [r7, #12]
 8004180:	60b9      	str	r1, [r7, #8]
 8004182:	607a      	str	r2, [r7, #4]
 8004184:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	2b00      	cmp	r3, #0
 800418a:	d10b      	bne.n	80041a4 <xQueueGenericCreateStatic+0x2c>
 800418c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004190:	b672      	cpsid	i
 8004192:	f383 8811 	msr	BASEPRI, r3
 8004196:	f3bf 8f6f 	isb	sy
 800419a:	f3bf 8f4f 	dsb	sy
 800419e:	b662      	cpsie	i
 80041a0:	62bb      	str	r3, [r7, #40]	; 0x28
 80041a2:	e7fe      	b.n	80041a2 <xQueueGenericCreateStatic+0x2a>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80041a4:	683b      	ldr	r3, [r7, #0]
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	d10b      	bne.n	80041c2 <xQueueGenericCreateStatic+0x4a>
 80041aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041ae:	b672      	cpsid	i
 80041b0:	f383 8811 	msr	BASEPRI, r3
 80041b4:	f3bf 8f6f 	isb	sy
 80041b8:	f3bf 8f4f 	dsb	sy
 80041bc:	b662      	cpsie	i
 80041be:	627b      	str	r3, [r7, #36]	; 0x24
 80041c0:	e7fe      	b.n	80041c0 <xQueueGenericCreateStatic+0x48>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	2b00      	cmp	r3, #0
 80041c6:	d002      	beq.n	80041ce <xQueueGenericCreateStatic+0x56>
 80041c8:	68bb      	ldr	r3, [r7, #8]
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	d001      	beq.n	80041d2 <xQueueGenericCreateStatic+0x5a>
 80041ce:	2301      	movs	r3, #1
 80041d0:	e000      	b.n	80041d4 <xQueueGenericCreateStatic+0x5c>
 80041d2:	2300      	movs	r3, #0
 80041d4:	2b00      	cmp	r3, #0
 80041d6:	d10b      	bne.n	80041f0 <xQueueGenericCreateStatic+0x78>
 80041d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041dc:	b672      	cpsid	i
 80041de:	f383 8811 	msr	BASEPRI, r3
 80041e2:	f3bf 8f6f 	isb	sy
 80041e6:	f3bf 8f4f 	dsb	sy
 80041ea:	b662      	cpsie	i
 80041ec:	623b      	str	r3, [r7, #32]
 80041ee:	e7fe      	b.n	80041ee <xQueueGenericCreateStatic+0x76>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d102      	bne.n	80041fc <xQueueGenericCreateStatic+0x84>
 80041f6:	68bb      	ldr	r3, [r7, #8]
 80041f8:	2b00      	cmp	r3, #0
 80041fa:	d101      	bne.n	8004200 <xQueueGenericCreateStatic+0x88>
 80041fc:	2301      	movs	r3, #1
 80041fe:	e000      	b.n	8004202 <xQueueGenericCreateStatic+0x8a>
 8004200:	2300      	movs	r3, #0
 8004202:	2b00      	cmp	r3, #0
 8004204:	d10b      	bne.n	800421e <xQueueGenericCreateStatic+0xa6>
 8004206:	f04f 0350 	mov.w	r3, #80	; 0x50
 800420a:	b672      	cpsid	i
 800420c:	f383 8811 	msr	BASEPRI, r3
 8004210:	f3bf 8f6f 	isb	sy
 8004214:	f3bf 8f4f 	dsb	sy
 8004218:	b662      	cpsie	i
 800421a:	61fb      	str	r3, [r7, #28]
 800421c:	e7fe      	b.n	800421c <xQueueGenericCreateStatic+0xa4>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800421e:	2350      	movs	r3, #80	; 0x50
 8004220:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8004222:	697b      	ldr	r3, [r7, #20]
 8004224:	2b50      	cmp	r3, #80	; 0x50
 8004226:	d00b      	beq.n	8004240 <xQueueGenericCreateStatic+0xc8>
 8004228:	f04f 0350 	mov.w	r3, #80	; 0x50
 800422c:	b672      	cpsid	i
 800422e:	f383 8811 	msr	BASEPRI, r3
 8004232:	f3bf 8f6f 	isb	sy
 8004236:	f3bf 8f4f 	dsb	sy
 800423a:	b662      	cpsie	i
 800423c:	61bb      	str	r3, [r7, #24]
 800423e:	e7fe      	b.n	800423e <xQueueGenericCreateStatic+0xc6>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8004240:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004242:	683b      	ldr	r3, [r7, #0]
 8004244:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8004246:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004248:	2b00      	cmp	r3, #0
 800424a:	d00d      	beq.n	8004268 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800424c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800424e:	2201      	movs	r2, #1
 8004250:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8004254:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8004258:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800425a:	9300      	str	r3, [sp, #0]
 800425c:	4613      	mov	r3, r2
 800425e:	687a      	ldr	r2, [r7, #4]
 8004260:	68b9      	ldr	r1, [r7, #8]
 8004262:	68f8      	ldr	r0, [r7, #12]
 8004264:	f000 f805 	bl	8004272 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8004268:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800426a:	4618      	mov	r0, r3
 800426c:	3730      	adds	r7, #48	; 0x30
 800426e:	46bd      	mov	sp, r7
 8004270:	bd80      	pop	{r7, pc}

08004272 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8004272:	b580      	push	{r7, lr}
 8004274:	b084      	sub	sp, #16
 8004276:	af00      	add	r7, sp, #0
 8004278:	60f8      	str	r0, [r7, #12]
 800427a:	60b9      	str	r1, [r7, #8]
 800427c:	607a      	str	r2, [r7, #4]
 800427e:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8004280:	68bb      	ldr	r3, [r7, #8]
 8004282:	2b00      	cmp	r3, #0
 8004284:	d103      	bne.n	800428e <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8004286:	69bb      	ldr	r3, [r7, #24]
 8004288:	69ba      	ldr	r2, [r7, #24]
 800428a:	601a      	str	r2, [r3, #0]
 800428c:	e002      	b.n	8004294 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800428e:	69bb      	ldr	r3, [r7, #24]
 8004290:	687a      	ldr	r2, [r7, #4]
 8004292:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8004294:	69bb      	ldr	r3, [r7, #24]
 8004296:	68fa      	ldr	r2, [r7, #12]
 8004298:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800429a:	69bb      	ldr	r3, [r7, #24]
 800429c:	68ba      	ldr	r2, [r7, #8]
 800429e:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80042a0:	2101      	movs	r1, #1
 80042a2:	69b8      	ldr	r0, [r7, #24]
 80042a4:	f7ff fefe 	bl	80040a4 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80042a8:	69bb      	ldr	r3, [r7, #24]
 80042aa:	78fa      	ldrb	r2, [r7, #3]
 80042ac:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80042b0:	bf00      	nop
 80042b2:	3710      	adds	r7, #16
 80042b4:	46bd      	mov	sp, r7
 80042b6:	bd80      	pop	{r7, pc}

080042b8 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80042b8:	b580      	push	{r7, lr}
 80042ba:	b08e      	sub	sp, #56	; 0x38
 80042bc:	af00      	add	r7, sp, #0
 80042be:	60f8      	str	r0, [r7, #12]
 80042c0:	60b9      	str	r1, [r7, #8]
 80042c2:	607a      	str	r2, [r7, #4]
 80042c4:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80042c6:	2300      	movs	r3, #0
 80042c8:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80042ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	d10b      	bne.n	80042ec <xQueueGenericSend+0x34>
 80042d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042d8:	b672      	cpsid	i
 80042da:	f383 8811 	msr	BASEPRI, r3
 80042de:	f3bf 8f6f 	isb	sy
 80042e2:	f3bf 8f4f 	dsb	sy
 80042e6:	b662      	cpsie	i
 80042e8:	62bb      	str	r3, [r7, #40]	; 0x28
 80042ea:	e7fe      	b.n	80042ea <xQueueGenericSend+0x32>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80042ec:	68bb      	ldr	r3, [r7, #8]
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	d103      	bne.n	80042fa <xQueueGenericSend+0x42>
 80042f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	d101      	bne.n	80042fe <xQueueGenericSend+0x46>
 80042fa:	2301      	movs	r3, #1
 80042fc:	e000      	b.n	8004300 <xQueueGenericSend+0x48>
 80042fe:	2300      	movs	r3, #0
 8004300:	2b00      	cmp	r3, #0
 8004302:	d10b      	bne.n	800431c <xQueueGenericSend+0x64>
 8004304:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004308:	b672      	cpsid	i
 800430a:	f383 8811 	msr	BASEPRI, r3
 800430e:	f3bf 8f6f 	isb	sy
 8004312:	f3bf 8f4f 	dsb	sy
 8004316:	b662      	cpsie	i
 8004318:	627b      	str	r3, [r7, #36]	; 0x24
 800431a:	e7fe      	b.n	800431a <xQueueGenericSend+0x62>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800431c:	683b      	ldr	r3, [r7, #0]
 800431e:	2b02      	cmp	r3, #2
 8004320:	d103      	bne.n	800432a <xQueueGenericSend+0x72>
 8004322:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004324:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004326:	2b01      	cmp	r3, #1
 8004328:	d101      	bne.n	800432e <xQueueGenericSend+0x76>
 800432a:	2301      	movs	r3, #1
 800432c:	e000      	b.n	8004330 <xQueueGenericSend+0x78>
 800432e:	2300      	movs	r3, #0
 8004330:	2b00      	cmp	r3, #0
 8004332:	d10b      	bne.n	800434c <xQueueGenericSend+0x94>
 8004334:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004338:	b672      	cpsid	i
 800433a:	f383 8811 	msr	BASEPRI, r3
 800433e:	f3bf 8f6f 	isb	sy
 8004342:	f3bf 8f4f 	dsb	sy
 8004346:	b662      	cpsie	i
 8004348:	623b      	str	r3, [r7, #32]
 800434a:	e7fe      	b.n	800434a <xQueueGenericSend+0x92>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800434c:	f001 f9c8 	bl	80056e0 <xTaskGetSchedulerState>
 8004350:	4603      	mov	r3, r0
 8004352:	2b00      	cmp	r3, #0
 8004354:	d102      	bne.n	800435c <xQueueGenericSend+0xa4>
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	2b00      	cmp	r3, #0
 800435a:	d101      	bne.n	8004360 <xQueueGenericSend+0xa8>
 800435c:	2301      	movs	r3, #1
 800435e:	e000      	b.n	8004362 <xQueueGenericSend+0xaa>
 8004360:	2300      	movs	r3, #0
 8004362:	2b00      	cmp	r3, #0
 8004364:	d10b      	bne.n	800437e <xQueueGenericSend+0xc6>
 8004366:	f04f 0350 	mov.w	r3, #80	; 0x50
 800436a:	b672      	cpsid	i
 800436c:	f383 8811 	msr	BASEPRI, r3
 8004370:	f3bf 8f6f 	isb	sy
 8004374:	f3bf 8f4f 	dsb	sy
 8004378:	b662      	cpsie	i
 800437a:	61fb      	str	r3, [r7, #28]
 800437c:	e7fe      	b.n	800437c <xQueueGenericSend+0xc4>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800437e:	f001 feeb 	bl	8006158 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004382:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004384:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004386:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004388:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800438a:	429a      	cmp	r2, r3
 800438c:	d302      	bcc.n	8004394 <xQueueGenericSend+0xdc>
 800438e:	683b      	ldr	r3, [r7, #0]
 8004390:	2b02      	cmp	r3, #2
 8004392:	d129      	bne.n	80043e8 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004394:	683a      	ldr	r2, [r7, #0]
 8004396:	68b9      	ldr	r1, [r7, #8]
 8004398:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800439a:	f000 fa0d 	bl	80047b8 <prvCopyDataToQueue>
 800439e:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80043a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80043a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043a4:	2b00      	cmp	r3, #0
 80043a6:	d010      	beq.n	80043ca <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80043a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80043aa:	3324      	adds	r3, #36	; 0x24
 80043ac:	4618      	mov	r0, r3
 80043ae:	f000 ffd9 	bl	8005364 <xTaskRemoveFromEventList>
 80043b2:	4603      	mov	r3, r0
 80043b4:	2b00      	cmp	r3, #0
 80043b6:	d013      	beq.n	80043e0 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80043b8:	4b3f      	ldr	r3, [pc, #252]	; (80044b8 <xQueueGenericSend+0x200>)
 80043ba:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80043be:	601a      	str	r2, [r3, #0]
 80043c0:	f3bf 8f4f 	dsb	sy
 80043c4:	f3bf 8f6f 	isb	sy
 80043c8:	e00a      	b.n	80043e0 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80043ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80043cc:	2b00      	cmp	r3, #0
 80043ce:	d007      	beq.n	80043e0 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80043d0:	4b39      	ldr	r3, [pc, #228]	; (80044b8 <xQueueGenericSend+0x200>)
 80043d2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80043d6:	601a      	str	r2, [r3, #0]
 80043d8:	f3bf 8f4f 	dsb	sy
 80043dc:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80043e0:	f001 feec 	bl	80061bc <vPortExitCritical>
				return pdPASS;
 80043e4:	2301      	movs	r3, #1
 80043e6:	e063      	b.n	80044b0 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d103      	bne.n	80043f6 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80043ee:	f001 fee5 	bl	80061bc <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80043f2:	2300      	movs	r3, #0
 80043f4:	e05c      	b.n	80044b0 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 80043f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80043f8:	2b00      	cmp	r3, #0
 80043fa:	d106      	bne.n	800440a <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80043fc:	f107 0314 	add.w	r3, r7, #20
 8004400:	4618      	mov	r0, r3
 8004402:	f001 f813 	bl	800542c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004406:	2301      	movs	r3, #1
 8004408:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800440a:	f001 fed7 	bl	80061bc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800440e:	f000 fd83 	bl	8004f18 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004412:	f001 fea1 	bl	8006158 <vPortEnterCritical>
 8004416:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004418:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800441c:	b25b      	sxtb	r3, r3
 800441e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004422:	d103      	bne.n	800442c <xQueueGenericSend+0x174>
 8004424:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004426:	2200      	movs	r2, #0
 8004428:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800442c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800442e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004432:	b25b      	sxtb	r3, r3
 8004434:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004438:	d103      	bne.n	8004442 <xQueueGenericSend+0x18a>
 800443a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800443c:	2200      	movs	r2, #0
 800443e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004442:	f001 febb 	bl	80061bc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004446:	1d3a      	adds	r2, r7, #4
 8004448:	f107 0314 	add.w	r3, r7, #20
 800444c:	4611      	mov	r1, r2
 800444e:	4618      	mov	r0, r3
 8004450:	f001 f802 	bl	8005458 <xTaskCheckForTimeOut>
 8004454:	4603      	mov	r3, r0
 8004456:	2b00      	cmp	r3, #0
 8004458:	d124      	bne.n	80044a4 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800445a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800445c:	f000 faa4 	bl	80049a8 <prvIsQueueFull>
 8004460:	4603      	mov	r3, r0
 8004462:	2b00      	cmp	r3, #0
 8004464:	d018      	beq.n	8004498 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8004466:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004468:	3310      	adds	r3, #16
 800446a:	687a      	ldr	r2, [r7, #4]
 800446c:	4611      	mov	r1, r2
 800446e:	4618      	mov	r0, r3
 8004470:	f000 ff26 	bl	80052c0 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8004474:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004476:	f000 fa2f 	bl	80048d8 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800447a:	f000 fd5b 	bl	8004f34 <xTaskResumeAll>
 800447e:	4603      	mov	r3, r0
 8004480:	2b00      	cmp	r3, #0
 8004482:	f47f af7c 	bne.w	800437e <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8004486:	4b0c      	ldr	r3, [pc, #48]	; (80044b8 <xQueueGenericSend+0x200>)
 8004488:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800448c:	601a      	str	r2, [r3, #0]
 800448e:	f3bf 8f4f 	dsb	sy
 8004492:	f3bf 8f6f 	isb	sy
 8004496:	e772      	b.n	800437e <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8004498:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800449a:	f000 fa1d 	bl	80048d8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800449e:	f000 fd49 	bl	8004f34 <xTaskResumeAll>
 80044a2:	e76c      	b.n	800437e <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80044a4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80044a6:	f000 fa17 	bl	80048d8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80044aa:	f000 fd43 	bl	8004f34 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80044ae:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80044b0:	4618      	mov	r0, r3
 80044b2:	3738      	adds	r7, #56	; 0x38
 80044b4:	46bd      	mov	sp, r7
 80044b6:	bd80      	pop	{r7, pc}
 80044b8:	e000ed04 	.word	0xe000ed04

080044bc <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80044bc:	b580      	push	{r7, lr}
 80044be:	b08e      	sub	sp, #56	; 0x38
 80044c0:	af00      	add	r7, sp, #0
 80044c2:	60f8      	str	r0, [r7, #12]
 80044c4:	60b9      	str	r1, [r7, #8]
 80044c6:	607a      	str	r2, [r7, #4]
 80044c8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80044ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044d0:	2b00      	cmp	r3, #0
 80044d2:	d10b      	bne.n	80044ec <xQueueGenericSendFromISR+0x30>
 80044d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044d8:	b672      	cpsid	i
 80044da:	f383 8811 	msr	BASEPRI, r3
 80044de:	f3bf 8f6f 	isb	sy
 80044e2:	f3bf 8f4f 	dsb	sy
 80044e6:	b662      	cpsie	i
 80044e8:	627b      	str	r3, [r7, #36]	; 0x24
 80044ea:	e7fe      	b.n	80044ea <xQueueGenericSendFromISR+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80044ec:	68bb      	ldr	r3, [r7, #8]
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	d103      	bne.n	80044fa <xQueueGenericSendFromISR+0x3e>
 80044f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	d101      	bne.n	80044fe <xQueueGenericSendFromISR+0x42>
 80044fa:	2301      	movs	r3, #1
 80044fc:	e000      	b.n	8004500 <xQueueGenericSendFromISR+0x44>
 80044fe:	2300      	movs	r3, #0
 8004500:	2b00      	cmp	r3, #0
 8004502:	d10b      	bne.n	800451c <xQueueGenericSendFromISR+0x60>
 8004504:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004508:	b672      	cpsid	i
 800450a:	f383 8811 	msr	BASEPRI, r3
 800450e:	f3bf 8f6f 	isb	sy
 8004512:	f3bf 8f4f 	dsb	sy
 8004516:	b662      	cpsie	i
 8004518:	623b      	str	r3, [r7, #32]
 800451a:	e7fe      	b.n	800451a <xQueueGenericSendFromISR+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800451c:	683b      	ldr	r3, [r7, #0]
 800451e:	2b02      	cmp	r3, #2
 8004520:	d103      	bne.n	800452a <xQueueGenericSendFromISR+0x6e>
 8004522:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004524:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004526:	2b01      	cmp	r3, #1
 8004528:	d101      	bne.n	800452e <xQueueGenericSendFromISR+0x72>
 800452a:	2301      	movs	r3, #1
 800452c:	e000      	b.n	8004530 <xQueueGenericSendFromISR+0x74>
 800452e:	2300      	movs	r3, #0
 8004530:	2b00      	cmp	r3, #0
 8004532:	d10b      	bne.n	800454c <xQueueGenericSendFromISR+0x90>
 8004534:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004538:	b672      	cpsid	i
 800453a:	f383 8811 	msr	BASEPRI, r3
 800453e:	f3bf 8f6f 	isb	sy
 8004542:	f3bf 8f4f 	dsb	sy
 8004546:	b662      	cpsie	i
 8004548:	61fb      	str	r3, [r7, #28]
 800454a:	e7fe      	b.n	800454a <xQueueGenericSendFromISR+0x8e>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800454c:	f001 fee4 	bl	8006318 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8004550:	f3ef 8211 	mrs	r2, BASEPRI
 8004554:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004558:	b672      	cpsid	i
 800455a:	f383 8811 	msr	BASEPRI, r3
 800455e:	f3bf 8f6f 	isb	sy
 8004562:	f3bf 8f4f 	dsb	sy
 8004566:	b662      	cpsie	i
 8004568:	61ba      	str	r2, [r7, #24]
 800456a:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800456c:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800456e:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004570:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004572:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004574:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004576:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004578:	429a      	cmp	r2, r3
 800457a:	d302      	bcc.n	8004582 <xQueueGenericSendFromISR+0xc6>
 800457c:	683b      	ldr	r3, [r7, #0]
 800457e:	2b02      	cmp	r3, #2
 8004580:	d12c      	bne.n	80045dc <xQueueGenericSendFromISR+0x120>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8004582:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004584:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004588:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800458c:	683a      	ldr	r2, [r7, #0]
 800458e:	68b9      	ldr	r1, [r7, #8]
 8004590:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004592:	f000 f911 	bl	80047b8 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8004596:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 800459a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800459e:	d112      	bne.n	80045c6 <xQueueGenericSendFromISR+0x10a>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80045a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	d016      	beq.n	80045d6 <xQueueGenericSendFromISR+0x11a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80045a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045aa:	3324      	adds	r3, #36	; 0x24
 80045ac:	4618      	mov	r0, r3
 80045ae:	f000 fed9 	bl	8005364 <xTaskRemoveFromEventList>
 80045b2:	4603      	mov	r3, r0
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	d00e      	beq.n	80045d6 <xQueueGenericSendFromISR+0x11a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	d00b      	beq.n	80045d6 <xQueueGenericSendFromISR+0x11a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	2201      	movs	r2, #1
 80045c2:	601a      	str	r2, [r3, #0]
 80045c4:	e007      	b.n	80045d6 <xQueueGenericSendFromISR+0x11a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80045c6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80045ca:	3301      	adds	r3, #1
 80045cc:	b2db      	uxtb	r3, r3
 80045ce:	b25a      	sxtb	r2, r3
 80045d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045d2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80045d6:	2301      	movs	r3, #1
 80045d8:	637b      	str	r3, [r7, #52]	; 0x34
		{
 80045da:	e001      	b.n	80045e0 <xQueueGenericSendFromISR+0x124>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80045dc:	2300      	movs	r3, #0
 80045de:	637b      	str	r3, [r7, #52]	; 0x34
 80045e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80045e2:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80045e4:	693b      	ldr	r3, [r7, #16]
 80045e6:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80045ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80045ec:	4618      	mov	r0, r3
 80045ee:	3738      	adds	r7, #56	; 0x38
 80045f0:	46bd      	mov	sp, r7
 80045f2:	bd80      	pop	{r7, pc}

080045f4 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80045f4:	b580      	push	{r7, lr}
 80045f6:	b08c      	sub	sp, #48	; 0x30
 80045f8:	af00      	add	r7, sp, #0
 80045fa:	60f8      	str	r0, [r7, #12]
 80045fc:	60b9      	str	r1, [r7, #8]
 80045fe:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8004600:	2300      	movs	r3, #0
 8004602:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8004608:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800460a:	2b00      	cmp	r3, #0
 800460c:	d10b      	bne.n	8004626 <xQueueReceive+0x32>
	__asm volatile
 800460e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004612:	b672      	cpsid	i
 8004614:	f383 8811 	msr	BASEPRI, r3
 8004618:	f3bf 8f6f 	isb	sy
 800461c:	f3bf 8f4f 	dsb	sy
 8004620:	b662      	cpsie	i
 8004622:	623b      	str	r3, [r7, #32]
 8004624:	e7fe      	b.n	8004624 <xQueueReceive+0x30>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004626:	68bb      	ldr	r3, [r7, #8]
 8004628:	2b00      	cmp	r3, #0
 800462a:	d103      	bne.n	8004634 <xQueueReceive+0x40>
 800462c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800462e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004630:	2b00      	cmp	r3, #0
 8004632:	d101      	bne.n	8004638 <xQueueReceive+0x44>
 8004634:	2301      	movs	r3, #1
 8004636:	e000      	b.n	800463a <xQueueReceive+0x46>
 8004638:	2300      	movs	r3, #0
 800463a:	2b00      	cmp	r3, #0
 800463c:	d10b      	bne.n	8004656 <xQueueReceive+0x62>
 800463e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004642:	b672      	cpsid	i
 8004644:	f383 8811 	msr	BASEPRI, r3
 8004648:	f3bf 8f6f 	isb	sy
 800464c:	f3bf 8f4f 	dsb	sy
 8004650:	b662      	cpsie	i
 8004652:	61fb      	str	r3, [r7, #28]
 8004654:	e7fe      	b.n	8004654 <xQueueReceive+0x60>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004656:	f001 f843 	bl	80056e0 <xTaskGetSchedulerState>
 800465a:	4603      	mov	r3, r0
 800465c:	2b00      	cmp	r3, #0
 800465e:	d102      	bne.n	8004666 <xQueueReceive+0x72>
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	2b00      	cmp	r3, #0
 8004664:	d101      	bne.n	800466a <xQueueReceive+0x76>
 8004666:	2301      	movs	r3, #1
 8004668:	e000      	b.n	800466c <xQueueReceive+0x78>
 800466a:	2300      	movs	r3, #0
 800466c:	2b00      	cmp	r3, #0
 800466e:	d10b      	bne.n	8004688 <xQueueReceive+0x94>
 8004670:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004674:	b672      	cpsid	i
 8004676:	f383 8811 	msr	BASEPRI, r3
 800467a:	f3bf 8f6f 	isb	sy
 800467e:	f3bf 8f4f 	dsb	sy
 8004682:	b662      	cpsie	i
 8004684:	61bb      	str	r3, [r7, #24]
 8004686:	e7fe      	b.n	8004686 <xQueueReceive+0x92>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004688:	f001 fd66 	bl	8006158 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800468c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800468e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004690:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004692:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004694:	2b00      	cmp	r3, #0
 8004696:	d01f      	beq.n	80046d8 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8004698:	68b9      	ldr	r1, [r7, #8]
 800469a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800469c:	f000 f8f6 	bl	800488c <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80046a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046a2:	1e5a      	subs	r2, r3, #1
 80046a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046a6:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80046a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046aa:	691b      	ldr	r3, [r3, #16]
 80046ac:	2b00      	cmp	r3, #0
 80046ae:	d00f      	beq.n	80046d0 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80046b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046b2:	3310      	adds	r3, #16
 80046b4:	4618      	mov	r0, r3
 80046b6:	f000 fe55 	bl	8005364 <xTaskRemoveFromEventList>
 80046ba:	4603      	mov	r3, r0
 80046bc:	2b00      	cmp	r3, #0
 80046be:	d007      	beq.n	80046d0 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80046c0:	4b3c      	ldr	r3, [pc, #240]	; (80047b4 <xQueueReceive+0x1c0>)
 80046c2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80046c6:	601a      	str	r2, [r3, #0]
 80046c8:	f3bf 8f4f 	dsb	sy
 80046cc:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80046d0:	f001 fd74 	bl	80061bc <vPortExitCritical>
				return pdPASS;
 80046d4:	2301      	movs	r3, #1
 80046d6:	e069      	b.n	80047ac <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	2b00      	cmp	r3, #0
 80046dc:	d103      	bne.n	80046e6 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80046de:	f001 fd6d 	bl	80061bc <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80046e2:	2300      	movs	r3, #0
 80046e4:	e062      	b.n	80047ac <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 80046e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80046e8:	2b00      	cmp	r3, #0
 80046ea:	d106      	bne.n	80046fa <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80046ec:	f107 0310 	add.w	r3, r7, #16
 80046f0:	4618      	mov	r0, r3
 80046f2:	f000 fe9b 	bl	800542c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80046f6:	2301      	movs	r3, #1
 80046f8:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80046fa:	f001 fd5f 	bl	80061bc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80046fe:	f000 fc0b 	bl	8004f18 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004702:	f001 fd29 	bl	8006158 <vPortEnterCritical>
 8004706:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004708:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800470c:	b25b      	sxtb	r3, r3
 800470e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004712:	d103      	bne.n	800471c <xQueueReceive+0x128>
 8004714:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004716:	2200      	movs	r2, #0
 8004718:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800471c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800471e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004722:	b25b      	sxtb	r3, r3
 8004724:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004728:	d103      	bne.n	8004732 <xQueueReceive+0x13e>
 800472a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800472c:	2200      	movs	r2, #0
 800472e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004732:	f001 fd43 	bl	80061bc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004736:	1d3a      	adds	r2, r7, #4
 8004738:	f107 0310 	add.w	r3, r7, #16
 800473c:	4611      	mov	r1, r2
 800473e:	4618      	mov	r0, r3
 8004740:	f000 fe8a 	bl	8005458 <xTaskCheckForTimeOut>
 8004744:	4603      	mov	r3, r0
 8004746:	2b00      	cmp	r3, #0
 8004748:	d123      	bne.n	8004792 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800474a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800474c:	f000 f916 	bl	800497c <prvIsQueueEmpty>
 8004750:	4603      	mov	r3, r0
 8004752:	2b00      	cmp	r3, #0
 8004754:	d017      	beq.n	8004786 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8004756:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004758:	3324      	adds	r3, #36	; 0x24
 800475a:	687a      	ldr	r2, [r7, #4]
 800475c:	4611      	mov	r1, r2
 800475e:	4618      	mov	r0, r3
 8004760:	f000 fdae 	bl	80052c0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8004764:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004766:	f000 f8b7 	bl	80048d8 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800476a:	f000 fbe3 	bl	8004f34 <xTaskResumeAll>
 800476e:	4603      	mov	r3, r0
 8004770:	2b00      	cmp	r3, #0
 8004772:	d189      	bne.n	8004688 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8004774:	4b0f      	ldr	r3, [pc, #60]	; (80047b4 <xQueueReceive+0x1c0>)
 8004776:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800477a:	601a      	str	r2, [r3, #0]
 800477c:	f3bf 8f4f 	dsb	sy
 8004780:	f3bf 8f6f 	isb	sy
 8004784:	e780      	b.n	8004688 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8004786:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004788:	f000 f8a6 	bl	80048d8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800478c:	f000 fbd2 	bl	8004f34 <xTaskResumeAll>
 8004790:	e77a      	b.n	8004688 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8004792:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004794:	f000 f8a0 	bl	80048d8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004798:	f000 fbcc 	bl	8004f34 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800479c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800479e:	f000 f8ed 	bl	800497c <prvIsQueueEmpty>
 80047a2:	4603      	mov	r3, r0
 80047a4:	2b00      	cmp	r3, #0
 80047a6:	f43f af6f 	beq.w	8004688 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80047aa:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80047ac:	4618      	mov	r0, r3
 80047ae:	3730      	adds	r7, #48	; 0x30
 80047b0:	46bd      	mov	sp, r7
 80047b2:	bd80      	pop	{r7, pc}
 80047b4:	e000ed04 	.word	0xe000ed04

080047b8 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80047b8:	b580      	push	{r7, lr}
 80047ba:	b086      	sub	sp, #24
 80047bc:	af00      	add	r7, sp, #0
 80047be:	60f8      	str	r0, [r7, #12]
 80047c0:	60b9      	str	r1, [r7, #8]
 80047c2:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80047c4:	2300      	movs	r3, #0
 80047c6:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047cc:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	d10d      	bne.n	80047f2 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	2b00      	cmp	r3, #0
 80047dc:	d14d      	bne.n	800487a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	689b      	ldr	r3, [r3, #8]
 80047e2:	4618      	mov	r0, r3
 80047e4:	f000 ff9a 	bl	800571c <xTaskPriorityDisinherit>
 80047e8:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	2200      	movs	r2, #0
 80047ee:	609a      	str	r2, [r3, #8]
 80047f0:	e043      	b.n	800487a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	2b00      	cmp	r3, #0
 80047f6:	d119      	bne.n	800482c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	6858      	ldr	r0, [r3, #4]
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004800:	461a      	mov	r2, r3
 8004802:	68b9      	ldr	r1, [r7, #8]
 8004804:	f001 ffd4 	bl	80067b0 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	685a      	ldr	r2, [r3, #4]
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004810:	441a      	add	r2, r3
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	685a      	ldr	r2, [r3, #4]
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	689b      	ldr	r3, [r3, #8]
 800481e:	429a      	cmp	r2, r3
 8004820:	d32b      	bcc.n	800487a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	681a      	ldr	r2, [r3, #0]
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	605a      	str	r2, [r3, #4]
 800482a:	e026      	b.n	800487a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	68d8      	ldr	r0, [r3, #12]
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004834:	461a      	mov	r2, r3
 8004836:	68b9      	ldr	r1, [r7, #8]
 8004838:	f001 ffba 	bl	80067b0 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	68da      	ldr	r2, [r3, #12]
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004844:	425b      	negs	r3, r3
 8004846:	441a      	add	r2, r3
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	68da      	ldr	r2, [r3, #12]
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	429a      	cmp	r2, r3
 8004856:	d207      	bcs.n	8004868 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	689a      	ldr	r2, [r3, #8]
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004860:	425b      	negs	r3, r3
 8004862:	441a      	add	r2, r3
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	2b02      	cmp	r3, #2
 800486c:	d105      	bne.n	800487a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800486e:	693b      	ldr	r3, [r7, #16]
 8004870:	2b00      	cmp	r3, #0
 8004872:	d002      	beq.n	800487a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8004874:	693b      	ldr	r3, [r7, #16]
 8004876:	3b01      	subs	r3, #1
 8004878:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800487a:	693b      	ldr	r3, [r7, #16]
 800487c:	1c5a      	adds	r2, r3, #1
 800487e:	68fb      	ldr	r3, [r7, #12]
 8004880:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8004882:	697b      	ldr	r3, [r7, #20]
}
 8004884:	4618      	mov	r0, r3
 8004886:	3718      	adds	r7, #24
 8004888:	46bd      	mov	sp, r7
 800488a:	bd80      	pop	{r7, pc}

0800488c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800488c:	b580      	push	{r7, lr}
 800488e:	b082      	sub	sp, #8
 8004890:	af00      	add	r7, sp, #0
 8004892:	6078      	str	r0, [r7, #4]
 8004894:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800489a:	2b00      	cmp	r3, #0
 800489c:	d018      	beq.n	80048d0 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	68da      	ldr	r2, [r3, #12]
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048a6:	441a      	add	r2, r3
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	68da      	ldr	r2, [r3, #12]
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	689b      	ldr	r3, [r3, #8]
 80048b4:	429a      	cmp	r2, r3
 80048b6:	d303      	bcc.n	80048c0 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	681a      	ldr	r2, [r3, #0]
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	68d9      	ldr	r1, [r3, #12]
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048c8:	461a      	mov	r2, r3
 80048ca:	6838      	ldr	r0, [r7, #0]
 80048cc:	f001 ff70 	bl	80067b0 <memcpy>
	}
}
 80048d0:	bf00      	nop
 80048d2:	3708      	adds	r7, #8
 80048d4:	46bd      	mov	sp, r7
 80048d6:	bd80      	pop	{r7, pc}

080048d8 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80048d8:	b580      	push	{r7, lr}
 80048da:	b084      	sub	sp, #16
 80048dc:	af00      	add	r7, sp, #0
 80048de:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80048e0:	f001 fc3a 	bl	8006158 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80048ea:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80048ec:	e011      	b.n	8004912 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	d012      	beq.n	800491c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	3324      	adds	r3, #36	; 0x24
 80048fa:	4618      	mov	r0, r3
 80048fc:	f000 fd32 	bl	8005364 <xTaskRemoveFromEventList>
 8004900:	4603      	mov	r3, r0
 8004902:	2b00      	cmp	r3, #0
 8004904:	d001      	beq.n	800490a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8004906:	f000 fe0b 	bl	8005520 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800490a:	7bfb      	ldrb	r3, [r7, #15]
 800490c:	3b01      	subs	r3, #1
 800490e:	b2db      	uxtb	r3, r3
 8004910:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004912:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004916:	2b00      	cmp	r3, #0
 8004918:	dce9      	bgt.n	80048ee <prvUnlockQueue+0x16>
 800491a:	e000      	b.n	800491e <prvUnlockQueue+0x46>
					break;
 800491c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	22ff      	movs	r2, #255	; 0xff
 8004922:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8004926:	f001 fc49 	bl	80061bc <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800492a:	f001 fc15 	bl	8006158 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004934:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004936:	e011      	b.n	800495c <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	691b      	ldr	r3, [r3, #16]
 800493c:	2b00      	cmp	r3, #0
 800493e:	d012      	beq.n	8004966 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	3310      	adds	r3, #16
 8004944:	4618      	mov	r0, r3
 8004946:	f000 fd0d 	bl	8005364 <xTaskRemoveFromEventList>
 800494a:	4603      	mov	r3, r0
 800494c:	2b00      	cmp	r3, #0
 800494e:	d001      	beq.n	8004954 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8004950:	f000 fde6 	bl	8005520 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8004954:	7bbb      	ldrb	r3, [r7, #14]
 8004956:	3b01      	subs	r3, #1
 8004958:	b2db      	uxtb	r3, r3
 800495a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800495c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8004960:	2b00      	cmp	r3, #0
 8004962:	dce9      	bgt.n	8004938 <prvUnlockQueue+0x60>
 8004964:	e000      	b.n	8004968 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8004966:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	22ff      	movs	r2, #255	; 0xff
 800496c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8004970:	f001 fc24 	bl	80061bc <vPortExitCritical>
}
 8004974:	bf00      	nop
 8004976:	3710      	adds	r7, #16
 8004978:	46bd      	mov	sp, r7
 800497a:	bd80      	pop	{r7, pc}

0800497c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800497c:	b580      	push	{r7, lr}
 800497e:	b084      	sub	sp, #16
 8004980:	af00      	add	r7, sp, #0
 8004982:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004984:	f001 fbe8 	bl	8006158 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800498c:	2b00      	cmp	r3, #0
 800498e:	d102      	bne.n	8004996 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8004990:	2301      	movs	r3, #1
 8004992:	60fb      	str	r3, [r7, #12]
 8004994:	e001      	b.n	800499a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8004996:	2300      	movs	r3, #0
 8004998:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800499a:	f001 fc0f 	bl	80061bc <vPortExitCritical>

	return xReturn;
 800499e:	68fb      	ldr	r3, [r7, #12]
}
 80049a0:	4618      	mov	r0, r3
 80049a2:	3710      	adds	r7, #16
 80049a4:	46bd      	mov	sp, r7
 80049a6:	bd80      	pop	{r7, pc}

080049a8 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80049a8:	b580      	push	{r7, lr}
 80049aa:	b084      	sub	sp, #16
 80049ac:	af00      	add	r7, sp, #0
 80049ae:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80049b0:	f001 fbd2 	bl	8006158 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80049bc:	429a      	cmp	r2, r3
 80049be:	d102      	bne.n	80049c6 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80049c0:	2301      	movs	r3, #1
 80049c2:	60fb      	str	r3, [r7, #12]
 80049c4:	e001      	b.n	80049ca <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80049c6:	2300      	movs	r3, #0
 80049c8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80049ca:	f001 fbf7 	bl	80061bc <vPortExitCritical>

	return xReturn;
 80049ce:	68fb      	ldr	r3, [r7, #12]
}
 80049d0:	4618      	mov	r0, r3
 80049d2:	3710      	adds	r7, #16
 80049d4:	46bd      	mov	sp, r7
 80049d6:	bd80      	pop	{r7, pc}

080049d8 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80049d8:	b480      	push	{r7}
 80049da:	b085      	sub	sp, #20
 80049dc:	af00      	add	r7, sp, #0
 80049de:	6078      	str	r0, [r7, #4]
 80049e0:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80049e2:	2300      	movs	r3, #0
 80049e4:	60fb      	str	r3, [r7, #12]
 80049e6:	e014      	b.n	8004a12 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80049e8:	4a0e      	ldr	r2, [pc, #56]	; (8004a24 <vQueueAddToRegistry+0x4c>)
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80049f0:	2b00      	cmp	r3, #0
 80049f2:	d10b      	bne.n	8004a0c <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80049f4:	490b      	ldr	r1, [pc, #44]	; (8004a24 <vQueueAddToRegistry+0x4c>)
 80049f6:	68fb      	ldr	r3, [r7, #12]
 80049f8:	683a      	ldr	r2, [r7, #0]
 80049fa:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80049fe:	4a09      	ldr	r2, [pc, #36]	; (8004a24 <vQueueAddToRegistry+0x4c>)
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	00db      	lsls	r3, r3, #3
 8004a04:	4413      	add	r3, r2
 8004a06:	687a      	ldr	r2, [r7, #4]
 8004a08:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8004a0a:	e005      	b.n	8004a18 <vQueueAddToRegistry+0x40>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004a0c:	68fb      	ldr	r3, [r7, #12]
 8004a0e:	3301      	adds	r3, #1
 8004a10:	60fb      	str	r3, [r7, #12]
 8004a12:	68fb      	ldr	r3, [r7, #12]
 8004a14:	2b07      	cmp	r3, #7
 8004a16:	d9e7      	bls.n	80049e8 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8004a18:	bf00      	nop
 8004a1a:	3714      	adds	r7, #20
 8004a1c:	46bd      	mov	sp, r7
 8004a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a22:	4770      	bx	lr
 8004a24:	20004ec8 	.word	0x20004ec8

08004a28 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8004a28:	b580      	push	{r7, lr}
 8004a2a:	b086      	sub	sp, #24
 8004a2c:	af00      	add	r7, sp, #0
 8004a2e:	60f8      	str	r0, [r7, #12]
 8004a30:	60b9      	str	r1, [r7, #8]
 8004a32:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8004a38:	f001 fb8e 	bl	8006158 <vPortEnterCritical>
 8004a3c:	697b      	ldr	r3, [r7, #20]
 8004a3e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004a42:	b25b      	sxtb	r3, r3
 8004a44:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a48:	d103      	bne.n	8004a52 <vQueueWaitForMessageRestricted+0x2a>
 8004a4a:	697b      	ldr	r3, [r7, #20]
 8004a4c:	2200      	movs	r2, #0
 8004a4e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004a52:	697b      	ldr	r3, [r7, #20]
 8004a54:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004a58:	b25b      	sxtb	r3, r3
 8004a5a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a5e:	d103      	bne.n	8004a68 <vQueueWaitForMessageRestricted+0x40>
 8004a60:	697b      	ldr	r3, [r7, #20]
 8004a62:	2200      	movs	r2, #0
 8004a64:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004a68:	f001 fba8 	bl	80061bc <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8004a6c:	697b      	ldr	r3, [r7, #20]
 8004a6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a70:	2b00      	cmp	r3, #0
 8004a72:	d106      	bne.n	8004a82 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8004a74:	697b      	ldr	r3, [r7, #20]
 8004a76:	3324      	adds	r3, #36	; 0x24
 8004a78:	687a      	ldr	r2, [r7, #4]
 8004a7a:	68b9      	ldr	r1, [r7, #8]
 8004a7c:	4618      	mov	r0, r3
 8004a7e:	f000 fc45 	bl	800530c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8004a82:	6978      	ldr	r0, [r7, #20]
 8004a84:	f7ff ff28 	bl	80048d8 <prvUnlockQueue>
	}
 8004a88:	bf00      	nop
 8004a8a:	3718      	adds	r7, #24
 8004a8c:	46bd      	mov	sp, r7
 8004a8e:	bd80      	pop	{r7, pc}

08004a90 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8004a90:	b580      	push	{r7, lr}
 8004a92:	b08e      	sub	sp, #56	; 0x38
 8004a94:	af04      	add	r7, sp, #16
 8004a96:	60f8      	str	r0, [r7, #12]
 8004a98:	60b9      	str	r1, [r7, #8]
 8004a9a:	607a      	str	r2, [r7, #4]
 8004a9c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8004a9e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004aa0:	2b00      	cmp	r3, #0
 8004aa2:	d10b      	bne.n	8004abc <xTaskCreateStatic+0x2c>
 8004aa4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004aa8:	b672      	cpsid	i
 8004aaa:	f383 8811 	msr	BASEPRI, r3
 8004aae:	f3bf 8f6f 	isb	sy
 8004ab2:	f3bf 8f4f 	dsb	sy
 8004ab6:	b662      	cpsie	i
 8004ab8:	623b      	str	r3, [r7, #32]
 8004aba:	e7fe      	b.n	8004aba <xTaskCreateStatic+0x2a>
		configASSERT( pxTaskBuffer != NULL );
 8004abc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004abe:	2b00      	cmp	r3, #0
 8004ac0:	d10b      	bne.n	8004ada <xTaskCreateStatic+0x4a>
 8004ac2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ac6:	b672      	cpsid	i
 8004ac8:	f383 8811 	msr	BASEPRI, r3
 8004acc:	f3bf 8f6f 	isb	sy
 8004ad0:	f3bf 8f4f 	dsb	sy
 8004ad4:	b662      	cpsie	i
 8004ad6:	61fb      	str	r3, [r7, #28]
 8004ad8:	e7fe      	b.n	8004ad8 <xTaskCreateStatic+0x48>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8004ada:	235c      	movs	r3, #92	; 0x5c
 8004adc:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8004ade:	693b      	ldr	r3, [r7, #16]
 8004ae0:	2b5c      	cmp	r3, #92	; 0x5c
 8004ae2:	d00b      	beq.n	8004afc <xTaskCreateStatic+0x6c>
 8004ae4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ae8:	b672      	cpsid	i
 8004aea:	f383 8811 	msr	BASEPRI, r3
 8004aee:	f3bf 8f6f 	isb	sy
 8004af2:	f3bf 8f4f 	dsb	sy
 8004af6:	b662      	cpsie	i
 8004af8:	61bb      	str	r3, [r7, #24]
 8004afa:	e7fe      	b.n	8004afa <xTaskCreateStatic+0x6a>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8004afc:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8004afe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b00:	2b00      	cmp	r3, #0
 8004b02:	d01e      	beq.n	8004b42 <xTaskCreateStatic+0xb2>
 8004b04:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	d01b      	beq.n	8004b42 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004b0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b0c:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8004b0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b10:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004b12:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8004b14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b16:	2202      	movs	r2, #2
 8004b18:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8004b1c:	2300      	movs	r3, #0
 8004b1e:	9303      	str	r3, [sp, #12]
 8004b20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b22:	9302      	str	r3, [sp, #8]
 8004b24:	f107 0314 	add.w	r3, r7, #20
 8004b28:	9301      	str	r3, [sp, #4]
 8004b2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b2c:	9300      	str	r3, [sp, #0]
 8004b2e:	683b      	ldr	r3, [r7, #0]
 8004b30:	687a      	ldr	r2, [r7, #4]
 8004b32:	68b9      	ldr	r1, [r7, #8]
 8004b34:	68f8      	ldr	r0, [r7, #12]
 8004b36:	f000 f850 	bl	8004bda <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004b3a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004b3c:	f000 f8de 	bl	8004cfc <prvAddNewTaskToReadyList>
 8004b40:	e001      	b.n	8004b46 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8004b42:	2300      	movs	r3, #0
 8004b44:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8004b46:	697b      	ldr	r3, [r7, #20]
	}
 8004b48:	4618      	mov	r0, r3
 8004b4a:	3728      	adds	r7, #40	; 0x28
 8004b4c:	46bd      	mov	sp, r7
 8004b4e:	bd80      	pop	{r7, pc}

08004b50 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8004b50:	b580      	push	{r7, lr}
 8004b52:	b08c      	sub	sp, #48	; 0x30
 8004b54:	af04      	add	r7, sp, #16
 8004b56:	60f8      	str	r0, [r7, #12]
 8004b58:	60b9      	str	r1, [r7, #8]
 8004b5a:	603b      	str	r3, [r7, #0]
 8004b5c:	4613      	mov	r3, r2
 8004b5e:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8004b60:	88fb      	ldrh	r3, [r7, #6]
 8004b62:	009b      	lsls	r3, r3, #2
 8004b64:	4618      	mov	r0, r3
 8004b66:	f001 fc19 	bl	800639c <pvPortMalloc>
 8004b6a:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8004b6c:	697b      	ldr	r3, [r7, #20]
 8004b6e:	2b00      	cmp	r3, #0
 8004b70:	d00e      	beq.n	8004b90 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8004b72:	205c      	movs	r0, #92	; 0x5c
 8004b74:	f001 fc12 	bl	800639c <pvPortMalloc>
 8004b78:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8004b7a:	69fb      	ldr	r3, [r7, #28]
 8004b7c:	2b00      	cmp	r3, #0
 8004b7e:	d003      	beq.n	8004b88 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8004b80:	69fb      	ldr	r3, [r7, #28]
 8004b82:	697a      	ldr	r2, [r7, #20]
 8004b84:	631a      	str	r2, [r3, #48]	; 0x30
 8004b86:	e005      	b.n	8004b94 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8004b88:	6978      	ldr	r0, [r7, #20]
 8004b8a:	f001 fccf 	bl	800652c <vPortFree>
 8004b8e:	e001      	b.n	8004b94 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8004b90:	2300      	movs	r3, #0
 8004b92:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8004b94:	69fb      	ldr	r3, [r7, #28]
 8004b96:	2b00      	cmp	r3, #0
 8004b98:	d017      	beq.n	8004bca <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8004b9a:	69fb      	ldr	r3, [r7, #28]
 8004b9c:	2200      	movs	r2, #0
 8004b9e:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8004ba2:	88fa      	ldrh	r2, [r7, #6]
 8004ba4:	2300      	movs	r3, #0
 8004ba6:	9303      	str	r3, [sp, #12]
 8004ba8:	69fb      	ldr	r3, [r7, #28]
 8004baa:	9302      	str	r3, [sp, #8]
 8004bac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004bae:	9301      	str	r3, [sp, #4]
 8004bb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004bb2:	9300      	str	r3, [sp, #0]
 8004bb4:	683b      	ldr	r3, [r7, #0]
 8004bb6:	68b9      	ldr	r1, [r7, #8]
 8004bb8:	68f8      	ldr	r0, [r7, #12]
 8004bba:	f000 f80e 	bl	8004bda <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004bbe:	69f8      	ldr	r0, [r7, #28]
 8004bc0:	f000 f89c 	bl	8004cfc <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8004bc4:	2301      	movs	r3, #1
 8004bc6:	61bb      	str	r3, [r7, #24]
 8004bc8:	e002      	b.n	8004bd0 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8004bca:	f04f 33ff 	mov.w	r3, #4294967295
 8004bce:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8004bd0:	69bb      	ldr	r3, [r7, #24]
	}
 8004bd2:	4618      	mov	r0, r3
 8004bd4:	3720      	adds	r7, #32
 8004bd6:	46bd      	mov	sp, r7
 8004bd8:	bd80      	pop	{r7, pc}

08004bda <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8004bda:	b580      	push	{r7, lr}
 8004bdc:	b088      	sub	sp, #32
 8004bde:	af00      	add	r7, sp, #0
 8004be0:	60f8      	str	r0, [r7, #12]
 8004be2:	60b9      	str	r1, [r7, #8]
 8004be4:	607a      	str	r2, [r7, #4]
 8004be6:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8004be8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004bea:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	009b      	lsls	r3, r3, #2
 8004bf0:	461a      	mov	r2, r3
 8004bf2:	21a5      	movs	r1, #165	; 0xa5
 8004bf4:	f001 fde7 	bl	80067c6 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8004bf8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004bfa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004bfc:	6879      	ldr	r1, [r7, #4]
 8004bfe:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 8004c02:	440b      	add	r3, r1
 8004c04:	009b      	lsls	r3, r3, #2
 8004c06:	4413      	add	r3, r2
 8004c08:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8004c0a:	69bb      	ldr	r3, [r7, #24]
 8004c0c:	f023 0307 	bic.w	r3, r3, #7
 8004c10:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8004c12:	69bb      	ldr	r3, [r7, #24]
 8004c14:	f003 0307 	and.w	r3, r3, #7
 8004c18:	2b00      	cmp	r3, #0
 8004c1a:	d00b      	beq.n	8004c34 <prvInitialiseNewTask+0x5a>
 8004c1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c20:	b672      	cpsid	i
 8004c22:	f383 8811 	msr	BASEPRI, r3
 8004c26:	f3bf 8f6f 	isb	sy
 8004c2a:	f3bf 8f4f 	dsb	sy
 8004c2e:	b662      	cpsie	i
 8004c30:	617b      	str	r3, [r7, #20]
 8004c32:	e7fe      	b.n	8004c32 <prvInitialiseNewTask+0x58>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8004c34:	68bb      	ldr	r3, [r7, #8]
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	d01f      	beq.n	8004c7a <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004c3a:	2300      	movs	r3, #0
 8004c3c:	61fb      	str	r3, [r7, #28]
 8004c3e:	e012      	b.n	8004c66 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8004c40:	68ba      	ldr	r2, [r7, #8]
 8004c42:	69fb      	ldr	r3, [r7, #28]
 8004c44:	4413      	add	r3, r2
 8004c46:	7819      	ldrb	r1, [r3, #0]
 8004c48:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004c4a:	69fb      	ldr	r3, [r7, #28]
 8004c4c:	4413      	add	r3, r2
 8004c4e:	3334      	adds	r3, #52	; 0x34
 8004c50:	460a      	mov	r2, r1
 8004c52:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8004c54:	68ba      	ldr	r2, [r7, #8]
 8004c56:	69fb      	ldr	r3, [r7, #28]
 8004c58:	4413      	add	r3, r2
 8004c5a:	781b      	ldrb	r3, [r3, #0]
 8004c5c:	2b00      	cmp	r3, #0
 8004c5e:	d006      	beq.n	8004c6e <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004c60:	69fb      	ldr	r3, [r7, #28]
 8004c62:	3301      	adds	r3, #1
 8004c64:	61fb      	str	r3, [r7, #28]
 8004c66:	69fb      	ldr	r3, [r7, #28]
 8004c68:	2b0f      	cmp	r3, #15
 8004c6a:	d9e9      	bls.n	8004c40 <prvInitialiseNewTask+0x66>
 8004c6c:	e000      	b.n	8004c70 <prvInitialiseNewTask+0x96>
			{
				break;
 8004c6e:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8004c70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c72:	2200      	movs	r2, #0
 8004c74:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004c78:	e003      	b.n	8004c82 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8004c7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c7c:	2200      	movs	r2, #0
 8004c7e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8004c82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c84:	2b37      	cmp	r3, #55	; 0x37
 8004c86:	d901      	bls.n	8004c8c <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8004c88:	2337      	movs	r3, #55	; 0x37
 8004c8a:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8004c8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c8e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004c90:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8004c92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c94:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004c96:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8004c98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c9a:	2200      	movs	r2, #0
 8004c9c:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8004c9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ca0:	3304      	adds	r3, #4
 8004ca2:	4618      	mov	r0, r3
 8004ca4:	f7ff f96a 	bl	8003f7c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8004ca8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004caa:	3318      	adds	r3, #24
 8004cac:	4618      	mov	r0, r3
 8004cae:	f7ff f965 	bl	8003f7c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8004cb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004cb4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004cb6:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004cb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004cba:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8004cbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004cc0:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8004cc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004cc4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004cc6:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8004cc8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004cca:	2200      	movs	r2, #0
 8004ccc:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8004cce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004cd0:	2200      	movs	r2, #0
 8004cd2:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8004cd6:	683a      	ldr	r2, [r7, #0]
 8004cd8:	68f9      	ldr	r1, [r7, #12]
 8004cda:	69b8      	ldr	r0, [r7, #24]
 8004cdc:	f001 f936 	bl	8005f4c <pxPortInitialiseStack>
 8004ce0:	4602      	mov	r2, r0
 8004ce2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ce4:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8004ce6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ce8:	2b00      	cmp	r3, #0
 8004cea:	d002      	beq.n	8004cf2 <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8004cec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004cee:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004cf0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004cf2:	bf00      	nop
 8004cf4:	3720      	adds	r7, #32
 8004cf6:	46bd      	mov	sp, r7
 8004cf8:	bd80      	pop	{r7, pc}
	...

08004cfc <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8004cfc:	b580      	push	{r7, lr}
 8004cfe:	b082      	sub	sp, #8
 8004d00:	af00      	add	r7, sp, #0
 8004d02:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8004d04:	f001 fa28 	bl	8006158 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8004d08:	4b2d      	ldr	r3, [pc, #180]	; (8004dc0 <prvAddNewTaskToReadyList+0xc4>)
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	3301      	adds	r3, #1
 8004d0e:	4a2c      	ldr	r2, [pc, #176]	; (8004dc0 <prvAddNewTaskToReadyList+0xc4>)
 8004d10:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8004d12:	4b2c      	ldr	r3, [pc, #176]	; (8004dc4 <prvAddNewTaskToReadyList+0xc8>)
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	2b00      	cmp	r3, #0
 8004d18:	d109      	bne.n	8004d2e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8004d1a:	4a2a      	ldr	r2, [pc, #168]	; (8004dc4 <prvAddNewTaskToReadyList+0xc8>)
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8004d20:	4b27      	ldr	r3, [pc, #156]	; (8004dc0 <prvAddNewTaskToReadyList+0xc4>)
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	2b01      	cmp	r3, #1
 8004d26:	d110      	bne.n	8004d4a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8004d28:	f000 fc1e 	bl	8005568 <prvInitialiseTaskLists>
 8004d2c:	e00d      	b.n	8004d4a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8004d2e:	4b26      	ldr	r3, [pc, #152]	; (8004dc8 <prvAddNewTaskToReadyList+0xcc>)
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	2b00      	cmp	r3, #0
 8004d34:	d109      	bne.n	8004d4a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8004d36:	4b23      	ldr	r3, [pc, #140]	; (8004dc4 <prvAddNewTaskToReadyList+0xc8>)
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d40:	429a      	cmp	r2, r3
 8004d42:	d802      	bhi.n	8004d4a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8004d44:	4a1f      	ldr	r2, [pc, #124]	; (8004dc4 <prvAddNewTaskToReadyList+0xc8>)
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8004d4a:	4b20      	ldr	r3, [pc, #128]	; (8004dcc <prvAddNewTaskToReadyList+0xd0>)
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	3301      	adds	r3, #1
 8004d50:	4a1e      	ldr	r2, [pc, #120]	; (8004dcc <prvAddNewTaskToReadyList+0xd0>)
 8004d52:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8004d54:	4b1d      	ldr	r3, [pc, #116]	; (8004dcc <prvAddNewTaskToReadyList+0xd0>)
 8004d56:	681a      	ldr	r2, [r3, #0]
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004d60:	4b1b      	ldr	r3, [pc, #108]	; (8004dd0 <prvAddNewTaskToReadyList+0xd4>)
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	429a      	cmp	r2, r3
 8004d66:	d903      	bls.n	8004d70 <prvAddNewTaskToReadyList+0x74>
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d6c:	4a18      	ldr	r2, [pc, #96]	; (8004dd0 <prvAddNewTaskToReadyList+0xd4>)
 8004d6e:	6013      	str	r3, [r2, #0]
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004d74:	4613      	mov	r3, r2
 8004d76:	009b      	lsls	r3, r3, #2
 8004d78:	4413      	add	r3, r2
 8004d7a:	009b      	lsls	r3, r3, #2
 8004d7c:	4a15      	ldr	r2, [pc, #84]	; (8004dd4 <prvAddNewTaskToReadyList+0xd8>)
 8004d7e:	441a      	add	r2, r3
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	3304      	adds	r3, #4
 8004d84:	4619      	mov	r1, r3
 8004d86:	4610      	mov	r0, r2
 8004d88:	f7ff f905 	bl	8003f96 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8004d8c:	f001 fa16 	bl	80061bc <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8004d90:	4b0d      	ldr	r3, [pc, #52]	; (8004dc8 <prvAddNewTaskToReadyList+0xcc>)
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	2b00      	cmp	r3, #0
 8004d96:	d00e      	beq.n	8004db6 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8004d98:	4b0a      	ldr	r3, [pc, #40]	; (8004dc4 <prvAddNewTaskToReadyList+0xc8>)
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004da2:	429a      	cmp	r2, r3
 8004da4:	d207      	bcs.n	8004db6 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8004da6:	4b0c      	ldr	r3, [pc, #48]	; (8004dd8 <prvAddNewTaskToReadyList+0xdc>)
 8004da8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004dac:	601a      	str	r2, [r3, #0]
 8004dae:	f3bf 8f4f 	dsb	sy
 8004db2:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004db6:	bf00      	nop
 8004db8:	3708      	adds	r7, #8
 8004dba:	46bd      	mov	sp, r7
 8004dbc:	bd80      	pop	{r7, pc}
 8004dbe:	bf00      	nop
 8004dc0:	20000c24 	.word	0x20000c24
 8004dc4:	20000750 	.word	0x20000750
 8004dc8:	20000c30 	.word	0x20000c30
 8004dcc:	20000c40 	.word	0x20000c40
 8004dd0:	20000c2c 	.word	0x20000c2c
 8004dd4:	20000754 	.word	0x20000754
 8004dd8:	e000ed04 	.word	0xe000ed04

08004ddc <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8004ddc:	b580      	push	{r7, lr}
 8004dde:	b084      	sub	sp, #16
 8004de0:	af00      	add	r7, sp, #0
 8004de2:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8004de4:	2300      	movs	r3, #0
 8004de6:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	2b00      	cmp	r3, #0
 8004dec:	d018      	beq.n	8004e20 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8004dee:	4b14      	ldr	r3, [pc, #80]	; (8004e40 <vTaskDelay+0x64>)
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	d00b      	beq.n	8004e0e <vTaskDelay+0x32>
 8004df6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004dfa:	b672      	cpsid	i
 8004dfc:	f383 8811 	msr	BASEPRI, r3
 8004e00:	f3bf 8f6f 	isb	sy
 8004e04:	f3bf 8f4f 	dsb	sy
 8004e08:	b662      	cpsie	i
 8004e0a:	60bb      	str	r3, [r7, #8]
 8004e0c:	e7fe      	b.n	8004e0c <vTaskDelay+0x30>
			vTaskSuspendAll();
 8004e0e:	f000 f883 	bl	8004f18 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8004e12:	2100      	movs	r1, #0
 8004e14:	6878      	ldr	r0, [r7, #4]
 8004e16:	f000 fcf1 	bl	80057fc <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8004e1a:	f000 f88b 	bl	8004f34 <xTaskResumeAll>
 8004e1e:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	2b00      	cmp	r3, #0
 8004e24:	d107      	bne.n	8004e36 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8004e26:	4b07      	ldr	r3, [pc, #28]	; (8004e44 <vTaskDelay+0x68>)
 8004e28:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004e2c:	601a      	str	r2, [r3, #0]
 8004e2e:	f3bf 8f4f 	dsb	sy
 8004e32:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8004e36:	bf00      	nop
 8004e38:	3710      	adds	r7, #16
 8004e3a:	46bd      	mov	sp, r7
 8004e3c:	bd80      	pop	{r7, pc}
 8004e3e:	bf00      	nop
 8004e40:	20000c4c 	.word	0x20000c4c
 8004e44:	e000ed04 	.word	0xe000ed04

08004e48 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8004e48:	b580      	push	{r7, lr}
 8004e4a:	b08a      	sub	sp, #40	; 0x28
 8004e4c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8004e4e:	2300      	movs	r3, #0
 8004e50:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8004e52:	2300      	movs	r3, #0
 8004e54:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8004e56:	463a      	mov	r2, r7
 8004e58:	1d39      	adds	r1, r7, #4
 8004e5a:	f107 0308 	add.w	r3, r7, #8
 8004e5e:	4618      	mov	r0, r3
 8004e60:	f7ff f838 	bl	8003ed4 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8004e64:	6839      	ldr	r1, [r7, #0]
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	68ba      	ldr	r2, [r7, #8]
 8004e6a:	9202      	str	r2, [sp, #8]
 8004e6c:	9301      	str	r3, [sp, #4]
 8004e6e:	2300      	movs	r3, #0
 8004e70:	9300      	str	r3, [sp, #0]
 8004e72:	2300      	movs	r3, #0
 8004e74:	460a      	mov	r2, r1
 8004e76:	4922      	ldr	r1, [pc, #136]	; (8004f00 <vTaskStartScheduler+0xb8>)
 8004e78:	4822      	ldr	r0, [pc, #136]	; (8004f04 <vTaskStartScheduler+0xbc>)
 8004e7a:	f7ff fe09 	bl	8004a90 <xTaskCreateStatic>
 8004e7e:	4602      	mov	r2, r0
 8004e80:	4b21      	ldr	r3, [pc, #132]	; (8004f08 <vTaskStartScheduler+0xc0>)
 8004e82:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8004e84:	4b20      	ldr	r3, [pc, #128]	; (8004f08 <vTaskStartScheduler+0xc0>)
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	2b00      	cmp	r3, #0
 8004e8a:	d002      	beq.n	8004e92 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8004e8c:	2301      	movs	r3, #1
 8004e8e:	617b      	str	r3, [r7, #20]
 8004e90:	e001      	b.n	8004e96 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8004e92:	2300      	movs	r3, #0
 8004e94:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8004e96:	697b      	ldr	r3, [r7, #20]
 8004e98:	2b01      	cmp	r3, #1
 8004e9a:	d102      	bne.n	8004ea2 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8004e9c:	f000 fd02 	bl	80058a4 <xTimerCreateTimerTask>
 8004ea0:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8004ea2:	697b      	ldr	r3, [r7, #20]
 8004ea4:	2b01      	cmp	r3, #1
 8004ea6:	d117      	bne.n	8004ed8 <vTaskStartScheduler+0x90>
 8004ea8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004eac:	b672      	cpsid	i
 8004eae:	f383 8811 	msr	BASEPRI, r3
 8004eb2:	f3bf 8f6f 	isb	sy
 8004eb6:	f3bf 8f4f 	dsb	sy
 8004eba:	b662      	cpsie	i
 8004ebc:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8004ebe:	4b13      	ldr	r3, [pc, #76]	; (8004f0c <vTaskStartScheduler+0xc4>)
 8004ec0:	f04f 32ff 	mov.w	r2, #4294967295
 8004ec4:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8004ec6:	4b12      	ldr	r3, [pc, #72]	; (8004f10 <vTaskStartScheduler+0xc8>)
 8004ec8:	2201      	movs	r2, #1
 8004eca:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8004ecc:	4b11      	ldr	r3, [pc, #68]	; (8004f14 <vTaskStartScheduler+0xcc>)
 8004ece:	2200      	movs	r2, #0
 8004ed0:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8004ed2:	f001 f8c5 	bl	8006060 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8004ed6:	e00f      	b.n	8004ef8 <vTaskStartScheduler+0xb0>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8004ed8:	697b      	ldr	r3, [r7, #20]
 8004eda:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ede:	d10b      	bne.n	8004ef8 <vTaskStartScheduler+0xb0>
 8004ee0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ee4:	b672      	cpsid	i
 8004ee6:	f383 8811 	msr	BASEPRI, r3
 8004eea:	f3bf 8f6f 	isb	sy
 8004eee:	f3bf 8f4f 	dsb	sy
 8004ef2:	b662      	cpsie	i
 8004ef4:	60fb      	str	r3, [r7, #12]
 8004ef6:	e7fe      	b.n	8004ef6 <vTaskStartScheduler+0xae>
}
 8004ef8:	bf00      	nop
 8004efa:	3718      	adds	r7, #24
 8004efc:	46bd      	mov	sp, r7
 8004efe:	bd80      	pop	{r7, pc}
 8004f00:	08007104 	.word	0x08007104
 8004f04:	08005539 	.word	0x08005539
 8004f08:	20000c48 	.word	0x20000c48
 8004f0c:	20000c44 	.word	0x20000c44
 8004f10:	20000c30 	.word	0x20000c30
 8004f14:	20000c28 	.word	0x20000c28

08004f18 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8004f18:	b480      	push	{r7}
 8004f1a:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8004f1c:	4b04      	ldr	r3, [pc, #16]	; (8004f30 <vTaskSuspendAll+0x18>)
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	3301      	adds	r3, #1
 8004f22:	4a03      	ldr	r2, [pc, #12]	; (8004f30 <vTaskSuspendAll+0x18>)
 8004f24:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 8004f26:	bf00      	nop
 8004f28:	46bd      	mov	sp, r7
 8004f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f2e:	4770      	bx	lr
 8004f30:	20000c4c 	.word	0x20000c4c

08004f34 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8004f34:	b580      	push	{r7, lr}
 8004f36:	b084      	sub	sp, #16
 8004f38:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8004f3a:	2300      	movs	r3, #0
 8004f3c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8004f3e:	2300      	movs	r3, #0
 8004f40:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8004f42:	4b42      	ldr	r3, [pc, #264]	; (800504c <xTaskResumeAll+0x118>)
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	2b00      	cmp	r3, #0
 8004f48:	d10b      	bne.n	8004f62 <xTaskResumeAll+0x2e>
 8004f4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f4e:	b672      	cpsid	i
 8004f50:	f383 8811 	msr	BASEPRI, r3
 8004f54:	f3bf 8f6f 	isb	sy
 8004f58:	f3bf 8f4f 	dsb	sy
 8004f5c:	b662      	cpsie	i
 8004f5e:	603b      	str	r3, [r7, #0]
 8004f60:	e7fe      	b.n	8004f60 <xTaskResumeAll+0x2c>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8004f62:	f001 f8f9 	bl	8006158 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8004f66:	4b39      	ldr	r3, [pc, #228]	; (800504c <xTaskResumeAll+0x118>)
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	3b01      	subs	r3, #1
 8004f6c:	4a37      	ldr	r2, [pc, #220]	; (800504c <xTaskResumeAll+0x118>)
 8004f6e:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004f70:	4b36      	ldr	r3, [pc, #216]	; (800504c <xTaskResumeAll+0x118>)
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	2b00      	cmp	r3, #0
 8004f76:	d162      	bne.n	800503e <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8004f78:	4b35      	ldr	r3, [pc, #212]	; (8005050 <xTaskResumeAll+0x11c>)
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	2b00      	cmp	r3, #0
 8004f7e:	d05e      	beq.n	800503e <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004f80:	e02f      	b.n	8004fe2 <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004f82:	4b34      	ldr	r3, [pc, #208]	; (8005054 <xTaskResumeAll+0x120>)
 8004f84:	68db      	ldr	r3, [r3, #12]
 8004f86:	68db      	ldr	r3, [r3, #12]
 8004f88:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004f8a:	68fb      	ldr	r3, [r7, #12]
 8004f8c:	3318      	adds	r3, #24
 8004f8e:	4618      	mov	r0, r3
 8004f90:	f7ff f85e 	bl	8004050 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	3304      	adds	r3, #4
 8004f98:	4618      	mov	r0, r3
 8004f9a:	f7ff f859 	bl	8004050 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8004f9e:	68fb      	ldr	r3, [r7, #12]
 8004fa0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004fa2:	4b2d      	ldr	r3, [pc, #180]	; (8005058 <xTaskResumeAll+0x124>)
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	429a      	cmp	r2, r3
 8004fa8:	d903      	bls.n	8004fb2 <xTaskResumeAll+0x7e>
 8004faa:	68fb      	ldr	r3, [r7, #12]
 8004fac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004fae:	4a2a      	ldr	r2, [pc, #168]	; (8005058 <xTaskResumeAll+0x124>)
 8004fb0:	6013      	str	r3, [r2, #0]
 8004fb2:	68fb      	ldr	r3, [r7, #12]
 8004fb4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004fb6:	4613      	mov	r3, r2
 8004fb8:	009b      	lsls	r3, r3, #2
 8004fba:	4413      	add	r3, r2
 8004fbc:	009b      	lsls	r3, r3, #2
 8004fbe:	4a27      	ldr	r2, [pc, #156]	; (800505c <xTaskResumeAll+0x128>)
 8004fc0:	441a      	add	r2, r3
 8004fc2:	68fb      	ldr	r3, [r7, #12]
 8004fc4:	3304      	adds	r3, #4
 8004fc6:	4619      	mov	r1, r3
 8004fc8:	4610      	mov	r0, r2
 8004fca:	f7fe ffe4 	bl	8003f96 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004fce:	68fb      	ldr	r3, [r7, #12]
 8004fd0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004fd2:	4b23      	ldr	r3, [pc, #140]	; (8005060 <xTaskResumeAll+0x12c>)
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004fd8:	429a      	cmp	r2, r3
 8004fda:	d302      	bcc.n	8004fe2 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8004fdc:	4b21      	ldr	r3, [pc, #132]	; (8005064 <xTaskResumeAll+0x130>)
 8004fde:	2201      	movs	r2, #1
 8004fe0:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004fe2:	4b1c      	ldr	r3, [pc, #112]	; (8005054 <xTaskResumeAll+0x120>)
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	2b00      	cmp	r3, #0
 8004fe8:	d1cb      	bne.n	8004f82 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8004fea:	68fb      	ldr	r3, [r7, #12]
 8004fec:	2b00      	cmp	r3, #0
 8004fee:	d001      	beq.n	8004ff4 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8004ff0:	f000 fb56 	bl	80056a0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8004ff4:	4b1c      	ldr	r3, [pc, #112]	; (8005068 <xTaskResumeAll+0x134>)
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	2b00      	cmp	r3, #0
 8004ffe:	d010      	beq.n	8005022 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8005000:	f000 f846 	bl	8005090 <xTaskIncrementTick>
 8005004:	4603      	mov	r3, r0
 8005006:	2b00      	cmp	r3, #0
 8005008:	d002      	beq.n	8005010 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 800500a:	4b16      	ldr	r3, [pc, #88]	; (8005064 <xTaskResumeAll+0x130>)
 800500c:	2201      	movs	r2, #1
 800500e:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	3b01      	subs	r3, #1
 8005014:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	2b00      	cmp	r3, #0
 800501a:	d1f1      	bne.n	8005000 <xTaskResumeAll+0xcc>

						uxPendedTicks = 0;
 800501c:	4b12      	ldr	r3, [pc, #72]	; (8005068 <xTaskResumeAll+0x134>)
 800501e:	2200      	movs	r2, #0
 8005020:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8005022:	4b10      	ldr	r3, [pc, #64]	; (8005064 <xTaskResumeAll+0x130>)
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	2b00      	cmp	r3, #0
 8005028:	d009      	beq.n	800503e <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800502a:	2301      	movs	r3, #1
 800502c:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800502e:	4b0f      	ldr	r3, [pc, #60]	; (800506c <xTaskResumeAll+0x138>)
 8005030:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005034:	601a      	str	r2, [r3, #0]
 8005036:	f3bf 8f4f 	dsb	sy
 800503a:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800503e:	f001 f8bd 	bl	80061bc <vPortExitCritical>

	return xAlreadyYielded;
 8005042:	68bb      	ldr	r3, [r7, #8]
}
 8005044:	4618      	mov	r0, r3
 8005046:	3710      	adds	r7, #16
 8005048:	46bd      	mov	sp, r7
 800504a:	bd80      	pop	{r7, pc}
 800504c:	20000c4c 	.word	0x20000c4c
 8005050:	20000c24 	.word	0x20000c24
 8005054:	20000be4 	.word	0x20000be4
 8005058:	20000c2c 	.word	0x20000c2c
 800505c:	20000754 	.word	0x20000754
 8005060:	20000750 	.word	0x20000750
 8005064:	20000c38 	.word	0x20000c38
 8005068:	20000c34 	.word	0x20000c34
 800506c:	e000ed04 	.word	0xe000ed04

08005070 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8005070:	b480      	push	{r7}
 8005072:	b083      	sub	sp, #12
 8005074:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8005076:	4b05      	ldr	r3, [pc, #20]	; (800508c <xTaskGetTickCount+0x1c>)
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800507c:	687b      	ldr	r3, [r7, #4]
}
 800507e:	4618      	mov	r0, r3
 8005080:	370c      	adds	r7, #12
 8005082:	46bd      	mov	sp, r7
 8005084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005088:	4770      	bx	lr
 800508a:	bf00      	nop
 800508c:	20000c28 	.word	0x20000c28

08005090 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8005090:	b580      	push	{r7, lr}
 8005092:	b086      	sub	sp, #24
 8005094:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8005096:	2300      	movs	r3, #0
 8005098:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800509a:	4b4f      	ldr	r3, [pc, #316]	; (80051d8 <xTaskIncrementTick+0x148>)
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	2b00      	cmp	r3, #0
 80050a0:	f040 808a 	bne.w	80051b8 <xTaskIncrementTick+0x128>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80050a4:	4b4d      	ldr	r3, [pc, #308]	; (80051dc <xTaskIncrementTick+0x14c>)
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	3301      	adds	r3, #1
 80050aa:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80050ac:	4a4b      	ldr	r2, [pc, #300]	; (80051dc <xTaskIncrementTick+0x14c>)
 80050ae:	693b      	ldr	r3, [r7, #16]
 80050b0:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80050b2:	693b      	ldr	r3, [r7, #16]
 80050b4:	2b00      	cmp	r3, #0
 80050b6:	d121      	bne.n	80050fc <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 80050b8:	4b49      	ldr	r3, [pc, #292]	; (80051e0 <xTaskIncrementTick+0x150>)
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	2b00      	cmp	r3, #0
 80050c0:	d00b      	beq.n	80050da <xTaskIncrementTick+0x4a>
 80050c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050c6:	b672      	cpsid	i
 80050c8:	f383 8811 	msr	BASEPRI, r3
 80050cc:	f3bf 8f6f 	isb	sy
 80050d0:	f3bf 8f4f 	dsb	sy
 80050d4:	b662      	cpsie	i
 80050d6:	603b      	str	r3, [r7, #0]
 80050d8:	e7fe      	b.n	80050d8 <xTaskIncrementTick+0x48>
 80050da:	4b41      	ldr	r3, [pc, #260]	; (80051e0 <xTaskIncrementTick+0x150>)
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	60fb      	str	r3, [r7, #12]
 80050e0:	4b40      	ldr	r3, [pc, #256]	; (80051e4 <xTaskIncrementTick+0x154>)
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	4a3e      	ldr	r2, [pc, #248]	; (80051e0 <xTaskIncrementTick+0x150>)
 80050e6:	6013      	str	r3, [r2, #0]
 80050e8:	4a3e      	ldr	r2, [pc, #248]	; (80051e4 <xTaskIncrementTick+0x154>)
 80050ea:	68fb      	ldr	r3, [r7, #12]
 80050ec:	6013      	str	r3, [r2, #0]
 80050ee:	4b3e      	ldr	r3, [pc, #248]	; (80051e8 <xTaskIncrementTick+0x158>)
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	3301      	adds	r3, #1
 80050f4:	4a3c      	ldr	r2, [pc, #240]	; (80051e8 <xTaskIncrementTick+0x158>)
 80050f6:	6013      	str	r3, [r2, #0]
 80050f8:	f000 fad2 	bl	80056a0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80050fc:	4b3b      	ldr	r3, [pc, #236]	; (80051ec <xTaskIncrementTick+0x15c>)
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	693a      	ldr	r2, [r7, #16]
 8005102:	429a      	cmp	r2, r3
 8005104:	d349      	bcc.n	800519a <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005106:	4b36      	ldr	r3, [pc, #216]	; (80051e0 <xTaskIncrementTick+0x150>)
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	2b00      	cmp	r3, #0
 800510e:	d104      	bne.n	800511a <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005110:	4b36      	ldr	r3, [pc, #216]	; (80051ec <xTaskIncrementTick+0x15c>)
 8005112:	f04f 32ff 	mov.w	r2, #4294967295
 8005116:	601a      	str	r2, [r3, #0]
					break;
 8005118:	e03f      	b.n	800519a <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800511a:	4b31      	ldr	r3, [pc, #196]	; (80051e0 <xTaskIncrementTick+0x150>)
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	68db      	ldr	r3, [r3, #12]
 8005120:	68db      	ldr	r3, [r3, #12]
 8005122:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8005124:	68bb      	ldr	r3, [r7, #8]
 8005126:	685b      	ldr	r3, [r3, #4]
 8005128:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800512a:	693a      	ldr	r2, [r7, #16]
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	429a      	cmp	r2, r3
 8005130:	d203      	bcs.n	800513a <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8005132:	4a2e      	ldr	r2, [pc, #184]	; (80051ec <xTaskIncrementTick+0x15c>)
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8005138:	e02f      	b.n	800519a <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800513a:	68bb      	ldr	r3, [r7, #8]
 800513c:	3304      	adds	r3, #4
 800513e:	4618      	mov	r0, r3
 8005140:	f7fe ff86 	bl	8004050 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8005144:	68bb      	ldr	r3, [r7, #8]
 8005146:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005148:	2b00      	cmp	r3, #0
 800514a:	d004      	beq.n	8005156 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800514c:	68bb      	ldr	r3, [r7, #8]
 800514e:	3318      	adds	r3, #24
 8005150:	4618      	mov	r0, r3
 8005152:	f7fe ff7d 	bl	8004050 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8005156:	68bb      	ldr	r3, [r7, #8]
 8005158:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800515a:	4b25      	ldr	r3, [pc, #148]	; (80051f0 <xTaskIncrementTick+0x160>)
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	429a      	cmp	r2, r3
 8005160:	d903      	bls.n	800516a <xTaskIncrementTick+0xda>
 8005162:	68bb      	ldr	r3, [r7, #8]
 8005164:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005166:	4a22      	ldr	r2, [pc, #136]	; (80051f0 <xTaskIncrementTick+0x160>)
 8005168:	6013      	str	r3, [r2, #0]
 800516a:	68bb      	ldr	r3, [r7, #8]
 800516c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800516e:	4613      	mov	r3, r2
 8005170:	009b      	lsls	r3, r3, #2
 8005172:	4413      	add	r3, r2
 8005174:	009b      	lsls	r3, r3, #2
 8005176:	4a1f      	ldr	r2, [pc, #124]	; (80051f4 <xTaskIncrementTick+0x164>)
 8005178:	441a      	add	r2, r3
 800517a:	68bb      	ldr	r3, [r7, #8]
 800517c:	3304      	adds	r3, #4
 800517e:	4619      	mov	r1, r3
 8005180:	4610      	mov	r0, r2
 8005182:	f7fe ff08 	bl	8003f96 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005186:	68bb      	ldr	r3, [r7, #8]
 8005188:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800518a:	4b1b      	ldr	r3, [pc, #108]	; (80051f8 <xTaskIncrementTick+0x168>)
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005190:	429a      	cmp	r2, r3
 8005192:	d3b8      	bcc.n	8005106 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8005194:	2301      	movs	r3, #1
 8005196:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005198:	e7b5      	b.n	8005106 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800519a:	4b17      	ldr	r3, [pc, #92]	; (80051f8 <xTaskIncrementTick+0x168>)
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80051a0:	4914      	ldr	r1, [pc, #80]	; (80051f4 <xTaskIncrementTick+0x164>)
 80051a2:	4613      	mov	r3, r2
 80051a4:	009b      	lsls	r3, r3, #2
 80051a6:	4413      	add	r3, r2
 80051a8:	009b      	lsls	r3, r3, #2
 80051aa:	440b      	add	r3, r1
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	2b01      	cmp	r3, #1
 80051b0:	d907      	bls.n	80051c2 <xTaskIncrementTick+0x132>
			{
				xSwitchRequired = pdTRUE;
 80051b2:	2301      	movs	r3, #1
 80051b4:	617b      	str	r3, [r7, #20]
 80051b6:	e004      	b.n	80051c2 <xTaskIncrementTick+0x132>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 80051b8:	4b10      	ldr	r3, [pc, #64]	; (80051fc <xTaskIncrementTick+0x16c>)
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	3301      	adds	r3, #1
 80051be:	4a0f      	ldr	r2, [pc, #60]	; (80051fc <xTaskIncrementTick+0x16c>)
 80051c0:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 80051c2:	4b0f      	ldr	r3, [pc, #60]	; (8005200 <xTaskIncrementTick+0x170>)
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	2b00      	cmp	r3, #0
 80051c8:	d001      	beq.n	80051ce <xTaskIncrementTick+0x13e>
		{
			xSwitchRequired = pdTRUE;
 80051ca:	2301      	movs	r3, #1
 80051cc:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 80051ce:	697b      	ldr	r3, [r7, #20]
}
 80051d0:	4618      	mov	r0, r3
 80051d2:	3718      	adds	r7, #24
 80051d4:	46bd      	mov	sp, r7
 80051d6:	bd80      	pop	{r7, pc}
 80051d8:	20000c4c 	.word	0x20000c4c
 80051dc:	20000c28 	.word	0x20000c28
 80051e0:	20000bdc 	.word	0x20000bdc
 80051e4:	20000be0 	.word	0x20000be0
 80051e8:	20000c3c 	.word	0x20000c3c
 80051ec:	20000c44 	.word	0x20000c44
 80051f0:	20000c2c 	.word	0x20000c2c
 80051f4:	20000754 	.word	0x20000754
 80051f8:	20000750 	.word	0x20000750
 80051fc:	20000c34 	.word	0x20000c34
 8005200:	20000c38 	.word	0x20000c38

08005204 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8005204:	b480      	push	{r7}
 8005206:	b085      	sub	sp, #20
 8005208:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800520a:	4b28      	ldr	r3, [pc, #160]	; (80052ac <vTaskSwitchContext+0xa8>)
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	2b00      	cmp	r3, #0
 8005210:	d003      	beq.n	800521a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8005212:	4b27      	ldr	r3, [pc, #156]	; (80052b0 <vTaskSwitchContext+0xac>)
 8005214:	2201      	movs	r2, #1
 8005216:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8005218:	e042      	b.n	80052a0 <vTaskSwitchContext+0x9c>
		xYieldPending = pdFALSE;
 800521a:	4b25      	ldr	r3, [pc, #148]	; (80052b0 <vTaskSwitchContext+0xac>)
 800521c:	2200      	movs	r2, #0
 800521e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005220:	4b24      	ldr	r3, [pc, #144]	; (80052b4 <vTaskSwitchContext+0xb0>)
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	60fb      	str	r3, [r7, #12]
 8005226:	e011      	b.n	800524c <vTaskSwitchContext+0x48>
 8005228:	68fb      	ldr	r3, [r7, #12]
 800522a:	2b00      	cmp	r3, #0
 800522c:	d10b      	bne.n	8005246 <vTaskSwitchContext+0x42>
 800522e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005232:	b672      	cpsid	i
 8005234:	f383 8811 	msr	BASEPRI, r3
 8005238:	f3bf 8f6f 	isb	sy
 800523c:	f3bf 8f4f 	dsb	sy
 8005240:	b662      	cpsie	i
 8005242:	607b      	str	r3, [r7, #4]
 8005244:	e7fe      	b.n	8005244 <vTaskSwitchContext+0x40>
 8005246:	68fb      	ldr	r3, [r7, #12]
 8005248:	3b01      	subs	r3, #1
 800524a:	60fb      	str	r3, [r7, #12]
 800524c:	491a      	ldr	r1, [pc, #104]	; (80052b8 <vTaskSwitchContext+0xb4>)
 800524e:	68fa      	ldr	r2, [r7, #12]
 8005250:	4613      	mov	r3, r2
 8005252:	009b      	lsls	r3, r3, #2
 8005254:	4413      	add	r3, r2
 8005256:	009b      	lsls	r3, r3, #2
 8005258:	440b      	add	r3, r1
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	2b00      	cmp	r3, #0
 800525e:	d0e3      	beq.n	8005228 <vTaskSwitchContext+0x24>
 8005260:	68fa      	ldr	r2, [r7, #12]
 8005262:	4613      	mov	r3, r2
 8005264:	009b      	lsls	r3, r3, #2
 8005266:	4413      	add	r3, r2
 8005268:	009b      	lsls	r3, r3, #2
 800526a:	4a13      	ldr	r2, [pc, #76]	; (80052b8 <vTaskSwitchContext+0xb4>)
 800526c:	4413      	add	r3, r2
 800526e:	60bb      	str	r3, [r7, #8]
 8005270:	68bb      	ldr	r3, [r7, #8]
 8005272:	685b      	ldr	r3, [r3, #4]
 8005274:	685a      	ldr	r2, [r3, #4]
 8005276:	68bb      	ldr	r3, [r7, #8]
 8005278:	605a      	str	r2, [r3, #4]
 800527a:	68bb      	ldr	r3, [r7, #8]
 800527c:	685a      	ldr	r2, [r3, #4]
 800527e:	68bb      	ldr	r3, [r7, #8]
 8005280:	3308      	adds	r3, #8
 8005282:	429a      	cmp	r2, r3
 8005284:	d104      	bne.n	8005290 <vTaskSwitchContext+0x8c>
 8005286:	68bb      	ldr	r3, [r7, #8]
 8005288:	685b      	ldr	r3, [r3, #4]
 800528a:	685a      	ldr	r2, [r3, #4]
 800528c:	68bb      	ldr	r3, [r7, #8]
 800528e:	605a      	str	r2, [r3, #4]
 8005290:	68bb      	ldr	r3, [r7, #8]
 8005292:	685b      	ldr	r3, [r3, #4]
 8005294:	68db      	ldr	r3, [r3, #12]
 8005296:	4a09      	ldr	r2, [pc, #36]	; (80052bc <vTaskSwitchContext+0xb8>)
 8005298:	6013      	str	r3, [r2, #0]
 800529a:	4a06      	ldr	r2, [pc, #24]	; (80052b4 <vTaskSwitchContext+0xb0>)
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	6013      	str	r3, [r2, #0]
}
 80052a0:	bf00      	nop
 80052a2:	3714      	adds	r7, #20
 80052a4:	46bd      	mov	sp, r7
 80052a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052aa:	4770      	bx	lr
 80052ac:	20000c4c 	.word	0x20000c4c
 80052b0:	20000c38 	.word	0x20000c38
 80052b4:	20000c2c 	.word	0x20000c2c
 80052b8:	20000754 	.word	0x20000754
 80052bc:	20000750 	.word	0x20000750

080052c0 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80052c0:	b580      	push	{r7, lr}
 80052c2:	b084      	sub	sp, #16
 80052c4:	af00      	add	r7, sp, #0
 80052c6:	6078      	str	r0, [r7, #4]
 80052c8:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	2b00      	cmp	r3, #0
 80052ce:	d10b      	bne.n	80052e8 <vTaskPlaceOnEventList+0x28>
 80052d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052d4:	b672      	cpsid	i
 80052d6:	f383 8811 	msr	BASEPRI, r3
 80052da:	f3bf 8f6f 	isb	sy
 80052de:	f3bf 8f4f 	dsb	sy
 80052e2:	b662      	cpsie	i
 80052e4:	60fb      	str	r3, [r7, #12]
 80052e6:	e7fe      	b.n	80052e6 <vTaskPlaceOnEventList+0x26>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80052e8:	4b07      	ldr	r3, [pc, #28]	; (8005308 <vTaskPlaceOnEventList+0x48>)
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	3318      	adds	r3, #24
 80052ee:	4619      	mov	r1, r3
 80052f0:	6878      	ldr	r0, [r7, #4]
 80052f2:	f7fe fe74 	bl	8003fde <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80052f6:	2101      	movs	r1, #1
 80052f8:	6838      	ldr	r0, [r7, #0]
 80052fa:	f000 fa7f 	bl	80057fc <prvAddCurrentTaskToDelayedList>
}
 80052fe:	bf00      	nop
 8005300:	3710      	adds	r7, #16
 8005302:	46bd      	mov	sp, r7
 8005304:	bd80      	pop	{r7, pc}
 8005306:	bf00      	nop
 8005308:	20000750 	.word	0x20000750

0800530c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800530c:	b580      	push	{r7, lr}
 800530e:	b086      	sub	sp, #24
 8005310:	af00      	add	r7, sp, #0
 8005312:	60f8      	str	r0, [r7, #12]
 8005314:	60b9      	str	r1, [r7, #8]
 8005316:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8005318:	68fb      	ldr	r3, [r7, #12]
 800531a:	2b00      	cmp	r3, #0
 800531c:	d10b      	bne.n	8005336 <vTaskPlaceOnEventListRestricted+0x2a>
 800531e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005322:	b672      	cpsid	i
 8005324:	f383 8811 	msr	BASEPRI, r3
 8005328:	f3bf 8f6f 	isb	sy
 800532c:	f3bf 8f4f 	dsb	sy
 8005330:	b662      	cpsie	i
 8005332:	617b      	str	r3, [r7, #20]
 8005334:	e7fe      	b.n	8005334 <vTaskPlaceOnEventListRestricted+0x28>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005336:	4b0a      	ldr	r3, [pc, #40]	; (8005360 <vTaskPlaceOnEventListRestricted+0x54>)
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	3318      	adds	r3, #24
 800533c:	4619      	mov	r1, r3
 800533e:	68f8      	ldr	r0, [r7, #12]
 8005340:	f7fe fe29 	bl	8003f96 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	2b00      	cmp	r3, #0
 8005348:	d002      	beq.n	8005350 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 800534a:	f04f 33ff 	mov.w	r3, #4294967295
 800534e:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8005350:	6879      	ldr	r1, [r7, #4]
 8005352:	68b8      	ldr	r0, [r7, #8]
 8005354:	f000 fa52 	bl	80057fc <prvAddCurrentTaskToDelayedList>
	}
 8005358:	bf00      	nop
 800535a:	3718      	adds	r7, #24
 800535c:	46bd      	mov	sp, r7
 800535e:	bd80      	pop	{r7, pc}
 8005360:	20000750 	.word	0x20000750

08005364 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8005364:	b580      	push	{r7, lr}
 8005366:	b086      	sub	sp, #24
 8005368:	af00      	add	r7, sp, #0
 800536a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	68db      	ldr	r3, [r3, #12]
 8005370:	68db      	ldr	r3, [r3, #12]
 8005372:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8005374:	693b      	ldr	r3, [r7, #16]
 8005376:	2b00      	cmp	r3, #0
 8005378:	d10b      	bne.n	8005392 <xTaskRemoveFromEventList+0x2e>
 800537a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800537e:	b672      	cpsid	i
 8005380:	f383 8811 	msr	BASEPRI, r3
 8005384:	f3bf 8f6f 	isb	sy
 8005388:	f3bf 8f4f 	dsb	sy
 800538c:	b662      	cpsie	i
 800538e:	60fb      	str	r3, [r7, #12]
 8005390:	e7fe      	b.n	8005390 <xTaskRemoveFromEventList+0x2c>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8005392:	693b      	ldr	r3, [r7, #16]
 8005394:	3318      	adds	r3, #24
 8005396:	4618      	mov	r0, r3
 8005398:	f7fe fe5a 	bl	8004050 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800539c:	4b1d      	ldr	r3, [pc, #116]	; (8005414 <xTaskRemoveFromEventList+0xb0>)
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	2b00      	cmp	r3, #0
 80053a2:	d11d      	bne.n	80053e0 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80053a4:	693b      	ldr	r3, [r7, #16]
 80053a6:	3304      	adds	r3, #4
 80053a8:	4618      	mov	r0, r3
 80053aa:	f7fe fe51 	bl	8004050 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80053ae:	693b      	ldr	r3, [r7, #16]
 80053b0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80053b2:	4b19      	ldr	r3, [pc, #100]	; (8005418 <xTaskRemoveFromEventList+0xb4>)
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	429a      	cmp	r2, r3
 80053b8:	d903      	bls.n	80053c2 <xTaskRemoveFromEventList+0x5e>
 80053ba:	693b      	ldr	r3, [r7, #16]
 80053bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053be:	4a16      	ldr	r2, [pc, #88]	; (8005418 <xTaskRemoveFromEventList+0xb4>)
 80053c0:	6013      	str	r3, [r2, #0]
 80053c2:	693b      	ldr	r3, [r7, #16]
 80053c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80053c6:	4613      	mov	r3, r2
 80053c8:	009b      	lsls	r3, r3, #2
 80053ca:	4413      	add	r3, r2
 80053cc:	009b      	lsls	r3, r3, #2
 80053ce:	4a13      	ldr	r2, [pc, #76]	; (800541c <xTaskRemoveFromEventList+0xb8>)
 80053d0:	441a      	add	r2, r3
 80053d2:	693b      	ldr	r3, [r7, #16]
 80053d4:	3304      	adds	r3, #4
 80053d6:	4619      	mov	r1, r3
 80053d8:	4610      	mov	r0, r2
 80053da:	f7fe fddc 	bl	8003f96 <vListInsertEnd>
 80053de:	e005      	b.n	80053ec <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80053e0:	693b      	ldr	r3, [r7, #16]
 80053e2:	3318      	adds	r3, #24
 80053e4:	4619      	mov	r1, r3
 80053e6:	480e      	ldr	r0, [pc, #56]	; (8005420 <xTaskRemoveFromEventList+0xbc>)
 80053e8:	f7fe fdd5 	bl	8003f96 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80053ec:	693b      	ldr	r3, [r7, #16]
 80053ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80053f0:	4b0c      	ldr	r3, [pc, #48]	; (8005424 <xTaskRemoveFromEventList+0xc0>)
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053f6:	429a      	cmp	r2, r3
 80053f8:	d905      	bls.n	8005406 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80053fa:	2301      	movs	r3, #1
 80053fc:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80053fe:	4b0a      	ldr	r3, [pc, #40]	; (8005428 <xTaskRemoveFromEventList+0xc4>)
 8005400:	2201      	movs	r2, #1
 8005402:	601a      	str	r2, [r3, #0]
 8005404:	e001      	b.n	800540a <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 8005406:	2300      	movs	r3, #0
 8005408:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800540a:	697b      	ldr	r3, [r7, #20]
}
 800540c:	4618      	mov	r0, r3
 800540e:	3718      	adds	r7, #24
 8005410:	46bd      	mov	sp, r7
 8005412:	bd80      	pop	{r7, pc}
 8005414:	20000c4c 	.word	0x20000c4c
 8005418:	20000c2c 	.word	0x20000c2c
 800541c:	20000754 	.word	0x20000754
 8005420:	20000be4 	.word	0x20000be4
 8005424:	20000750 	.word	0x20000750
 8005428:	20000c38 	.word	0x20000c38

0800542c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800542c:	b480      	push	{r7}
 800542e:	b083      	sub	sp, #12
 8005430:	af00      	add	r7, sp, #0
 8005432:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8005434:	4b06      	ldr	r3, [pc, #24]	; (8005450 <vTaskInternalSetTimeOutState+0x24>)
 8005436:	681a      	ldr	r2, [r3, #0]
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800543c:	4b05      	ldr	r3, [pc, #20]	; (8005454 <vTaskInternalSetTimeOutState+0x28>)
 800543e:	681a      	ldr	r2, [r3, #0]
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	605a      	str	r2, [r3, #4]
}
 8005444:	bf00      	nop
 8005446:	370c      	adds	r7, #12
 8005448:	46bd      	mov	sp, r7
 800544a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800544e:	4770      	bx	lr
 8005450:	20000c3c 	.word	0x20000c3c
 8005454:	20000c28 	.word	0x20000c28

08005458 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8005458:	b580      	push	{r7, lr}
 800545a:	b088      	sub	sp, #32
 800545c:	af00      	add	r7, sp, #0
 800545e:	6078      	str	r0, [r7, #4]
 8005460:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	2b00      	cmp	r3, #0
 8005466:	d10b      	bne.n	8005480 <xTaskCheckForTimeOut+0x28>
 8005468:	f04f 0350 	mov.w	r3, #80	; 0x50
 800546c:	b672      	cpsid	i
 800546e:	f383 8811 	msr	BASEPRI, r3
 8005472:	f3bf 8f6f 	isb	sy
 8005476:	f3bf 8f4f 	dsb	sy
 800547a:	b662      	cpsie	i
 800547c:	613b      	str	r3, [r7, #16]
 800547e:	e7fe      	b.n	800547e <xTaskCheckForTimeOut+0x26>
	configASSERT( pxTicksToWait );
 8005480:	683b      	ldr	r3, [r7, #0]
 8005482:	2b00      	cmp	r3, #0
 8005484:	d10b      	bne.n	800549e <xTaskCheckForTimeOut+0x46>
 8005486:	f04f 0350 	mov.w	r3, #80	; 0x50
 800548a:	b672      	cpsid	i
 800548c:	f383 8811 	msr	BASEPRI, r3
 8005490:	f3bf 8f6f 	isb	sy
 8005494:	f3bf 8f4f 	dsb	sy
 8005498:	b662      	cpsie	i
 800549a:	60fb      	str	r3, [r7, #12]
 800549c:	e7fe      	b.n	800549c <xTaskCheckForTimeOut+0x44>

	taskENTER_CRITICAL();
 800549e:	f000 fe5b 	bl	8006158 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80054a2:	4b1d      	ldr	r3, [pc, #116]	; (8005518 <xTaskCheckForTimeOut+0xc0>)
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	685b      	ldr	r3, [r3, #4]
 80054ac:	69ba      	ldr	r2, [r7, #24]
 80054ae:	1ad3      	subs	r3, r2, r3
 80054b0:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80054b2:	683b      	ldr	r3, [r7, #0]
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80054ba:	d102      	bne.n	80054c2 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80054bc:	2300      	movs	r3, #0
 80054be:	61fb      	str	r3, [r7, #28]
 80054c0:	e023      	b.n	800550a <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	681a      	ldr	r2, [r3, #0]
 80054c6:	4b15      	ldr	r3, [pc, #84]	; (800551c <xTaskCheckForTimeOut+0xc4>)
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	429a      	cmp	r2, r3
 80054cc:	d007      	beq.n	80054de <xTaskCheckForTimeOut+0x86>
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	685b      	ldr	r3, [r3, #4]
 80054d2:	69ba      	ldr	r2, [r7, #24]
 80054d4:	429a      	cmp	r2, r3
 80054d6:	d302      	bcc.n	80054de <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80054d8:	2301      	movs	r3, #1
 80054da:	61fb      	str	r3, [r7, #28]
 80054dc:	e015      	b.n	800550a <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80054de:	683b      	ldr	r3, [r7, #0]
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	697a      	ldr	r2, [r7, #20]
 80054e4:	429a      	cmp	r2, r3
 80054e6:	d20b      	bcs.n	8005500 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80054e8:	683b      	ldr	r3, [r7, #0]
 80054ea:	681a      	ldr	r2, [r3, #0]
 80054ec:	697b      	ldr	r3, [r7, #20]
 80054ee:	1ad2      	subs	r2, r2, r3
 80054f0:	683b      	ldr	r3, [r7, #0]
 80054f2:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80054f4:	6878      	ldr	r0, [r7, #4]
 80054f6:	f7ff ff99 	bl	800542c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80054fa:	2300      	movs	r3, #0
 80054fc:	61fb      	str	r3, [r7, #28]
 80054fe:	e004      	b.n	800550a <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8005500:	683b      	ldr	r3, [r7, #0]
 8005502:	2200      	movs	r2, #0
 8005504:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8005506:	2301      	movs	r3, #1
 8005508:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800550a:	f000 fe57 	bl	80061bc <vPortExitCritical>

	return xReturn;
 800550e:	69fb      	ldr	r3, [r7, #28]
}
 8005510:	4618      	mov	r0, r3
 8005512:	3720      	adds	r7, #32
 8005514:	46bd      	mov	sp, r7
 8005516:	bd80      	pop	{r7, pc}
 8005518:	20000c28 	.word	0x20000c28
 800551c:	20000c3c 	.word	0x20000c3c

08005520 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8005520:	b480      	push	{r7}
 8005522:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8005524:	4b03      	ldr	r3, [pc, #12]	; (8005534 <vTaskMissedYield+0x14>)
 8005526:	2201      	movs	r2, #1
 8005528:	601a      	str	r2, [r3, #0]
}
 800552a:	bf00      	nop
 800552c:	46bd      	mov	sp, r7
 800552e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005532:	4770      	bx	lr
 8005534:	20000c38 	.word	0x20000c38

08005538 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8005538:	b580      	push	{r7, lr}
 800553a:	b082      	sub	sp, #8
 800553c:	af00      	add	r7, sp, #0
 800553e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8005540:	f000 f852 	bl	80055e8 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8005544:	4b06      	ldr	r3, [pc, #24]	; (8005560 <prvIdleTask+0x28>)
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	2b01      	cmp	r3, #1
 800554a:	d9f9      	bls.n	8005540 <prvIdleTask+0x8>
			{
				taskYIELD();
 800554c:	4b05      	ldr	r3, [pc, #20]	; (8005564 <prvIdleTask+0x2c>)
 800554e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005552:	601a      	str	r2, [r3, #0]
 8005554:	f3bf 8f4f 	dsb	sy
 8005558:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800555c:	e7f0      	b.n	8005540 <prvIdleTask+0x8>
 800555e:	bf00      	nop
 8005560:	20000754 	.word	0x20000754
 8005564:	e000ed04 	.word	0xe000ed04

08005568 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8005568:	b580      	push	{r7, lr}
 800556a:	b082      	sub	sp, #8
 800556c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800556e:	2300      	movs	r3, #0
 8005570:	607b      	str	r3, [r7, #4]
 8005572:	e00c      	b.n	800558e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8005574:	687a      	ldr	r2, [r7, #4]
 8005576:	4613      	mov	r3, r2
 8005578:	009b      	lsls	r3, r3, #2
 800557a:	4413      	add	r3, r2
 800557c:	009b      	lsls	r3, r3, #2
 800557e:	4a12      	ldr	r2, [pc, #72]	; (80055c8 <prvInitialiseTaskLists+0x60>)
 8005580:	4413      	add	r3, r2
 8005582:	4618      	mov	r0, r3
 8005584:	f7fe fcda 	bl	8003f3c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	3301      	adds	r3, #1
 800558c:	607b      	str	r3, [r7, #4]
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	2b37      	cmp	r3, #55	; 0x37
 8005592:	d9ef      	bls.n	8005574 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8005594:	480d      	ldr	r0, [pc, #52]	; (80055cc <prvInitialiseTaskLists+0x64>)
 8005596:	f7fe fcd1 	bl	8003f3c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800559a:	480d      	ldr	r0, [pc, #52]	; (80055d0 <prvInitialiseTaskLists+0x68>)
 800559c:	f7fe fcce 	bl	8003f3c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80055a0:	480c      	ldr	r0, [pc, #48]	; (80055d4 <prvInitialiseTaskLists+0x6c>)
 80055a2:	f7fe fccb 	bl	8003f3c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80055a6:	480c      	ldr	r0, [pc, #48]	; (80055d8 <prvInitialiseTaskLists+0x70>)
 80055a8:	f7fe fcc8 	bl	8003f3c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80055ac:	480b      	ldr	r0, [pc, #44]	; (80055dc <prvInitialiseTaskLists+0x74>)
 80055ae:	f7fe fcc5 	bl	8003f3c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80055b2:	4b0b      	ldr	r3, [pc, #44]	; (80055e0 <prvInitialiseTaskLists+0x78>)
 80055b4:	4a05      	ldr	r2, [pc, #20]	; (80055cc <prvInitialiseTaskLists+0x64>)
 80055b6:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80055b8:	4b0a      	ldr	r3, [pc, #40]	; (80055e4 <prvInitialiseTaskLists+0x7c>)
 80055ba:	4a05      	ldr	r2, [pc, #20]	; (80055d0 <prvInitialiseTaskLists+0x68>)
 80055bc:	601a      	str	r2, [r3, #0]
}
 80055be:	bf00      	nop
 80055c0:	3708      	adds	r7, #8
 80055c2:	46bd      	mov	sp, r7
 80055c4:	bd80      	pop	{r7, pc}
 80055c6:	bf00      	nop
 80055c8:	20000754 	.word	0x20000754
 80055cc:	20000bb4 	.word	0x20000bb4
 80055d0:	20000bc8 	.word	0x20000bc8
 80055d4:	20000be4 	.word	0x20000be4
 80055d8:	20000bf8 	.word	0x20000bf8
 80055dc:	20000c10 	.word	0x20000c10
 80055e0:	20000bdc 	.word	0x20000bdc
 80055e4:	20000be0 	.word	0x20000be0

080055e8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80055e8:	b580      	push	{r7, lr}
 80055ea:	b082      	sub	sp, #8
 80055ec:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80055ee:	e019      	b.n	8005624 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80055f0:	f000 fdb2 	bl	8006158 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80055f4:	4b0f      	ldr	r3, [pc, #60]	; (8005634 <prvCheckTasksWaitingTermination+0x4c>)
 80055f6:	68db      	ldr	r3, [r3, #12]
 80055f8:	68db      	ldr	r3, [r3, #12]
 80055fa:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	3304      	adds	r3, #4
 8005600:	4618      	mov	r0, r3
 8005602:	f7fe fd25 	bl	8004050 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8005606:	4b0c      	ldr	r3, [pc, #48]	; (8005638 <prvCheckTasksWaitingTermination+0x50>)
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	3b01      	subs	r3, #1
 800560c:	4a0a      	ldr	r2, [pc, #40]	; (8005638 <prvCheckTasksWaitingTermination+0x50>)
 800560e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8005610:	4b0a      	ldr	r3, [pc, #40]	; (800563c <prvCheckTasksWaitingTermination+0x54>)
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	3b01      	subs	r3, #1
 8005616:	4a09      	ldr	r2, [pc, #36]	; (800563c <prvCheckTasksWaitingTermination+0x54>)
 8005618:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800561a:	f000 fdcf 	bl	80061bc <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800561e:	6878      	ldr	r0, [r7, #4]
 8005620:	f000 f80e 	bl	8005640 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005624:	4b05      	ldr	r3, [pc, #20]	; (800563c <prvCheckTasksWaitingTermination+0x54>)
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	2b00      	cmp	r3, #0
 800562a:	d1e1      	bne.n	80055f0 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800562c:	bf00      	nop
 800562e:	3708      	adds	r7, #8
 8005630:	46bd      	mov	sp, r7
 8005632:	bd80      	pop	{r7, pc}
 8005634:	20000bf8 	.word	0x20000bf8
 8005638:	20000c24 	.word	0x20000c24
 800563c:	20000c0c 	.word	0x20000c0c

08005640 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8005640:	b580      	push	{r7, lr}
 8005642:	b084      	sub	sp, #16
 8005644:	af00      	add	r7, sp, #0
 8005646:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800564e:	2b00      	cmp	r3, #0
 8005650:	d108      	bne.n	8005664 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005656:	4618      	mov	r0, r3
 8005658:	f000 ff68 	bl	800652c <vPortFree>
				vPortFree( pxTCB );
 800565c:	6878      	ldr	r0, [r7, #4]
 800565e:	f000 ff65 	bl	800652c <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8005662:	e019      	b.n	8005698 <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800566a:	2b01      	cmp	r3, #1
 800566c:	d103      	bne.n	8005676 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800566e:	6878      	ldr	r0, [r7, #4]
 8005670:	f000 ff5c 	bl	800652c <vPortFree>
	}
 8005674:	e010      	b.n	8005698 <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800567c:	2b02      	cmp	r3, #2
 800567e:	d00b      	beq.n	8005698 <prvDeleteTCB+0x58>
 8005680:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005684:	b672      	cpsid	i
 8005686:	f383 8811 	msr	BASEPRI, r3
 800568a:	f3bf 8f6f 	isb	sy
 800568e:	f3bf 8f4f 	dsb	sy
 8005692:	b662      	cpsie	i
 8005694:	60fb      	str	r3, [r7, #12]
 8005696:	e7fe      	b.n	8005696 <prvDeleteTCB+0x56>
	}
 8005698:	bf00      	nop
 800569a:	3710      	adds	r7, #16
 800569c:	46bd      	mov	sp, r7
 800569e:	bd80      	pop	{r7, pc}

080056a0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80056a0:	b480      	push	{r7}
 80056a2:	b083      	sub	sp, #12
 80056a4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80056a6:	4b0c      	ldr	r3, [pc, #48]	; (80056d8 <prvResetNextTaskUnblockTime+0x38>)
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	2b00      	cmp	r3, #0
 80056ae:	d104      	bne.n	80056ba <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80056b0:	4b0a      	ldr	r3, [pc, #40]	; (80056dc <prvResetNextTaskUnblockTime+0x3c>)
 80056b2:	f04f 32ff 	mov.w	r2, #4294967295
 80056b6:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80056b8:	e008      	b.n	80056cc <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80056ba:	4b07      	ldr	r3, [pc, #28]	; (80056d8 <prvResetNextTaskUnblockTime+0x38>)
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	68db      	ldr	r3, [r3, #12]
 80056c0:	68db      	ldr	r3, [r3, #12]
 80056c2:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	685b      	ldr	r3, [r3, #4]
 80056c8:	4a04      	ldr	r2, [pc, #16]	; (80056dc <prvResetNextTaskUnblockTime+0x3c>)
 80056ca:	6013      	str	r3, [r2, #0]
}
 80056cc:	bf00      	nop
 80056ce:	370c      	adds	r7, #12
 80056d0:	46bd      	mov	sp, r7
 80056d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056d6:	4770      	bx	lr
 80056d8:	20000bdc 	.word	0x20000bdc
 80056dc:	20000c44 	.word	0x20000c44

080056e0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80056e0:	b480      	push	{r7}
 80056e2:	b083      	sub	sp, #12
 80056e4:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80056e6:	4b0b      	ldr	r3, [pc, #44]	; (8005714 <xTaskGetSchedulerState+0x34>)
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	2b00      	cmp	r3, #0
 80056ec:	d102      	bne.n	80056f4 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80056ee:	2301      	movs	r3, #1
 80056f0:	607b      	str	r3, [r7, #4]
 80056f2:	e008      	b.n	8005706 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80056f4:	4b08      	ldr	r3, [pc, #32]	; (8005718 <xTaskGetSchedulerState+0x38>)
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	2b00      	cmp	r3, #0
 80056fa:	d102      	bne.n	8005702 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80056fc:	2302      	movs	r3, #2
 80056fe:	607b      	str	r3, [r7, #4]
 8005700:	e001      	b.n	8005706 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8005702:	2300      	movs	r3, #0
 8005704:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8005706:	687b      	ldr	r3, [r7, #4]
	}
 8005708:	4618      	mov	r0, r3
 800570a:	370c      	adds	r7, #12
 800570c:	46bd      	mov	sp, r7
 800570e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005712:	4770      	bx	lr
 8005714:	20000c30 	.word	0x20000c30
 8005718:	20000c4c 	.word	0x20000c4c

0800571c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800571c:	b580      	push	{r7, lr}
 800571e:	b086      	sub	sp, #24
 8005720:	af00      	add	r7, sp, #0
 8005722:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8005728:	2300      	movs	r3, #0
 800572a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	2b00      	cmp	r3, #0
 8005730:	d058      	beq.n	80057e4 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8005732:	4b2f      	ldr	r3, [pc, #188]	; (80057f0 <xTaskPriorityDisinherit+0xd4>)
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	693a      	ldr	r2, [r7, #16]
 8005738:	429a      	cmp	r2, r3
 800573a:	d00b      	beq.n	8005754 <xTaskPriorityDisinherit+0x38>
 800573c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005740:	b672      	cpsid	i
 8005742:	f383 8811 	msr	BASEPRI, r3
 8005746:	f3bf 8f6f 	isb	sy
 800574a:	f3bf 8f4f 	dsb	sy
 800574e:	b662      	cpsie	i
 8005750:	60fb      	str	r3, [r7, #12]
 8005752:	e7fe      	b.n	8005752 <xTaskPriorityDisinherit+0x36>
			configASSERT( pxTCB->uxMutexesHeld );
 8005754:	693b      	ldr	r3, [r7, #16]
 8005756:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005758:	2b00      	cmp	r3, #0
 800575a:	d10b      	bne.n	8005774 <xTaskPriorityDisinherit+0x58>
 800575c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005760:	b672      	cpsid	i
 8005762:	f383 8811 	msr	BASEPRI, r3
 8005766:	f3bf 8f6f 	isb	sy
 800576a:	f3bf 8f4f 	dsb	sy
 800576e:	b662      	cpsie	i
 8005770:	60bb      	str	r3, [r7, #8]
 8005772:	e7fe      	b.n	8005772 <xTaskPriorityDisinherit+0x56>
			( pxTCB->uxMutexesHeld )--;
 8005774:	693b      	ldr	r3, [r7, #16]
 8005776:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005778:	1e5a      	subs	r2, r3, #1
 800577a:	693b      	ldr	r3, [r7, #16]
 800577c:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800577e:	693b      	ldr	r3, [r7, #16]
 8005780:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005782:	693b      	ldr	r3, [r7, #16]
 8005784:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005786:	429a      	cmp	r2, r3
 8005788:	d02c      	beq.n	80057e4 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800578a:	693b      	ldr	r3, [r7, #16]
 800578c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800578e:	2b00      	cmp	r3, #0
 8005790:	d128      	bne.n	80057e4 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005792:	693b      	ldr	r3, [r7, #16]
 8005794:	3304      	adds	r3, #4
 8005796:	4618      	mov	r0, r3
 8005798:	f7fe fc5a 	bl	8004050 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800579c:	693b      	ldr	r3, [r7, #16]
 800579e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80057a0:	693b      	ldr	r3, [r7, #16]
 80057a2:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80057a4:	693b      	ldr	r3, [r7, #16]
 80057a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057a8:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80057ac:	693b      	ldr	r3, [r7, #16]
 80057ae:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80057b0:	693b      	ldr	r3, [r7, #16]
 80057b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80057b4:	4b0f      	ldr	r3, [pc, #60]	; (80057f4 <xTaskPriorityDisinherit+0xd8>)
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	429a      	cmp	r2, r3
 80057ba:	d903      	bls.n	80057c4 <xTaskPriorityDisinherit+0xa8>
 80057bc:	693b      	ldr	r3, [r7, #16]
 80057be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057c0:	4a0c      	ldr	r2, [pc, #48]	; (80057f4 <xTaskPriorityDisinherit+0xd8>)
 80057c2:	6013      	str	r3, [r2, #0]
 80057c4:	693b      	ldr	r3, [r7, #16]
 80057c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80057c8:	4613      	mov	r3, r2
 80057ca:	009b      	lsls	r3, r3, #2
 80057cc:	4413      	add	r3, r2
 80057ce:	009b      	lsls	r3, r3, #2
 80057d0:	4a09      	ldr	r2, [pc, #36]	; (80057f8 <xTaskPriorityDisinherit+0xdc>)
 80057d2:	441a      	add	r2, r3
 80057d4:	693b      	ldr	r3, [r7, #16]
 80057d6:	3304      	adds	r3, #4
 80057d8:	4619      	mov	r1, r3
 80057da:	4610      	mov	r0, r2
 80057dc:	f7fe fbdb 	bl	8003f96 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80057e0:	2301      	movs	r3, #1
 80057e2:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80057e4:	697b      	ldr	r3, [r7, #20]
	}
 80057e6:	4618      	mov	r0, r3
 80057e8:	3718      	adds	r7, #24
 80057ea:	46bd      	mov	sp, r7
 80057ec:	bd80      	pop	{r7, pc}
 80057ee:	bf00      	nop
 80057f0:	20000750 	.word	0x20000750
 80057f4:	20000c2c 	.word	0x20000c2c
 80057f8:	20000754 	.word	0x20000754

080057fc <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80057fc:	b580      	push	{r7, lr}
 80057fe:	b084      	sub	sp, #16
 8005800:	af00      	add	r7, sp, #0
 8005802:	6078      	str	r0, [r7, #4]
 8005804:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8005806:	4b21      	ldr	r3, [pc, #132]	; (800588c <prvAddCurrentTaskToDelayedList+0x90>)
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800580c:	4b20      	ldr	r3, [pc, #128]	; (8005890 <prvAddCurrentTaskToDelayedList+0x94>)
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	3304      	adds	r3, #4
 8005812:	4618      	mov	r0, r3
 8005814:	f7fe fc1c 	bl	8004050 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800581e:	d10a      	bne.n	8005836 <prvAddCurrentTaskToDelayedList+0x3a>
 8005820:	683b      	ldr	r3, [r7, #0]
 8005822:	2b00      	cmp	r3, #0
 8005824:	d007      	beq.n	8005836 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005826:	4b1a      	ldr	r3, [pc, #104]	; (8005890 <prvAddCurrentTaskToDelayedList+0x94>)
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	3304      	adds	r3, #4
 800582c:	4619      	mov	r1, r3
 800582e:	4819      	ldr	r0, [pc, #100]	; (8005894 <prvAddCurrentTaskToDelayedList+0x98>)
 8005830:	f7fe fbb1 	bl	8003f96 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8005834:	e026      	b.n	8005884 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8005836:	68fa      	ldr	r2, [r7, #12]
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	4413      	add	r3, r2
 800583c:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800583e:	4b14      	ldr	r3, [pc, #80]	; (8005890 <prvAddCurrentTaskToDelayedList+0x94>)
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	68ba      	ldr	r2, [r7, #8]
 8005844:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8005846:	68ba      	ldr	r2, [r7, #8]
 8005848:	68fb      	ldr	r3, [r7, #12]
 800584a:	429a      	cmp	r2, r3
 800584c:	d209      	bcs.n	8005862 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800584e:	4b12      	ldr	r3, [pc, #72]	; (8005898 <prvAddCurrentTaskToDelayedList+0x9c>)
 8005850:	681a      	ldr	r2, [r3, #0]
 8005852:	4b0f      	ldr	r3, [pc, #60]	; (8005890 <prvAddCurrentTaskToDelayedList+0x94>)
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	3304      	adds	r3, #4
 8005858:	4619      	mov	r1, r3
 800585a:	4610      	mov	r0, r2
 800585c:	f7fe fbbf 	bl	8003fde <vListInsert>
}
 8005860:	e010      	b.n	8005884 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005862:	4b0e      	ldr	r3, [pc, #56]	; (800589c <prvAddCurrentTaskToDelayedList+0xa0>)
 8005864:	681a      	ldr	r2, [r3, #0]
 8005866:	4b0a      	ldr	r3, [pc, #40]	; (8005890 <prvAddCurrentTaskToDelayedList+0x94>)
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	3304      	adds	r3, #4
 800586c:	4619      	mov	r1, r3
 800586e:	4610      	mov	r0, r2
 8005870:	f7fe fbb5 	bl	8003fde <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8005874:	4b0a      	ldr	r3, [pc, #40]	; (80058a0 <prvAddCurrentTaskToDelayedList+0xa4>)
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	68ba      	ldr	r2, [r7, #8]
 800587a:	429a      	cmp	r2, r3
 800587c:	d202      	bcs.n	8005884 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800587e:	4a08      	ldr	r2, [pc, #32]	; (80058a0 <prvAddCurrentTaskToDelayedList+0xa4>)
 8005880:	68bb      	ldr	r3, [r7, #8]
 8005882:	6013      	str	r3, [r2, #0]
}
 8005884:	bf00      	nop
 8005886:	3710      	adds	r7, #16
 8005888:	46bd      	mov	sp, r7
 800588a:	bd80      	pop	{r7, pc}
 800588c:	20000c28 	.word	0x20000c28
 8005890:	20000750 	.word	0x20000750
 8005894:	20000c10 	.word	0x20000c10
 8005898:	20000be0 	.word	0x20000be0
 800589c:	20000bdc 	.word	0x20000bdc
 80058a0:	20000c44 	.word	0x20000c44

080058a4 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80058a4:	b580      	push	{r7, lr}
 80058a6:	b08a      	sub	sp, #40	; 0x28
 80058a8:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80058aa:	2300      	movs	r3, #0
 80058ac:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80058ae:	f000 fb0d 	bl	8005ecc <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80058b2:	4b1d      	ldr	r3, [pc, #116]	; (8005928 <xTimerCreateTimerTask+0x84>)
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	2b00      	cmp	r3, #0
 80058b8:	d021      	beq.n	80058fe <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80058ba:	2300      	movs	r3, #0
 80058bc:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80058be:	2300      	movs	r3, #0
 80058c0:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80058c2:	1d3a      	adds	r2, r7, #4
 80058c4:	f107 0108 	add.w	r1, r7, #8
 80058c8:	f107 030c 	add.w	r3, r7, #12
 80058cc:	4618      	mov	r0, r3
 80058ce:	f7fe fb1b 	bl	8003f08 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80058d2:	6879      	ldr	r1, [r7, #4]
 80058d4:	68bb      	ldr	r3, [r7, #8]
 80058d6:	68fa      	ldr	r2, [r7, #12]
 80058d8:	9202      	str	r2, [sp, #8]
 80058da:	9301      	str	r3, [sp, #4]
 80058dc:	2302      	movs	r3, #2
 80058de:	9300      	str	r3, [sp, #0]
 80058e0:	2300      	movs	r3, #0
 80058e2:	460a      	mov	r2, r1
 80058e4:	4911      	ldr	r1, [pc, #68]	; (800592c <xTimerCreateTimerTask+0x88>)
 80058e6:	4812      	ldr	r0, [pc, #72]	; (8005930 <xTimerCreateTimerTask+0x8c>)
 80058e8:	f7ff f8d2 	bl	8004a90 <xTaskCreateStatic>
 80058ec:	4602      	mov	r2, r0
 80058ee:	4b11      	ldr	r3, [pc, #68]	; (8005934 <xTimerCreateTimerTask+0x90>)
 80058f0:	601a      	str	r2, [r3, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80058f2:	4b10      	ldr	r3, [pc, #64]	; (8005934 <xTimerCreateTimerTask+0x90>)
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	2b00      	cmp	r3, #0
 80058f8:	d001      	beq.n	80058fe <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80058fa:	2301      	movs	r3, #1
 80058fc:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80058fe:	697b      	ldr	r3, [r7, #20]
 8005900:	2b00      	cmp	r3, #0
 8005902:	d10b      	bne.n	800591c <xTimerCreateTimerTask+0x78>
 8005904:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005908:	b672      	cpsid	i
 800590a:	f383 8811 	msr	BASEPRI, r3
 800590e:	f3bf 8f6f 	isb	sy
 8005912:	f3bf 8f4f 	dsb	sy
 8005916:	b662      	cpsie	i
 8005918:	613b      	str	r3, [r7, #16]
 800591a:	e7fe      	b.n	800591a <xTimerCreateTimerTask+0x76>
	return xReturn;
 800591c:	697b      	ldr	r3, [r7, #20]
}
 800591e:	4618      	mov	r0, r3
 8005920:	3718      	adds	r7, #24
 8005922:	46bd      	mov	sp, r7
 8005924:	bd80      	pop	{r7, pc}
 8005926:	bf00      	nop
 8005928:	20000c80 	.word	0x20000c80
 800592c:	0800710c 	.word	0x0800710c
 8005930:	08005a71 	.word	0x08005a71
 8005934:	20000c84 	.word	0x20000c84

08005938 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8005938:	b580      	push	{r7, lr}
 800593a:	b08a      	sub	sp, #40	; 0x28
 800593c:	af00      	add	r7, sp, #0
 800593e:	60f8      	str	r0, [r7, #12]
 8005940:	60b9      	str	r1, [r7, #8]
 8005942:	607a      	str	r2, [r7, #4]
 8005944:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8005946:	2300      	movs	r3, #0
 8005948:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800594a:	68fb      	ldr	r3, [r7, #12]
 800594c:	2b00      	cmp	r3, #0
 800594e:	d10b      	bne.n	8005968 <xTimerGenericCommand+0x30>
 8005950:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005954:	b672      	cpsid	i
 8005956:	f383 8811 	msr	BASEPRI, r3
 800595a:	f3bf 8f6f 	isb	sy
 800595e:	f3bf 8f4f 	dsb	sy
 8005962:	b662      	cpsie	i
 8005964:	623b      	str	r3, [r7, #32]
 8005966:	e7fe      	b.n	8005966 <xTimerGenericCommand+0x2e>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8005968:	4b19      	ldr	r3, [pc, #100]	; (80059d0 <xTimerGenericCommand+0x98>)
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	2b00      	cmp	r3, #0
 800596e:	d02a      	beq.n	80059c6 <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8005970:	68bb      	ldr	r3, [r7, #8]
 8005972:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8005978:	68fb      	ldr	r3, [r7, #12]
 800597a:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800597c:	68bb      	ldr	r3, [r7, #8]
 800597e:	2b05      	cmp	r3, #5
 8005980:	dc18      	bgt.n	80059b4 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8005982:	f7ff fead 	bl	80056e0 <xTaskGetSchedulerState>
 8005986:	4603      	mov	r3, r0
 8005988:	2b02      	cmp	r3, #2
 800598a:	d109      	bne.n	80059a0 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800598c:	4b10      	ldr	r3, [pc, #64]	; (80059d0 <xTimerGenericCommand+0x98>)
 800598e:	6818      	ldr	r0, [r3, #0]
 8005990:	f107 0110 	add.w	r1, r7, #16
 8005994:	2300      	movs	r3, #0
 8005996:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005998:	f7fe fc8e 	bl	80042b8 <xQueueGenericSend>
 800599c:	6278      	str	r0, [r7, #36]	; 0x24
 800599e:	e012      	b.n	80059c6 <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80059a0:	4b0b      	ldr	r3, [pc, #44]	; (80059d0 <xTimerGenericCommand+0x98>)
 80059a2:	6818      	ldr	r0, [r3, #0]
 80059a4:	f107 0110 	add.w	r1, r7, #16
 80059a8:	2300      	movs	r3, #0
 80059aa:	2200      	movs	r2, #0
 80059ac:	f7fe fc84 	bl	80042b8 <xQueueGenericSend>
 80059b0:	6278      	str	r0, [r7, #36]	; 0x24
 80059b2:	e008      	b.n	80059c6 <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80059b4:	4b06      	ldr	r3, [pc, #24]	; (80059d0 <xTimerGenericCommand+0x98>)
 80059b6:	6818      	ldr	r0, [r3, #0]
 80059b8:	f107 0110 	add.w	r1, r7, #16
 80059bc:	2300      	movs	r3, #0
 80059be:	683a      	ldr	r2, [r7, #0]
 80059c0:	f7fe fd7c 	bl	80044bc <xQueueGenericSendFromISR>
 80059c4:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80059c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80059c8:	4618      	mov	r0, r3
 80059ca:	3728      	adds	r7, #40	; 0x28
 80059cc:	46bd      	mov	sp, r7
 80059ce:	bd80      	pop	{r7, pc}
 80059d0:	20000c80 	.word	0x20000c80

080059d4 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80059d4:	b580      	push	{r7, lr}
 80059d6:	b088      	sub	sp, #32
 80059d8:	af02      	add	r7, sp, #8
 80059da:	6078      	str	r0, [r7, #4]
 80059dc:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80059de:	4b23      	ldr	r3, [pc, #140]	; (8005a6c <prvProcessExpiredTimer+0x98>)
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	68db      	ldr	r3, [r3, #12]
 80059e4:	68db      	ldr	r3, [r3, #12]
 80059e6:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80059e8:	697b      	ldr	r3, [r7, #20]
 80059ea:	3304      	adds	r3, #4
 80059ec:	4618      	mov	r0, r3
 80059ee:	f7fe fb2f 	bl	8004050 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80059f2:	697b      	ldr	r3, [r7, #20]
 80059f4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80059f8:	f003 0304 	and.w	r3, r3, #4
 80059fc:	2b00      	cmp	r3, #0
 80059fe:	d023      	beq.n	8005a48 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8005a00:	697b      	ldr	r3, [r7, #20]
 8005a02:	699a      	ldr	r2, [r3, #24]
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	18d1      	adds	r1, r2, r3
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	683a      	ldr	r2, [r7, #0]
 8005a0c:	6978      	ldr	r0, [r7, #20]
 8005a0e:	f000 f8d3 	bl	8005bb8 <prvInsertTimerInActiveList>
 8005a12:	4603      	mov	r3, r0
 8005a14:	2b00      	cmp	r3, #0
 8005a16:	d020      	beq.n	8005a5a <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8005a18:	2300      	movs	r3, #0
 8005a1a:	9300      	str	r3, [sp, #0]
 8005a1c:	2300      	movs	r3, #0
 8005a1e:	687a      	ldr	r2, [r7, #4]
 8005a20:	2100      	movs	r1, #0
 8005a22:	6978      	ldr	r0, [r7, #20]
 8005a24:	f7ff ff88 	bl	8005938 <xTimerGenericCommand>
 8005a28:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8005a2a:	693b      	ldr	r3, [r7, #16]
 8005a2c:	2b00      	cmp	r3, #0
 8005a2e:	d114      	bne.n	8005a5a <prvProcessExpiredTimer+0x86>
 8005a30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a34:	b672      	cpsid	i
 8005a36:	f383 8811 	msr	BASEPRI, r3
 8005a3a:	f3bf 8f6f 	isb	sy
 8005a3e:	f3bf 8f4f 	dsb	sy
 8005a42:	b662      	cpsie	i
 8005a44:	60fb      	str	r3, [r7, #12]
 8005a46:	e7fe      	b.n	8005a46 <prvProcessExpiredTimer+0x72>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8005a48:	697b      	ldr	r3, [r7, #20]
 8005a4a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005a4e:	f023 0301 	bic.w	r3, r3, #1
 8005a52:	b2da      	uxtb	r2, r3
 8005a54:	697b      	ldr	r3, [r7, #20]
 8005a56:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005a5a:	697b      	ldr	r3, [r7, #20]
 8005a5c:	6a1b      	ldr	r3, [r3, #32]
 8005a5e:	6978      	ldr	r0, [r7, #20]
 8005a60:	4798      	blx	r3
}
 8005a62:	bf00      	nop
 8005a64:	3718      	adds	r7, #24
 8005a66:	46bd      	mov	sp, r7
 8005a68:	bd80      	pop	{r7, pc}
 8005a6a:	bf00      	nop
 8005a6c:	20000c78 	.word	0x20000c78

08005a70 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8005a70:	b580      	push	{r7, lr}
 8005a72:	b084      	sub	sp, #16
 8005a74:	af00      	add	r7, sp, #0
 8005a76:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8005a78:	f107 0308 	add.w	r3, r7, #8
 8005a7c:	4618      	mov	r0, r3
 8005a7e:	f000 f857 	bl	8005b30 <prvGetNextExpireTime>
 8005a82:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8005a84:	68bb      	ldr	r3, [r7, #8]
 8005a86:	4619      	mov	r1, r3
 8005a88:	68f8      	ldr	r0, [r7, #12]
 8005a8a:	f000 f803 	bl	8005a94 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8005a8e:	f000 f8d5 	bl	8005c3c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8005a92:	e7f1      	b.n	8005a78 <prvTimerTask+0x8>

08005a94 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8005a94:	b580      	push	{r7, lr}
 8005a96:	b084      	sub	sp, #16
 8005a98:	af00      	add	r7, sp, #0
 8005a9a:	6078      	str	r0, [r7, #4]
 8005a9c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8005a9e:	f7ff fa3b 	bl	8004f18 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8005aa2:	f107 0308 	add.w	r3, r7, #8
 8005aa6:	4618      	mov	r0, r3
 8005aa8:	f000 f866 	bl	8005b78 <prvSampleTimeNow>
 8005aac:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8005aae:	68bb      	ldr	r3, [r7, #8]
 8005ab0:	2b00      	cmp	r3, #0
 8005ab2:	d130      	bne.n	8005b16 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8005ab4:	683b      	ldr	r3, [r7, #0]
 8005ab6:	2b00      	cmp	r3, #0
 8005ab8:	d10a      	bne.n	8005ad0 <prvProcessTimerOrBlockTask+0x3c>
 8005aba:	687a      	ldr	r2, [r7, #4]
 8005abc:	68fb      	ldr	r3, [r7, #12]
 8005abe:	429a      	cmp	r2, r3
 8005ac0:	d806      	bhi.n	8005ad0 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8005ac2:	f7ff fa37 	bl	8004f34 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8005ac6:	68f9      	ldr	r1, [r7, #12]
 8005ac8:	6878      	ldr	r0, [r7, #4]
 8005aca:	f7ff ff83 	bl	80059d4 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8005ace:	e024      	b.n	8005b1a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8005ad0:	683b      	ldr	r3, [r7, #0]
 8005ad2:	2b00      	cmp	r3, #0
 8005ad4:	d008      	beq.n	8005ae8 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8005ad6:	4b13      	ldr	r3, [pc, #76]	; (8005b24 <prvProcessTimerOrBlockTask+0x90>)
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	2b00      	cmp	r3, #0
 8005ade:	d101      	bne.n	8005ae4 <prvProcessTimerOrBlockTask+0x50>
 8005ae0:	2301      	movs	r3, #1
 8005ae2:	e000      	b.n	8005ae6 <prvProcessTimerOrBlockTask+0x52>
 8005ae4:	2300      	movs	r3, #0
 8005ae6:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8005ae8:	4b0f      	ldr	r3, [pc, #60]	; (8005b28 <prvProcessTimerOrBlockTask+0x94>)
 8005aea:	6818      	ldr	r0, [r3, #0]
 8005aec:	687a      	ldr	r2, [r7, #4]
 8005aee:	68fb      	ldr	r3, [r7, #12]
 8005af0:	1ad3      	subs	r3, r2, r3
 8005af2:	683a      	ldr	r2, [r7, #0]
 8005af4:	4619      	mov	r1, r3
 8005af6:	f7fe ff97 	bl	8004a28 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8005afa:	f7ff fa1b 	bl	8004f34 <xTaskResumeAll>
 8005afe:	4603      	mov	r3, r0
 8005b00:	2b00      	cmp	r3, #0
 8005b02:	d10a      	bne.n	8005b1a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8005b04:	4b09      	ldr	r3, [pc, #36]	; (8005b2c <prvProcessTimerOrBlockTask+0x98>)
 8005b06:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005b0a:	601a      	str	r2, [r3, #0]
 8005b0c:	f3bf 8f4f 	dsb	sy
 8005b10:	f3bf 8f6f 	isb	sy
}
 8005b14:	e001      	b.n	8005b1a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8005b16:	f7ff fa0d 	bl	8004f34 <xTaskResumeAll>
}
 8005b1a:	bf00      	nop
 8005b1c:	3710      	adds	r7, #16
 8005b1e:	46bd      	mov	sp, r7
 8005b20:	bd80      	pop	{r7, pc}
 8005b22:	bf00      	nop
 8005b24:	20000c7c 	.word	0x20000c7c
 8005b28:	20000c80 	.word	0x20000c80
 8005b2c:	e000ed04 	.word	0xe000ed04

08005b30 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8005b30:	b480      	push	{r7}
 8005b32:	b085      	sub	sp, #20
 8005b34:	af00      	add	r7, sp, #0
 8005b36:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8005b38:	4b0e      	ldr	r3, [pc, #56]	; (8005b74 <prvGetNextExpireTime+0x44>)
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	2b00      	cmp	r3, #0
 8005b40:	d101      	bne.n	8005b46 <prvGetNextExpireTime+0x16>
 8005b42:	2201      	movs	r2, #1
 8005b44:	e000      	b.n	8005b48 <prvGetNextExpireTime+0x18>
 8005b46:	2200      	movs	r2, #0
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	2b00      	cmp	r3, #0
 8005b52:	d105      	bne.n	8005b60 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005b54:	4b07      	ldr	r3, [pc, #28]	; (8005b74 <prvGetNextExpireTime+0x44>)
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	68db      	ldr	r3, [r3, #12]
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	60fb      	str	r3, [r7, #12]
 8005b5e:	e001      	b.n	8005b64 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8005b60:	2300      	movs	r3, #0
 8005b62:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8005b64:	68fb      	ldr	r3, [r7, #12]
}
 8005b66:	4618      	mov	r0, r3
 8005b68:	3714      	adds	r7, #20
 8005b6a:	46bd      	mov	sp, r7
 8005b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b70:	4770      	bx	lr
 8005b72:	bf00      	nop
 8005b74:	20000c78 	.word	0x20000c78

08005b78 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8005b78:	b580      	push	{r7, lr}
 8005b7a:	b084      	sub	sp, #16
 8005b7c:	af00      	add	r7, sp, #0
 8005b7e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8005b80:	f7ff fa76 	bl	8005070 <xTaskGetTickCount>
 8005b84:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8005b86:	4b0b      	ldr	r3, [pc, #44]	; (8005bb4 <prvSampleTimeNow+0x3c>)
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	68fa      	ldr	r2, [r7, #12]
 8005b8c:	429a      	cmp	r2, r3
 8005b8e:	d205      	bcs.n	8005b9c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8005b90:	f000 f936 	bl	8005e00 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	2201      	movs	r2, #1
 8005b98:	601a      	str	r2, [r3, #0]
 8005b9a:	e002      	b.n	8005ba2 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	2200      	movs	r2, #0
 8005ba0:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8005ba2:	4a04      	ldr	r2, [pc, #16]	; (8005bb4 <prvSampleTimeNow+0x3c>)
 8005ba4:	68fb      	ldr	r3, [r7, #12]
 8005ba6:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8005ba8:	68fb      	ldr	r3, [r7, #12]
}
 8005baa:	4618      	mov	r0, r3
 8005bac:	3710      	adds	r7, #16
 8005bae:	46bd      	mov	sp, r7
 8005bb0:	bd80      	pop	{r7, pc}
 8005bb2:	bf00      	nop
 8005bb4:	20000c88 	.word	0x20000c88

08005bb8 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8005bb8:	b580      	push	{r7, lr}
 8005bba:	b086      	sub	sp, #24
 8005bbc:	af00      	add	r7, sp, #0
 8005bbe:	60f8      	str	r0, [r7, #12]
 8005bc0:	60b9      	str	r1, [r7, #8]
 8005bc2:	607a      	str	r2, [r7, #4]
 8005bc4:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8005bc6:	2300      	movs	r3, #0
 8005bc8:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8005bca:	68fb      	ldr	r3, [r7, #12]
 8005bcc:	68ba      	ldr	r2, [r7, #8]
 8005bce:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8005bd0:	68fb      	ldr	r3, [r7, #12]
 8005bd2:	68fa      	ldr	r2, [r7, #12]
 8005bd4:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8005bd6:	68ba      	ldr	r2, [r7, #8]
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	429a      	cmp	r2, r3
 8005bdc:	d812      	bhi.n	8005c04 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005bde:	687a      	ldr	r2, [r7, #4]
 8005be0:	683b      	ldr	r3, [r7, #0]
 8005be2:	1ad2      	subs	r2, r2, r3
 8005be4:	68fb      	ldr	r3, [r7, #12]
 8005be6:	699b      	ldr	r3, [r3, #24]
 8005be8:	429a      	cmp	r2, r3
 8005bea:	d302      	bcc.n	8005bf2 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8005bec:	2301      	movs	r3, #1
 8005bee:	617b      	str	r3, [r7, #20]
 8005bf0:	e01b      	b.n	8005c2a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8005bf2:	4b10      	ldr	r3, [pc, #64]	; (8005c34 <prvInsertTimerInActiveList+0x7c>)
 8005bf4:	681a      	ldr	r2, [r3, #0]
 8005bf6:	68fb      	ldr	r3, [r7, #12]
 8005bf8:	3304      	adds	r3, #4
 8005bfa:	4619      	mov	r1, r3
 8005bfc:	4610      	mov	r0, r2
 8005bfe:	f7fe f9ee 	bl	8003fde <vListInsert>
 8005c02:	e012      	b.n	8005c2a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8005c04:	687a      	ldr	r2, [r7, #4]
 8005c06:	683b      	ldr	r3, [r7, #0]
 8005c08:	429a      	cmp	r2, r3
 8005c0a:	d206      	bcs.n	8005c1a <prvInsertTimerInActiveList+0x62>
 8005c0c:	68ba      	ldr	r2, [r7, #8]
 8005c0e:	683b      	ldr	r3, [r7, #0]
 8005c10:	429a      	cmp	r2, r3
 8005c12:	d302      	bcc.n	8005c1a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8005c14:	2301      	movs	r3, #1
 8005c16:	617b      	str	r3, [r7, #20]
 8005c18:	e007      	b.n	8005c2a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8005c1a:	4b07      	ldr	r3, [pc, #28]	; (8005c38 <prvInsertTimerInActiveList+0x80>)
 8005c1c:	681a      	ldr	r2, [r3, #0]
 8005c1e:	68fb      	ldr	r3, [r7, #12]
 8005c20:	3304      	adds	r3, #4
 8005c22:	4619      	mov	r1, r3
 8005c24:	4610      	mov	r0, r2
 8005c26:	f7fe f9da 	bl	8003fde <vListInsert>
		}
	}

	return xProcessTimerNow;
 8005c2a:	697b      	ldr	r3, [r7, #20]
}
 8005c2c:	4618      	mov	r0, r3
 8005c2e:	3718      	adds	r7, #24
 8005c30:	46bd      	mov	sp, r7
 8005c32:	bd80      	pop	{r7, pc}
 8005c34:	20000c7c 	.word	0x20000c7c
 8005c38:	20000c78 	.word	0x20000c78

08005c3c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8005c3c:	b580      	push	{r7, lr}
 8005c3e:	b08e      	sub	sp, #56	; 0x38
 8005c40:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8005c42:	e0cc      	b.n	8005dde <prvProcessReceivedCommands+0x1a2>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	2b00      	cmp	r3, #0
 8005c48:	da19      	bge.n	8005c7e <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8005c4a:	1d3b      	adds	r3, r7, #4
 8005c4c:	3304      	adds	r3, #4
 8005c4e:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8005c50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c52:	2b00      	cmp	r3, #0
 8005c54:	d10b      	bne.n	8005c6e <prvProcessReceivedCommands+0x32>
 8005c56:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c5a:	b672      	cpsid	i
 8005c5c:	f383 8811 	msr	BASEPRI, r3
 8005c60:	f3bf 8f6f 	isb	sy
 8005c64:	f3bf 8f4f 	dsb	sy
 8005c68:	b662      	cpsie	i
 8005c6a:	61fb      	str	r3, [r7, #28]
 8005c6c:	e7fe      	b.n	8005c6c <prvProcessReceivedCommands+0x30>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8005c6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005c74:	6850      	ldr	r0, [r2, #4]
 8005c76:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005c78:	6892      	ldr	r2, [r2, #8]
 8005c7a:	4611      	mov	r1, r2
 8005c7c:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	2b00      	cmp	r3, #0
 8005c82:	f2c0 80ab 	blt.w	8005ddc <prvProcessReceivedCommands+0x1a0>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8005c86:	68fb      	ldr	r3, [r7, #12]
 8005c88:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8005c8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c8c:	695b      	ldr	r3, [r3, #20]
 8005c8e:	2b00      	cmp	r3, #0
 8005c90:	d004      	beq.n	8005c9c <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005c92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c94:	3304      	adds	r3, #4
 8005c96:	4618      	mov	r0, r3
 8005c98:	f7fe f9da 	bl	8004050 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8005c9c:	463b      	mov	r3, r7
 8005c9e:	4618      	mov	r0, r3
 8005ca0:	f7ff ff6a 	bl	8005b78 <prvSampleTimeNow>
 8005ca4:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	2b09      	cmp	r3, #9
 8005caa:	f200 8098 	bhi.w	8005dde <prvProcessReceivedCommands+0x1a2>
 8005cae:	a201      	add	r2, pc, #4	; (adr r2, 8005cb4 <prvProcessReceivedCommands+0x78>)
 8005cb0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005cb4:	08005cdd 	.word	0x08005cdd
 8005cb8:	08005cdd 	.word	0x08005cdd
 8005cbc:	08005cdd 	.word	0x08005cdd
 8005cc0:	08005d53 	.word	0x08005d53
 8005cc4:	08005d67 	.word	0x08005d67
 8005cc8:	08005db3 	.word	0x08005db3
 8005ccc:	08005cdd 	.word	0x08005cdd
 8005cd0:	08005cdd 	.word	0x08005cdd
 8005cd4:	08005d53 	.word	0x08005d53
 8005cd8:	08005d67 	.word	0x08005d67
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8005cdc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005cde:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005ce2:	f043 0301 	orr.w	r3, r3, #1
 8005ce6:	b2da      	uxtb	r2, r3
 8005ce8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005cea:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8005cee:	68ba      	ldr	r2, [r7, #8]
 8005cf0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005cf2:	699b      	ldr	r3, [r3, #24]
 8005cf4:	18d1      	adds	r1, r2, r3
 8005cf6:	68bb      	ldr	r3, [r7, #8]
 8005cf8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005cfa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005cfc:	f7ff ff5c 	bl	8005bb8 <prvInsertTimerInActiveList>
 8005d00:	4603      	mov	r3, r0
 8005d02:	2b00      	cmp	r3, #0
 8005d04:	d06b      	beq.n	8005dde <prvProcessReceivedCommands+0x1a2>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005d06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d08:	6a1b      	ldr	r3, [r3, #32]
 8005d0a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005d0c:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8005d0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d10:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005d14:	f003 0304 	and.w	r3, r3, #4
 8005d18:	2b00      	cmp	r3, #0
 8005d1a:	d060      	beq.n	8005dde <prvProcessReceivedCommands+0x1a2>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8005d1c:	68ba      	ldr	r2, [r7, #8]
 8005d1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d20:	699b      	ldr	r3, [r3, #24]
 8005d22:	441a      	add	r2, r3
 8005d24:	2300      	movs	r3, #0
 8005d26:	9300      	str	r3, [sp, #0]
 8005d28:	2300      	movs	r3, #0
 8005d2a:	2100      	movs	r1, #0
 8005d2c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005d2e:	f7ff fe03 	bl	8005938 <xTimerGenericCommand>
 8005d32:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8005d34:	6a3b      	ldr	r3, [r7, #32]
 8005d36:	2b00      	cmp	r3, #0
 8005d38:	d151      	bne.n	8005dde <prvProcessReceivedCommands+0x1a2>
 8005d3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d3e:	b672      	cpsid	i
 8005d40:	f383 8811 	msr	BASEPRI, r3
 8005d44:	f3bf 8f6f 	isb	sy
 8005d48:	f3bf 8f4f 	dsb	sy
 8005d4c:	b662      	cpsie	i
 8005d4e:	61bb      	str	r3, [r7, #24]
 8005d50:	e7fe      	b.n	8005d50 <prvProcessReceivedCommands+0x114>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8005d52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d54:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005d58:	f023 0301 	bic.w	r3, r3, #1
 8005d5c:	b2da      	uxtb	r2, r3
 8005d5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d60:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8005d64:	e03b      	b.n	8005dde <prvProcessReceivedCommands+0x1a2>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8005d66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d68:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005d6c:	f043 0301 	orr.w	r3, r3, #1
 8005d70:	b2da      	uxtb	r2, r3
 8005d72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d74:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8005d78:	68ba      	ldr	r2, [r7, #8]
 8005d7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d7c:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8005d7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d80:	699b      	ldr	r3, [r3, #24]
 8005d82:	2b00      	cmp	r3, #0
 8005d84:	d10b      	bne.n	8005d9e <prvProcessReceivedCommands+0x162>
 8005d86:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d8a:	b672      	cpsid	i
 8005d8c:	f383 8811 	msr	BASEPRI, r3
 8005d90:	f3bf 8f6f 	isb	sy
 8005d94:	f3bf 8f4f 	dsb	sy
 8005d98:	b662      	cpsie	i
 8005d9a:	617b      	str	r3, [r7, #20]
 8005d9c:	e7fe      	b.n	8005d9c <prvProcessReceivedCommands+0x160>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8005d9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005da0:	699a      	ldr	r2, [r3, #24]
 8005da2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005da4:	18d1      	adds	r1, r2, r3
 8005da6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005da8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005daa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005dac:	f7ff ff04 	bl	8005bb8 <prvInsertTimerInActiveList>
					break;
 8005db0:	e015      	b.n	8005dde <prvProcessReceivedCommands+0x1a2>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8005db2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005db4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005db8:	f003 0302 	and.w	r3, r3, #2
 8005dbc:	2b00      	cmp	r3, #0
 8005dbe:	d103      	bne.n	8005dc8 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 8005dc0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005dc2:	f000 fbb3 	bl	800652c <vPortFree>
 8005dc6:	e00a      	b.n	8005dde <prvProcessReceivedCommands+0x1a2>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8005dc8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005dca:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005dce:	f023 0301 	bic.w	r3, r3, #1
 8005dd2:	b2da      	uxtb	r2, r3
 8005dd4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005dd6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8005dda:	e000      	b.n	8005dde <prvProcessReceivedCommands+0x1a2>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8005ddc:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8005dde:	4b07      	ldr	r3, [pc, #28]	; (8005dfc <prvProcessReceivedCommands+0x1c0>)
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	1d39      	adds	r1, r7, #4
 8005de4:	2200      	movs	r2, #0
 8005de6:	4618      	mov	r0, r3
 8005de8:	f7fe fc04 	bl	80045f4 <xQueueReceive>
 8005dec:	4603      	mov	r3, r0
 8005dee:	2b00      	cmp	r3, #0
 8005df0:	f47f af28 	bne.w	8005c44 <prvProcessReceivedCommands+0x8>
	}
}
 8005df4:	bf00      	nop
 8005df6:	3730      	adds	r7, #48	; 0x30
 8005df8:	46bd      	mov	sp, r7
 8005dfa:	bd80      	pop	{r7, pc}
 8005dfc:	20000c80 	.word	0x20000c80

08005e00 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8005e00:	b580      	push	{r7, lr}
 8005e02:	b088      	sub	sp, #32
 8005e04:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8005e06:	e049      	b.n	8005e9c <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005e08:	4b2e      	ldr	r3, [pc, #184]	; (8005ec4 <prvSwitchTimerLists+0xc4>)
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	68db      	ldr	r3, [r3, #12]
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005e12:	4b2c      	ldr	r3, [pc, #176]	; (8005ec4 <prvSwitchTimerLists+0xc4>)
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	68db      	ldr	r3, [r3, #12]
 8005e18:	68db      	ldr	r3, [r3, #12]
 8005e1a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005e1c:	68fb      	ldr	r3, [r7, #12]
 8005e1e:	3304      	adds	r3, #4
 8005e20:	4618      	mov	r0, r3
 8005e22:	f7fe f915 	bl	8004050 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005e26:	68fb      	ldr	r3, [r7, #12]
 8005e28:	6a1b      	ldr	r3, [r3, #32]
 8005e2a:	68f8      	ldr	r0, [r7, #12]
 8005e2c:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8005e2e:	68fb      	ldr	r3, [r7, #12]
 8005e30:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005e34:	f003 0304 	and.w	r3, r3, #4
 8005e38:	2b00      	cmp	r3, #0
 8005e3a:	d02f      	beq.n	8005e9c <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8005e3c:	68fb      	ldr	r3, [r7, #12]
 8005e3e:	699b      	ldr	r3, [r3, #24]
 8005e40:	693a      	ldr	r2, [r7, #16]
 8005e42:	4413      	add	r3, r2
 8005e44:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8005e46:	68ba      	ldr	r2, [r7, #8]
 8005e48:	693b      	ldr	r3, [r7, #16]
 8005e4a:	429a      	cmp	r2, r3
 8005e4c:	d90e      	bls.n	8005e6c <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8005e4e:	68fb      	ldr	r3, [r7, #12]
 8005e50:	68ba      	ldr	r2, [r7, #8]
 8005e52:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8005e54:	68fb      	ldr	r3, [r7, #12]
 8005e56:	68fa      	ldr	r2, [r7, #12]
 8005e58:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8005e5a:	4b1a      	ldr	r3, [pc, #104]	; (8005ec4 <prvSwitchTimerLists+0xc4>)
 8005e5c:	681a      	ldr	r2, [r3, #0]
 8005e5e:	68fb      	ldr	r3, [r7, #12]
 8005e60:	3304      	adds	r3, #4
 8005e62:	4619      	mov	r1, r3
 8005e64:	4610      	mov	r0, r2
 8005e66:	f7fe f8ba 	bl	8003fde <vListInsert>
 8005e6a:	e017      	b.n	8005e9c <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8005e6c:	2300      	movs	r3, #0
 8005e6e:	9300      	str	r3, [sp, #0]
 8005e70:	2300      	movs	r3, #0
 8005e72:	693a      	ldr	r2, [r7, #16]
 8005e74:	2100      	movs	r1, #0
 8005e76:	68f8      	ldr	r0, [r7, #12]
 8005e78:	f7ff fd5e 	bl	8005938 <xTimerGenericCommand>
 8005e7c:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	2b00      	cmp	r3, #0
 8005e82:	d10b      	bne.n	8005e9c <prvSwitchTimerLists+0x9c>
 8005e84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e88:	b672      	cpsid	i
 8005e8a:	f383 8811 	msr	BASEPRI, r3
 8005e8e:	f3bf 8f6f 	isb	sy
 8005e92:	f3bf 8f4f 	dsb	sy
 8005e96:	b662      	cpsie	i
 8005e98:	603b      	str	r3, [r7, #0]
 8005e9a:	e7fe      	b.n	8005e9a <prvSwitchTimerLists+0x9a>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8005e9c:	4b09      	ldr	r3, [pc, #36]	; (8005ec4 <prvSwitchTimerLists+0xc4>)
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	2b00      	cmp	r3, #0
 8005ea4:	d1b0      	bne.n	8005e08 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8005ea6:	4b07      	ldr	r3, [pc, #28]	; (8005ec4 <prvSwitchTimerLists+0xc4>)
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8005eac:	4b06      	ldr	r3, [pc, #24]	; (8005ec8 <prvSwitchTimerLists+0xc8>)
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	4a04      	ldr	r2, [pc, #16]	; (8005ec4 <prvSwitchTimerLists+0xc4>)
 8005eb2:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8005eb4:	4a04      	ldr	r2, [pc, #16]	; (8005ec8 <prvSwitchTimerLists+0xc8>)
 8005eb6:	697b      	ldr	r3, [r7, #20]
 8005eb8:	6013      	str	r3, [r2, #0]
}
 8005eba:	bf00      	nop
 8005ebc:	3718      	adds	r7, #24
 8005ebe:	46bd      	mov	sp, r7
 8005ec0:	bd80      	pop	{r7, pc}
 8005ec2:	bf00      	nop
 8005ec4:	20000c78 	.word	0x20000c78
 8005ec8:	20000c7c 	.word	0x20000c7c

08005ecc <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8005ecc:	b580      	push	{r7, lr}
 8005ece:	b082      	sub	sp, #8
 8005ed0:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8005ed2:	f000 f941 	bl	8006158 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8005ed6:	4b15      	ldr	r3, [pc, #84]	; (8005f2c <prvCheckForValidListAndQueue+0x60>)
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	2b00      	cmp	r3, #0
 8005edc:	d120      	bne.n	8005f20 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8005ede:	4814      	ldr	r0, [pc, #80]	; (8005f30 <prvCheckForValidListAndQueue+0x64>)
 8005ee0:	f7fe f82c 	bl	8003f3c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8005ee4:	4813      	ldr	r0, [pc, #76]	; (8005f34 <prvCheckForValidListAndQueue+0x68>)
 8005ee6:	f7fe f829 	bl	8003f3c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8005eea:	4b13      	ldr	r3, [pc, #76]	; (8005f38 <prvCheckForValidListAndQueue+0x6c>)
 8005eec:	4a10      	ldr	r2, [pc, #64]	; (8005f30 <prvCheckForValidListAndQueue+0x64>)
 8005eee:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8005ef0:	4b12      	ldr	r3, [pc, #72]	; (8005f3c <prvCheckForValidListAndQueue+0x70>)
 8005ef2:	4a10      	ldr	r2, [pc, #64]	; (8005f34 <prvCheckForValidListAndQueue+0x68>)
 8005ef4:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8005ef6:	2300      	movs	r3, #0
 8005ef8:	9300      	str	r3, [sp, #0]
 8005efa:	4b11      	ldr	r3, [pc, #68]	; (8005f40 <prvCheckForValidListAndQueue+0x74>)
 8005efc:	4a11      	ldr	r2, [pc, #68]	; (8005f44 <prvCheckForValidListAndQueue+0x78>)
 8005efe:	2110      	movs	r1, #16
 8005f00:	200a      	movs	r0, #10
 8005f02:	f7fe f939 	bl	8004178 <xQueueGenericCreateStatic>
 8005f06:	4602      	mov	r2, r0
 8005f08:	4b08      	ldr	r3, [pc, #32]	; (8005f2c <prvCheckForValidListAndQueue+0x60>)
 8005f0a:	601a      	str	r2, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8005f0c:	4b07      	ldr	r3, [pc, #28]	; (8005f2c <prvCheckForValidListAndQueue+0x60>)
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	2b00      	cmp	r3, #0
 8005f12:	d005      	beq.n	8005f20 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8005f14:	4b05      	ldr	r3, [pc, #20]	; (8005f2c <prvCheckForValidListAndQueue+0x60>)
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	490b      	ldr	r1, [pc, #44]	; (8005f48 <prvCheckForValidListAndQueue+0x7c>)
 8005f1a:	4618      	mov	r0, r3
 8005f1c:	f7fe fd5c 	bl	80049d8 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005f20:	f000 f94c 	bl	80061bc <vPortExitCritical>
}
 8005f24:	bf00      	nop
 8005f26:	46bd      	mov	sp, r7
 8005f28:	bd80      	pop	{r7, pc}
 8005f2a:	bf00      	nop
 8005f2c:	20000c80 	.word	0x20000c80
 8005f30:	20000c50 	.word	0x20000c50
 8005f34:	20000c64 	.word	0x20000c64
 8005f38:	20000c78 	.word	0x20000c78
 8005f3c:	20000c7c 	.word	0x20000c7c
 8005f40:	20000d2c 	.word	0x20000d2c
 8005f44:	20000c8c 	.word	0x20000c8c
 8005f48:	08007114 	.word	0x08007114

08005f4c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8005f4c:	b480      	push	{r7}
 8005f4e:	b085      	sub	sp, #20
 8005f50:	af00      	add	r7, sp, #0
 8005f52:	60f8      	str	r0, [r7, #12]
 8005f54:	60b9      	str	r1, [r7, #8]
 8005f56:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8005f58:	68fb      	ldr	r3, [r7, #12]
 8005f5a:	3b04      	subs	r3, #4
 8005f5c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8005f5e:	68fb      	ldr	r3, [r7, #12]
 8005f60:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8005f64:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005f66:	68fb      	ldr	r3, [r7, #12]
 8005f68:	3b04      	subs	r3, #4
 8005f6a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8005f6c:	68bb      	ldr	r3, [r7, #8]
 8005f6e:	f023 0201 	bic.w	r2, r3, #1
 8005f72:	68fb      	ldr	r3, [r7, #12]
 8005f74:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005f76:	68fb      	ldr	r3, [r7, #12]
 8005f78:	3b04      	subs	r3, #4
 8005f7a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8005f7c:	4a0c      	ldr	r2, [pc, #48]	; (8005fb0 <pxPortInitialiseStack+0x64>)
 8005f7e:	68fb      	ldr	r3, [r7, #12]
 8005f80:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8005f82:	68fb      	ldr	r3, [r7, #12]
 8005f84:	3b14      	subs	r3, #20
 8005f86:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8005f88:	687a      	ldr	r2, [r7, #4]
 8005f8a:	68fb      	ldr	r3, [r7, #12]
 8005f8c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8005f8e:	68fb      	ldr	r3, [r7, #12]
 8005f90:	3b04      	subs	r3, #4
 8005f92:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8005f94:	68fb      	ldr	r3, [r7, #12]
 8005f96:	f06f 0202 	mvn.w	r2, #2
 8005f9a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8005f9c:	68fb      	ldr	r3, [r7, #12]
 8005f9e:	3b20      	subs	r3, #32
 8005fa0:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8005fa2:	68fb      	ldr	r3, [r7, #12]
}
 8005fa4:	4618      	mov	r0, r3
 8005fa6:	3714      	adds	r7, #20
 8005fa8:	46bd      	mov	sp, r7
 8005faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fae:	4770      	bx	lr
 8005fb0:	08005fb5 	.word	0x08005fb5

08005fb4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8005fb4:	b480      	push	{r7}
 8005fb6:	b085      	sub	sp, #20
 8005fb8:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8005fba:	2300      	movs	r3, #0
 8005fbc:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8005fbe:	4b13      	ldr	r3, [pc, #76]	; (800600c <prvTaskExitError+0x58>)
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005fc6:	d00b      	beq.n	8005fe0 <prvTaskExitError+0x2c>
 8005fc8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005fcc:	b672      	cpsid	i
 8005fce:	f383 8811 	msr	BASEPRI, r3
 8005fd2:	f3bf 8f6f 	isb	sy
 8005fd6:	f3bf 8f4f 	dsb	sy
 8005fda:	b662      	cpsie	i
 8005fdc:	60fb      	str	r3, [r7, #12]
 8005fde:	e7fe      	b.n	8005fde <prvTaskExitError+0x2a>
 8005fe0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005fe4:	b672      	cpsid	i
 8005fe6:	f383 8811 	msr	BASEPRI, r3
 8005fea:	f3bf 8f6f 	isb	sy
 8005fee:	f3bf 8f4f 	dsb	sy
 8005ff2:	b662      	cpsie	i
 8005ff4:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8005ff6:	bf00      	nop
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	2b00      	cmp	r3, #0
 8005ffc:	d0fc      	beq.n	8005ff8 <prvTaskExitError+0x44>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8005ffe:	bf00      	nop
 8006000:	3714      	adds	r7, #20
 8006002:	46bd      	mov	sp, r7
 8006004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006008:	4770      	bx	lr
 800600a:	bf00      	nop
 800600c:	2000000c 	.word	0x2000000c

08006010 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8006010:	4b07      	ldr	r3, [pc, #28]	; (8006030 <pxCurrentTCBConst2>)
 8006012:	6819      	ldr	r1, [r3, #0]
 8006014:	6808      	ldr	r0, [r1, #0]
 8006016:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800601a:	f380 8809 	msr	PSP, r0
 800601e:	f3bf 8f6f 	isb	sy
 8006022:	f04f 0000 	mov.w	r0, #0
 8006026:	f380 8811 	msr	BASEPRI, r0
 800602a:	4770      	bx	lr
 800602c:	f3af 8000 	nop.w

08006030 <pxCurrentTCBConst2>:
 8006030:	20000750 	.word	0x20000750
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8006034:	bf00      	nop
 8006036:	bf00      	nop

08006038 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8006038:	4808      	ldr	r0, [pc, #32]	; (800605c <prvPortStartFirstTask+0x24>)
 800603a:	6800      	ldr	r0, [r0, #0]
 800603c:	6800      	ldr	r0, [r0, #0]
 800603e:	f380 8808 	msr	MSP, r0
 8006042:	f04f 0000 	mov.w	r0, #0
 8006046:	f380 8814 	msr	CONTROL, r0
 800604a:	b662      	cpsie	i
 800604c:	b661      	cpsie	f
 800604e:	f3bf 8f4f 	dsb	sy
 8006052:	f3bf 8f6f 	isb	sy
 8006056:	df00      	svc	0
 8006058:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800605a:	bf00      	nop
 800605c:	e000ed08 	.word	0xe000ed08

08006060 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8006060:	b580      	push	{r7, lr}
 8006062:	b084      	sub	sp, #16
 8006064:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8006066:	4b36      	ldr	r3, [pc, #216]	; (8006140 <xPortStartScheduler+0xe0>)
 8006068:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800606a:	68fb      	ldr	r3, [r7, #12]
 800606c:	781b      	ldrb	r3, [r3, #0]
 800606e:	b2db      	uxtb	r3, r3
 8006070:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8006072:	68fb      	ldr	r3, [r7, #12]
 8006074:	22ff      	movs	r2, #255	; 0xff
 8006076:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8006078:	68fb      	ldr	r3, [r7, #12]
 800607a:	781b      	ldrb	r3, [r3, #0]
 800607c:	b2db      	uxtb	r3, r3
 800607e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8006080:	78fb      	ldrb	r3, [r7, #3]
 8006082:	b2db      	uxtb	r3, r3
 8006084:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8006088:	b2da      	uxtb	r2, r3
 800608a:	4b2e      	ldr	r3, [pc, #184]	; (8006144 <xPortStartScheduler+0xe4>)
 800608c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800608e:	4b2e      	ldr	r3, [pc, #184]	; (8006148 <xPortStartScheduler+0xe8>)
 8006090:	2207      	movs	r2, #7
 8006092:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006094:	e009      	b.n	80060aa <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8006096:	4b2c      	ldr	r3, [pc, #176]	; (8006148 <xPortStartScheduler+0xe8>)
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	3b01      	subs	r3, #1
 800609c:	4a2a      	ldr	r2, [pc, #168]	; (8006148 <xPortStartScheduler+0xe8>)
 800609e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80060a0:	78fb      	ldrb	r3, [r7, #3]
 80060a2:	b2db      	uxtb	r3, r3
 80060a4:	005b      	lsls	r3, r3, #1
 80060a6:	b2db      	uxtb	r3, r3
 80060a8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80060aa:	78fb      	ldrb	r3, [r7, #3]
 80060ac:	b2db      	uxtb	r3, r3
 80060ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80060b2:	2b80      	cmp	r3, #128	; 0x80
 80060b4:	d0ef      	beq.n	8006096 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80060b6:	4b24      	ldr	r3, [pc, #144]	; (8006148 <xPortStartScheduler+0xe8>)
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	f1c3 0307 	rsb	r3, r3, #7
 80060be:	2b04      	cmp	r3, #4
 80060c0:	d00b      	beq.n	80060da <xPortStartScheduler+0x7a>
 80060c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060c6:	b672      	cpsid	i
 80060c8:	f383 8811 	msr	BASEPRI, r3
 80060cc:	f3bf 8f6f 	isb	sy
 80060d0:	f3bf 8f4f 	dsb	sy
 80060d4:	b662      	cpsie	i
 80060d6:	60bb      	str	r3, [r7, #8]
 80060d8:	e7fe      	b.n	80060d8 <xPortStartScheduler+0x78>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80060da:	4b1b      	ldr	r3, [pc, #108]	; (8006148 <xPortStartScheduler+0xe8>)
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	021b      	lsls	r3, r3, #8
 80060e0:	4a19      	ldr	r2, [pc, #100]	; (8006148 <xPortStartScheduler+0xe8>)
 80060e2:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80060e4:	4b18      	ldr	r3, [pc, #96]	; (8006148 <xPortStartScheduler+0xe8>)
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80060ec:	4a16      	ldr	r2, [pc, #88]	; (8006148 <xPortStartScheduler+0xe8>)
 80060ee:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	b2da      	uxtb	r2, r3
 80060f4:	68fb      	ldr	r3, [r7, #12]
 80060f6:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80060f8:	4b14      	ldr	r3, [pc, #80]	; (800614c <xPortStartScheduler+0xec>)
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	4a13      	ldr	r2, [pc, #76]	; (800614c <xPortStartScheduler+0xec>)
 80060fe:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8006102:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8006104:	4b11      	ldr	r3, [pc, #68]	; (800614c <xPortStartScheduler+0xec>)
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	4a10      	ldr	r2, [pc, #64]	; (800614c <xPortStartScheduler+0xec>)
 800610a:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800610e:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8006110:	f000 f8d4 	bl	80062bc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8006114:	4b0e      	ldr	r3, [pc, #56]	; (8006150 <xPortStartScheduler+0xf0>)
 8006116:	2200      	movs	r2, #0
 8006118:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800611a:	f000 f8f3 	bl	8006304 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800611e:	4b0d      	ldr	r3, [pc, #52]	; (8006154 <xPortStartScheduler+0xf4>)
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	4a0c      	ldr	r2, [pc, #48]	; (8006154 <xPortStartScheduler+0xf4>)
 8006124:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8006128:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800612a:	f7ff ff85 	bl	8006038 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800612e:	f7ff f869 	bl	8005204 <vTaskSwitchContext>
	prvTaskExitError();
 8006132:	f7ff ff3f 	bl	8005fb4 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8006136:	2300      	movs	r3, #0
}
 8006138:	4618      	mov	r0, r3
 800613a:	3710      	adds	r7, #16
 800613c:	46bd      	mov	sp, r7
 800613e:	bd80      	pop	{r7, pc}
 8006140:	e000e400 	.word	0xe000e400
 8006144:	20000d7c 	.word	0x20000d7c
 8006148:	20000d80 	.word	0x20000d80
 800614c:	e000ed20 	.word	0xe000ed20
 8006150:	2000000c 	.word	0x2000000c
 8006154:	e000ef34 	.word	0xe000ef34

08006158 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8006158:	b480      	push	{r7}
 800615a:	b083      	sub	sp, #12
 800615c:	af00      	add	r7, sp, #0
 800615e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006162:	b672      	cpsid	i
 8006164:	f383 8811 	msr	BASEPRI, r3
 8006168:	f3bf 8f6f 	isb	sy
 800616c:	f3bf 8f4f 	dsb	sy
 8006170:	b662      	cpsie	i
 8006172:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8006174:	4b0f      	ldr	r3, [pc, #60]	; (80061b4 <vPortEnterCritical+0x5c>)
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	3301      	adds	r3, #1
 800617a:	4a0e      	ldr	r2, [pc, #56]	; (80061b4 <vPortEnterCritical+0x5c>)
 800617c:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800617e:	4b0d      	ldr	r3, [pc, #52]	; (80061b4 <vPortEnterCritical+0x5c>)
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	2b01      	cmp	r3, #1
 8006184:	d110      	bne.n	80061a8 <vPortEnterCritical+0x50>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8006186:	4b0c      	ldr	r3, [pc, #48]	; (80061b8 <vPortEnterCritical+0x60>)
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	b2db      	uxtb	r3, r3
 800618c:	2b00      	cmp	r3, #0
 800618e:	d00b      	beq.n	80061a8 <vPortEnterCritical+0x50>
 8006190:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006194:	b672      	cpsid	i
 8006196:	f383 8811 	msr	BASEPRI, r3
 800619a:	f3bf 8f6f 	isb	sy
 800619e:	f3bf 8f4f 	dsb	sy
 80061a2:	b662      	cpsie	i
 80061a4:	603b      	str	r3, [r7, #0]
 80061a6:	e7fe      	b.n	80061a6 <vPortEnterCritical+0x4e>
	}
}
 80061a8:	bf00      	nop
 80061aa:	370c      	adds	r7, #12
 80061ac:	46bd      	mov	sp, r7
 80061ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061b2:	4770      	bx	lr
 80061b4:	2000000c 	.word	0x2000000c
 80061b8:	e000ed04 	.word	0xe000ed04

080061bc <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80061bc:	b480      	push	{r7}
 80061be:	b083      	sub	sp, #12
 80061c0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80061c2:	4b12      	ldr	r3, [pc, #72]	; (800620c <vPortExitCritical+0x50>)
 80061c4:	681b      	ldr	r3, [r3, #0]
 80061c6:	2b00      	cmp	r3, #0
 80061c8:	d10b      	bne.n	80061e2 <vPortExitCritical+0x26>
 80061ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061ce:	b672      	cpsid	i
 80061d0:	f383 8811 	msr	BASEPRI, r3
 80061d4:	f3bf 8f6f 	isb	sy
 80061d8:	f3bf 8f4f 	dsb	sy
 80061dc:	b662      	cpsie	i
 80061de:	607b      	str	r3, [r7, #4]
 80061e0:	e7fe      	b.n	80061e0 <vPortExitCritical+0x24>
	uxCriticalNesting--;
 80061e2:	4b0a      	ldr	r3, [pc, #40]	; (800620c <vPortExitCritical+0x50>)
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	3b01      	subs	r3, #1
 80061e8:	4a08      	ldr	r2, [pc, #32]	; (800620c <vPortExitCritical+0x50>)
 80061ea:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80061ec:	4b07      	ldr	r3, [pc, #28]	; (800620c <vPortExitCritical+0x50>)
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	2b00      	cmp	r3, #0
 80061f2:	d104      	bne.n	80061fe <vPortExitCritical+0x42>
 80061f4:	2300      	movs	r3, #0
 80061f6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80061f8:	683b      	ldr	r3, [r7, #0]
 80061fa:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 80061fe:	bf00      	nop
 8006200:	370c      	adds	r7, #12
 8006202:	46bd      	mov	sp, r7
 8006204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006208:	4770      	bx	lr
 800620a:	bf00      	nop
 800620c:	2000000c 	.word	0x2000000c

08006210 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8006210:	f3ef 8009 	mrs	r0, PSP
 8006214:	f3bf 8f6f 	isb	sy
 8006218:	4b15      	ldr	r3, [pc, #84]	; (8006270 <pxCurrentTCBConst>)
 800621a:	681a      	ldr	r2, [r3, #0]
 800621c:	f01e 0f10 	tst.w	lr, #16
 8006220:	bf08      	it	eq
 8006222:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8006226:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800622a:	6010      	str	r0, [r2, #0]
 800622c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8006230:	f04f 0050 	mov.w	r0, #80	; 0x50
 8006234:	b672      	cpsid	i
 8006236:	f380 8811 	msr	BASEPRI, r0
 800623a:	f3bf 8f4f 	dsb	sy
 800623e:	f3bf 8f6f 	isb	sy
 8006242:	b662      	cpsie	i
 8006244:	f7fe ffde 	bl	8005204 <vTaskSwitchContext>
 8006248:	f04f 0000 	mov.w	r0, #0
 800624c:	f380 8811 	msr	BASEPRI, r0
 8006250:	bc09      	pop	{r0, r3}
 8006252:	6819      	ldr	r1, [r3, #0]
 8006254:	6808      	ldr	r0, [r1, #0]
 8006256:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800625a:	f01e 0f10 	tst.w	lr, #16
 800625e:	bf08      	it	eq
 8006260:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8006264:	f380 8809 	msr	PSP, r0
 8006268:	f3bf 8f6f 	isb	sy
 800626c:	4770      	bx	lr
 800626e:	bf00      	nop

08006270 <pxCurrentTCBConst>:
 8006270:	20000750 	.word	0x20000750
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8006274:	bf00      	nop
 8006276:	bf00      	nop

08006278 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8006278:	b580      	push	{r7, lr}
 800627a:	b082      	sub	sp, #8
 800627c:	af00      	add	r7, sp, #0
	__asm volatile
 800627e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006282:	b672      	cpsid	i
 8006284:	f383 8811 	msr	BASEPRI, r3
 8006288:	f3bf 8f6f 	isb	sy
 800628c:	f3bf 8f4f 	dsb	sy
 8006290:	b662      	cpsie	i
 8006292:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8006294:	f7fe fefc 	bl	8005090 <xTaskIncrementTick>
 8006298:	4603      	mov	r3, r0
 800629a:	2b00      	cmp	r3, #0
 800629c:	d003      	beq.n	80062a6 <SysTick_Handler+0x2e>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800629e:	4b06      	ldr	r3, [pc, #24]	; (80062b8 <SysTick_Handler+0x40>)
 80062a0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80062a4:	601a      	str	r2, [r3, #0]
 80062a6:	2300      	movs	r3, #0
 80062a8:	603b      	str	r3, [r7, #0]
	__asm volatile
 80062aa:	683b      	ldr	r3, [r7, #0]
 80062ac:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 80062b0:	bf00      	nop
 80062b2:	3708      	adds	r7, #8
 80062b4:	46bd      	mov	sp, r7
 80062b6:	bd80      	pop	{r7, pc}
 80062b8:	e000ed04 	.word	0xe000ed04

080062bc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80062bc:	b480      	push	{r7}
 80062be:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80062c0:	4b0b      	ldr	r3, [pc, #44]	; (80062f0 <vPortSetupTimerInterrupt+0x34>)
 80062c2:	2200      	movs	r2, #0
 80062c4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80062c6:	4b0b      	ldr	r3, [pc, #44]	; (80062f4 <vPortSetupTimerInterrupt+0x38>)
 80062c8:	2200      	movs	r2, #0
 80062ca:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80062cc:	4b0a      	ldr	r3, [pc, #40]	; (80062f8 <vPortSetupTimerInterrupt+0x3c>)
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	4a0a      	ldr	r2, [pc, #40]	; (80062fc <vPortSetupTimerInterrupt+0x40>)
 80062d2:	fba2 2303 	umull	r2, r3, r2, r3
 80062d6:	099b      	lsrs	r3, r3, #6
 80062d8:	4a09      	ldr	r2, [pc, #36]	; (8006300 <vPortSetupTimerInterrupt+0x44>)
 80062da:	3b01      	subs	r3, #1
 80062dc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80062de:	4b04      	ldr	r3, [pc, #16]	; (80062f0 <vPortSetupTimerInterrupt+0x34>)
 80062e0:	2207      	movs	r2, #7
 80062e2:	601a      	str	r2, [r3, #0]
}
 80062e4:	bf00      	nop
 80062e6:	46bd      	mov	sp, r7
 80062e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062ec:	4770      	bx	lr
 80062ee:	bf00      	nop
 80062f0:	e000e010 	.word	0xe000e010
 80062f4:	e000e018 	.word	0xe000e018
 80062f8:	20000000 	.word	0x20000000
 80062fc:	10624dd3 	.word	0x10624dd3
 8006300:	e000e014 	.word	0xe000e014

08006304 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8006304:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8006314 <vPortEnableVFP+0x10>
 8006308:	6801      	ldr	r1, [r0, #0]
 800630a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800630e:	6001      	str	r1, [r0, #0]
 8006310:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8006312:	bf00      	nop
 8006314:	e000ed88 	.word	0xe000ed88

08006318 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8006318:	b480      	push	{r7}
 800631a:	b085      	sub	sp, #20
 800631c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800631e:	f3ef 8305 	mrs	r3, IPSR
 8006322:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8006324:	68fb      	ldr	r3, [r7, #12]
 8006326:	2b0f      	cmp	r3, #15
 8006328:	d915      	bls.n	8006356 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800632a:	4a18      	ldr	r2, [pc, #96]	; (800638c <vPortValidateInterruptPriority+0x74>)
 800632c:	68fb      	ldr	r3, [r7, #12]
 800632e:	4413      	add	r3, r2
 8006330:	781b      	ldrb	r3, [r3, #0]
 8006332:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8006334:	4b16      	ldr	r3, [pc, #88]	; (8006390 <vPortValidateInterruptPriority+0x78>)
 8006336:	781b      	ldrb	r3, [r3, #0]
 8006338:	7afa      	ldrb	r2, [r7, #11]
 800633a:	429a      	cmp	r2, r3
 800633c:	d20b      	bcs.n	8006356 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800633e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006342:	b672      	cpsid	i
 8006344:	f383 8811 	msr	BASEPRI, r3
 8006348:	f3bf 8f6f 	isb	sy
 800634c:	f3bf 8f4f 	dsb	sy
 8006350:	b662      	cpsie	i
 8006352:	607b      	str	r3, [r7, #4]
 8006354:	e7fe      	b.n	8006354 <vPortValidateInterruptPriority+0x3c>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8006356:	4b0f      	ldr	r3, [pc, #60]	; (8006394 <vPortValidateInterruptPriority+0x7c>)
 8006358:	681b      	ldr	r3, [r3, #0]
 800635a:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800635e:	4b0e      	ldr	r3, [pc, #56]	; (8006398 <vPortValidateInterruptPriority+0x80>)
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	429a      	cmp	r2, r3
 8006364:	d90b      	bls.n	800637e <vPortValidateInterruptPriority+0x66>
 8006366:	f04f 0350 	mov.w	r3, #80	; 0x50
 800636a:	b672      	cpsid	i
 800636c:	f383 8811 	msr	BASEPRI, r3
 8006370:	f3bf 8f6f 	isb	sy
 8006374:	f3bf 8f4f 	dsb	sy
 8006378:	b662      	cpsie	i
 800637a:	603b      	str	r3, [r7, #0]
 800637c:	e7fe      	b.n	800637c <vPortValidateInterruptPriority+0x64>
	}
 800637e:	bf00      	nop
 8006380:	3714      	adds	r7, #20
 8006382:	46bd      	mov	sp, r7
 8006384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006388:	4770      	bx	lr
 800638a:	bf00      	nop
 800638c:	e000e3f0 	.word	0xe000e3f0
 8006390:	20000d7c 	.word	0x20000d7c
 8006394:	e000ed0c 	.word	0xe000ed0c
 8006398:	20000d80 	.word	0x20000d80

0800639c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800639c:	b580      	push	{r7, lr}
 800639e:	b08a      	sub	sp, #40	; 0x28
 80063a0:	af00      	add	r7, sp, #0
 80063a2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80063a4:	2300      	movs	r3, #0
 80063a6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80063a8:	f7fe fdb6 	bl	8004f18 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80063ac:	4b5a      	ldr	r3, [pc, #360]	; (8006518 <pvPortMalloc+0x17c>)
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	2b00      	cmp	r3, #0
 80063b2:	d101      	bne.n	80063b8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80063b4:	f000 f916 	bl	80065e4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80063b8:	4b58      	ldr	r3, [pc, #352]	; (800651c <pvPortMalloc+0x180>)
 80063ba:	681a      	ldr	r2, [r3, #0]
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	4013      	ands	r3, r2
 80063c0:	2b00      	cmp	r3, #0
 80063c2:	f040 8090 	bne.w	80064e6 <pvPortMalloc+0x14a>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	2b00      	cmp	r3, #0
 80063ca:	d01e      	beq.n	800640a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 80063cc:	2208      	movs	r2, #8
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	4413      	add	r3, r2
 80063d2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	f003 0307 	and.w	r3, r3, #7
 80063da:	2b00      	cmp	r3, #0
 80063dc:	d015      	beq.n	800640a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	f023 0307 	bic.w	r3, r3, #7
 80063e4:	3308      	adds	r3, #8
 80063e6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	f003 0307 	and.w	r3, r3, #7
 80063ee:	2b00      	cmp	r3, #0
 80063f0:	d00b      	beq.n	800640a <pvPortMalloc+0x6e>
 80063f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063f6:	b672      	cpsid	i
 80063f8:	f383 8811 	msr	BASEPRI, r3
 80063fc:	f3bf 8f6f 	isb	sy
 8006400:	f3bf 8f4f 	dsb	sy
 8006404:	b662      	cpsie	i
 8006406:	617b      	str	r3, [r7, #20]
 8006408:	e7fe      	b.n	8006408 <pvPortMalloc+0x6c>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	2b00      	cmp	r3, #0
 800640e:	d06a      	beq.n	80064e6 <pvPortMalloc+0x14a>
 8006410:	4b43      	ldr	r3, [pc, #268]	; (8006520 <pvPortMalloc+0x184>)
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	687a      	ldr	r2, [r7, #4]
 8006416:	429a      	cmp	r2, r3
 8006418:	d865      	bhi.n	80064e6 <pvPortMalloc+0x14a>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800641a:	4b42      	ldr	r3, [pc, #264]	; (8006524 <pvPortMalloc+0x188>)
 800641c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800641e:	4b41      	ldr	r3, [pc, #260]	; (8006524 <pvPortMalloc+0x188>)
 8006420:	681b      	ldr	r3, [r3, #0]
 8006422:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006424:	e004      	b.n	8006430 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8006426:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006428:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800642a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006430:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006432:	685b      	ldr	r3, [r3, #4]
 8006434:	687a      	ldr	r2, [r7, #4]
 8006436:	429a      	cmp	r2, r3
 8006438:	d903      	bls.n	8006442 <pvPortMalloc+0xa6>
 800643a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800643c:	681b      	ldr	r3, [r3, #0]
 800643e:	2b00      	cmp	r3, #0
 8006440:	d1f1      	bne.n	8006426 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8006442:	4b35      	ldr	r3, [pc, #212]	; (8006518 <pvPortMalloc+0x17c>)
 8006444:	681b      	ldr	r3, [r3, #0]
 8006446:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006448:	429a      	cmp	r2, r3
 800644a:	d04c      	beq.n	80064e6 <pvPortMalloc+0x14a>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800644c:	6a3b      	ldr	r3, [r7, #32]
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	2208      	movs	r2, #8
 8006452:	4413      	add	r3, r2
 8006454:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8006456:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006458:	681a      	ldr	r2, [r3, #0]
 800645a:	6a3b      	ldr	r3, [r7, #32]
 800645c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800645e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006460:	685a      	ldr	r2, [r3, #4]
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	1ad2      	subs	r2, r2, r3
 8006466:	2308      	movs	r3, #8
 8006468:	005b      	lsls	r3, r3, #1
 800646a:	429a      	cmp	r2, r3
 800646c:	d920      	bls.n	80064b0 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800646e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	4413      	add	r3, r2
 8006474:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006476:	69bb      	ldr	r3, [r7, #24]
 8006478:	f003 0307 	and.w	r3, r3, #7
 800647c:	2b00      	cmp	r3, #0
 800647e:	d00b      	beq.n	8006498 <pvPortMalloc+0xfc>
 8006480:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006484:	b672      	cpsid	i
 8006486:	f383 8811 	msr	BASEPRI, r3
 800648a:	f3bf 8f6f 	isb	sy
 800648e:	f3bf 8f4f 	dsb	sy
 8006492:	b662      	cpsie	i
 8006494:	613b      	str	r3, [r7, #16]
 8006496:	e7fe      	b.n	8006496 <pvPortMalloc+0xfa>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8006498:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800649a:	685a      	ldr	r2, [r3, #4]
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	1ad2      	subs	r2, r2, r3
 80064a0:	69bb      	ldr	r3, [r7, #24]
 80064a2:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80064a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064a6:	687a      	ldr	r2, [r7, #4]
 80064a8:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80064aa:	69b8      	ldr	r0, [r7, #24]
 80064ac:	f000 f8fc 	bl	80066a8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80064b0:	4b1b      	ldr	r3, [pc, #108]	; (8006520 <pvPortMalloc+0x184>)
 80064b2:	681a      	ldr	r2, [r3, #0]
 80064b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064b6:	685b      	ldr	r3, [r3, #4]
 80064b8:	1ad3      	subs	r3, r2, r3
 80064ba:	4a19      	ldr	r2, [pc, #100]	; (8006520 <pvPortMalloc+0x184>)
 80064bc:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80064be:	4b18      	ldr	r3, [pc, #96]	; (8006520 <pvPortMalloc+0x184>)
 80064c0:	681a      	ldr	r2, [r3, #0]
 80064c2:	4b19      	ldr	r3, [pc, #100]	; (8006528 <pvPortMalloc+0x18c>)
 80064c4:	681b      	ldr	r3, [r3, #0]
 80064c6:	429a      	cmp	r2, r3
 80064c8:	d203      	bcs.n	80064d2 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80064ca:	4b15      	ldr	r3, [pc, #84]	; (8006520 <pvPortMalloc+0x184>)
 80064cc:	681b      	ldr	r3, [r3, #0]
 80064ce:	4a16      	ldr	r2, [pc, #88]	; (8006528 <pvPortMalloc+0x18c>)
 80064d0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80064d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064d4:	685a      	ldr	r2, [r3, #4]
 80064d6:	4b11      	ldr	r3, [pc, #68]	; (800651c <pvPortMalloc+0x180>)
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	431a      	orrs	r2, r3
 80064dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064de:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80064e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064e2:	2200      	movs	r2, #0
 80064e4:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80064e6:	f7fe fd25 	bl	8004f34 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80064ea:	69fb      	ldr	r3, [r7, #28]
 80064ec:	f003 0307 	and.w	r3, r3, #7
 80064f0:	2b00      	cmp	r3, #0
 80064f2:	d00b      	beq.n	800650c <pvPortMalloc+0x170>
 80064f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064f8:	b672      	cpsid	i
 80064fa:	f383 8811 	msr	BASEPRI, r3
 80064fe:	f3bf 8f6f 	isb	sy
 8006502:	f3bf 8f4f 	dsb	sy
 8006506:	b662      	cpsie	i
 8006508:	60fb      	str	r3, [r7, #12]
 800650a:	e7fe      	b.n	800650a <pvPortMalloc+0x16e>
	return pvReturn;
 800650c:	69fb      	ldr	r3, [r7, #28]
}
 800650e:	4618      	mov	r0, r3
 8006510:	3728      	adds	r7, #40	; 0x28
 8006512:	46bd      	mov	sp, r7
 8006514:	bd80      	pop	{r7, pc}
 8006516:	bf00      	nop
 8006518:	2000498c 	.word	0x2000498c
 800651c:	20004998 	.word	0x20004998
 8006520:	20004990 	.word	0x20004990
 8006524:	20004984 	.word	0x20004984
 8006528:	20004994 	.word	0x20004994

0800652c <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800652c:	b580      	push	{r7, lr}
 800652e:	b086      	sub	sp, #24
 8006530:	af00      	add	r7, sp, #0
 8006532:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	2b00      	cmp	r3, #0
 800653c:	d04a      	beq.n	80065d4 <vPortFree+0xa8>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800653e:	2308      	movs	r3, #8
 8006540:	425b      	negs	r3, r3
 8006542:	697a      	ldr	r2, [r7, #20]
 8006544:	4413      	add	r3, r2
 8006546:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8006548:	697b      	ldr	r3, [r7, #20]
 800654a:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800654c:	693b      	ldr	r3, [r7, #16]
 800654e:	685a      	ldr	r2, [r3, #4]
 8006550:	4b22      	ldr	r3, [pc, #136]	; (80065dc <vPortFree+0xb0>)
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	4013      	ands	r3, r2
 8006556:	2b00      	cmp	r3, #0
 8006558:	d10b      	bne.n	8006572 <vPortFree+0x46>
 800655a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800655e:	b672      	cpsid	i
 8006560:	f383 8811 	msr	BASEPRI, r3
 8006564:	f3bf 8f6f 	isb	sy
 8006568:	f3bf 8f4f 	dsb	sy
 800656c:	b662      	cpsie	i
 800656e:	60fb      	str	r3, [r7, #12]
 8006570:	e7fe      	b.n	8006570 <vPortFree+0x44>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8006572:	693b      	ldr	r3, [r7, #16]
 8006574:	681b      	ldr	r3, [r3, #0]
 8006576:	2b00      	cmp	r3, #0
 8006578:	d00b      	beq.n	8006592 <vPortFree+0x66>
 800657a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800657e:	b672      	cpsid	i
 8006580:	f383 8811 	msr	BASEPRI, r3
 8006584:	f3bf 8f6f 	isb	sy
 8006588:	f3bf 8f4f 	dsb	sy
 800658c:	b662      	cpsie	i
 800658e:	60bb      	str	r3, [r7, #8]
 8006590:	e7fe      	b.n	8006590 <vPortFree+0x64>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8006592:	693b      	ldr	r3, [r7, #16]
 8006594:	685a      	ldr	r2, [r3, #4]
 8006596:	4b11      	ldr	r3, [pc, #68]	; (80065dc <vPortFree+0xb0>)
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	4013      	ands	r3, r2
 800659c:	2b00      	cmp	r3, #0
 800659e:	d019      	beq.n	80065d4 <vPortFree+0xa8>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80065a0:	693b      	ldr	r3, [r7, #16]
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	2b00      	cmp	r3, #0
 80065a6:	d115      	bne.n	80065d4 <vPortFree+0xa8>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80065a8:	693b      	ldr	r3, [r7, #16]
 80065aa:	685a      	ldr	r2, [r3, #4]
 80065ac:	4b0b      	ldr	r3, [pc, #44]	; (80065dc <vPortFree+0xb0>)
 80065ae:	681b      	ldr	r3, [r3, #0]
 80065b0:	43db      	mvns	r3, r3
 80065b2:	401a      	ands	r2, r3
 80065b4:	693b      	ldr	r3, [r7, #16]
 80065b6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80065b8:	f7fe fcae 	bl	8004f18 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80065bc:	693b      	ldr	r3, [r7, #16]
 80065be:	685a      	ldr	r2, [r3, #4]
 80065c0:	4b07      	ldr	r3, [pc, #28]	; (80065e0 <vPortFree+0xb4>)
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	4413      	add	r3, r2
 80065c6:	4a06      	ldr	r2, [pc, #24]	; (80065e0 <vPortFree+0xb4>)
 80065c8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80065ca:	6938      	ldr	r0, [r7, #16]
 80065cc:	f000 f86c 	bl	80066a8 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 80065d0:	f7fe fcb0 	bl	8004f34 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80065d4:	bf00      	nop
 80065d6:	3718      	adds	r7, #24
 80065d8:	46bd      	mov	sp, r7
 80065da:	bd80      	pop	{r7, pc}
 80065dc:	20004998 	.word	0x20004998
 80065e0:	20004990 	.word	0x20004990

080065e4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80065e4:	b480      	push	{r7}
 80065e6:	b085      	sub	sp, #20
 80065e8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80065ea:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 80065ee:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80065f0:	4b27      	ldr	r3, [pc, #156]	; (8006690 <prvHeapInit+0xac>)
 80065f2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80065f4:	68fb      	ldr	r3, [r7, #12]
 80065f6:	f003 0307 	and.w	r3, r3, #7
 80065fa:	2b00      	cmp	r3, #0
 80065fc:	d00c      	beq.n	8006618 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80065fe:	68fb      	ldr	r3, [r7, #12]
 8006600:	3307      	adds	r3, #7
 8006602:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006604:	68fb      	ldr	r3, [r7, #12]
 8006606:	f023 0307 	bic.w	r3, r3, #7
 800660a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800660c:	68ba      	ldr	r2, [r7, #8]
 800660e:	68fb      	ldr	r3, [r7, #12]
 8006610:	1ad3      	subs	r3, r2, r3
 8006612:	4a1f      	ldr	r2, [pc, #124]	; (8006690 <prvHeapInit+0xac>)
 8006614:	4413      	add	r3, r2
 8006616:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8006618:	68fb      	ldr	r3, [r7, #12]
 800661a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800661c:	4a1d      	ldr	r2, [pc, #116]	; (8006694 <prvHeapInit+0xb0>)
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8006622:	4b1c      	ldr	r3, [pc, #112]	; (8006694 <prvHeapInit+0xb0>)
 8006624:	2200      	movs	r2, #0
 8006626:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	68ba      	ldr	r2, [r7, #8]
 800662c:	4413      	add	r3, r2
 800662e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8006630:	2208      	movs	r2, #8
 8006632:	68fb      	ldr	r3, [r7, #12]
 8006634:	1a9b      	subs	r3, r3, r2
 8006636:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006638:	68fb      	ldr	r3, [r7, #12]
 800663a:	f023 0307 	bic.w	r3, r3, #7
 800663e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8006640:	68fb      	ldr	r3, [r7, #12]
 8006642:	4a15      	ldr	r2, [pc, #84]	; (8006698 <prvHeapInit+0xb4>)
 8006644:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8006646:	4b14      	ldr	r3, [pc, #80]	; (8006698 <prvHeapInit+0xb4>)
 8006648:	681b      	ldr	r3, [r3, #0]
 800664a:	2200      	movs	r2, #0
 800664c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800664e:	4b12      	ldr	r3, [pc, #72]	; (8006698 <prvHeapInit+0xb4>)
 8006650:	681b      	ldr	r3, [r3, #0]
 8006652:	2200      	movs	r2, #0
 8006654:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800665a:	683b      	ldr	r3, [r7, #0]
 800665c:	68fa      	ldr	r2, [r7, #12]
 800665e:	1ad2      	subs	r2, r2, r3
 8006660:	683b      	ldr	r3, [r7, #0]
 8006662:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8006664:	4b0c      	ldr	r3, [pc, #48]	; (8006698 <prvHeapInit+0xb4>)
 8006666:	681a      	ldr	r2, [r3, #0]
 8006668:	683b      	ldr	r3, [r7, #0]
 800666a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800666c:	683b      	ldr	r3, [r7, #0]
 800666e:	685b      	ldr	r3, [r3, #4]
 8006670:	4a0a      	ldr	r2, [pc, #40]	; (800669c <prvHeapInit+0xb8>)
 8006672:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006674:	683b      	ldr	r3, [r7, #0]
 8006676:	685b      	ldr	r3, [r3, #4]
 8006678:	4a09      	ldr	r2, [pc, #36]	; (80066a0 <prvHeapInit+0xbc>)
 800667a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800667c:	4b09      	ldr	r3, [pc, #36]	; (80066a4 <prvHeapInit+0xc0>)
 800667e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8006682:	601a      	str	r2, [r3, #0]
}
 8006684:	bf00      	nop
 8006686:	3714      	adds	r7, #20
 8006688:	46bd      	mov	sp, r7
 800668a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800668e:	4770      	bx	lr
 8006690:	20000d84 	.word	0x20000d84
 8006694:	20004984 	.word	0x20004984
 8006698:	2000498c 	.word	0x2000498c
 800669c:	20004994 	.word	0x20004994
 80066a0:	20004990 	.word	0x20004990
 80066a4:	20004998 	.word	0x20004998

080066a8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80066a8:	b480      	push	{r7}
 80066aa:	b085      	sub	sp, #20
 80066ac:	af00      	add	r7, sp, #0
 80066ae:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80066b0:	4b28      	ldr	r3, [pc, #160]	; (8006754 <prvInsertBlockIntoFreeList+0xac>)
 80066b2:	60fb      	str	r3, [r7, #12]
 80066b4:	e002      	b.n	80066bc <prvInsertBlockIntoFreeList+0x14>
 80066b6:	68fb      	ldr	r3, [r7, #12]
 80066b8:	681b      	ldr	r3, [r3, #0]
 80066ba:	60fb      	str	r3, [r7, #12]
 80066bc:	68fb      	ldr	r3, [r7, #12]
 80066be:	681b      	ldr	r3, [r3, #0]
 80066c0:	687a      	ldr	r2, [r7, #4]
 80066c2:	429a      	cmp	r2, r3
 80066c4:	d8f7      	bhi.n	80066b6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80066c6:	68fb      	ldr	r3, [r7, #12]
 80066c8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80066ca:	68fb      	ldr	r3, [r7, #12]
 80066cc:	685b      	ldr	r3, [r3, #4]
 80066ce:	68ba      	ldr	r2, [r7, #8]
 80066d0:	4413      	add	r3, r2
 80066d2:	687a      	ldr	r2, [r7, #4]
 80066d4:	429a      	cmp	r2, r3
 80066d6:	d108      	bne.n	80066ea <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80066d8:	68fb      	ldr	r3, [r7, #12]
 80066da:	685a      	ldr	r2, [r3, #4]
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	685b      	ldr	r3, [r3, #4]
 80066e0:	441a      	add	r2, r3
 80066e2:	68fb      	ldr	r3, [r7, #12]
 80066e4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80066e6:	68fb      	ldr	r3, [r7, #12]
 80066e8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	685b      	ldr	r3, [r3, #4]
 80066f2:	68ba      	ldr	r2, [r7, #8]
 80066f4:	441a      	add	r2, r3
 80066f6:	68fb      	ldr	r3, [r7, #12]
 80066f8:	681b      	ldr	r3, [r3, #0]
 80066fa:	429a      	cmp	r2, r3
 80066fc:	d118      	bne.n	8006730 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80066fe:	68fb      	ldr	r3, [r7, #12]
 8006700:	681a      	ldr	r2, [r3, #0]
 8006702:	4b15      	ldr	r3, [pc, #84]	; (8006758 <prvInsertBlockIntoFreeList+0xb0>)
 8006704:	681b      	ldr	r3, [r3, #0]
 8006706:	429a      	cmp	r2, r3
 8006708:	d00d      	beq.n	8006726 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	685a      	ldr	r2, [r3, #4]
 800670e:	68fb      	ldr	r3, [r7, #12]
 8006710:	681b      	ldr	r3, [r3, #0]
 8006712:	685b      	ldr	r3, [r3, #4]
 8006714:	441a      	add	r2, r3
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800671a:	68fb      	ldr	r3, [r7, #12]
 800671c:	681b      	ldr	r3, [r3, #0]
 800671e:	681a      	ldr	r2, [r3, #0]
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	601a      	str	r2, [r3, #0]
 8006724:	e008      	b.n	8006738 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8006726:	4b0c      	ldr	r3, [pc, #48]	; (8006758 <prvInsertBlockIntoFreeList+0xb0>)
 8006728:	681a      	ldr	r2, [r3, #0]
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	601a      	str	r2, [r3, #0]
 800672e:	e003      	b.n	8006738 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8006730:	68fb      	ldr	r3, [r7, #12]
 8006732:	681a      	ldr	r2, [r3, #0]
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8006738:	68fa      	ldr	r2, [r7, #12]
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	429a      	cmp	r2, r3
 800673e:	d002      	beq.n	8006746 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8006740:	68fb      	ldr	r3, [r7, #12]
 8006742:	687a      	ldr	r2, [r7, #4]
 8006744:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006746:	bf00      	nop
 8006748:	3714      	adds	r7, #20
 800674a:	46bd      	mov	sp, r7
 800674c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006750:	4770      	bx	lr
 8006752:	bf00      	nop
 8006754:	20004984 	.word	0x20004984
 8006758:	2000498c 	.word	0x2000498c

0800675c <__errno>:
 800675c:	4b01      	ldr	r3, [pc, #4]	; (8006764 <__errno+0x8>)
 800675e:	6818      	ldr	r0, [r3, #0]
 8006760:	4770      	bx	lr
 8006762:	bf00      	nop
 8006764:	20000010 	.word	0x20000010

08006768 <__libc_init_array>:
 8006768:	b570      	push	{r4, r5, r6, lr}
 800676a:	4e0d      	ldr	r6, [pc, #52]	; (80067a0 <__libc_init_array+0x38>)
 800676c:	4c0d      	ldr	r4, [pc, #52]	; (80067a4 <__libc_init_array+0x3c>)
 800676e:	1ba4      	subs	r4, r4, r6
 8006770:	10a4      	asrs	r4, r4, #2
 8006772:	2500      	movs	r5, #0
 8006774:	42a5      	cmp	r5, r4
 8006776:	d109      	bne.n	800678c <__libc_init_array+0x24>
 8006778:	4e0b      	ldr	r6, [pc, #44]	; (80067a8 <__libc_init_array+0x40>)
 800677a:	4c0c      	ldr	r4, [pc, #48]	; (80067ac <__libc_init_array+0x44>)
 800677c:	f000 fc94 	bl	80070a8 <_init>
 8006780:	1ba4      	subs	r4, r4, r6
 8006782:	10a4      	asrs	r4, r4, #2
 8006784:	2500      	movs	r5, #0
 8006786:	42a5      	cmp	r5, r4
 8006788:	d105      	bne.n	8006796 <__libc_init_array+0x2e>
 800678a:	bd70      	pop	{r4, r5, r6, pc}
 800678c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8006790:	4798      	blx	r3
 8006792:	3501      	adds	r5, #1
 8006794:	e7ee      	b.n	8006774 <__libc_init_array+0xc>
 8006796:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800679a:	4798      	blx	r3
 800679c:	3501      	adds	r5, #1
 800679e:	e7f2      	b.n	8006786 <__libc_init_array+0x1e>
 80067a0:	080071c4 	.word	0x080071c4
 80067a4:	080071c4 	.word	0x080071c4
 80067a8:	080071c4 	.word	0x080071c4
 80067ac:	080071c8 	.word	0x080071c8

080067b0 <memcpy>:
 80067b0:	b510      	push	{r4, lr}
 80067b2:	1e43      	subs	r3, r0, #1
 80067b4:	440a      	add	r2, r1
 80067b6:	4291      	cmp	r1, r2
 80067b8:	d100      	bne.n	80067bc <memcpy+0xc>
 80067ba:	bd10      	pop	{r4, pc}
 80067bc:	f811 4b01 	ldrb.w	r4, [r1], #1
 80067c0:	f803 4f01 	strb.w	r4, [r3, #1]!
 80067c4:	e7f7      	b.n	80067b6 <memcpy+0x6>

080067c6 <memset>:
 80067c6:	4402      	add	r2, r0
 80067c8:	4603      	mov	r3, r0
 80067ca:	4293      	cmp	r3, r2
 80067cc:	d100      	bne.n	80067d0 <memset+0xa>
 80067ce:	4770      	bx	lr
 80067d0:	f803 1b01 	strb.w	r1, [r3], #1
 80067d4:	e7f9      	b.n	80067ca <memset+0x4>
	...

080067d8 <_puts_r>:
 80067d8:	b570      	push	{r4, r5, r6, lr}
 80067da:	460e      	mov	r6, r1
 80067dc:	4605      	mov	r5, r0
 80067de:	b118      	cbz	r0, 80067e8 <_puts_r+0x10>
 80067e0:	6983      	ldr	r3, [r0, #24]
 80067e2:	b90b      	cbnz	r3, 80067e8 <_puts_r+0x10>
 80067e4:	f000 fa0c 	bl	8006c00 <__sinit>
 80067e8:	69ab      	ldr	r3, [r5, #24]
 80067ea:	68ac      	ldr	r4, [r5, #8]
 80067ec:	b913      	cbnz	r3, 80067f4 <_puts_r+0x1c>
 80067ee:	4628      	mov	r0, r5
 80067f0:	f000 fa06 	bl	8006c00 <__sinit>
 80067f4:	4b23      	ldr	r3, [pc, #140]	; (8006884 <_puts_r+0xac>)
 80067f6:	429c      	cmp	r4, r3
 80067f8:	d117      	bne.n	800682a <_puts_r+0x52>
 80067fa:	686c      	ldr	r4, [r5, #4]
 80067fc:	89a3      	ldrh	r3, [r4, #12]
 80067fe:	071b      	lsls	r3, r3, #28
 8006800:	d51d      	bpl.n	800683e <_puts_r+0x66>
 8006802:	6923      	ldr	r3, [r4, #16]
 8006804:	b1db      	cbz	r3, 800683e <_puts_r+0x66>
 8006806:	3e01      	subs	r6, #1
 8006808:	68a3      	ldr	r3, [r4, #8]
 800680a:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800680e:	3b01      	subs	r3, #1
 8006810:	60a3      	str	r3, [r4, #8]
 8006812:	b9e9      	cbnz	r1, 8006850 <_puts_r+0x78>
 8006814:	2b00      	cmp	r3, #0
 8006816:	da2e      	bge.n	8006876 <_puts_r+0x9e>
 8006818:	4622      	mov	r2, r4
 800681a:	210a      	movs	r1, #10
 800681c:	4628      	mov	r0, r5
 800681e:	f000 f83f 	bl	80068a0 <__swbuf_r>
 8006822:	3001      	adds	r0, #1
 8006824:	d011      	beq.n	800684a <_puts_r+0x72>
 8006826:	200a      	movs	r0, #10
 8006828:	e011      	b.n	800684e <_puts_r+0x76>
 800682a:	4b17      	ldr	r3, [pc, #92]	; (8006888 <_puts_r+0xb0>)
 800682c:	429c      	cmp	r4, r3
 800682e:	d101      	bne.n	8006834 <_puts_r+0x5c>
 8006830:	68ac      	ldr	r4, [r5, #8]
 8006832:	e7e3      	b.n	80067fc <_puts_r+0x24>
 8006834:	4b15      	ldr	r3, [pc, #84]	; (800688c <_puts_r+0xb4>)
 8006836:	429c      	cmp	r4, r3
 8006838:	bf08      	it	eq
 800683a:	68ec      	ldreq	r4, [r5, #12]
 800683c:	e7de      	b.n	80067fc <_puts_r+0x24>
 800683e:	4621      	mov	r1, r4
 8006840:	4628      	mov	r0, r5
 8006842:	f000 f87f 	bl	8006944 <__swsetup_r>
 8006846:	2800      	cmp	r0, #0
 8006848:	d0dd      	beq.n	8006806 <_puts_r+0x2e>
 800684a:	f04f 30ff 	mov.w	r0, #4294967295
 800684e:	bd70      	pop	{r4, r5, r6, pc}
 8006850:	2b00      	cmp	r3, #0
 8006852:	da04      	bge.n	800685e <_puts_r+0x86>
 8006854:	69a2      	ldr	r2, [r4, #24]
 8006856:	429a      	cmp	r2, r3
 8006858:	dc06      	bgt.n	8006868 <_puts_r+0x90>
 800685a:	290a      	cmp	r1, #10
 800685c:	d004      	beq.n	8006868 <_puts_r+0x90>
 800685e:	6823      	ldr	r3, [r4, #0]
 8006860:	1c5a      	adds	r2, r3, #1
 8006862:	6022      	str	r2, [r4, #0]
 8006864:	7019      	strb	r1, [r3, #0]
 8006866:	e7cf      	b.n	8006808 <_puts_r+0x30>
 8006868:	4622      	mov	r2, r4
 800686a:	4628      	mov	r0, r5
 800686c:	f000 f818 	bl	80068a0 <__swbuf_r>
 8006870:	3001      	adds	r0, #1
 8006872:	d1c9      	bne.n	8006808 <_puts_r+0x30>
 8006874:	e7e9      	b.n	800684a <_puts_r+0x72>
 8006876:	6823      	ldr	r3, [r4, #0]
 8006878:	200a      	movs	r0, #10
 800687a:	1c5a      	adds	r2, r3, #1
 800687c:	6022      	str	r2, [r4, #0]
 800687e:	7018      	strb	r0, [r3, #0]
 8006880:	e7e5      	b.n	800684e <_puts_r+0x76>
 8006882:	bf00      	nop
 8006884:	0800717c 	.word	0x0800717c
 8006888:	0800719c 	.word	0x0800719c
 800688c:	0800715c 	.word	0x0800715c

08006890 <puts>:
 8006890:	4b02      	ldr	r3, [pc, #8]	; (800689c <puts+0xc>)
 8006892:	4601      	mov	r1, r0
 8006894:	6818      	ldr	r0, [r3, #0]
 8006896:	f7ff bf9f 	b.w	80067d8 <_puts_r>
 800689a:	bf00      	nop
 800689c:	20000010 	.word	0x20000010

080068a0 <__swbuf_r>:
 80068a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80068a2:	460e      	mov	r6, r1
 80068a4:	4614      	mov	r4, r2
 80068a6:	4605      	mov	r5, r0
 80068a8:	b118      	cbz	r0, 80068b2 <__swbuf_r+0x12>
 80068aa:	6983      	ldr	r3, [r0, #24]
 80068ac:	b90b      	cbnz	r3, 80068b2 <__swbuf_r+0x12>
 80068ae:	f000 f9a7 	bl	8006c00 <__sinit>
 80068b2:	4b21      	ldr	r3, [pc, #132]	; (8006938 <__swbuf_r+0x98>)
 80068b4:	429c      	cmp	r4, r3
 80068b6:	d12a      	bne.n	800690e <__swbuf_r+0x6e>
 80068b8:	686c      	ldr	r4, [r5, #4]
 80068ba:	69a3      	ldr	r3, [r4, #24]
 80068bc:	60a3      	str	r3, [r4, #8]
 80068be:	89a3      	ldrh	r3, [r4, #12]
 80068c0:	071a      	lsls	r2, r3, #28
 80068c2:	d52e      	bpl.n	8006922 <__swbuf_r+0x82>
 80068c4:	6923      	ldr	r3, [r4, #16]
 80068c6:	b363      	cbz	r3, 8006922 <__swbuf_r+0x82>
 80068c8:	6923      	ldr	r3, [r4, #16]
 80068ca:	6820      	ldr	r0, [r4, #0]
 80068cc:	1ac0      	subs	r0, r0, r3
 80068ce:	6963      	ldr	r3, [r4, #20]
 80068d0:	b2f6      	uxtb	r6, r6
 80068d2:	4283      	cmp	r3, r0
 80068d4:	4637      	mov	r7, r6
 80068d6:	dc04      	bgt.n	80068e2 <__swbuf_r+0x42>
 80068d8:	4621      	mov	r1, r4
 80068da:	4628      	mov	r0, r5
 80068dc:	f000 f926 	bl	8006b2c <_fflush_r>
 80068e0:	bb28      	cbnz	r0, 800692e <__swbuf_r+0x8e>
 80068e2:	68a3      	ldr	r3, [r4, #8]
 80068e4:	3b01      	subs	r3, #1
 80068e6:	60a3      	str	r3, [r4, #8]
 80068e8:	6823      	ldr	r3, [r4, #0]
 80068ea:	1c5a      	adds	r2, r3, #1
 80068ec:	6022      	str	r2, [r4, #0]
 80068ee:	701e      	strb	r6, [r3, #0]
 80068f0:	6963      	ldr	r3, [r4, #20]
 80068f2:	3001      	adds	r0, #1
 80068f4:	4283      	cmp	r3, r0
 80068f6:	d004      	beq.n	8006902 <__swbuf_r+0x62>
 80068f8:	89a3      	ldrh	r3, [r4, #12]
 80068fa:	07db      	lsls	r3, r3, #31
 80068fc:	d519      	bpl.n	8006932 <__swbuf_r+0x92>
 80068fe:	2e0a      	cmp	r6, #10
 8006900:	d117      	bne.n	8006932 <__swbuf_r+0x92>
 8006902:	4621      	mov	r1, r4
 8006904:	4628      	mov	r0, r5
 8006906:	f000 f911 	bl	8006b2c <_fflush_r>
 800690a:	b190      	cbz	r0, 8006932 <__swbuf_r+0x92>
 800690c:	e00f      	b.n	800692e <__swbuf_r+0x8e>
 800690e:	4b0b      	ldr	r3, [pc, #44]	; (800693c <__swbuf_r+0x9c>)
 8006910:	429c      	cmp	r4, r3
 8006912:	d101      	bne.n	8006918 <__swbuf_r+0x78>
 8006914:	68ac      	ldr	r4, [r5, #8]
 8006916:	e7d0      	b.n	80068ba <__swbuf_r+0x1a>
 8006918:	4b09      	ldr	r3, [pc, #36]	; (8006940 <__swbuf_r+0xa0>)
 800691a:	429c      	cmp	r4, r3
 800691c:	bf08      	it	eq
 800691e:	68ec      	ldreq	r4, [r5, #12]
 8006920:	e7cb      	b.n	80068ba <__swbuf_r+0x1a>
 8006922:	4621      	mov	r1, r4
 8006924:	4628      	mov	r0, r5
 8006926:	f000 f80d 	bl	8006944 <__swsetup_r>
 800692a:	2800      	cmp	r0, #0
 800692c:	d0cc      	beq.n	80068c8 <__swbuf_r+0x28>
 800692e:	f04f 37ff 	mov.w	r7, #4294967295
 8006932:	4638      	mov	r0, r7
 8006934:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006936:	bf00      	nop
 8006938:	0800717c 	.word	0x0800717c
 800693c:	0800719c 	.word	0x0800719c
 8006940:	0800715c 	.word	0x0800715c

08006944 <__swsetup_r>:
 8006944:	4b32      	ldr	r3, [pc, #200]	; (8006a10 <__swsetup_r+0xcc>)
 8006946:	b570      	push	{r4, r5, r6, lr}
 8006948:	681d      	ldr	r5, [r3, #0]
 800694a:	4606      	mov	r6, r0
 800694c:	460c      	mov	r4, r1
 800694e:	b125      	cbz	r5, 800695a <__swsetup_r+0x16>
 8006950:	69ab      	ldr	r3, [r5, #24]
 8006952:	b913      	cbnz	r3, 800695a <__swsetup_r+0x16>
 8006954:	4628      	mov	r0, r5
 8006956:	f000 f953 	bl	8006c00 <__sinit>
 800695a:	4b2e      	ldr	r3, [pc, #184]	; (8006a14 <__swsetup_r+0xd0>)
 800695c:	429c      	cmp	r4, r3
 800695e:	d10f      	bne.n	8006980 <__swsetup_r+0x3c>
 8006960:	686c      	ldr	r4, [r5, #4]
 8006962:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006966:	b29a      	uxth	r2, r3
 8006968:	0715      	lsls	r5, r2, #28
 800696a:	d42c      	bmi.n	80069c6 <__swsetup_r+0x82>
 800696c:	06d0      	lsls	r0, r2, #27
 800696e:	d411      	bmi.n	8006994 <__swsetup_r+0x50>
 8006970:	2209      	movs	r2, #9
 8006972:	6032      	str	r2, [r6, #0]
 8006974:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006978:	81a3      	strh	r3, [r4, #12]
 800697a:	f04f 30ff 	mov.w	r0, #4294967295
 800697e:	e03e      	b.n	80069fe <__swsetup_r+0xba>
 8006980:	4b25      	ldr	r3, [pc, #148]	; (8006a18 <__swsetup_r+0xd4>)
 8006982:	429c      	cmp	r4, r3
 8006984:	d101      	bne.n	800698a <__swsetup_r+0x46>
 8006986:	68ac      	ldr	r4, [r5, #8]
 8006988:	e7eb      	b.n	8006962 <__swsetup_r+0x1e>
 800698a:	4b24      	ldr	r3, [pc, #144]	; (8006a1c <__swsetup_r+0xd8>)
 800698c:	429c      	cmp	r4, r3
 800698e:	bf08      	it	eq
 8006990:	68ec      	ldreq	r4, [r5, #12]
 8006992:	e7e6      	b.n	8006962 <__swsetup_r+0x1e>
 8006994:	0751      	lsls	r1, r2, #29
 8006996:	d512      	bpl.n	80069be <__swsetup_r+0x7a>
 8006998:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800699a:	b141      	cbz	r1, 80069ae <__swsetup_r+0x6a>
 800699c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80069a0:	4299      	cmp	r1, r3
 80069a2:	d002      	beq.n	80069aa <__swsetup_r+0x66>
 80069a4:	4630      	mov	r0, r6
 80069a6:	f000 fa19 	bl	8006ddc <_free_r>
 80069aa:	2300      	movs	r3, #0
 80069ac:	6363      	str	r3, [r4, #52]	; 0x34
 80069ae:	89a3      	ldrh	r3, [r4, #12]
 80069b0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80069b4:	81a3      	strh	r3, [r4, #12]
 80069b6:	2300      	movs	r3, #0
 80069b8:	6063      	str	r3, [r4, #4]
 80069ba:	6923      	ldr	r3, [r4, #16]
 80069bc:	6023      	str	r3, [r4, #0]
 80069be:	89a3      	ldrh	r3, [r4, #12]
 80069c0:	f043 0308 	orr.w	r3, r3, #8
 80069c4:	81a3      	strh	r3, [r4, #12]
 80069c6:	6923      	ldr	r3, [r4, #16]
 80069c8:	b94b      	cbnz	r3, 80069de <__swsetup_r+0x9a>
 80069ca:	89a3      	ldrh	r3, [r4, #12]
 80069cc:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80069d0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80069d4:	d003      	beq.n	80069de <__swsetup_r+0x9a>
 80069d6:	4621      	mov	r1, r4
 80069d8:	4630      	mov	r0, r6
 80069da:	f000 f9bf 	bl	8006d5c <__smakebuf_r>
 80069de:	89a2      	ldrh	r2, [r4, #12]
 80069e0:	f012 0301 	ands.w	r3, r2, #1
 80069e4:	d00c      	beq.n	8006a00 <__swsetup_r+0xbc>
 80069e6:	2300      	movs	r3, #0
 80069e8:	60a3      	str	r3, [r4, #8]
 80069ea:	6963      	ldr	r3, [r4, #20]
 80069ec:	425b      	negs	r3, r3
 80069ee:	61a3      	str	r3, [r4, #24]
 80069f0:	6923      	ldr	r3, [r4, #16]
 80069f2:	b953      	cbnz	r3, 8006a0a <__swsetup_r+0xc6>
 80069f4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80069f8:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 80069fc:	d1ba      	bne.n	8006974 <__swsetup_r+0x30>
 80069fe:	bd70      	pop	{r4, r5, r6, pc}
 8006a00:	0792      	lsls	r2, r2, #30
 8006a02:	bf58      	it	pl
 8006a04:	6963      	ldrpl	r3, [r4, #20]
 8006a06:	60a3      	str	r3, [r4, #8]
 8006a08:	e7f2      	b.n	80069f0 <__swsetup_r+0xac>
 8006a0a:	2000      	movs	r0, #0
 8006a0c:	e7f7      	b.n	80069fe <__swsetup_r+0xba>
 8006a0e:	bf00      	nop
 8006a10:	20000010 	.word	0x20000010
 8006a14:	0800717c 	.word	0x0800717c
 8006a18:	0800719c 	.word	0x0800719c
 8006a1c:	0800715c 	.word	0x0800715c

08006a20 <__sflush_r>:
 8006a20:	898a      	ldrh	r2, [r1, #12]
 8006a22:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006a26:	4605      	mov	r5, r0
 8006a28:	0710      	lsls	r0, r2, #28
 8006a2a:	460c      	mov	r4, r1
 8006a2c:	d458      	bmi.n	8006ae0 <__sflush_r+0xc0>
 8006a2e:	684b      	ldr	r3, [r1, #4]
 8006a30:	2b00      	cmp	r3, #0
 8006a32:	dc05      	bgt.n	8006a40 <__sflush_r+0x20>
 8006a34:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8006a36:	2b00      	cmp	r3, #0
 8006a38:	dc02      	bgt.n	8006a40 <__sflush_r+0x20>
 8006a3a:	2000      	movs	r0, #0
 8006a3c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006a40:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006a42:	2e00      	cmp	r6, #0
 8006a44:	d0f9      	beq.n	8006a3a <__sflush_r+0x1a>
 8006a46:	2300      	movs	r3, #0
 8006a48:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8006a4c:	682f      	ldr	r7, [r5, #0]
 8006a4e:	6a21      	ldr	r1, [r4, #32]
 8006a50:	602b      	str	r3, [r5, #0]
 8006a52:	d032      	beq.n	8006aba <__sflush_r+0x9a>
 8006a54:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8006a56:	89a3      	ldrh	r3, [r4, #12]
 8006a58:	075a      	lsls	r2, r3, #29
 8006a5a:	d505      	bpl.n	8006a68 <__sflush_r+0x48>
 8006a5c:	6863      	ldr	r3, [r4, #4]
 8006a5e:	1ac0      	subs	r0, r0, r3
 8006a60:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8006a62:	b10b      	cbz	r3, 8006a68 <__sflush_r+0x48>
 8006a64:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006a66:	1ac0      	subs	r0, r0, r3
 8006a68:	2300      	movs	r3, #0
 8006a6a:	4602      	mov	r2, r0
 8006a6c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006a6e:	6a21      	ldr	r1, [r4, #32]
 8006a70:	4628      	mov	r0, r5
 8006a72:	47b0      	blx	r6
 8006a74:	1c43      	adds	r3, r0, #1
 8006a76:	89a3      	ldrh	r3, [r4, #12]
 8006a78:	d106      	bne.n	8006a88 <__sflush_r+0x68>
 8006a7a:	6829      	ldr	r1, [r5, #0]
 8006a7c:	291d      	cmp	r1, #29
 8006a7e:	d848      	bhi.n	8006b12 <__sflush_r+0xf2>
 8006a80:	4a29      	ldr	r2, [pc, #164]	; (8006b28 <__sflush_r+0x108>)
 8006a82:	40ca      	lsrs	r2, r1
 8006a84:	07d6      	lsls	r6, r2, #31
 8006a86:	d544      	bpl.n	8006b12 <__sflush_r+0xf2>
 8006a88:	2200      	movs	r2, #0
 8006a8a:	6062      	str	r2, [r4, #4]
 8006a8c:	04d9      	lsls	r1, r3, #19
 8006a8e:	6922      	ldr	r2, [r4, #16]
 8006a90:	6022      	str	r2, [r4, #0]
 8006a92:	d504      	bpl.n	8006a9e <__sflush_r+0x7e>
 8006a94:	1c42      	adds	r2, r0, #1
 8006a96:	d101      	bne.n	8006a9c <__sflush_r+0x7c>
 8006a98:	682b      	ldr	r3, [r5, #0]
 8006a9a:	b903      	cbnz	r3, 8006a9e <__sflush_r+0x7e>
 8006a9c:	6560      	str	r0, [r4, #84]	; 0x54
 8006a9e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006aa0:	602f      	str	r7, [r5, #0]
 8006aa2:	2900      	cmp	r1, #0
 8006aa4:	d0c9      	beq.n	8006a3a <__sflush_r+0x1a>
 8006aa6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006aaa:	4299      	cmp	r1, r3
 8006aac:	d002      	beq.n	8006ab4 <__sflush_r+0x94>
 8006aae:	4628      	mov	r0, r5
 8006ab0:	f000 f994 	bl	8006ddc <_free_r>
 8006ab4:	2000      	movs	r0, #0
 8006ab6:	6360      	str	r0, [r4, #52]	; 0x34
 8006ab8:	e7c0      	b.n	8006a3c <__sflush_r+0x1c>
 8006aba:	2301      	movs	r3, #1
 8006abc:	4628      	mov	r0, r5
 8006abe:	47b0      	blx	r6
 8006ac0:	1c41      	adds	r1, r0, #1
 8006ac2:	d1c8      	bne.n	8006a56 <__sflush_r+0x36>
 8006ac4:	682b      	ldr	r3, [r5, #0]
 8006ac6:	2b00      	cmp	r3, #0
 8006ac8:	d0c5      	beq.n	8006a56 <__sflush_r+0x36>
 8006aca:	2b1d      	cmp	r3, #29
 8006acc:	d001      	beq.n	8006ad2 <__sflush_r+0xb2>
 8006ace:	2b16      	cmp	r3, #22
 8006ad0:	d101      	bne.n	8006ad6 <__sflush_r+0xb6>
 8006ad2:	602f      	str	r7, [r5, #0]
 8006ad4:	e7b1      	b.n	8006a3a <__sflush_r+0x1a>
 8006ad6:	89a3      	ldrh	r3, [r4, #12]
 8006ad8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006adc:	81a3      	strh	r3, [r4, #12]
 8006ade:	e7ad      	b.n	8006a3c <__sflush_r+0x1c>
 8006ae0:	690f      	ldr	r7, [r1, #16]
 8006ae2:	2f00      	cmp	r7, #0
 8006ae4:	d0a9      	beq.n	8006a3a <__sflush_r+0x1a>
 8006ae6:	0793      	lsls	r3, r2, #30
 8006ae8:	680e      	ldr	r6, [r1, #0]
 8006aea:	bf08      	it	eq
 8006aec:	694b      	ldreq	r3, [r1, #20]
 8006aee:	600f      	str	r7, [r1, #0]
 8006af0:	bf18      	it	ne
 8006af2:	2300      	movne	r3, #0
 8006af4:	eba6 0807 	sub.w	r8, r6, r7
 8006af8:	608b      	str	r3, [r1, #8]
 8006afa:	f1b8 0f00 	cmp.w	r8, #0
 8006afe:	dd9c      	ble.n	8006a3a <__sflush_r+0x1a>
 8006b00:	4643      	mov	r3, r8
 8006b02:	463a      	mov	r2, r7
 8006b04:	6a21      	ldr	r1, [r4, #32]
 8006b06:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8006b08:	4628      	mov	r0, r5
 8006b0a:	47b0      	blx	r6
 8006b0c:	2800      	cmp	r0, #0
 8006b0e:	dc06      	bgt.n	8006b1e <__sflush_r+0xfe>
 8006b10:	89a3      	ldrh	r3, [r4, #12]
 8006b12:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006b16:	81a3      	strh	r3, [r4, #12]
 8006b18:	f04f 30ff 	mov.w	r0, #4294967295
 8006b1c:	e78e      	b.n	8006a3c <__sflush_r+0x1c>
 8006b1e:	4407      	add	r7, r0
 8006b20:	eba8 0800 	sub.w	r8, r8, r0
 8006b24:	e7e9      	b.n	8006afa <__sflush_r+0xda>
 8006b26:	bf00      	nop
 8006b28:	20400001 	.word	0x20400001

08006b2c <_fflush_r>:
 8006b2c:	b538      	push	{r3, r4, r5, lr}
 8006b2e:	690b      	ldr	r3, [r1, #16]
 8006b30:	4605      	mov	r5, r0
 8006b32:	460c      	mov	r4, r1
 8006b34:	b1db      	cbz	r3, 8006b6e <_fflush_r+0x42>
 8006b36:	b118      	cbz	r0, 8006b40 <_fflush_r+0x14>
 8006b38:	6983      	ldr	r3, [r0, #24]
 8006b3a:	b90b      	cbnz	r3, 8006b40 <_fflush_r+0x14>
 8006b3c:	f000 f860 	bl	8006c00 <__sinit>
 8006b40:	4b0c      	ldr	r3, [pc, #48]	; (8006b74 <_fflush_r+0x48>)
 8006b42:	429c      	cmp	r4, r3
 8006b44:	d109      	bne.n	8006b5a <_fflush_r+0x2e>
 8006b46:	686c      	ldr	r4, [r5, #4]
 8006b48:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006b4c:	b17b      	cbz	r3, 8006b6e <_fflush_r+0x42>
 8006b4e:	4621      	mov	r1, r4
 8006b50:	4628      	mov	r0, r5
 8006b52:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006b56:	f7ff bf63 	b.w	8006a20 <__sflush_r>
 8006b5a:	4b07      	ldr	r3, [pc, #28]	; (8006b78 <_fflush_r+0x4c>)
 8006b5c:	429c      	cmp	r4, r3
 8006b5e:	d101      	bne.n	8006b64 <_fflush_r+0x38>
 8006b60:	68ac      	ldr	r4, [r5, #8]
 8006b62:	e7f1      	b.n	8006b48 <_fflush_r+0x1c>
 8006b64:	4b05      	ldr	r3, [pc, #20]	; (8006b7c <_fflush_r+0x50>)
 8006b66:	429c      	cmp	r4, r3
 8006b68:	bf08      	it	eq
 8006b6a:	68ec      	ldreq	r4, [r5, #12]
 8006b6c:	e7ec      	b.n	8006b48 <_fflush_r+0x1c>
 8006b6e:	2000      	movs	r0, #0
 8006b70:	bd38      	pop	{r3, r4, r5, pc}
 8006b72:	bf00      	nop
 8006b74:	0800717c 	.word	0x0800717c
 8006b78:	0800719c 	.word	0x0800719c
 8006b7c:	0800715c 	.word	0x0800715c

08006b80 <std>:
 8006b80:	2300      	movs	r3, #0
 8006b82:	b510      	push	{r4, lr}
 8006b84:	4604      	mov	r4, r0
 8006b86:	e9c0 3300 	strd	r3, r3, [r0]
 8006b8a:	6083      	str	r3, [r0, #8]
 8006b8c:	8181      	strh	r1, [r0, #12]
 8006b8e:	6643      	str	r3, [r0, #100]	; 0x64
 8006b90:	81c2      	strh	r2, [r0, #14]
 8006b92:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006b96:	6183      	str	r3, [r0, #24]
 8006b98:	4619      	mov	r1, r3
 8006b9a:	2208      	movs	r2, #8
 8006b9c:	305c      	adds	r0, #92	; 0x5c
 8006b9e:	f7ff fe12 	bl	80067c6 <memset>
 8006ba2:	4b05      	ldr	r3, [pc, #20]	; (8006bb8 <std+0x38>)
 8006ba4:	6263      	str	r3, [r4, #36]	; 0x24
 8006ba6:	4b05      	ldr	r3, [pc, #20]	; (8006bbc <std+0x3c>)
 8006ba8:	62a3      	str	r3, [r4, #40]	; 0x28
 8006baa:	4b05      	ldr	r3, [pc, #20]	; (8006bc0 <std+0x40>)
 8006bac:	62e3      	str	r3, [r4, #44]	; 0x2c
 8006bae:	4b05      	ldr	r3, [pc, #20]	; (8006bc4 <std+0x44>)
 8006bb0:	6224      	str	r4, [r4, #32]
 8006bb2:	6323      	str	r3, [r4, #48]	; 0x30
 8006bb4:	bd10      	pop	{r4, pc}
 8006bb6:	bf00      	nop
 8006bb8:	08006f4d 	.word	0x08006f4d
 8006bbc:	08006f6f 	.word	0x08006f6f
 8006bc0:	08006fa7 	.word	0x08006fa7
 8006bc4:	08006fcb 	.word	0x08006fcb

08006bc8 <_cleanup_r>:
 8006bc8:	4901      	ldr	r1, [pc, #4]	; (8006bd0 <_cleanup_r+0x8>)
 8006bca:	f000 b885 	b.w	8006cd8 <_fwalk_reent>
 8006bce:	bf00      	nop
 8006bd0:	08006b2d 	.word	0x08006b2d

08006bd4 <__sfmoreglue>:
 8006bd4:	b570      	push	{r4, r5, r6, lr}
 8006bd6:	1e4a      	subs	r2, r1, #1
 8006bd8:	2568      	movs	r5, #104	; 0x68
 8006bda:	4355      	muls	r5, r2
 8006bdc:	460e      	mov	r6, r1
 8006bde:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8006be2:	f000 f949 	bl	8006e78 <_malloc_r>
 8006be6:	4604      	mov	r4, r0
 8006be8:	b140      	cbz	r0, 8006bfc <__sfmoreglue+0x28>
 8006bea:	2100      	movs	r1, #0
 8006bec:	e9c0 1600 	strd	r1, r6, [r0]
 8006bf0:	300c      	adds	r0, #12
 8006bf2:	60a0      	str	r0, [r4, #8]
 8006bf4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8006bf8:	f7ff fde5 	bl	80067c6 <memset>
 8006bfc:	4620      	mov	r0, r4
 8006bfe:	bd70      	pop	{r4, r5, r6, pc}

08006c00 <__sinit>:
 8006c00:	6983      	ldr	r3, [r0, #24]
 8006c02:	b510      	push	{r4, lr}
 8006c04:	4604      	mov	r4, r0
 8006c06:	bb33      	cbnz	r3, 8006c56 <__sinit+0x56>
 8006c08:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8006c0c:	6503      	str	r3, [r0, #80]	; 0x50
 8006c0e:	4b12      	ldr	r3, [pc, #72]	; (8006c58 <__sinit+0x58>)
 8006c10:	4a12      	ldr	r2, [pc, #72]	; (8006c5c <__sinit+0x5c>)
 8006c12:	681b      	ldr	r3, [r3, #0]
 8006c14:	6282      	str	r2, [r0, #40]	; 0x28
 8006c16:	4298      	cmp	r0, r3
 8006c18:	bf04      	itt	eq
 8006c1a:	2301      	moveq	r3, #1
 8006c1c:	6183      	streq	r3, [r0, #24]
 8006c1e:	f000 f81f 	bl	8006c60 <__sfp>
 8006c22:	6060      	str	r0, [r4, #4]
 8006c24:	4620      	mov	r0, r4
 8006c26:	f000 f81b 	bl	8006c60 <__sfp>
 8006c2a:	60a0      	str	r0, [r4, #8]
 8006c2c:	4620      	mov	r0, r4
 8006c2e:	f000 f817 	bl	8006c60 <__sfp>
 8006c32:	2200      	movs	r2, #0
 8006c34:	60e0      	str	r0, [r4, #12]
 8006c36:	2104      	movs	r1, #4
 8006c38:	6860      	ldr	r0, [r4, #4]
 8006c3a:	f7ff ffa1 	bl	8006b80 <std>
 8006c3e:	2201      	movs	r2, #1
 8006c40:	2109      	movs	r1, #9
 8006c42:	68a0      	ldr	r0, [r4, #8]
 8006c44:	f7ff ff9c 	bl	8006b80 <std>
 8006c48:	2202      	movs	r2, #2
 8006c4a:	2112      	movs	r1, #18
 8006c4c:	68e0      	ldr	r0, [r4, #12]
 8006c4e:	f7ff ff97 	bl	8006b80 <std>
 8006c52:	2301      	movs	r3, #1
 8006c54:	61a3      	str	r3, [r4, #24]
 8006c56:	bd10      	pop	{r4, pc}
 8006c58:	08007158 	.word	0x08007158
 8006c5c:	08006bc9 	.word	0x08006bc9

08006c60 <__sfp>:
 8006c60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006c62:	4b1b      	ldr	r3, [pc, #108]	; (8006cd0 <__sfp+0x70>)
 8006c64:	681e      	ldr	r6, [r3, #0]
 8006c66:	69b3      	ldr	r3, [r6, #24]
 8006c68:	4607      	mov	r7, r0
 8006c6a:	b913      	cbnz	r3, 8006c72 <__sfp+0x12>
 8006c6c:	4630      	mov	r0, r6
 8006c6e:	f7ff ffc7 	bl	8006c00 <__sinit>
 8006c72:	3648      	adds	r6, #72	; 0x48
 8006c74:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8006c78:	3b01      	subs	r3, #1
 8006c7a:	d503      	bpl.n	8006c84 <__sfp+0x24>
 8006c7c:	6833      	ldr	r3, [r6, #0]
 8006c7e:	b133      	cbz	r3, 8006c8e <__sfp+0x2e>
 8006c80:	6836      	ldr	r6, [r6, #0]
 8006c82:	e7f7      	b.n	8006c74 <__sfp+0x14>
 8006c84:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8006c88:	b16d      	cbz	r5, 8006ca6 <__sfp+0x46>
 8006c8a:	3468      	adds	r4, #104	; 0x68
 8006c8c:	e7f4      	b.n	8006c78 <__sfp+0x18>
 8006c8e:	2104      	movs	r1, #4
 8006c90:	4638      	mov	r0, r7
 8006c92:	f7ff ff9f 	bl	8006bd4 <__sfmoreglue>
 8006c96:	6030      	str	r0, [r6, #0]
 8006c98:	2800      	cmp	r0, #0
 8006c9a:	d1f1      	bne.n	8006c80 <__sfp+0x20>
 8006c9c:	230c      	movs	r3, #12
 8006c9e:	603b      	str	r3, [r7, #0]
 8006ca0:	4604      	mov	r4, r0
 8006ca2:	4620      	mov	r0, r4
 8006ca4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006ca6:	4b0b      	ldr	r3, [pc, #44]	; (8006cd4 <__sfp+0x74>)
 8006ca8:	6665      	str	r5, [r4, #100]	; 0x64
 8006caa:	e9c4 5500 	strd	r5, r5, [r4]
 8006cae:	60a5      	str	r5, [r4, #8]
 8006cb0:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8006cb4:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8006cb8:	2208      	movs	r2, #8
 8006cba:	4629      	mov	r1, r5
 8006cbc:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8006cc0:	f7ff fd81 	bl	80067c6 <memset>
 8006cc4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8006cc8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8006ccc:	e7e9      	b.n	8006ca2 <__sfp+0x42>
 8006cce:	bf00      	nop
 8006cd0:	08007158 	.word	0x08007158
 8006cd4:	ffff0001 	.word	0xffff0001

08006cd8 <_fwalk_reent>:
 8006cd8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006cdc:	4680      	mov	r8, r0
 8006cde:	4689      	mov	r9, r1
 8006ce0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8006ce4:	2600      	movs	r6, #0
 8006ce6:	b914      	cbnz	r4, 8006cee <_fwalk_reent+0x16>
 8006ce8:	4630      	mov	r0, r6
 8006cea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006cee:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 8006cf2:	3f01      	subs	r7, #1
 8006cf4:	d501      	bpl.n	8006cfa <_fwalk_reent+0x22>
 8006cf6:	6824      	ldr	r4, [r4, #0]
 8006cf8:	e7f5      	b.n	8006ce6 <_fwalk_reent+0xe>
 8006cfa:	89ab      	ldrh	r3, [r5, #12]
 8006cfc:	2b01      	cmp	r3, #1
 8006cfe:	d907      	bls.n	8006d10 <_fwalk_reent+0x38>
 8006d00:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006d04:	3301      	adds	r3, #1
 8006d06:	d003      	beq.n	8006d10 <_fwalk_reent+0x38>
 8006d08:	4629      	mov	r1, r5
 8006d0a:	4640      	mov	r0, r8
 8006d0c:	47c8      	blx	r9
 8006d0e:	4306      	orrs	r6, r0
 8006d10:	3568      	adds	r5, #104	; 0x68
 8006d12:	e7ee      	b.n	8006cf2 <_fwalk_reent+0x1a>

08006d14 <__swhatbuf_r>:
 8006d14:	b570      	push	{r4, r5, r6, lr}
 8006d16:	460e      	mov	r6, r1
 8006d18:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006d1c:	2900      	cmp	r1, #0
 8006d1e:	b096      	sub	sp, #88	; 0x58
 8006d20:	4614      	mov	r4, r2
 8006d22:	461d      	mov	r5, r3
 8006d24:	da07      	bge.n	8006d36 <__swhatbuf_r+0x22>
 8006d26:	2300      	movs	r3, #0
 8006d28:	602b      	str	r3, [r5, #0]
 8006d2a:	89b3      	ldrh	r3, [r6, #12]
 8006d2c:	061a      	lsls	r2, r3, #24
 8006d2e:	d410      	bmi.n	8006d52 <__swhatbuf_r+0x3e>
 8006d30:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006d34:	e00e      	b.n	8006d54 <__swhatbuf_r+0x40>
 8006d36:	466a      	mov	r2, sp
 8006d38:	f000 f96e 	bl	8007018 <_fstat_r>
 8006d3c:	2800      	cmp	r0, #0
 8006d3e:	dbf2      	blt.n	8006d26 <__swhatbuf_r+0x12>
 8006d40:	9a01      	ldr	r2, [sp, #4]
 8006d42:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8006d46:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8006d4a:	425a      	negs	r2, r3
 8006d4c:	415a      	adcs	r2, r3
 8006d4e:	602a      	str	r2, [r5, #0]
 8006d50:	e7ee      	b.n	8006d30 <__swhatbuf_r+0x1c>
 8006d52:	2340      	movs	r3, #64	; 0x40
 8006d54:	2000      	movs	r0, #0
 8006d56:	6023      	str	r3, [r4, #0]
 8006d58:	b016      	add	sp, #88	; 0x58
 8006d5a:	bd70      	pop	{r4, r5, r6, pc}

08006d5c <__smakebuf_r>:
 8006d5c:	898b      	ldrh	r3, [r1, #12]
 8006d5e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8006d60:	079d      	lsls	r5, r3, #30
 8006d62:	4606      	mov	r6, r0
 8006d64:	460c      	mov	r4, r1
 8006d66:	d507      	bpl.n	8006d78 <__smakebuf_r+0x1c>
 8006d68:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8006d6c:	6023      	str	r3, [r4, #0]
 8006d6e:	6123      	str	r3, [r4, #16]
 8006d70:	2301      	movs	r3, #1
 8006d72:	6163      	str	r3, [r4, #20]
 8006d74:	b002      	add	sp, #8
 8006d76:	bd70      	pop	{r4, r5, r6, pc}
 8006d78:	ab01      	add	r3, sp, #4
 8006d7a:	466a      	mov	r2, sp
 8006d7c:	f7ff ffca 	bl	8006d14 <__swhatbuf_r>
 8006d80:	9900      	ldr	r1, [sp, #0]
 8006d82:	4605      	mov	r5, r0
 8006d84:	4630      	mov	r0, r6
 8006d86:	f000 f877 	bl	8006e78 <_malloc_r>
 8006d8a:	b948      	cbnz	r0, 8006da0 <__smakebuf_r+0x44>
 8006d8c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006d90:	059a      	lsls	r2, r3, #22
 8006d92:	d4ef      	bmi.n	8006d74 <__smakebuf_r+0x18>
 8006d94:	f023 0303 	bic.w	r3, r3, #3
 8006d98:	f043 0302 	orr.w	r3, r3, #2
 8006d9c:	81a3      	strh	r3, [r4, #12]
 8006d9e:	e7e3      	b.n	8006d68 <__smakebuf_r+0xc>
 8006da0:	4b0d      	ldr	r3, [pc, #52]	; (8006dd8 <__smakebuf_r+0x7c>)
 8006da2:	62b3      	str	r3, [r6, #40]	; 0x28
 8006da4:	89a3      	ldrh	r3, [r4, #12]
 8006da6:	6020      	str	r0, [r4, #0]
 8006da8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006dac:	81a3      	strh	r3, [r4, #12]
 8006dae:	9b00      	ldr	r3, [sp, #0]
 8006db0:	6163      	str	r3, [r4, #20]
 8006db2:	9b01      	ldr	r3, [sp, #4]
 8006db4:	6120      	str	r0, [r4, #16]
 8006db6:	b15b      	cbz	r3, 8006dd0 <__smakebuf_r+0x74>
 8006db8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006dbc:	4630      	mov	r0, r6
 8006dbe:	f000 f93d 	bl	800703c <_isatty_r>
 8006dc2:	b128      	cbz	r0, 8006dd0 <__smakebuf_r+0x74>
 8006dc4:	89a3      	ldrh	r3, [r4, #12]
 8006dc6:	f023 0303 	bic.w	r3, r3, #3
 8006dca:	f043 0301 	orr.w	r3, r3, #1
 8006dce:	81a3      	strh	r3, [r4, #12]
 8006dd0:	89a3      	ldrh	r3, [r4, #12]
 8006dd2:	431d      	orrs	r5, r3
 8006dd4:	81a5      	strh	r5, [r4, #12]
 8006dd6:	e7cd      	b.n	8006d74 <__smakebuf_r+0x18>
 8006dd8:	08006bc9 	.word	0x08006bc9

08006ddc <_free_r>:
 8006ddc:	b538      	push	{r3, r4, r5, lr}
 8006dde:	4605      	mov	r5, r0
 8006de0:	2900      	cmp	r1, #0
 8006de2:	d045      	beq.n	8006e70 <_free_r+0x94>
 8006de4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006de8:	1f0c      	subs	r4, r1, #4
 8006dea:	2b00      	cmp	r3, #0
 8006dec:	bfb8      	it	lt
 8006dee:	18e4      	addlt	r4, r4, r3
 8006df0:	f000 f946 	bl	8007080 <__malloc_lock>
 8006df4:	4a1f      	ldr	r2, [pc, #124]	; (8006e74 <_free_r+0x98>)
 8006df6:	6813      	ldr	r3, [r2, #0]
 8006df8:	4610      	mov	r0, r2
 8006dfa:	b933      	cbnz	r3, 8006e0a <_free_r+0x2e>
 8006dfc:	6063      	str	r3, [r4, #4]
 8006dfe:	6014      	str	r4, [r2, #0]
 8006e00:	4628      	mov	r0, r5
 8006e02:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006e06:	f000 b93c 	b.w	8007082 <__malloc_unlock>
 8006e0a:	42a3      	cmp	r3, r4
 8006e0c:	d90c      	bls.n	8006e28 <_free_r+0x4c>
 8006e0e:	6821      	ldr	r1, [r4, #0]
 8006e10:	1862      	adds	r2, r4, r1
 8006e12:	4293      	cmp	r3, r2
 8006e14:	bf04      	itt	eq
 8006e16:	681a      	ldreq	r2, [r3, #0]
 8006e18:	685b      	ldreq	r3, [r3, #4]
 8006e1a:	6063      	str	r3, [r4, #4]
 8006e1c:	bf04      	itt	eq
 8006e1e:	1852      	addeq	r2, r2, r1
 8006e20:	6022      	streq	r2, [r4, #0]
 8006e22:	6004      	str	r4, [r0, #0]
 8006e24:	e7ec      	b.n	8006e00 <_free_r+0x24>
 8006e26:	4613      	mov	r3, r2
 8006e28:	685a      	ldr	r2, [r3, #4]
 8006e2a:	b10a      	cbz	r2, 8006e30 <_free_r+0x54>
 8006e2c:	42a2      	cmp	r2, r4
 8006e2e:	d9fa      	bls.n	8006e26 <_free_r+0x4a>
 8006e30:	6819      	ldr	r1, [r3, #0]
 8006e32:	1858      	adds	r0, r3, r1
 8006e34:	42a0      	cmp	r0, r4
 8006e36:	d10b      	bne.n	8006e50 <_free_r+0x74>
 8006e38:	6820      	ldr	r0, [r4, #0]
 8006e3a:	4401      	add	r1, r0
 8006e3c:	1858      	adds	r0, r3, r1
 8006e3e:	4282      	cmp	r2, r0
 8006e40:	6019      	str	r1, [r3, #0]
 8006e42:	d1dd      	bne.n	8006e00 <_free_r+0x24>
 8006e44:	6810      	ldr	r0, [r2, #0]
 8006e46:	6852      	ldr	r2, [r2, #4]
 8006e48:	605a      	str	r2, [r3, #4]
 8006e4a:	4401      	add	r1, r0
 8006e4c:	6019      	str	r1, [r3, #0]
 8006e4e:	e7d7      	b.n	8006e00 <_free_r+0x24>
 8006e50:	d902      	bls.n	8006e58 <_free_r+0x7c>
 8006e52:	230c      	movs	r3, #12
 8006e54:	602b      	str	r3, [r5, #0]
 8006e56:	e7d3      	b.n	8006e00 <_free_r+0x24>
 8006e58:	6820      	ldr	r0, [r4, #0]
 8006e5a:	1821      	adds	r1, r4, r0
 8006e5c:	428a      	cmp	r2, r1
 8006e5e:	bf04      	itt	eq
 8006e60:	6811      	ldreq	r1, [r2, #0]
 8006e62:	6852      	ldreq	r2, [r2, #4]
 8006e64:	6062      	str	r2, [r4, #4]
 8006e66:	bf04      	itt	eq
 8006e68:	1809      	addeq	r1, r1, r0
 8006e6a:	6021      	streq	r1, [r4, #0]
 8006e6c:	605c      	str	r4, [r3, #4]
 8006e6e:	e7c7      	b.n	8006e00 <_free_r+0x24>
 8006e70:	bd38      	pop	{r3, r4, r5, pc}
 8006e72:	bf00      	nop
 8006e74:	2000499c 	.word	0x2000499c

08006e78 <_malloc_r>:
 8006e78:	b570      	push	{r4, r5, r6, lr}
 8006e7a:	1ccd      	adds	r5, r1, #3
 8006e7c:	f025 0503 	bic.w	r5, r5, #3
 8006e80:	3508      	adds	r5, #8
 8006e82:	2d0c      	cmp	r5, #12
 8006e84:	bf38      	it	cc
 8006e86:	250c      	movcc	r5, #12
 8006e88:	2d00      	cmp	r5, #0
 8006e8a:	4606      	mov	r6, r0
 8006e8c:	db01      	blt.n	8006e92 <_malloc_r+0x1a>
 8006e8e:	42a9      	cmp	r1, r5
 8006e90:	d903      	bls.n	8006e9a <_malloc_r+0x22>
 8006e92:	230c      	movs	r3, #12
 8006e94:	6033      	str	r3, [r6, #0]
 8006e96:	2000      	movs	r0, #0
 8006e98:	bd70      	pop	{r4, r5, r6, pc}
 8006e9a:	f000 f8f1 	bl	8007080 <__malloc_lock>
 8006e9e:	4a21      	ldr	r2, [pc, #132]	; (8006f24 <_malloc_r+0xac>)
 8006ea0:	6814      	ldr	r4, [r2, #0]
 8006ea2:	4621      	mov	r1, r4
 8006ea4:	b991      	cbnz	r1, 8006ecc <_malloc_r+0x54>
 8006ea6:	4c20      	ldr	r4, [pc, #128]	; (8006f28 <_malloc_r+0xb0>)
 8006ea8:	6823      	ldr	r3, [r4, #0]
 8006eaa:	b91b      	cbnz	r3, 8006eb4 <_malloc_r+0x3c>
 8006eac:	4630      	mov	r0, r6
 8006eae:	f000 f83d 	bl	8006f2c <_sbrk_r>
 8006eb2:	6020      	str	r0, [r4, #0]
 8006eb4:	4629      	mov	r1, r5
 8006eb6:	4630      	mov	r0, r6
 8006eb8:	f000 f838 	bl	8006f2c <_sbrk_r>
 8006ebc:	1c43      	adds	r3, r0, #1
 8006ebe:	d124      	bne.n	8006f0a <_malloc_r+0x92>
 8006ec0:	230c      	movs	r3, #12
 8006ec2:	6033      	str	r3, [r6, #0]
 8006ec4:	4630      	mov	r0, r6
 8006ec6:	f000 f8dc 	bl	8007082 <__malloc_unlock>
 8006eca:	e7e4      	b.n	8006e96 <_malloc_r+0x1e>
 8006ecc:	680b      	ldr	r3, [r1, #0]
 8006ece:	1b5b      	subs	r3, r3, r5
 8006ed0:	d418      	bmi.n	8006f04 <_malloc_r+0x8c>
 8006ed2:	2b0b      	cmp	r3, #11
 8006ed4:	d90f      	bls.n	8006ef6 <_malloc_r+0x7e>
 8006ed6:	600b      	str	r3, [r1, #0]
 8006ed8:	50cd      	str	r5, [r1, r3]
 8006eda:	18cc      	adds	r4, r1, r3
 8006edc:	4630      	mov	r0, r6
 8006ede:	f000 f8d0 	bl	8007082 <__malloc_unlock>
 8006ee2:	f104 000b 	add.w	r0, r4, #11
 8006ee6:	1d23      	adds	r3, r4, #4
 8006ee8:	f020 0007 	bic.w	r0, r0, #7
 8006eec:	1ac3      	subs	r3, r0, r3
 8006eee:	d0d3      	beq.n	8006e98 <_malloc_r+0x20>
 8006ef0:	425a      	negs	r2, r3
 8006ef2:	50e2      	str	r2, [r4, r3]
 8006ef4:	e7d0      	b.n	8006e98 <_malloc_r+0x20>
 8006ef6:	428c      	cmp	r4, r1
 8006ef8:	684b      	ldr	r3, [r1, #4]
 8006efa:	bf16      	itet	ne
 8006efc:	6063      	strne	r3, [r4, #4]
 8006efe:	6013      	streq	r3, [r2, #0]
 8006f00:	460c      	movne	r4, r1
 8006f02:	e7eb      	b.n	8006edc <_malloc_r+0x64>
 8006f04:	460c      	mov	r4, r1
 8006f06:	6849      	ldr	r1, [r1, #4]
 8006f08:	e7cc      	b.n	8006ea4 <_malloc_r+0x2c>
 8006f0a:	1cc4      	adds	r4, r0, #3
 8006f0c:	f024 0403 	bic.w	r4, r4, #3
 8006f10:	42a0      	cmp	r0, r4
 8006f12:	d005      	beq.n	8006f20 <_malloc_r+0xa8>
 8006f14:	1a21      	subs	r1, r4, r0
 8006f16:	4630      	mov	r0, r6
 8006f18:	f000 f808 	bl	8006f2c <_sbrk_r>
 8006f1c:	3001      	adds	r0, #1
 8006f1e:	d0cf      	beq.n	8006ec0 <_malloc_r+0x48>
 8006f20:	6025      	str	r5, [r4, #0]
 8006f22:	e7db      	b.n	8006edc <_malloc_r+0x64>
 8006f24:	2000499c 	.word	0x2000499c
 8006f28:	200049a0 	.word	0x200049a0

08006f2c <_sbrk_r>:
 8006f2c:	b538      	push	{r3, r4, r5, lr}
 8006f2e:	4c06      	ldr	r4, [pc, #24]	; (8006f48 <_sbrk_r+0x1c>)
 8006f30:	2300      	movs	r3, #0
 8006f32:	4605      	mov	r5, r0
 8006f34:	4608      	mov	r0, r1
 8006f36:	6023      	str	r3, [r4, #0]
 8006f38:	f7f9 ff22 	bl	8000d80 <_sbrk>
 8006f3c:	1c43      	adds	r3, r0, #1
 8006f3e:	d102      	bne.n	8006f46 <_sbrk_r+0x1a>
 8006f40:	6823      	ldr	r3, [r4, #0]
 8006f42:	b103      	cbz	r3, 8006f46 <_sbrk_r+0x1a>
 8006f44:	602b      	str	r3, [r5, #0]
 8006f46:	bd38      	pop	{r3, r4, r5, pc}
 8006f48:	20004f08 	.word	0x20004f08

08006f4c <__sread>:
 8006f4c:	b510      	push	{r4, lr}
 8006f4e:	460c      	mov	r4, r1
 8006f50:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006f54:	f000 f896 	bl	8007084 <_read_r>
 8006f58:	2800      	cmp	r0, #0
 8006f5a:	bfab      	itete	ge
 8006f5c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8006f5e:	89a3      	ldrhlt	r3, [r4, #12]
 8006f60:	181b      	addge	r3, r3, r0
 8006f62:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8006f66:	bfac      	ite	ge
 8006f68:	6563      	strge	r3, [r4, #84]	; 0x54
 8006f6a:	81a3      	strhlt	r3, [r4, #12]
 8006f6c:	bd10      	pop	{r4, pc}

08006f6e <__swrite>:
 8006f6e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006f72:	461f      	mov	r7, r3
 8006f74:	898b      	ldrh	r3, [r1, #12]
 8006f76:	05db      	lsls	r3, r3, #23
 8006f78:	4605      	mov	r5, r0
 8006f7a:	460c      	mov	r4, r1
 8006f7c:	4616      	mov	r6, r2
 8006f7e:	d505      	bpl.n	8006f8c <__swrite+0x1e>
 8006f80:	2302      	movs	r3, #2
 8006f82:	2200      	movs	r2, #0
 8006f84:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006f88:	f000 f868 	bl	800705c <_lseek_r>
 8006f8c:	89a3      	ldrh	r3, [r4, #12]
 8006f8e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006f92:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006f96:	81a3      	strh	r3, [r4, #12]
 8006f98:	4632      	mov	r2, r6
 8006f9a:	463b      	mov	r3, r7
 8006f9c:	4628      	mov	r0, r5
 8006f9e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006fa2:	f000 b817 	b.w	8006fd4 <_write_r>

08006fa6 <__sseek>:
 8006fa6:	b510      	push	{r4, lr}
 8006fa8:	460c      	mov	r4, r1
 8006faa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006fae:	f000 f855 	bl	800705c <_lseek_r>
 8006fb2:	1c43      	adds	r3, r0, #1
 8006fb4:	89a3      	ldrh	r3, [r4, #12]
 8006fb6:	bf15      	itete	ne
 8006fb8:	6560      	strne	r0, [r4, #84]	; 0x54
 8006fba:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8006fbe:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8006fc2:	81a3      	strheq	r3, [r4, #12]
 8006fc4:	bf18      	it	ne
 8006fc6:	81a3      	strhne	r3, [r4, #12]
 8006fc8:	bd10      	pop	{r4, pc}

08006fca <__sclose>:
 8006fca:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006fce:	f000 b813 	b.w	8006ff8 <_close_r>
	...

08006fd4 <_write_r>:
 8006fd4:	b538      	push	{r3, r4, r5, lr}
 8006fd6:	4c07      	ldr	r4, [pc, #28]	; (8006ff4 <_write_r+0x20>)
 8006fd8:	4605      	mov	r5, r0
 8006fda:	4608      	mov	r0, r1
 8006fdc:	4611      	mov	r1, r2
 8006fde:	2200      	movs	r2, #0
 8006fe0:	6022      	str	r2, [r4, #0]
 8006fe2:	461a      	mov	r2, r3
 8006fe4:	f7f9 fcf0 	bl	80009c8 <_write>
 8006fe8:	1c43      	adds	r3, r0, #1
 8006fea:	d102      	bne.n	8006ff2 <_write_r+0x1e>
 8006fec:	6823      	ldr	r3, [r4, #0]
 8006fee:	b103      	cbz	r3, 8006ff2 <_write_r+0x1e>
 8006ff0:	602b      	str	r3, [r5, #0]
 8006ff2:	bd38      	pop	{r3, r4, r5, pc}
 8006ff4:	20004f08 	.word	0x20004f08

08006ff8 <_close_r>:
 8006ff8:	b538      	push	{r3, r4, r5, lr}
 8006ffa:	4c06      	ldr	r4, [pc, #24]	; (8007014 <_close_r+0x1c>)
 8006ffc:	2300      	movs	r3, #0
 8006ffe:	4605      	mov	r5, r0
 8007000:	4608      	mov	r0, r1
 8007002:	6023      	str	r3, [r4, #0]
 8007004:	f7f9 fe87 	bl	8000d16 <_close>
 8007008:	1c43      	adds	r3, r0, #1
 800700a:	d102      	bne.n	8007012 <_close_r+0x1a>
 800700c:	6823      	ldr	r3, [r4, #0]
 800700e:	b103      	cbz	r3, 8007012 <_close_r+0x1a>
 8007010:	602b      	str	r3, [r5, #0]
 8007012:	bd38      	pop	{r3, r4, r5, pc}
 8007014:	20004f08 	.word	0x20004f08

08007018 <_fstat_r>:
 8007018:	b538      	push	{r3, r4, r5, lr}
 800701a:	4c07      	ldr	r4, [pc, #28]	; (8007038 <_fstat_r+0x20>)
 800701c:	2300      	movs	r3, #0
 800701e:	4605      	mov	r5, r0
 8007020:	4608      	mov	r0, r1
 8007022:	4611      	mov	r1, r2
 8007024:	6023      	str	r3, [r4, #0]
 8007026:	f7f9 fe82 	bl	8000d2e <_fstat>
 800702a:	1c43      	adds	r3, r0, #1
 800702c:	d102      	bne.n	8007034 <_fstat_r+0x1c>
 800702e:	6823      	ldr	r3, [r4, #0]
 8007030:	b103      	cbz	r3, 8007034 <_fstat_r+0x1c>
 8007032:	602b      	str	r3, [r5, #0]
 8007034:	bd38      	pop	{r3, r4, r5, pc}
 8007036:	bf00      	nop
 8007038:	20004f08 	.word	0x20004f08

0800703c <_isatty_r>:
 800703c:	b538      	push	{r3, r4, r5, lr}
 800703e:	4c06      	ldr	r4, [pc, #24]	; (8007058 <_isatty_r+0x1c>)
 8007040:	2300      	movs	r3, #0
 8007042:	4605      	mov	r5, r0
 8007044:	4608      	mov	r0, r1
 8007046:	6023      	str	r3, [r4, #0]
 8007048:	f7f9 fe81 	bl	8000d4e <_isatty>
 800704c:	1c43      	adds	r3, r0, #1
 800704e:	d102      	bne.n	8007056 <_isatty_r+0x1a>
 8007050:	6823      	ldr	r3, [r4, #0]
 8007052:	b103      	cbz	r3, 8007056 <_isatty_r+0x1a>
 8007054:	602b      	str	r3, [r5, #0]
 8007056:	bd38      	pop	{r3, r4, r5, pc}
 8007058:	20004f08 	.word	0x20004f08

0800705c <_lseek_r>:
 800705c:	b538      	push	{r3, r4, r5, lr}
 800705e:	4c07      	ldr	r4, [pc, #28]	; (800707c <_lseek_r+0x20>)
 8007060:	4605      	mov	r5, r0
 8007062:	4608      	mov	r0, r1
 8007064:	4611      	mov	r1, r2
 8007066:	2200      	movs	r2, #0
 8007068:	6022      	str	r2, [r4, #0]
 800706a:	461a      	mov	r2, r3
 800706c:	f7f9 fe7a 	bl	8000d64 <_lseek>
 8007070:	1c43      	adds	r3, r0, #1
 8007072:	d102      	bne.n	800707a <_lseek_r+0x1e>
 8007074:	6823      	ldr	r3, [r4, #0]
 8007076:	b103      	cbz	r3, 800707a <_lseek_r+0x1e>
 8007078:	602b      	str	r3, [r5, #0]
 800707a:	bd38      	pop	{r3, r4, r5, pc}
 800707c:	20004f08 	.word	0x20004f08

08007080 <__malloc_lock>:
 8007080:	4770      	bx	lr

08007082 <__malloc_unlock>:
 8007082:	4770      	bx	lr

08007084 <_read_r>:
 8007084:	b538      	push	{r3, r4, r5, lr}
 8007086:	4c07      	ldr	r4, [pc, #28]	; (80070a4 <_read_r+0x20>)
 8007088:	4605      	mov	r5, r0
 800708a:	4608      	mov	r0, r1
 800708c:	4611      	mov	r1, r2
 800708e:	2200      	movs	r2, #0
 8007090:	6022      	str	r2, [r4, #0]
 8007092:	461a      	mov	r2, r3
 8007094:	f7f9 fe22 	bl	8000cdc <_read>
 8007098:	1c43      	adds	r3, r0, #1
 800709a:	d102      	bne.n	80070a2 <_read_r+0x1e>
 800709c:	6823      	ldr	r3, [r4, #0]
 800709e:	b103      	cbz	r3, 80070a2 <_read_r+0x1e>
 80070a0:	602b      	str	r3, [r5, #0]
 80070a2:	bd38      	pop	{r3, r4, r5, pc}
 80070a4:	20004f08 	.word	0x20004f08

080070a8 <_init>:
 80070a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80070aa:	bf00      	nop
 80070ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80070ae:	bc08      	pop	{r3}
 80070b0:	469e      	mov	lr, r3
 80070b2:	4770      	bx	lr

080070b4 <_fini>:
 80070b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80070b6:	bf00      	nop
 80070b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80070ba:	bc08      	pop	{r3}
 80070bc:	469e      	mov	lr, r3
 80070be:	4770      	bx	lr
